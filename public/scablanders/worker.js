import { EventEmitter } from "node:events";
import { Writable, Readable } from "node:stream";
import { env as env$1, DurableObject } from "cloudflare:workers";
import require$$0$4 from "buffer";
import { Socket } from "node:net";
import zlib from "zlib";
import require$$0$5 from "net";
import stream, { Readable as Readable$1 } from "stream";
import require$$1$1 from "path";
import require$$0$6 from "url";
import require$$4 from "assert";
import { EventEmitter as EventEmitter$1 } from "events";
// @__NO_SIDE_EFFECTS__
function rawHeaders(headers) {
  const rawHeaders2 = [];
  for (const key in headers) {
    if (Array.isArray(headers[key])) {
      for (const h of headers[key]) {
        rawHeaders2.push(key, h);
      }
    } else {
      rawHeaders2.push(key, headers[key]);
    }
  }
  return rawHeaders2;
}
// @__NO_SIDE_EFFECTS__
function createNotImplementedError(name) {
  return new Error(`[unenv] ${name} is not implemented yet!`);
}
// @__NO_SIDE_EFFECTS__
function notImplemented(name) {
  const fn = () => {
    throw /* @__PURE__ */ createNotImplementedError(name);
  };
  return Object.assign(fn, { __unenv__: true });
}
// @__NO_SIDE_EFFECTS__
function notImplementedAsync(name) {
  const fn = /* @__PURE__ */ notImplemented(name);
  fn.__promisify__ = () => /* @__PURE__ */ notImplemented(name + ".__promisify__");
  fn.native = fn;
  return fn;
}
// @__NO_SIDE_EFFECTS__
function notImplementedClass(name) {
  return class {
    __unenv__ = true;
    constructor() {
      throw new Error(`[unenv] ${name} is not implemented yet!`);
    }
  };
}
const _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();
const _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;
const nodeTiming = {
  name: "node",
  entryType: "node",
  startTime: 0,
  duration: 0,
  nodeStart: 0,
  v8Start: 0,
  bootstrapComplete: 0,
  environment: 0,
  loopStart: 0,
  loopExit: 0,
  idleTime: 0,
  uvMetricsInfo: {
    loopCount: 0,
    events: 0,
    eventsWaiting: 0
  },
  detail: void 0,
  toJSON() {
    return this;
  }
};
class PerformanceEntry {
  __unenv__ = true;
  detail;
  entryType = "event";
  name;
  startTime;
  constructor(name, options) {
    this.name = name;
    this.startTime = options?.startTime || _performanceNow();
    this.detail = options?.detail;
  }
  get duration() {
    return _performanceNow() - this.startTime;
  }
  toJSON() {
    return {
      name: this.name,
      entryType: this.entryType,
      startTime: this.startTime,
      duration: this.duration,
      detail: this.detail
    };
  }
}
const PerformanceMark = class PerformanceMark2 extends PerformanceEntry {
  entryType = "mark";
  constructor() {
    super(...arguments);
  }
  get duration() {
    return 0;
  }
};
class PerformanceMeasure extends PerformanceEntry {
  entryType = "measure";
}
class PerformanceResourceTiming extends PerformanceEntry {
  entryType = "resource";
  serverTiming = [];
  connectEnd = 0;
  connectStart = 0;
  decodedBodySize = 0;
  domainLookupEnd = 0;
  domainLookupStart = 0;
  encodedBodySize = 0;
  fetchStart = 0;
  initiatorType = "";
  name = "";
  nextHopProtocol = "";
  redirectEnd = 0;
  redirectStart = 0;
  requestStart = 0;
  responseEnd = 0;
  responseStart = 0;
  secureConnectionStart = 0;
  startTime = 0;
  transferSize = 0;
  workerStart = 0;
  responseStatus = 0;
}
class PerformanceObserverEntryList {
  __unenv__ = true;
  getEntries() {
    return [];
  }
  getEntriesByName(_name, _type) {
    return [];
  }
  getEntriesByType(type2) {
    return [];
  }
}
class Performance {
  __unenv__ = true;
  timeOrigin = _timeOrigin;
  eventCounts = /* @__PURE__ */ new Map();
  _entries = [];
  _resourceTimingBufferSize = 0;
  navigation = void 0;
  timing = void 0;
  timerify(_fn, _options) {
    throw /* @__PURE__ */ createNotImplementedError("Performance.timerify");
  }
  get nodeTiming() {
    return nodeTiming;
  }
  eventLoopUtilization() {
    return {};
  }
  markResourceTiming() {
    return new PerformanceResourceTiming("");
  }
  onresourcetimingbufferfull = null;
  now() {
    if (this.timeOrigin === _timeOrigin) {
      return _performanceNow();
    }
    return Date.now() - this.timeOrigin;
  }
  clearMarks(markName) {
    this._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== "mark");
  }
  clearMeasures(measureName) {
    this._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== "measure");
  }
  clearResourceTimings() {
    this._entries = this._entries.filter((e) => e.entryType !== "resource" || e.entryType !== "navigation");
  }
  getEntries() {
    return this._entries;
  }
  getEntriesByName(name, type2) {
    return this._entries.filter((e) => e.name === name && (!type2 || e.entryType === type2));
  }
  getEntriesByType(type2) {
    return this._entries.filter((e) => e.entryType === type2);
  }
  mark(name, options) {
    const entry = new PerformanceMark(name, options);
    this._entries.push(entry);
    return entry;
  }
  measure(measureName, startOrMeasureOptions, endMark) {
    let start;
    let end;
    if (typeof startOrMeasureOptions === "string") {
      start = this.getEntriesByName(startOrMeasureOptions, "mark")[0]?.startTime;
      end = this.getEntriesByName(endMark, "mark")[0]?.startTime;
    } else {
      start = Number.parseFloat(startOrMeasureOptions?.start) || this.now();
      end = Number.parseFloat(startOrMeasureOptions?.end) || this.now();
    }
    const entry = new PerformanceMeasure(measureName, {
      startTime: start,
      detail: {
        start,
        end
      }
    });
    this._entries.push(entry);
    return entry;
  }
  setResourceTimingBufferSize(maxSize) {
    this._resourceTimingBufferSize = maxSize;
  }
  addEventListener(type2, listener, options) {
    throw /* @__PURE__ */ createNotImplementedError("Performance.addEventListener");
  }
  removeEventListener(type2, listener, options) {
    throw /* @__PURE__ */ createNotImplementedError("Performance.removeEventListener");
  }
  dispatchEvent(event) {
    throw /* @__PURE__ */ createNotImplementedError("Performance.dispatchEvent");
  }
  toJSON() {
    return this;
  }
}
class PerformanceObserver {
  __unenv__ = true;
  static supportedEntryTypes = [];
  _callback = null;
  constructor(callback) {
    this._callback = callback;
  }
  takeRecords() {
    return [];
  }
  disconnect() {
    throw /* @__PURE__ */ createNotImplementedError("PerformanceObserver.disconnect");
  }
  observe(options) {
    throw /* @__PURE__ */ createNotImplementedError("PerformanceObserver.observe");
  }
  bind(fn) {
    return fn;
  }
  runInAsyncScope(fn, thisArg, ...args) {
    return fn.call(thisArg, ...args);
  }
  asyncId() {
    return 0;
  }
  triggerAsyncId() {
    return 0;
  }
  emitDestroy() {
    return this;
  }
}
const performance = globalThis.performance && "addEventListener" in globalThis.performance ? globalThis.performance : new Performance();
globalThis.performance = performance;
globalThis.Performance = Performance;
globalThis.PerformanceEntry = PerformanceEntry;
globalThis.PerformanceMark = PerformanceMark;
globalThis.PerformanceMeasure = PerformanceMeasure;
globalThis.PerformanceObserver = PerformanceObserver;
globalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;
globalThis.PerformanceResourceTiming = PerformanceResourceTiming;
const hrtime$1 = /* @__PURE__ */ Object.assign(function hrtime(startTime) {
  const now = Date.now();
  const seconds = Math.trunc(now / 1e3);
  const nanos = now % 1e3 * 1e6;
  if (startTime) {
    let diffSeconds = seconds - startTime[0];
    let diffNanos = nanos - startTime[0];
    if (diffNanos < 0) {
      diffSeconds = diffSeconds - 1;
      diffNanos = 1e9 + diffNanos;
    }
    return [diffSeconds, diffNanos];
  }
  return [seconds, nanos];
}, { bigint: function bigint() {
  return BigInt(Date.now() * 1e6);
} });
let WriteStream$1 = class WriteStream {
  fd;
  columns = 80;
  rows = 24;
  isTTY = false;
  constructor(fd) {
    this.fd = fd;
  }
  clearLine(dir, callback) {
    callback && callback();
    return false;
  }
  clearScreenDown(callback) {
    callback && callback();
    return false;
  }
  cursorTo(x, y, callback) {
    callback && typeof callback === "function" && callback();
    return false;
  }
  moveCursor(dx, dy, callback) {
    callback && callback();
    return false;
  }
  getColorDepth(env2) {
    return 1;
  }
  hasColors(count, env2) {
    return false;
  }
  getWindowSize() {
    return [this.columns, this.rows];
  }
  write(str, encoding, cb) {
    if (str instanceof Uint8Array) {
      str = new TextDecoder().decode(str);
    }
    try {
      console.log(str);
    } catch {
    }
    cb && typeof cb === "function" && cb();
    return false;
  }
};
let ReadStream$1 = class ReadStream {
  fd;
  isRaw = false;
  isTTY = false;
  constructor(fd) {
    this.fd = fd;
  }
  setRawMode(mode2) {
    this.isRaw = mode2;
    return this;
  }
};
const NODE_VERSION = "22.14.0";
class Process extends EventEmitter {
  env;
  hrtime;
  nextTick;
  constructor(impl) {
    super();
    this.env = impl.env;
    this.hrtime = impl.hrtime;
    this.nextTick = impl.nextTick;
    for (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {
      const value = this[prop];
      if (typeof value === "function") {
        this[prop] = value.bind(this);
      }
    }
  }
  // --- event emitter ---
  emitWarning(warning, type2, code) {
    console.warn(`${code ? `[${code}] ` : ""}${type2 ? `${type2}: ` : ""}${warning}`);
  }
  emit(...args) {
    return super.emit(...args);
  }
  listeners(eventName) {
    return super.listeners(eventName);
  }
  // --- stdio (lazy initializers) ---
  #stdin;
  #stdout;
  #stderr;
  get stdin() {
    return this.#stdin ??= new ReadStream$1(0);
  }
  get stdout() {
    return this.#stdout ??= new WriteStream$1(1);
  }
  get stderr() {
    return this.#stderr ??= new WriteStream$1(2);
  }
  // --- cwd ---
  #cwd = "/";
  chdir(cwd2) {
    this.#cwd = cwd2;
  }
  cwd() {
    return this.#cwd;
  }
  // --- dummy props and getters ---
  arch = "";
  platform = "";
  argv = [];
  argv0 = "";
  execArgv = [];
  execPath = "";
  title = "";
  pid = 200;
  ppid = 100;
  get version() {
    return `v${NODE_VERSION}`;
  }
  get versions() {
    return { node: NODE_VERSION };
  }
  get allowedNodeEnvironmentFlags() {
    return /* @__PURE__ */ new Set();
  }
  get sourceMapsEnabled() {
    return false;
  }
  get debugPort() {
    return 0;
  }
  get throwDeprecation() {
    return false;
  }
  get traceDeprecation() {
    return false;
  }
  get features() {
    return {};
  }
  get release() {
    return {};
  }
  get connected() {
    return false;
  }
  get config() {
    return {};
  }
  get moduleLoadList() {
    return [];
  }
  constrainedMemory() {
    return 0;
  }
  availableMemory() {
    return 0;
  }
  uptime() {
    return 0;
  }
  resourceUsage() {
    return {};
  }
  // --- noop methods ---
  ref() {
  }
  unref() {
  }
  // --- unimplemented methods ---
  umask() {
    throw /* @__PURE__ */ createNotImplementedError("process.umask");
  }
  getBuiltinModule() {
    return void 0;
  }
  getActiveResourcesInfo() {
    throw /* @__PURE__ */ createNotImplementedError("process.getActiveResourcesInfo");
  }
  exit() {
    throw /* @__PURE__ */ createNotImplementedError("process.exit");
  }
  reallyExit() {
    throw /* @__PURE__ */ createNotImplementedError("process.reallyExit");
  }
  kill() {
    throw /* @__PURE__ */ createNotImplementedError("process.kill");
  }
  abort() {
    throw /* @__PURE__ */ createNotImplementedError("process.abort");
  }
  dlopen() {
    throw /* @__PURE__ */ createNotImplementedError("process.dlopen");
  }
  setSourceMapsEnabled() {
    throw /* @__PURE__ */ createNotImplementedError("process.setSourceMapsEnabled");
  }
  loadEnvFile() {
    throw /* @__PURE__ */ createNotImplementedError("process.loadEnvFile");
  }
  disconnect() {
    throw /* @__PURE__ */ createNotImplementedError("process.disconnect");
  }
  cpuUsage() {
    throw /* @__PURE__ */ createNotImplementedError("process.cpuUsage");
  }
  setUncaughtExceptionCaptureCallback() {
    throw /* @__PURE__ */ createNotImplementedError("process.setUncaughtExceptionCaptureCallback");
  }
  hasUncaughtExceptionCaptureCallback() {
    throw /* @__PURE__ */ createNotImplementedError("process.hasUncaughtExceptionCaptureCallback");
  }
  initgroups() {
    throw /* @__PURE__ */ createNotImplementedError("process.initgroups");
  }
  openStdin() {
    throw /* @__PURE__ */ createNotImplementedError("process.openStdin");
  }
  assert() {
    throw /* @__PURE__ */ createNotImplementedError("process.assert");
  }
  binding() {
    throw /* @__PURE__ */ createNotImplementedError("process.binding");
  }
  // --- attached interfaces ---
  permission = { has: /* @__PURE__ */ notImplemented("process.permission.has") };
  report = {
    directory: "",
    filename: "",
    signal: "SIGUSR2",
    compact: false,
    reportOnFatalError: false,
    reportOnSignal: false,
    reportOnUncaughtException: false,
    getReport: /* @__PURE__ */ notImplemented("process.report.getReport"),
    writeReport: /* @__PURE__ */ notImplemented("process.report.writeReport")
  };
  finalization = {
    register: /* @__PURE__ */ notImplemented("process.finalization.register"),
    unregister: /* @__PURE__ */ notImplemented("process.finalization.unregister"),
    registerBeforeExit: /* @__PURE__ */ notImplemented("process.finalization.registerBeforeExit")
  };
  memoryUsage = Object.assign(() => ({
    arrayBuffers: 0,
    rss: 0,
    external: 0,
    heapTotal: 0,
    heapUsed: 0
  }), { rss: () => 0 });
  // --- undefined props ---
  mainModule = void 0;
  domain = void 0;
  // optional
  send = void 0;
  exitCode = void 0;
  channel = void 0;
  getegid = void 0;
  geteuid = void 0;
  getgid = void 0;
  getgroups = void 0;
  getuid = void 0;
  setegid = void 0;
  seteuid = void 0;
  setgid = void 0;
  setgroups = void 0;
  setuid = void 0;
  // internals
  _events = void 0;
  _eventsCount = void 0;
  _exiting = void 0;
  _maxListeners = void 0;
  _debugEnd = void 0;
  _debugProcess = void 0;
  _fatalException = void 0;
  _getActiveHandles = void 0;
  _getActiveRequests = void 0;
  _kill = void 0;
  _preload_modules = void 0;
  _rawDebug = void 0;
  _startProfilerIdleNotifier = void 0;
  _stopProfilerIdleNotifier = void 0;
  _tickCallback = void 0;
  _disconnect = void 0;
  _handleQueue = void 0;
  _pendingMessage = void 0;
  _channel = void 0;
  _send = void 0;
  _linkedBinding = void 0;
}
const globalProcess = globalThis["process"];
const getBuiltinModule = globalProcess.getBuiltinModule;
const { exit, platform: platform$2, nextTick } = getBuiltinModule(
  "node:process"
);
const unenvProcess = new Process({
  env: globalProcess.env,
  hrtime: hrtime$1,
  nextTick
});
const {
  abort,
  addListener,
  allowedNodeEnvironmentFlags,
  hasUncaughtExceptionCaptureCallback,
  setUncaughtExceptionCaptureCallback,
  loadEnvFile,
  sourceMapsEnabled,
  arch,
  argv,
  argv0,
  chdir,
  config,
  connected,
  constrainedMemory,
  availableMemory,
  cpuUsage,
  cwd,
  debugPort,
  dlopen,
  disconnect,
  emit,
  emitWarning,
  env,
  eventNames,
  execArgv,
  execPath,
  finalization,
  features,
  getActiveResourcesInfo,
  getMaxListeners,
  hrtime: hrtime2,
  kill,
  listeners,
  listenerCount,
  memoryUsage,
  on,
  off,
  once,
  pid,
  ppid,
  prependListener,
  prependOnceListener,
  rawListeners,
  release,
  removeAllListeners,
  removeListener,
  report,
  resourceUsage,
  setMaxListeners,
  setSourceMapsEnabled,
  stderr,
  stdin,
  stdout,
  title,
  throwDeprecation,
  traceDeprecation,
  umask,
  uptime,
  version: version$5,
  versions,
  domain,
  initgroups,
  moduleLoadList,
  reallyExit,
  openStdin,
  assert,
  binding,
  send,
  exitCode,
  channel,
  getegid,
  geteuid,
  getgid,
  getgroups,
  getuid,
  setegid,
  seteuid,
  setgid,
  setgroups,
  setuid,
  permission,
  mainModule,
  _events,
  _eventsCount,
  _exiting,
  _maxListeners,
  _debugEnd,
  _debugProcess,
  _fatalException,
  _getActiveHandles,
  _getActiveRequests,
  _kill,
  _preload_modules,
  _rawDebug,
  _startProfilerIdleNotifier,
  _stopProfilerIdleNotifier,
  _tickCallback,
  _disconnect,
  _handleQueue,
  _pendingMessage,
  _channel,
  _send,
  _linkedBinding
} = unenvProcess;
const _process = {
  abort,
  addListener,
  allowedNodeEnvironmentFlags,
  hasUncaughtExceptionCaptureCallback,
  setUncaughtExceptionCaptureCallback,
  loadEnvFile,
  sourceMapsEnabled,
  arch,
  argv,
  argv0,
  chdir,
  config,
  connected,
  constrainedMemory,
  availableMemory,
  cpuUsage,
  cwd,
  debugPort,
  dlopen,
  disconnect,
  emit,
  emitWarning,
  env,
  eventNames,
  execArgv,
  execPath,
  exit,
  finalization,
  features,
  getBuiltinModule,
  getActiveResourcesInfo,
  getMaxListeners,
  hrtime: hrtime2,
  kill,
  listeners,
  listenerCount,
  memoryUsage,
  nextTick,
  on,
  off,
  once,
  pid,
  platform: platform$2,
  ppid,
  prependListener,
  prependOnceListener,
  rawListeners,
  release,
  removeAllListeners,
  removeListener,
  report,
  resourceUsage,
  setMaxListeners,
  setSourceMapsEnabled,
  stderr,
  stdin,
  stdout,
  title,
  throwDeprecation,
  traceDeprecation,
  umask,
  uptime,
  version: version$5,
  versions,
  // @ts-expect-error old API
  domain,
  initgroups,
  moduleLoadList,
  reallyExit,
  openStdin,
  assert,
  binding,
  send,
  exitCode,
  channel,
  getegid,
  geteuid,
  getgid,
  getgroups,
  getuid,
  setegid,
  seteuid,
  setgid,
  setgroups,
  setuid,
  permission,
  mainModule,
  _events,
  _eventsCount,
  _exiting,
  _maxListeners,
  _debugEnd,
  _debugProcess,
  _fatalException,
  _getActiveHandles,
  _getActiveRequests,
  _kill,
  _preload_modules,
  _rawDebug,
  _startProfilerIdleNotifier,
  _stopProfilerIdleNotifier,
  _tickCallback,
  _disconnect,
  _handleQueue,
  _pendingMessage,
  _channel,
  _send,
  _linkedBinding
};
globalThis.process = _process;
const noop$2 = Object.assign(() => {
}, { __unenv__: true });
const _console = globalThis.console;
const _ignoreErrors = true;
const _stderr = new Writable();
const _stdout = new Writable();
const Console = _console?.Console ?? /* @__PURE__ */ notImplementedClass("console.Console");
const _times = /* @__PURE__ */ new Map();
const _stdoutErrorHandler = noop$2;
const _stderrErrorHandler = noop$2;
const workerdConsole = globalThis["console"];
Object.assign(workerdConsole, {
  Console,
  _ignoreErrors,
  _stderr,
  _stderrErrorHandler,
  _stdout,
  _stdoutErrorHandler,
  _times
});
globalThis.console = workerdConsole;
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs$1(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, "__esModule")) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      var isInstance = false;
      try {
        isInstance = this instanceof a2;
      } catch {
      }
      if (isInstance) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var siwe = {};
var client = {};
var parsers = {};
var abnf = {};
var siweGrammar = {};
var hasRequiredSiweGrammar;
function requireSiweGrammar() {
  if (hasRequiredSiweGrammar) return siweGrammar;
  hasRequiredSiweGrammar = 1;
  Object.defineProperty(siweGrammar, "__esModule", { value: true });
  siweGrammar.grammar = void 0;
  function grammar() {
    this.grammarObject = "grammarObject";
    this.rules = [];
    this.rules[0] = { name: "sign-in-with-ethereum", lower: "sign-in-with-ethereum", index: 0, isBkr: false };
    this.rules[1] = { name: "ex-title", lower: "ex-title", index: 1, isBkr: false };
    this.rules[2] = { name: "nb-title", lower: "nb-title", index: 2, isBkr: false };
    this.rules[3] = { name: "ri-title", lower: "ri-title", index: 3, isBkr: false };
    this.rules[4] = { name: "re-title", lower: "re-title", index: 4, isBkr: false };
    this.rules[5] = { name: "oscheme", lower: "oscheme", index: 5, isBkr: false };
    this.rules[6] = { name: "domain", lower: "domain", index: 6, isBkr: false };
    this.rules[7] = { name: "address", lower: "address", index: 7, isBkr: false };
    this.rules[8] = { name: "statement", lower: "statement", index: 8, isBkr: false };
    this.rules[9] = { name: "empty-statement", lower: "empty-statement", index: 9, isBkr: false };
    this.rules[10] = { name: "version", lower: "version", index: 10, isBkr: false };
    this.rules[11] = { name: "nonce", lower: "nonce", index: 11, isBkr: false };
    this.rules[12] = { name: "issued-at", lower: "issued-at", index: 12, isBkr: false };
    this.rules[13] = { name: "expiration-time", lower: "expiration-time", index: 13, isBkr: false };
    this.rules[14] = { name: "not-before", lower: "not-before", index: 14, isBkr: false };
    this.rules[15] = { name: "request-id", lower: "request-id", index: 15, isBkr: false };
    this.rules[16] = { name: "chain-id", lower: "chain-id", index: 16, isBkr: false };
    this.rules[17] = { name: "resources", lower: "resources", index: 17, isBkr: false };
    this.rules[18] = { name: "resource", lower: "resource", index: 18, isBkr: false };
    this.rules[19] = { name: "URI", lower: "uri", index: 19, isBkr: false };
    this.rules[20] = { name: "hier-part", lower: "hier-part", index: 20, isBkr: false };
    this.rules[21] = { name: "scheme", lower: "scheme", index: 21, isBkr: false };
    this.rules[22] = { name: "authority", lower: "authority", index: 22, isBkr: false };
    this.rules[23] = { name: "path-abempty", lower: "path-abempty", index: 23, isBkr: false };
    this.rules[24] = { name: "path-absolute", lower: "path-absolute", index: 24, isBkr: false };
    this.rules[25] = { name: "path-rootless", lower: "path-rootless", index: 25, isBkr: false };
    this.rules[26] = { name: "path-empty", lower: "path-empty", index: 26, isBkr: false };
    this.rules[27] = { name: "userinfo-at", lower: "userinfo-at", index: 27, isBkr: false };
    this.rules[28] = { name: "userinfo", lower: "userinfo", index: 28, isBkr: false };
    this.rules[29] = { name: "host", lower: "host", index: 29, isBkr: false };
    this.rules[30] = { name: "IP-literal", lower: "ip-literal", index: 30, isBkr: false };
    this.rules[31] = { name: "IPvFuture", lower: "ipvfuture", index: 31, isBkr: false };
    this.rules[32] = { name: "IPv6address", lower: "ipv6address", index: 32, isBkr: false };
    this.rules[33] = { name: "nodcolon", lower: "nodcolon", index: 33, isBkr: false };
    this.rules[34] = { name: "dcolon", lower: "dcolon", index: 34, isBkr: false };
    this.rules[35] = { name: "h16", lower: "h16", index: 35, isBkr: false };
    this.rules[36] = { name: "h16c", lower: "h16c", index: 36, isBkr: false };
    this.rules[37] = { name: "h16n", lower: "h16n", index: 37, isBkr: false };
    this.rules[38] = { name: "h16cn", lower: "h16cn", index: 38, isBkr: false };
    this.rules[39] = { name: "IPv4address", lower: "ipv4address", index: 39, isBkr: false };
    this.rules[40] = { name: "dec-octet", lower: "dec-octet", index: 40, isBkr: false };
    this.rules[41] = { name: "dec-digit", lower: "dec-digit", index: 41, isBkr: false };
    this.rules[42] = { name: "reg-name", lower: "reg-name", index: 42, isBkr: false };
    this.rules[43] = { name: "reg-name-char", lower: "reg-name-char", index: 43, isBkr: false };
    this.rules[44] = { name: "port", lower: "port", index: 44, isBkr: false };
    this.rules[45] = { name: "query", lower: "query", index: 45, isBkr: false };
    this.rules[46] = { name: "fragment", lower: "fragment", index: 46, isBkr: false };
    this.rules[47] = { name: "URI-r", lower: "uri-r", index: 47, isBkr: false };
    this.rules[48] = { name: "hier-part-r", lower: "hier-part-r", index: 48, isBkr: false };
    this.rules[49] = { name: "scheme-r", lower: "scheme-r", index: 49, isBkr: false };
    this.rules[50] = { name: "query-r", lower: "query-r", index: 50, isBkr: false };
    this.rules[51] = { name: "fragment-r", lower: "fragment-r", index: 51, isBkr: false };
    this.rules[52] = { name: "authority-d", lower: "authority-d", index: 52, isBkr: false };
    this.rules[53] = { name: "userinfo-d", lower: "userinfo-d", index: 53, isBkr: false };
    this.rules[54] = { name: "host-d", lower: "host-d", index: 54, isBkr: false };
    this.rules[55] = { name: "port-d", lower: "port-d", index: 55, isBkr: false };
    this.rules[56] = { name: "path-abempty-r", lower: "path-abempty-r", index: 56, isBkr: false };
    this.rules[57] = { name: "path-absolute-r", lower: "path-absolute-r", index: 57, isBkr: false };
    this.rules[58] = { name: "path-rootless-r", lower: "path-rootless-r", index: 58, isBkr: false };
    this.rules[59] = { name: "path-empty-r", lower: "path-empty-r", index: 59, isBkr: false };
    this.rules[60] = { name: "segment", lower: "segment", index: 60, isBkr: false };
    this.rules[61] = { name: "segment-nz", lower: "segment-nz", index: 61, isBkr: false };
    this.rules[62] = { name: "pchar", lower: "pchar", index: 62, isBkr: false };
    this.rules[63] = { name: "pct-encoded", lower: "pct-encoded", index: 63, isBkr: false };
    this.rules[64] = { name: "date-fullyear", lower: "date-fullyear", index: 64, isBkr: false };
    this.rules[65] = { name: "date-month", lower: "date-month", index: 65, isBkr: false };
    this.rules[66] = { name: "date-mday", lower: "date-mday", index: 66, isBkr: false };
    this.rules[67] = { name: "time-hour", lower: "time-hour", index: 67, isBkr: false };
    this.rules[68] = { name: "time-minute", lower: "time-minute", index: 68, isBkr: false };
    this.rules[69] = { name: "time-second", lower: "time-second", index: 69, isBkr: false };
    this.rules[70] = { name: "time-secfrac", lower: "time-secfrac", index: 70, isBkr: false };
    this.rules[71] = { name: "time-numoffset", lower: "time-numoffset", index: 71, isBkr: false };
    this.rules[72] = { name: "time-offset", lower: "time-offset", index: 72, isBkr: false };
    this.rules[73] = { name: "partial-time", lower: "partial-time", index: 73, isBkr: false };
    this.rules[74] = { name: "full-date", lower: "full-date", index: 74, isBkr: false };
    this.rules[75] = { name: "full-time", lower: "full-time", index: 75, isBkr: false };
    this.rules[76] = { name: "date-time", lower: "date-time", index: 76, isBkr: false };
    this.rules[77] = { name: "ALPHA", lower: "alpha", index: 77, isBkr: false };
    this.rules[78] = { name: "LF", lower: "lf", index: 78, isBkr: false };
    this.rules[79] = { name: "DIGIT", lower: "digit", index: 79, isBkr: false };
    this.rules[80] = { name: "HEXDIG", lower: "hexdig", index: 80, isBkr: false };
    this.udts = [];
    this.rules[0].opcodes = [];
    this.rules[0].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 41, 46] };
    this.rules[0].opcodes[1] = { type: 4, index: 5 };
    this.rules[0].opcodes[2] = { type: 4, index: 6 };
    this.rules[0].opcodes[3] = { type: 6, string: [32, 119, 97, 110, 116, 115, 32, 121, 111, 117, 32, 116, 111, 32, 115, 105, 103, 110, 32, 105, 110, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 69, 116, 104, 101, 114, 101, 117, 109, 32, 97, 99, 99, 111, 117, 110, 116, 58] };
    this.rules[0].opcodes[4] = { type: 4, index: 78 };
    this.rules[0].opcodes[5] = { type: 4, index: 7 };
    this.rules[0].opcodes[6] = { type: 4, index: 78 };
    this.rules[0].opcodes[7] = { type: 1, children: [8, 13, 14] };
    this.rules[0].opcodes[8] = { type: 2, children: [9, 10, 11, 12] };
    this.rules[0].opcodes[9] = { type: 4, index: 78 };
    this.rules[0].opcodes[10] = { type: 4, index: 8 };
    this.rules[0].opcodes[11] = { type: 4, index: 78 };
    this.rules[0].opcodes[12] = { type: 4, index: 78 };
    this.rules[0].opcodes[13] = { type: 4, index: 9 };
    this.rules[0].opcodes[14] = { type: 2, children: [15, 16] };
    this.rules[0].opcodes[15] = { type: 4, index: 78 };
    this.rules[0].opcodes[16] = { type: 4, index: 78 };
    this.rules[0].opcodes[17] = { type: 6, string: [85, 82, 73, 58, 32] };
    this.rules[0].opcodes[18] = { type: 4, index: 19 };
    this.rules[0].opcodes[19] = { type: 4, index: 78 };
    this.rules[0].opcodes[20] = { type: 6, string: [86, 101, 114, 115, 105, 111, 110, 58, 32] };
    this.rules[0].opcodes[21] = { type: 4, index: 10 };
    this.rules[0].opcodes[22] = { type: 4, index: 78 };
    this.rules[0].opcodes[23] = { type: 6, string: [67, 104, 97, 105, 110, 32, 73, 68, 58, 32] };
    this.rules[0].opcodes[24] = { type: 4, index: 16 };
    this.rules[0].opcodes[25] = { type: 4, index: 78 };
    this.rules[0].opcodes[26] = { type: 6, string: [78, 111, 110, 99, 101, 58, 32] };
    this.rules[0].opcodes[27] = { type: 4, index: 11 };
    this.rules[0].opcodes[28] = { type: 4, index: 78 };
    this.rules[0].opcodes[29] = { type: 6, string: [73, 115, 115, 117, 101, 100, 32, 65, 116, 58, 32] };
    this.rules[0].opcodes[30] = { type: 4, index: 12 };
    this.rules[0].opcodes[31] = { type: 3, min: 0, max: 1 };
    this.rules[0].opcodes[32] = { type: 2, children: [33, 34, 35] };
    this.rules[0].opcodes[33] = { type: 4, index: 78 };
    this.rules[0].opcodes[34] = { type: 4, index: 1 };
    this.rules[0].opcodes[35] = { type: 4, index: 13 };
    this.rules[0].opcodes[36] = { type: 3, min: 0, max: 1 };
    this.rules[0].opcodes[37] = { type: 2, children: [38, 39, 40] };
    this.rules[0].opcodes[38] = { type: 4, index: 78 };
    this.rules[0].opcodes[39] = { type: 4, index: 2 };
    this.rules[0].opcodes[40] = { type: 4, index: 14 };
    this.rules[0].opcodes[41] = { type: 3, min: 0, max: 1 };
    this.rules[0].opcodes[42] = { type: 2, children: [43, 44, 45] };
    this.rules[0].opcodes[43] = { type: 4, index: 78 };
    this.rules[0].opcodes[44] = { type: 4, index: 3 };
    this.rules[0].opcodes[45] = { type: 4, index: 15 };
    this.rules[0].opcodes[46] = { type: 3, min: 0, max: 1 };
    this.rules[0].opcodes[47] = { type: 2, children: [48, 49, 50] };
    this.rules[0].opcodes[48] = { type: 4, index: 78 };
    this.rules[0].opcodes[49] = { type: 4, index: 4 };
    this.rules[0].opcodes[50] = { type: 4, index: 17 };
    this.rules[1].opcodes = [];
    this.rules[1].opcodes[0] = { type: 6, string: [69, 120, 112, 105, 114, 97, 116, 105, 111, 110, 32, 84, 105, 109, 101, 58, 32] };
    this.rules[2].opcodes = [];
    this.rules[2].opcodes[0] = { type: 6, string: [78, 111, 116, 32, 66, 101, 102, 111, 114, 101, 58, 32] };
    this.rules[3].opcodes = [];
    this.rules[3].opcodes[0] = { type: 6, string: [82, 101, 113, 117, 101, 115, 116, 32, 73, 68, 58, 32] };
    this.rules[4].opcodes = [];
    this.rules[4].opcodes[0] = { type: 6, string: [82, 101, 115, 111, 117, 114, 99, 101, 115, 58] };
    this.rules[5].opcodes = [];
    this.rules[5].opcodes[0] = { type: 3, min: 0, max: 1 };
    this.rules[5].opcodes[1] = { type: 2, children: [2, 3, 9] };
    this.rules[5].opcodes[2] = { type: 4, index: 77 };
    this.rules[5].opcodes[3] = { type: 3, min: 0, max: Infinity };
    this.rules[5].opcodes[4] = { type: 1, children: [5, 6, 7, 8] };
    this.rules[5].opcodes[5] = { type: 4, index: 77 };
    this.rules[5].opcodes[6] = { type: 4, index: 79 };
    this.rules[5].opcodes[7] = { type: 6, string: [43] };
    this.rules[5].opcodes[8] = { type: 5, min: 45, max: 46 };
    this.rules[5].opcodes[9] = { type: 7, string: [58, 47, 47] };
    this.rules[6].opcodes = [];
    this.rules[6].opcodes[0] = { type: 4, index: 52 };
    this.rules[7].opcodes = [];
    this.rules[7].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[7].opcodes[1] = { type: 7, string: [48, 120] };
    this.rules[7].opcodes[2] = { type: 3, min: 40, max: 40 };
    this.rules[7].opcodes[3] = { type: 4, index: 80 };
    this.rules[8].opcodes = [];
    this.rules[8].opcodes[0] = { type: 3, min: 1, max: Infinity };
    this.rules[8].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] };
    this.rules[8].opcodes[2] = { type: 5, min: 97, max: 122 };
    this.rules[8].opcodes[3] = { type: 5, min: 65, max: 90 };
    this.rules[8].opcodes[4] = { type: 5, min: 48, max: 57 };
    this.rules[8].opcodes[5] = { type: 5, min: 32, max: 33 };
    this.rules[8].opcodes[6] = { type: 5, min: 35, max: 36 };
    this.rules[8].opcodes[7] = { type: 5, min: 38, max: 59 };
    this.rules[8].opcodes[8] = { type: 6, string: [61] };
    this.rules[8].opcodes[9] = { type: 5, min: 63, max: 64 };
    this.rules[8].opcodes[10] = { type: 6, string: [91] };
    this.rules[8].opcodes[11] = { type: 6, string: [93] };
    this.rules[8].opcodes[12] = { type: 6, string: [95] };
    this.rules[8].opcodes[13] = { type: 6, string: [126] };
    this.rules[9].opcodes = [];
    this.rules[9].opcodes[0] = { type: 2, children: [1, 2, 3] };
    this.rules[9].opcodes[1] = { type: 4, index: 78 };
    this.rules[9].opcodes[2] = { type: 4, index: 78 };
    this.rules[9].opcodes[3] = { type: 4, index: 78 };
    this.rules[10].opcodes = [];
    this.rules[10].opcodes[0] = { type: 7, string: [49] };
    this.rules[11].opcodes = [];
    this.rules[11].opcodes[0] = { type: 3, min: 8, max: Infinity };
    this.rules[11].opcodes[1] = { type: 1, children: [2, 3] };
    this.rules[11].opcodes[2] = { type: 4, index: 77 };
    this.rules[11].opcodes[3] = { type: 4, index: 79 };
    this.rules[12].opcodes = [];
    this.rules[12].opcodes[0] = { type: 4, index: 76 };
    this.rules[13].opcodes = [];
    this.rules[13].opcodes[0] = { type: 4, index: 76 };
    this.rules[14].opcodes = [];
    this.rules[14].opcodes[0] = { type: 4, index: 76 };
    this.rules[15].opcodes = [];
    this.rules[15].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[15].opcodes[1] = { type: 4, index: 62 };
    this.rules[16].opcodes = [];
    this.rules[16].opcodes[0] = { type: 3, min: 1, max: Infinity };
    this.rules[16].opcodes[1] = { type: 4, index: 79 };
    this.rules[17].opcodes = [];
    this.rules[17].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[17].opcodes[1] = { type: 2, children: [2, 3] };
    this.rules[17].opcodes[2] = { type: 4, index: 78 };
    this.rules[17].opcodes[3] = { type: 4, index: 18 };
    this.rules[18].opcodes = [];
    this.rules[18].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[18].opcodes[1] = { type: 7, string: [45, 32] };
    this.rules[18].opcodes[2] = { type: 4, index: 47 };
    this.rules[19].opcodes = [];
    this.rules[19].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] };
    this.rules[19].opcodes[1] = { type: 4, index: 21 };
    this.rules[19].opcodes[2] = { type: 7, string: [58] };
    this.rules[19].opcodes[3] = { type: 4, index: 20 };
    this.rules[19].opcodes[4] = { type: 3, min: 0, max: 1 };
    this.rules[19].opcodes[5] = { type: 2, children: [6, 7] };
    this.rules[19].opcodes[6] = { type: 7, string: [63] };
    this.rules[19].opcodes[7] = { type: 4, index: 45 };
    this.rules[19].opcodes[8] = { type: 3, min: 0, max: 1 };
    this.rules[19].opcodes[9] = { type: 2, children: [10, 11] };
    this.rules[19].opcodes[10] = { type: 7, string: [35] };
    this.rules[19].opcodes[11] = { type: 4, index: 46 };
    this.rules[20].opcodes = [];
    this.rules[20].opcodes[0] = { type: 1, children: [1, 5, 6, 7] };
    this.rules[20].opcodes[1] = { type: 2, children: [2, 3, 4] };
    this.rules[20].opcodes[2] = { type: 7, string: [47, 47] };
    this.rules[20].opcodes[3] = { type: 4, index: 22 };
    this.rules[20].opcodes[4] = { type: 4, index: 23 };
    this.rules[20].opcodes[5] = { type: 4, index: 24 };
    this.rules[20].opcodes[6] = { type: 4, index: 25 };
    this.rules[20].opcodes[7] = { type: 4, index: 26 };
    this.rules[21].opcodes = [];
    this.rules[21].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[21].opcodes[1] = { type: 4, index: 77 };
    this.rules[21].opcodes[2] = { type: 3, min: 0, max: Infinity };
    this.rules[21].opcodes[3] = { type: 1, children: [4, 5, 6, 7] };
    this.rules[21].opcodes[4] = { type: 4, index: 77 };
    this.rules[21].opcodes[5] = { type: 4, index: 79 };
    this.rules[21].opcodes[6] = { type: 6, string: [43] };
    this.rules[21].opcodes[7] = { type: 5, min: 45, max: 46 };
    this.rules[22].opcodes = [];
    this.rules[22].opcodes[0] = { type: 2, children: [1, 3, 4] };
    this.rules[22].opcodes[1] = { type: 3, min: 0, max: 1 };
    this.rules[22].opcodes[2] = { type: 4, index: 27 };
    this.rules[22].opcodes[3] = { type: 4, index: 29 };
    this.rules[22].opcodes[4] = { type: 3, min: 0, max: 1 };
    this.rules[22].opcodes[5] = { type: 2, children: [6, 7] };
    this.rules[22].opcodes[6] = { type: 7, string: [58] };
    this.rules[22].opcodes[7] = { type: 4, index: 44 };
    this.rules[23].opcodes = [];
    this.rules[23].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[23].opcodes[1] = { type: 2, children: [2, 3] };
    this.rules[23].opcodes[2] = { type: 7, string: [47] };
    this.rules[23].opcodes[3] = { type: 4, index: 60 };
    this.rules[24].opcodes = [];
    this.rules[24].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[24].opcodes[1] = { type: 7, string: [47] };
    this.rules[24].opcodes[2] = { type: 3, min: 0, max: 1 };
    this.rules[24].opcodes[3] = { type: 2, children: [4, 5] };
    this.rules[24].opcodes[4] = { type: 4, index: 61 };
    this.rules[24].opcodes[5] = { type: 3, min: 0, max: Infinity };
    this.rules[24].opcodes[6] = { type: 2, children: [7, 8] };
    this.rules[24].opcodes[7] = { type: 7, string: [47] };
    this.rules[24].opcodes[8] = { type: 4, index: 60 };
    this.rules[25].opcodes = [];
    this.rules[25].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[25].opcodes[1] = { type: 4, index: 61 };
    this.rules[25].opcodes[2] = { type: 3, min: 0, max: Infinity };
    this.rules[25].opcodes[3] = { type: 2, children: [4, 5] };
    this.rules[25].opcodes[4] = { type: 7, string: [47] };
    this.rules[25].opcodes[5] = { type: 4, index: 60 };
    this.rules[26].opcodes = [];
    this.rules[26].opcodes[0] = { type: 7, string: [] };
    this.rules[27].opcodes = [];
    this.rules[27].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[27].opcodes[1] = { type: 4, index: 28 };
    this.rules[27].opcodes[2] = { type: 6, string: [64] };
    this.rules[28].opcodes = [];
    this.rules[28].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[28].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] };
    this.rules[28].opcodes[2] = { type: 5, min: 97, max: 122 };
    this.rules[28].opcodes[3] = { type: 5, min: 65, max: 90 };
    this.rules[28].opcodes[4] = { type: 5, min: 48, max: 57 };
    this.rules[28].opcodes[5] = { type: 4, index: 63 };
    this.rules[28].opcodes[6] = { type: 6, string: [33] };
    this.rules[28].opcodes[7] = { type: 6, string: [36] };
    this.rules[28].opcodes[8] = { type: 5, min: 38, max: 46 };
    this.rules[28].opcodes[9] = { type: 5, min: 58, max: 59 };
    this.rules[28].opcodes[10] = { type: 6, string: [61] };
    this.rules[28].opcodes[11] = { type: 6, string: [95] };
    this.rules[28].opcodes[12] = { type: 6, string: [126] };
    this.rules[29].opcodes = [];
    this.rules[29].opcodes[0] = { type: 1, children: [1, 2, 6] };
    this.rules[29].opcodes[1] = { type: 4, index: 30 };
    this.rules[29].opcodes[2] = { type: 2, children: [3, 4] };
    this.rules[29].opcodes[3] = { type: 4, index: 39 };
    this.rules[29].opcodes[4] = { type: 13 };
    this.rules[29].opcodes[5] = { type: 4, index: 43 };
    this.rules[29].opcodes[6] = { type: 4, index: 42 };
    this.rules[30].opcodes = [];
    this.rules[30].opcodes[0] = { type: 2, children: [1, 2, 5] };
    this.rules[30].opcodes[1] = { type: 7, string: [91] };
    this.rules[30].opcodes[2] = { type: 1, children: [3, 4] };
    this.rules[30].opcodes[3] = { type: 4, index: 32 };
    this.rules[30].opcodes[4] = { type: 4, index: 31 };
    this.rules[30].opcodes[5] = { type: 7, string: [93] };
    this.rules[31].opcodes = [];
    this.rules[31].opcodes[0] = { type: 2, children: [1, 2, 4, 5] };
    this.rules[31].opcodes[1] = { type: 7, string: [118] };
    this.rules[31].opcodes[2] = { type: 3, min: 1, max: Infinity };
    this.rules[31].opcodes[3] = { type: 4, index: 80 };
    this.rules[31].opcodes[4] = { type: 7, string: [46] };
    this.rules[31].opcodes[5] = { type: 3, min: 1, max: Infinity };
    this.rules[31].opcodes[6] = { type: 1, children: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16] };
    this.rules[31].opcodes[7] = { type: 5, min: 97, max: 122 };
    this.rules[31].opcodes[8] = { type: 5, min: 65, max: 90 };
    this.rules[31].opcodes[9] = { type: 5, min: 48, max: 57 };
    this.rules[31].opcodes[10] = { type: 6, string: [33] };
    this.rules[31].opcodes[11] = { type: 6, string: [36] };
    this.rules[31].opcodes[12] = { type: 5, min: 38, max: 46 };
    this.rules[31].opcodes[13] = { type: 5, min: 58, max: 59 };
    this.rules[31].opcodes[14] = { type: 6, string: [61] };
    this.rules[31].opcodes[15] = { type: 6, string: [95] };
    this.rules[31].opcodes[16] = { type: 6, string: [126] };
    this.rules[32].opcodes = [];
    this.rules[32].opcodes[0] = { type: 1, children: [1, 2] };
    this.rules[32].opcodes[1] = { type: 4, index: 33 };
    this.rules[32].opcodes[2] = { type: 4, index: 34 };
    this.rules[33].opcodes = [];
    this.rules[33].opcodes[0] = { type: 2, children: [1, 5] };
    this.rules[33].opcodes[1] = { type: 2, children: [2, 3] };
    this.rules[33].opcodes[2] = { type: 4, index: 37 };
    this.rules[33].opcodes[3] = { type: 3, min: 0, max: Infinity };
    this.rules[33].opcodes[4] = { type: 4, index: 38 };
    this.rules[33].opcodes[5] = { type: 3, min: 0, max: 1 };
    this.rules[33].opcodes[6] = { type: 2, children: [7, 8] };
    this.rules[33].opcodes[7] = { type: 6, string: [58] };
    this.rules[33].opcodes[8] = { type: 4, index: 39 };
    this.rules[34].opcodes = [];
    this.rules[34].opcodes[0] = { type: 2, children: [1, 6, 7] };
    this.rules[34].opcodes[1] = { type: 3, min: 0, max: 1 };
    this.rules[34].opcodes[2] = { type: 2, children: [3, 4] };
    this.rules[34].opcodes[3] = { type: 4, index: 35 };
    this.rules[34].opcodes[4] = { type: 3, min: 0, max: Infinity };
    this.rules[34].opcodes[5] = { type: 4, index: 36 };
    this.rules[34].opcodes[6] = { type: 6, string: [58, 58] };
    this.rules[34].opcodes[7] = { type: 1, children: [8, 17] };
    this.rules[34].opcodes[8] = { type: 2, children: [9, 13] };
    this.rules[34].opcodes[9] = { type: 2, children: [10, 11] };
    this.rules[34].opcodes[10] = { type: 4, index: 37 };
    this.rules[34].opcodes[11] = { type: 3, min: 0, max: Infinity };
    this.rules[34].opcodes[12] = { type: 4, index: 38 };
    this.rules[34].opcodes[13] = { type: 3, min: 0, max: 1 };
    this.rules[34].opcodes[14] = { type: 2, children: [15, 16] };
    this.rules[34].opcodes[15] = { type: 6, string: [58] };
    this.rules[34].opcodes[16] = { type: 4, index: 39 };
    this.rules[34].opcodes[17] = { type: 3, min: 0, max: 1 };
    this.rules[34].opcodes[18] = { type: 4, index: 39 };
    this.rules[35].opcodes = [];
    this.rules[35].opcodes[0] = { type: 3, min: 1, max: 4 };
    this.rules[35].opcodes[1] = { type: 4, index: 80 };
    this.rules[36].opcodes = [];
    this.rules[36].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[36].opcodes[1] = { type: 6, string: [58] };
    this.rules[36].opcodes[2] = { type: 3, min: 1, max: 4 };
    this.rules[36].opcodes[3] = { type: 4, index: 80 };
    this.rules[37].opcodes = [];
    this.rules[37].opcodes[0] = { type: 2, children: [1, 3] };
    this.rules[37].opcodes[1] = { type: 3, min: 1, max: 4 };
    this.rules[37].opcodes[2] = { type: 4, index: 80 };
    this.rules[37].opcodes[3] = { type: 13 };
    this.rules[37].opcodes[4] = { type: 6, string: [46] };
    this.rules[38].opcodes = [];
    this.rules[38].opcodes[0] = { type: 2, children: [1, 2, 4] };
    this.rules[38].opcodes[1] = { type: 6, string: [58] };
    this.rules[38].opcodes[2] = { type: 3, min: 1, max: 4 };
    this.rules[38].opcodes[3] = { type: 4, index: 80 };
    this.rules[38].opcodes[4] = { type: 13 };
    this.rules[38].opcodes[5] = { type: 6, string: [46] };
    this.rules[39].opcodes = [];
    this.rules[39].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7] };
    this.rules[39].opcodes[1] = { type: 4, index: 40 };
    this.rules[39].opcodes[2] = { type: 7, string: [46] };
    this.rules[39].opcodes[3] = { type: 4, index: 40 };
    this.rules[39].opcodes[4] = { type: 7, string: [46] };
    this.rules[39].opcodes[5] = { type: 4, index: 40 };
    this.rules[39].opcodes[6] = { type: 7, string: [46] };
    this.rules[39].opcodes[7] = { type: 4, index: 40 };
    this.rules[40].opcodes = [];
    this.rules[40].opcodes[0] = { type: 3, min: 0, max: 3 };
    this.rules[40].opcodes[1] = { type: 4, index: 41 };
    this.rules[41].opcodes = [];
    this.rules[41].opcodes[0] = { type: 5, min: 48, max: 57 };
    this.rules[42].opcodes = [];
    this.rules[42].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[42].opcodes[1] = { type: 4, index: 43 };
    this.rules[43].opcodes = [];
    this.rules[43].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] };
    this.rules[43].opcodes[1] = { type: 5, min: 97, max: 122 };
    this.rules[43].opcodes[2] = { type: 5, min: 65, max: 90 };
    this.rules[43].opcodes[3] = { type: 5, min: 48, max: 57 };
    this.rules[43].opcodes[4] = { type: 4, index: 63 };
    this.rules[43].opcodes[5] = { type: 6, string: [33] };
    this.rules[43].opcodes[6] = { type: 6, string: [36] };
    this.rules[43].opcodes[7] = { type: 5, min: 38, max: 46 };
    this.rules[43].opcodes[8] = { type: 6, string: [59] };
    this.rules[43].opcodes[9] = { type: 6, string: [61] };
    this.rules[43].opcodes[10] = { type: 6, string: [95] };
    this.rules[43].opcodes[11] = { type: 6, string: [126] };
    this.rules[44].opcodes = [];
    this.rules[44].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[44].opcodes[1] = { type: 4, index: 79 };
    this.rules[45].opcodes = [];
    this.rules[45].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[45].opcodes[1] = { type: 1, children: [2, 3, 4] };
    this.rules[45].opcodes[2] = { type: 4, index: 62 };
    this.rules[45].opcodes[3] = { type: 6, string: [47] };
    this.rules[45].opcodes[4] = { type: 6, string: [63] };
    this.rules[46].opcodes = [];
    this.rules[46].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[46].opcodes[1] = { type: 1, children: [2, 3, 4] };
    this.rules[46].opcodes[2] = { type: 4, index: 62 };
    this.rules[46].opcodes[3] = { type: 6, string: [47] };
    this.rules[46].opcodes[4] = { type: 6, string: [63] };
    this.rules[47].opcodes = [];
    this.rules[47].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] };
    this.rules[47].opcodes[1] = { type: 4, index: 49 };
    this.rules[47].opcodes[2] = { type: 7, string: [58] };
    this.rules[47].opcodes[3] = { type: 4, index: 48 };
    this.rules[47].opcodes[4] = { type: 3, min: 0, max: 1 };
    this.rules[47].opcodes[5] = { type: 2, children: [6, 7] };
    this.rules[47].opcodes[6] = { type: 7, string: [63] };
    this.rules[47].opcodes[7] = { type: 4, index: 50 };
    this.rules[47].opcodes[8] = { type: 3, min: 0, max: 1 };
    this.rules[47].opcodes[9] = { type: 2, children: [10, 11] };
    this.rules[47].opcodes[10] = { type: 7, string: [35] };
    this.rules[47].opcodes[11] = { type: 4, index: 51 };
    this.rules[48].opcodes = [];
    this.rules[48].opcodes[0] = { type: 1, children: [1, 5, 6, 7] };
    this.rules[48].opcodes[1] = { type: 2, children: [2, 3, 4] };
    this.rules[48].opcodes[2] = { type: 7, string: [47, 47] };
    this.rules[48].opcodes[3] = { type: 4, index: 52 };
    this.rules[48].opcodes[4] = { type: 4, index: 56 };
    this.rules[48].opcodes[5] = { type: 4, index: 57 };
    this.rules[48].opcodes[6] = { type: 4, index: 58 };
    this.rules[48].opcodes[7] = { type: 4, index: 59 };
    this.rules[49].opcodes = [];
    this.rules[49].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[49].opcodes[1] = { type: 4, index: 77 };
    this.rules[49].opcodes[2] = { type: 3, min: 0, max: Infinity };
    this.rules[49].opcodes[3] = { type: 1, children: [4, 5, 6, 7] };
    this.rules[49].opcodes[4] = { type: 4, index: 77 };
    this.rules[49].opcodes[5] = { type: 4, index: 79 };
    this.rules[49].opcodes[6] = { type: 6, string: [43] };
    this.rules[49].opcodes[7] = { type: 5, min: 45, max: 46 };
    this.rules[50].opcodes = [];
    this.rules[50].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[50].opcodes[1] = { type: 1, children: [2, 3, 4] };
    this.rules[50].opcodes[2] = { type: 4, index: 62 };
    this.rules[50].opcodes[3] = { type: 6, string: [47] };
    this.rules[50].opcodes[4] = { type: 6, string: [63] };
    this.rules[51].opcodes = [];
    this.rules[51].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[51].opcodes[1] = { type: 1, children: [2, 3, 4] };
    this.rules[51].opcodes[2] = { type: 4, index: 62 };
    this.rules[51].opcodes[3] = { type: 6, string: [47] };
    this.rules[51].opcodes[4] = { type: 6, string: [63] };
    this.rules[52].opcodes = [];
    this.rules[52].opcodes[0] = { type: 2, children: [1, 5, 6] };
    this.rules[52].opcodes[1] = { type: 3, min: 0, max: 1 };
    this.rules[52].opcodes[2] = { type: 2, children: [3, 4] };
    this.rules[52].opcodes[3] = { type: 4, index: 53 };
    this.rules[52].opcodes[4] = { type: 6, string: [64] };
    this.rules[52].opcodes[5] = { type: 4, index: 54 };
    this.rules[52].opcodes[6] = { type: 3, min: 0, max: 1 };
    this.rules[52].opcodes[7] = { type: 2, children: [8, 9] };
    this.rules[52].opcodes[8] = { type: 7, string: [58] };
    this.rules[52].opcodes[9] = { type: 4, index: 55 };
    this.rules[53].opcodes = [];
    this.rules[53].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[53].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] };
    this.rules[53].opcodes[2] = { type: 5, min: 97, max: 122 };
    this.rules[53].opcodes[3] = { type: 5, min: 65, max: 90 };
    this.rules[53].opcodes[4] = { type: 5, min: 48, max: 57 };
    this.rules[53].opcodes[5] = { type: 4, index: 63 };
    this.rules[53].opcodes[6] = { type: 6, string: [33] };
    this.rules[53].opcodes[7] = { type: 6, string: [36] };
    this.rules[53].opcodes[8] = { type: 5, min: 38, max: 46 };
    this.rules[53].opcodes[9] = { type: 5, min: 58, max: 59 };
    this.rules[53].opcodes[10] = { type: 6, string: [61] };
    this.rules[53].opcodes[11] = { type: 6, string: [95] };
    this.rules[53].opcodes[12] = { type: 6, string: [126] };
    this.rules[54].opcodes = [];
    this.rules[54].opcodes[0] = { type: 1, children: [1, 2, 6] };
    this.rules[54].opcodes[1] = { type: 4, index: 30 };
    this.rules[54].opcodes[2] = { type: 2, children: [3, 4] };
    this.rules[54].opcodes[3] = { type: 4, index: 39 };
    this.rules[54].opcodes[4] = { type: 13 };
    this.rules[54].opcodes[5] = { type: 4, index: 43 };
    this.rules[54].opcodes[6] = { type: 4, index: 42 };
    this.rules[55].opcodes = [];
    this.rules[55].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[55].opcodes[1] = { type: 4, index: 79 };
    this.rules[56].opcodes = [];
    this.rules[56].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[56].opcodes[1] = { type: 2, children: [2, 3] };
    this.rules[56].opcodes[2] = { type: 7, string: [47] };
    this.rules[56].opcodes[3] = { type: 4, index: 60 };
    this.rules[57].opcodes = [];
    this.rules[57].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[57].opcodes[1] = { type: 7, string: [47] };
    this.rules[57].opcodes[2] = { type: 3, min: 0, max: 1 };
    this.rules[57].opcodes[3] = { type: 2, children: [4, 5] };
    this.rules[57].opcodes[4] = { type: 4, index: 61 };
    this.rules[57].opcodes[5] = { type: 3, min: 0, max: Infinity };
    this.rules[57].opcodes[6] = { type: 2, children: [7, 8] };
    this.rules[57].opcodes[7] = { type: 7, string: [47] };
    this.rules[57].opcodes[8] = { type: 4, index: 60 };
    this.rules[58].opcodes = [];
    this.rules[58].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[58].opcodes[1] = { type: 4, index: 61 };
    this.rules[58].opcodes[2] = { type: 3, min: 0, max: Infinity };
    this.rules[58].opcodes[3] = { type: 2, children: [4, 5] };
    this.rules[58].opcodes[4] = { type: 7, string: [47] };
    this.rules[58].opcodes[5] = { type: 4, index: 60 };
    this.rules[59].opcodes = [];
    this.rules[59].opcodes[0] = { type: 7, string: [] };
    this.rules[60].opcodes = [];
    this.rules[60].opcodes[0] = { type: 3, min: 0, max: Infinity };
    this.rules[60].opcodes[1] = { type: 4, index: 62 };
    this.rules[61].opcodes = [];
    this.rules[61].opcodes[0] = { type: 3, min: 1, max: Infinity };
    this.rules[61].opcodes[1] = { type: 4, index: 62 };
    this.rules[62].opcodes = [];
    this.rules[62].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] };
    this.rules[62].opcodes[1] = { type: 5, min: 97, max: 122 };
    this.rules[62].opcodes[2] = { type: 5, min: 65, max: 90 };
    this.rules[62].opcodes[3] = { type: 5, min: 48, max: 57 };
    this.rules[62].opcodes[4] = { type: 4, index: 63 };
    this.rules[62].opcodes[5] = { type: 6, string: [33] };
    this.rules[62].opcodes[6] = { type: 6, string: [36] };
    this.rules[62].opcodes[7] = { type: 5, min: 38, max: 46 };
    this.rules[62].opcodes[8] = { type: 5, min: 58, max: 59 };
    this.rules[62].opcodes[9] = { type: 6, string: [61] };
    this.rules[62].opcodes[10] = { type: 6, string: [64] };
    this.rules[62].opcodes[11] = { type: 6, string: [95] };
    this.rules[62].opcodes[12] = { type: 6, string: [126] };
    this.rules[63].opcodes = [];
    this.rules[63].opcodes[0] = { type: 2, children: [1, 2, 3] };
    this.rules[63].opcodes[1] = { type: 6, string: [37] };
    this.rules[63].opcodes[2] = { type: 4, index: 80 };
    this.rules[63].opcodes[3] = { type: 4, index: 80 };
    this.rules[64].opcodes = [];
    this.rules[64].opcodes[0] = { type: 3, min: 4, max: 4 };
    this.rules[64].opcodes[1] = { type: 4, index: 79 };
    this.rules[65].opcodes = [];
    this.rules[65].opcodes[0] = { type: 3, min: 2, max: 2 };
    this.rules[65].opcodes[1] = { type: 4, index: 79 };
    this.rules[66].opcodes = [];
    this.rules[66].opcodes[0] = { type: 3, min: 2, max: 2 };
    this.rules[66].opcodes[1] = { type: 4, index: 79 };
    this.rules[67].opcodes = [];
    this.rules[67].opcodes[0] = { type: 3, min: 2, max: 2 };
    this.rules[67].opcodes[1] = { type: 4, index: 79 };
    this.rules[68].opcodes = [];
    this.rules[68].opcodes[0] = { type: 3, min: 2, max: 2 };
    this.rules[68].opcodes[1] = { type: 4, index: 79 };
    this.rules[69].opcodes = [];
    this.rules[69].opcodes[0] = { type: 3, min: 2, max: 2 };
    this.rules[69].opcodes[1] = { type: 4, index: 79 };
    this.rules[70].opcodes = [];
    this.rules[70].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[70].opcodes[1] = { type: 7, string: [46] };
    this.rules[70].opcodes[2] = { type: 3, min: 1, max: Infinity };
    this.rules[70].opcodes[3] = { type: 4, index: 79 };
    this.rules[71].opcodes = [];
    this.rules[71].opcodes[0] = { type: 2, children: [1, 4, 5, 6] };
    this.rules[71].opcodes[1] = { type: 1, children: [2, 3] };
    this.rules[71].opcodes[2] = { type: 7, string: [43] };
    this.rules[71].opcodes[3] = { type: 7, string: [45] };
    this.rules[71].opcodes[4] = { type: 4, index: 67 };
    this.rules[71].opcodes[5] = { type: 7, string: [58] };
    this.rules[71].opcodes[6] = { type: 4, index: 68 };
    this.rules[72].opcodes = [];
    this.rules[72].opcodes[0] = { type: 1, children: [1, 2] };
    this.rules[72].opcodes[1] = { type: 7, string: [122] };
    this.rules[72].opcodes[2] = { type: 4, index: 71 };
    this.rules[73].opcodes = [];
    this.rules[73].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6] };
    this.rules[73].opcodes[1] = { type: 4, index: 67 };
    this.rules[73].opcodes[2] = { type: 7, string: [58] };
    this.rules[73].opcodes[3] = { type: 4, index: 68 };
    this.rules[73].opcodes[4] = { type: 7, string: [58] };
    this.rules[73].opcodes[5] = { type: 4, index: 69 };
    this.rules[73].opcodes[6] = { type: 3, min: 0, max: 1 };
    this.rules[73].opcodes[7] = { type: 4, index: 70 };
    this.rules[74].opcodes = [];
    this.rules[74].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5] };
    this.rules[74].opcodes[1] = { type: 4, index: 64 };
    this.rules[74].opcodes[2] = { type: 7, string: [45] };
    this.rules[74].opcodes[3] = { type: 4, index: 65 };
    this.rules[74].opcodes[4] = { type: 7, string: [45] };
    this.rules[74].opcodes[5] = { type: 4, index: 66 };
    this.rules[75].opcodes = [];
    this.rules[75].opcodes[0] = { type: 2, children: [1, 2] };
    this.rules[75].opcodes[1] = { type: 4, index: 73 };
    this.rules[75].opcodes[2] = { type: 4, index: 72 };
    this.rules[76].opcodes = [];
    this.rules[76].opcodes[0] = { type: 2, children: [1, 2, 3] };
    this.rules[76].opcodes[1] = { type: 4, index: 74 };
    this.rules[76].opcodes[2] = { type: 7, string: [116] };
    this.rules[76].opcodes[3] = { type: 4, index: 75 };
    this.rules[77].opcodes = [];
    this.rules[77].opcodes[0] = { type: 1, children: [1, 2] };
    this.rules[77].opcodes[1] = { type: 5, min: 65, max: 90 };
    this.rules[77].opcodes[2] = { type: 5, min: 97, max: 122 };
    this.rules[78].opcodes = [];
    this.rules[78].opcodes[0] = { type: 6, string: [10] };
    this.rules[79].opcodes = [];
    this.rules[79].opcodes[0] = { type: 5, min: 48, max: 57 };
    this.rules[80].opcodes = [];
    this.rules[80].opcodes[0] = { type: 1, children: [1, 2, 3] };
    this.rules[80].opcodes[1] = { type: 5, min: 48, max: 57 };
    this.rules[80].opcodes[2] = { type: 5, min: 65, max: 70 };
    this.rules[80].opcodes[3] = { type: 5, min: 97, max: 102 };
    this.toString = function toString3() {
      let str = "";
      str += "; LDT 05/06/2024 \n";
      str += "; modified in several significant ways\n";
      str += "; 1) Literal strings are replaced with numbers and ranges (%d32 & %d32-126, etc.) when possible.\n";
      str += ";    TRB and especially TRG operators are much more efficient than TLS operators.\n";
      str += "; 2) Two rules, authority and URI, are used multiple times in different contexts. These rules will be reproduced and renamed\n";
      str += ";    in order to a) recognize the context and b) remove unneccary callback functions for certain contexts.\n";
      str += ";    This will simiplify recognizing contexts AND remove unneccesary callbacks\n";
      str += "; 2.a) domain is defined as authority-d which is identical to authority except that there will be no\n";
      str += ";      callback functions defined on authority-d or any of its *-d components.\n";
      str += "; 2.b) The resource URI is defined as URI-r and its components defined as *-r.\n";
      str += ";      In this way, callback functions can be defined on URI and is components while\n";
      str += ";      leaving URI-r to be parsed identically with no unnecessary callback functions to slow it down.\n";
      str += `; 3) IPv6address does not work because of APG's "first-success disambiguation" and "greedy" repetitions.
`;
      str += ";    IPv6address redefined and validations moved to callback functions (semantic vs syntactic validation)\n";
      str += ";    Redefinition requires negative look-ahead operators, https://en.wikipedia.org/wiki/Syntactic_predicate\n";
      str += ";    That is SABNF instead of simple ABNF.\n";
      str += '; 4) IPv4address fails because of "first-success disambiguation".\n';
      str += ";    This could be fixed with rearrangement of the alternative terms. However, it would still not\n";
      str += ";    accept zero-padded (leading zeros) decimal octets.\n";
      str += ";    Therefore, IPv4address is also done with callback functions and semantic validation.\n";
      str += "; 5) The negative look-ahead operator is also needed in the definition of host to\n";
      str += ";    prevent failure with a reg-name that begins with an IPv4 address.\n";
      str += "; 6) NOTE: host = 1.1.1.256 is a valid host name even though it is an invalid IPv4address.\n";
      str += ";          The IPv4address alternative fails but the reg-name alternative succeeds.\n";
      str += "; 7) The Ethereum spec (https://eips.ethereum.org/EIPS/eip-4361) message format ABNF\n";
      str += ';    allows for empty statements. Because of the "first success disambiguation" of APG\n';
      str += `;    the an explicit "empty-statement" rule is required to match the spec's intent.
`;
      str += "\n";
      str += "\n";
      str += "sign-in-with-ethereum =\n";
      str += '    oscheme domain %s" wants you to sign in with your Ethereum account:" LF\n';
      str += "    address LF\n";
      str += "    ((LF statement LF LF) / empty-statement / (LF LF))\n";
      str += '    %s"URI: " URI LF\n';
      str += '    %s"Version: " version LF\n';
      str += '    %s"Chain ID: " chain-id LF\n';
      str += '    %s"Nonce: " nonce LF\n';
      str += '    %s"Issued At: " issued-at\n';
      str += "    [ LF ex-title expiration-time ]\n";
      str += "    [ LF nb-title not-before ]\n";
      str += "    [ LF ri-title request-id ]\n";
      str += "    [ LF re-title resources ]\n";
      str += 'ex-title        = %s"Expiration Time: "\n';
      str += 'nb-title        = %s"Not Before: "\n';
      str += 'ri-title        = %s"Request ID: "\n';
      str += 're-title        = %s"Resources:"\n';
      str += 'oscheme         = [ ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 ) "://" ]\n';
      str += "domain          = authority-d\n";
      str += 'address         = "0x" 40*40HEXDIG\n';
      str += "    ; Must also conform to captilization\n";
      str += "    ; checksum encoding specified in EIP-55\n";
      str += "    ; where applicable (EOAs).\n";
      str += "\n";
      str += "statement       = 1*( %d97-122 / %d65-90 / %d48-57 / %d32-33 / %d35-36 / %d38-59 / %d61 / %d63-64 / %d91 / %d93 / %d95 / %d126)\n";
      str += "    ; The purpose is to exclude LF (line breaks).\n";
      str += "    ; LDT 10/04/2023: Do you mean %d32-126? All printing characters\n";
      str += "empty-statement = LF LF LF\n";
      str += 'version         = "1"\n';
      str += "nonce           = 8*( ALPHA / DIGIT )\n";
      str += "issued-at       = date-time\n";
      str += "expiration-time = date-time\n";
      str += "not-before      = date-time\n";
      str += "request-id      = *pchar\n";
      str += "chain-id        = 1*DIGIT\n";
      str += "    ; See EIP-155 for valid CHAIN_IDs.\n";
      str += "resources       = *( LF resource )\n";
      str += 'resource        = "- " URI-r\n';
      str += "\n";
      str += "; ------------------------------------------------------------------------------\n";
      str += "; RFC 3986\n";
      str += "\n";
      str += 'URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]\n';
      str += 'hier-part     = "//" authority path-abempty\n';
      str += "              / path-absolute\n";
      str += "              / path-rootless\n";
      str += "              / path-empty\n";
      str += "scheme        = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\n";
      str += 'authority     = [ userinfo-at ] host [ ":" port ]\n';
      str += 'path-abempty  = *( "/" segment )\n';
      str += 'path-absolute = "/" [ segment-nz *( "/" segment ) ]\n';
      str += 'path-rootless = segment-nz *( "/" segment )\n';
      str += 'path-empty    = ""\n';
      str += "userinfo-at   = userinfo %d64\n";
      str += '                ; userinfo redefined to include the "@" so that it will fail without it\n';
      str += "                ; otherwise userinfo can match host and then the parser will backtrack\n";
      str += "                ; incorrectly keeping the captured userinfo phrase\n";
      str += "userinfo      = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\n";
      str += "host          = IP-literal / (IPv4address !reg-name-char) / reg-name\n";
      str += "                ; negative look-ahead required to prevent IPv4address from being recognized as first part of reg-name\n";
      str += "                ; same fix as https://github.com/garycourt/uri-js/issues/4\n";
      str += 'IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"\n';
      str += 'IPvFuture     = "v" 1*HEXDIG "." 1*( %d97-122 / %d65-90 / %d48-57 / %d33 / %d36 /%d38-46 / %d58-59 /%d61 /%d95 / %d126 )\n';
      str += "IPv6address   = nodcolon / dcolon\n";
      str += "nodcolon      = (h16n *h16cn) [%d58 IPv4address]\n";
      str += "dcolon        = [h16 *h16c] %d58.58 (((h16n *h16cn) [%d58 IPv4address]) / [IPv4address])\n";
      str += "h16           = 1*4HEXDIG\n";
      str += "h16c          = %d58 1*4HEXDIG\n";
      str += "h16n          = 1*4HEXDIG !%d46\n";
      str += "h16cn         = %d58 1*4HEXDIG !%d46\n";
      str += 'IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet\n';
      str += "; Here we will will use callback functions to evaluate and validate the (possibly zero-padded) dec-octet.\n";
      str += "dec-octet     =  *3dec-digit\n";
      str += "dec-digit     = %d48-57\n";
      str += "reg-name      = *reg-name-char\n";
      str += "reg-name-char = %d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d59 / %d61 /%d95 / %d126\n";
      str += "port          = *DIGIT\n";
      str += "query         = *(pchar / %d47 / %d63)\n";
      str += "fragment      = *(pchar / %d47 / %d63)\n";
      str += "\n";
      str += "; URI-r is a redefiniton of URI but without the callback functions attached to it\n";
      str += "; it reuses athority-d from domain \n";
      str += 'URI-r         = scheme-r ":" hier-part-r [ "?" query-r ] [ "#" fragment-r ]\n';
      str += 'hier-part-r   = "//" authority-d path-abempty-r\n';
      str += "              / path-absolute-r\n";
      str += "              / path-rootless-r\n";
      str += "              / path-empty-r\n";
      str += "scheme-r      = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\n";
      str += "query-r       = *(pchar / %d47 / %d63)\n";
      str += "fragment-r    = *(pchar / %d47 / %d63)\n";
      str += "\n";
      str += "; authority-d is a redefinition of authority for capturing the domian phrase\n";
      str += "; but without callback functions \n";
      str += "; it is reused for URI- for the same reason               \n";
      str += 'authority-d   = [ userinfo-d %d64 ] host-d [ ":" port-d ]\n';
      str += "userinfo-d    = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\n";
      str += "host-d        = IP-literal / (IPv4address !reg-name-char) / reg-name\n";
      str += "port-d        = *DIGIT\n";
      str += "\n";
      str += "; for use with URI-r\n";
      str += 'path-abempty-r  = *( "/" segment )\n';
      str += 'path-absolute-r = "/" [ segment-nz *( "/" segment ) ]\n';
      str += 'path-rootless-r = segment-nz *( "/" segment )\n';
      str += 'path-empty-r    = ""\n';
      str += "segment       = *pchar\n";
      str += "segment-nz    = 1*pchar\n";
      str += "pchar         = (%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 /%d58-59 / %d61 / %d64 / %d95 / %d126)\n";
      str += "pct-encoded   = %d37 HEXDIG HEXDIG\n";
      str += "\n";
      str += "; no longer needed - expanded for all usage for fewer branches in the parse there\n";
      str += "; and more efficient use of the TBS & TRG operators in place of TLS and rule names\n";
      str += '; does not work with APG probably because of "first-success disambiguation" and greedy repetitions.\n';
      str += "; will replace with semantic checking of valid number of h16s\n";
      str += ';IPv6address   =                            6( h16 ":" ) ls32\n';
      str += ';              /                       "::" 5( h16 ":" ) ls32\n';
      str += ';              / [               h16 ] "::" 4( h16 ":" ) ls32\n';
      str += ';              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32\n';
      str += ';              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32\n';
      str += ';              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32\n';
      str += ';              / [ *4( h16 ":" ) h16 ] "::"              ls32\n';
      str += ';              / [ *5( h16 ":" ) h16 ] "::"              h16\n';
      str += ';              / [ *6( h16 ":" ) h16 ] "::"\n';
      str += ';ls32          = ( h16 ":" h16 ) / IPv4address\n';
      str += '; dec-octet does not work because of "first-success disambiguation".\n';
      str += "; Must have the longest (3-digit) numbers first.\n";
      str += "; Even so, this form does not accept leading zeros.\n";
      str += "; There does not seem to be a clear standard for this (https://en.wikipedia.org/wiki/Dot-decimal_notation)\n";
      str += "; however and early RFC 790 did show leading-zero padding of the three digits.\n";
      str += ";dec-octet     = DIGIT                 ; 0-9\n";
      str += ";                 / %x31-39 DIGIT         ; 10-99\n";
      str += ';                 / "1" 2DIGIT            ; 100-199\n';
      str += ';                 / "2" %x30-34 DIGIT     ; 200-249\n';
      str += ';                 / "25" %x30-35          ; 250-255\n';
      str += ';statement = 1*( reserved / unreserved / " " )\n';
      str += ';scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )\n';
      str += ';authority     = [ userinfo "@" ] host [ ":" port ]\n';
      str += ';userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )\n';
      str += ';query         = *( pchar / "/" / "?" )\n';
      str += ';fragment      = *( pchar / "/" / "?" )\n';
      str += ';IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )\n';
      str += ";reg-name      = *( unreserved / pct-encoded / sub-delims )\n";
      str += ';pct-encoded   = "%" HEXDIG HEXDIG\n';
      str += ';pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"\n';
      str += ';path-empty    = 0pchar; deprecated - empty literal string, "", is more efficient \n';
      str += ';unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\n';
      str += ";reserved      = gen-delims / sub-delims\n";
      str += ';gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"\n';
      str += `;sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
`;
      str += ';              / "*" / "+" / "," / ";" / "="\n';
      str += ';HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"\n';
      str += "\n";
      str += "; ------------------------------------------------------------------------------\n";
      str += "; RFC 3339\n";
      str += "\n";
      str += "date-fullyear   = 4DIGIT\n";
      str += "date-month      = 2DIGIT  ; 01-12\n";
      str += "date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n";
      str += "                          ; month/year\n";
      str += "time-hour       = 2DIGIT  ; 00-23\n";
      str += "time-minute     = 2DIGIT  ; 00-59\n";
      str += "time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n";
      str += "                          ; rules\n";
      str += 'time-secfrac    = "." 1*DIGIT\n';
      str += 'time-numoffset  = ("+" / "-") time-hour ":" time-minute\n';
      str += 'time-offset     = "Z" / time-numoffset\n';
      str += "\n";
      str += 'partial-time    = time-hour ":" time-minute ":" time-second\n';
      str += "                  [time-secfrac]\n";
      str += 'full-date       = date-fullyear "-" date-month "-" date-mday\n';
      str += "full-time       = partial-time time-offset\n";
      str += "\n";
      str += 'date-time       = full-date "T" full-time\n';
      str += "\n";
      str += "; ------------------------------------------------------------------------------\n";
      str += "; RFC 5234\n";
      str += "\n";
      str += "ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\n";
      str += "LF             =  %x0A\n";
      str += "                  ; linefeed\n";
      str += "DIGIT          =  %x30-39\n";
      str += "                  ; 0-9\n";
      str += "HEXDIG         = %d48-57 / %d65-70 / %d97-102\n";
      str += "\n";
      return str;
    };
  }
  siweGrammar.grammar = grammar;
  return siweGrammar;
}
var callbacks = {};
var identifiers;
var hasRequiredIdentifiers;
function requireIdentifiers() {
  if (hasRequiredIdentifiers) return identifiers;
  hasRequiredIdentifiers = 1;
  identifiers = {
    // Identifies the operator type. Used by the generator
    // to indicate operator types in the grammar object.
    // Used by the [parser](./parser.html) when interpreting the grammar object.
    /* the original ABNF operators */
    ALT: 1,
    CAT: 2,
    REP: 3,
    RNM: 4,
    TRG: 5,
    TBS: 6,
    TLS: 7,
    /* the super set, SABNF operators */
    UDT: 11,
    AND: 12,
    NOT: 13,
    BKR: 14,
    BKA: 15,
    BKN: 16,
    ABG: 17,
    AEN: 18,
    // Used by the parser and the user's `RNM` and `UDT` callback functions.
    // Identifies the parser state as it traverses the parse tree nodes.
    // - *ACTIVE* - indicates the downward direction through the parse tree node.
    // - *MATCH* - indicates the upward direction and a phrase, of length \> 0, has been successfully matched
    // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched
    // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all
    ACTIVE: 100,
    MATCH: 101,
    EMPTY: 102,
    NOMATCH: 103,
    // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions
    // to indicate the direction of flow through the `AST` nodes.
    // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.
    // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.
    SEM_PRE: 200,
    SEM_POST: 201,
    // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.
    // - *SEM_OK* - normal return value
    // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,
    // the translator will skip processing all `AST` nodes in the branch below the current node.
    // Ignored if returned from the SEM_POST state.
    SEM_OK: 300,
    SEM_SKIP: 301,
    // Used in attribute generation to distinguish the necessary attribute categories.
    // - *ATTR_N* - non-recursive
    // - *ATTR_R* - recursive
    // - *ATTR_MR* - belongs to a mutually-recursive set
    ATTR_N: 400,
    ATTR_R: 401,
    ATTR_MR: 402,
    // Look around values indicate whether the parser is in look ahead or look behind mode.
    // Used by the tracing facility to indicate the look around mode in the trace records display.
    // - *LOOKAROUND_NONE* - the parser is in normal parsing mode
    // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`
    // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`
    LOOKAROUND_NONE: 500,
    LOOKAROUND_AHEAD: 501,
    LOOKAROUND_BEHIND: 502,
    // Back reference rule mode indicators
    // - *BKR_MODE_UM* - the back reference is using universal mode
    // - *BKR_MODE_PM* - the back reference is using parent frame mode
    // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching
    // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching
    BKR_MODE_UM: 601,
    BKR_MODE_PM: 602,
    BKR_MODE_CS: 603,
    BKR_MODE_CI: 604
  };
  return identifiers;
}
var utilities = {};
var style;
var hasRequiredStyle;
function requireStyle() {
  if (hasRequiredStyle) return style;
  hasRequiredStyle = 1;
  style = {
    // Generated by apglib/style.js 
    CLASS_MONOSPACE: "apg-mono",
    CLASS_ACTIVE: "apg-active",
    CLASS_EMPTY: "apg-empty",
    CLASS_MATCH: "apg-match",
    CLASS_NOMATCH: "apg-nomatch",
    CLASS_LOOKAHEAD: "apg-lh-match",
    CLASS_LOOKBEHIND: "apg-lb-match",
    CLASS_REMAINDER: "apg-remainder",
    CLASS_CTRLCHAR: "apg-ctrl-char",
    CLASS_LINEEND: "apg-line-end",
    CLASS_ERROR: "apg-error",
    CLASS_PHRASE: "apg-phrase",
    CLASS_EMPTYPHRASE: "apg-empty-phrase",
    CLASS_STATE: "apg-state",
    CLASS_STATS: "apg-stats",
    CLASS_TRACE: "apg-trace",
    CLASS_GRAMMAR: "apg-grammar",
    CLASS_RULES: "apg-rules",
    CLASS_RULESLINK: "apg-rules-link",
    CLASS_ATTRIBUTES: "apg-attrs"
  };
  return style;
}
var converter = {};
var transformers = {};
var hasRequiredTransformers;
function requireTransformers() {
  if (hasRequiredTransformers) return transformers;
  hasRequiredTransformers = 1;
  (function(exports) {
    "use strict;";
    const { Buffer: Buffer2 } = require$$0$4;
    const NON_SHORTEST = 4294967292;
    const TRAILING = 4294967293;
    const RANGE = 4294967294;
    const ILL_FORMED = 4294967295;
    const mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];
    const ascii = [
      "00",
      "01",
      "02",
      "03",
      "04",
      "05",
      "06",
      "07",
      "08",
      "09",
      "0A",
      "0B",
      "0C",
      "0D",
      "0E",
      "0F",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "1A",
      "1B",
      "1C",
      "1D",
      "1E",
      "1F",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "2A",
      "2B",
      "2C",
      "2D",
      "2E",
      "2F",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "39",
      "3A",
      "3B",
      "3C",
      "3D",
      "3E",
      "3F",
      "40",
      "41",
      "42",
      "43",
      "44",
      "45",
      "46",
      "47",
      "48",
      "49",
      "4A",
      "4B",
      "4C",
      "4D",
      "4E",
      "4F",
      "50",
      "51",
      "52",
      "53",
      "54",
      "55",
      "56",
      "57",
      "58",
      "59",
      "5A",
      "5B",
      "5C",
      "5D",
      "5E",
      "5F",
      "60",
      "61",
      "62",
      "63",
      "64",
      "65",
      "66",
      "67",
      "68",
      "69",
      "6A",
      "6B",
      "6C",
      "6D",
      "6E",
      "6F",
      "70",
      "71",
      "72",
      "73",
      "74",
      "75",
      "76",
      "77",
      "78",
      "79",
      "7A",
      "7B",
      "7C",
      "7D",
      "7E",
      "7F",
      "80",
      "81",
      "82",
      "83",
      "84",
      "85",
      "86",
      "87",
      "88",
      "89",
      "8A",
      "8B",
      "8C",
      "8D",
      "8E",
      "8F",
      "90",
      "91",
      "92",
      "93",
      "94",
      "95",
      "96",
      "97",
      "98",
      "99",
      "9A",
      "9B",
      "9C",
      "9D",
      "9E",
      "9F",
      "A0",
      "A1",
      "A2",
      "A3",
      "A4",
      "A5",
      "A6",
      "A7",
      "A8",
      "A9",
      "AA",
      "AB",
      "AC",
      "AD",
      "AE",
      "AF",
      "B0",
      "B1",
      "B2",
      "B3",
      "B4",
      "B5",
      "B6",
      "B7",
      "B8",
      "B9",
      "BA",
      "BB",
      "BC",
      "BD",
      "BE",
      "BF",
      "C0",
      "C1",
      "C2",
      "C3",
      "C4",
      "C5",
      "C6",
      "C7",
      "C8",
      "C9",
      "CA",
      "CB",
      "CC",
      "CD",
      "CE",
      "CF",
      "D0",
      "D1",
      "D2",
      "D3",
      "D4",
      "D5",
      "D6",
      "D7",
      "D8",
      "D9",
      "DA",
      "DB",
      "DC",
      "DD",
      "DE",
      "DF",
      "E0",
      "E1",
      "E2",
      "E3",
      "E4",
      "E5",
      "E6",
      "E7",
      "E8",
      "E9",
      "EA",
      "EB",
      "EC",
      "ED",
      "EE",
      "EF",
      "F0",
      "F1",
      "F2",
      "F3",
      "F4",
      "F5",
      "F6",
      "F7",
      "F8",
      "F9",
      "FA",
      "FB",
      "FC",
      "FD",
      "FE",
      "FF"
    ];
    const base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split("");
    const base64codes = [];
    base64chars.forEach((char) => {
      base64codes.push(char.charCodeAt(0));
    });
    exports.utf8 = {
      encode(chars) {
        const bytes2 = [];
        chars.forEach((char) => {
          if (char >= 0 && char <= 127) {
            bytes2.push(char);
          } else if (char <= 2047) {
            bytes2.push(192 + (char >> 6 & mask[5]));
            bytes2.push(128 + (char & mask[6]));
          } else if (char < 55296 || char > 57343 && char <= 65535) {
            bytes2.push(224 + (char >> 12 & mask[4]));
            bytes2.push(128 + (char >> 6 & mask[6]));
            bytes2.push(128 + (char & mask[6]));
          } else if (char >= 65536 && char <= 1114111) {
            const u = char >> 16 & mask[5];
            bytes2.push(240 + (u >> 2));
            bytes2.push(128 + ((u & mask[2]) << 4) + (char >> 12 & mask[4]));
            bytes2.push(128 + (char >> 6 & mask[6]));
            bytes2.push(128 + (char & mask[6]));
          } else {
            throw new RangeError(`utf8.encode: character out of range: char: ${char}`);
          }
        });
        return Buffer2.from(bytes2);
      },
      decode(buf, bom) {
        function bytes2(b12, b2) {
          if ((b2 & 192) !== 128) {
            return TRAILING;
          }
          const x = ((b12 & mask[5]) << 6) + (b2 & mask[6]);
          if (x < 128) {
            return NON_SHORTEST;
          }
          return x;
        }
        function bytes3(b12, b2, b3) {
          if ((b3 & 192) !== 128 || (b2 & 192) !== 128) {
            return TRAILING;
          }
          const x = ((b12 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);
          if (x < 2048) {
            return NON_SHORTEST;
          }
          if (x >= 55296 && x <= 57343) {
            return RANGE;
          }
          return x;
        }
        function bytes4(b12, b2, b3, b4) {
          if ((b4 & 192) !== 128 || (b3 & 192) !== 128 || (b2 & 192) !== 128) {
            return TRAILING;
          }
          const x = (((b12 & mask[3]) << 2) + (b2 >> 4 & mask[2]) << 16) + ((b2 & mask[4]) << 12) + ((b3 & mask[6]) << 6) + (b4 & mask[6]);
          if (x < 65536) {
            return NON_SHORTEST;
          }
          if (x > 1114111) {
            return RANGE;
          }
          return x;
        }
        let c;
        let b1;
        let i1;
        let i2;
        let i3;
        let inc;
        const len = buf.length;
        let i = bom ? 3 : 0;
        const chars = [];
        while (i < len) {
          b1 = buf[i];
          c = ILL_FORMED;
          const TRUE = true;
          while (TRUE) {
            if (b1 >= 0 && b1 <= 127) {
              c = b1;
              inc = 1;
              break;
            }
            i1 = i + 1;
            if (i1 < len && b1 >= 194 && b1 <= 223) {
              c = bytes2(b1, buf[i1]);
              inc = 2;
              break;
            }
            i2 = i + 2;
            if (i2 < len && b1 >= 224 && b1 <= 239) {
              c = bytes3(b1, buf[i1], buf[i2]);
              inc = 3;
              break;
            }
            i3 = i + 3;
            if (i3 < len && b1 >= 240 && b1 <= 244) {
              c = bytes4(b1, buf[i1], buf[i2], buf[i3]);
              inc = 4;
              break;
            }
            break;
          }
          if (c > 1114111) {
            const at = `byte[${i}]`;
            if (c === ILL_FORMED) {
              throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);
            }
            if (c === TRAILING) {
              throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);
            }
            if (c === RANGE) {
              throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);
            }
            if (c === NON_SHORTEST) {
              throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);
            }
            throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);
          }
          chars.push(c);
          i += inc;
        }
        return chars;
      }
    };
    exports.utf16be = {
      encode(chars) {
        const bytes2 = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if (char >= 0 && char <= 55295 || char >= 57344 && char <= 65535) {
            bytes2.push(char >> 8 & mask[8]);
            bytes2.push(char & mask[8]);
          } else if (char >= 65536 && char <= 1114111) {
            l = char - 65536;
            h = 55296 + (l >> 10);
            l = 56320 + (l & mask[10]);
            bytes2.push(h >> 8 & mask[8]);
            bytes2.push(h & mask[8]);
            bytes2.push(l >> 8 & mask[8]);
            bytes2.push(l & mask[8]);
          } else {
            throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer2.from(bytes2);
      },
      decode(buf, bom) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i] << 8) + buf[i1];
              if (high < 55296 || high > 57343) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i + 2] << 8) + buf[i3];
                if (high <= 56319 && low >= 56320 && low <= 57343) {
                  c = 65536 + (high - 55296 << 10) + (low - 56320);
                  inc = 4;
                  break;
                }
              }
            }
            throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);
          }
          chars[j++] = c;
          i += inc;
        }
        return chars;
      }
    };
    exports.utf16le = {
      encode(chars) {
        const bytes2 = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if (char >= 0 && char <= 55295 || char >= 57344 && char <= 65535) {
            bytes2.push(char & mask[8]);
            bytes2.push(char >> 8 & mask[8]);
          } else if (char >= 65536 && char <= 1114111) {
            l = char - 65536;
            h = 55296 + (l >> 10);
            l = 56320 + (l & mask[10]);
            bytes2.push(h & mask[8]);
            bytes2.push(h >> 8 & mask[8]);
            bytes2.push(l & mask[8]);
            bytes2.push(l >> 8 & mask[8]);
          } else {
            throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer2.from(bytes2);
      },
      decode(buf, bom) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i1] << 8) + buf[i];
              if (high < 55296 || high > 57343) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i3] << 8) + buf[i + 2];
                if (high <= 56319 && low >= 56320 && low <= 57343) {
                  c = 65536 + (high - 55296 << 10) + (low - 56320);
                  inc = 4;
                  break;
                }
              }
            }
            throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);
          }
          chars[j++] = c;
          i += inc;
        }
        return chars;
      }
    };
    exports.utf32be = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = char >> 24 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      }
    };
    exports.utf32le = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 24 & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      }
    };
    exports.uint7 = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 127) {
            throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          if (buf[i] > 127) {
            throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);
          }
          chars[i] = buf[i];
        }
        return chars;
      }
    };
    exports.uint8 = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 255) {
            throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          chars[i] = buf[i];
        }
        return chars;
      }
    };
    exports.uint16be = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 65535) {
            throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i] << 8) + buf[i + 1]);
        }
        return chars;
      }
    };
    exports.uint16le = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 65535) {
            throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      }
    };
    exports.uint32be = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = char >> 24 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);
        }
        return chars;
      }
    };
    exports.uint32le = {
      encode(chars) {
        const buf = Buffer2.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 24 & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      }
    };
    exports.string = {
      encode(chars) {
        return exports.utf16le.encode(chars).toString("utf16le");
      },
      decode(str) {
        return exports.utf16le.decode(Buffer2.from(str, "utf16le"), 0);
      }
    };
    exports.escaped = {
      // Encodes an Array of 32-bit integers into ESCAPED format.
      encode(chars) {
        const bytes2 = [];
        for (let i = 0; i < chars.length; i += 1) {
          const char = chars[i];
          if (char === 96) {
            bytes2.push(char);
            bytes2.push(char);
          } else if (char === 10) {
            bytes2.push(char);
          } else if (char >= 32 && char <= 126) {
            bytes2.push(char);
          } else {
            let str = "";
            if (char >= 0 && char <= 31) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 127 && char <= 255) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 256 && char <= 65535) {
              str += `\`u${ascii[char >> 8 & mask[8]]}${ascii[char & mask[8]]}`;
            } else if (char >= 65536 && char <= 4294967295) {
              str += "`u{";
              const digit = char >> 24 & mask[8];
              if (digit > 0) {
                str += ascii[digit];
              }
              str += `${ascii[char >> 16 & mask[8]] + ascii[char >> 8 & mask[8]] + ascii[char & mask[8]]}}`;
            } else {
              throw new Error("escape.encode(char): char > 0xffffffff not allowed");
            }
            const buf = Buffer2.from(str);
            buf.forEach((b) => {
              bytes2.push(b);
            });
          }
        }
        return Buffer2.from(bytes2);
      },
      // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.
      decode(buf) {
        function isHex(hex) {
          if (hex >= 48 && hex <= 57 || hex >= 65 && hex <= 70 || hex >= 97 && hex <= 102) {
            return true;
          }
          return false;
        }
        function getx(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 2, error: true };
          if (i2 + 1 < len2) {
            if (isHex(bufArg[i2]) && isHex(bufArg[i2 + 1])) {
              const str = String.fromCodePoint(bufArg[i2], bufArg[i2 + 1]);
              ret2.char = parseInt(str, 16);
              if (!Number.isNaN(ret2.char)) {
                ret2.error = false;
              }
            }
          }
          return ret2;
        }
        function getu(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 4, error: true };
          if (i2 + 3 < len2) {
            if (isHex(bufArg[i2]) && isHex(bufArg[i2 + 1]) && isHex(bufArg[i2 + 2]) && isHex(bufArg[i2 + 3])) {
              const str = String.fromCodePoint(bufArg[i2], bufArg[i2 + 1], bufArg[i2 + 2], bufArg[i2 + 3]);
              ret2.char = parseInt(str, 16);
              if (!Number.isNaN(ret2.char)) {
                ret2.error = false;
              }
            }
          }
          return ret2;
        }
        function getU(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 4, error: true };
          let str = "";
          while (i2 < len2 && isHex(bufArg[i2])) {
            str += String.fromCodePoint(bufArg[i2]);
            i2 += 1;
          }
          ret2.char = parseInt(str, 16);
          if (bufArg[i2] === 125 && !Number.isNaN(ret2.char)) {
            ret2.error = false;
          }
          ret2.nexti = i2 + 1;
          return ret2;
        }
        const chars = [];
        const len = buf.length;
        let i1;
        let ret;
        let error;
        let i = 0;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            error = true;
            if (buf[i] !== 96) {
              chars.push(buf[i]);
              i += 1;
              error = false;
              break;
            }
            i1 = i + 1;
            if (i1 >= len) {
              break;
            }
            if (buf[i1] === 96) {
              chars.push(96);
              i += 2;
              error = false;
              break;
            }
            if (buf[i1] === 120) {
              ret = getx(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            if (buf[i1] === 117) {
              if (buf[i1 + 1] === 123) {
                ret = getU(i1 + 2, len, buf);
                if (ret.error) {
                  break;
                }
                chars.push(ret.char);
                i = ret.nexti;
                error = false;
                break;
              }
              ret = getu(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            break;
          }
          if (error) {
            throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);
          }
        }
        return chars;
      }
    };
    const CR = 13;
    const LF = 10;
    exports.lineEnds = {
      crlf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(CR);
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(CR);
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(CR);
          lfchars.push(LF);
        }
        return lfchars;
      },
      lf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(LF);
        }
        return lfchars;
      }
    };
    exports.base64 = {
      encode(buf) {
        if (buf.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        let j;
        let n;
        let tail = buf.length % 3;
        tail = tail > 0 ? 3 - tail : 0;
        let units2 = (buf.length + tail) / 3;
        const base642 = Buffer2.alloc(units2 * 4);
        if (tail > 0) {
          units2 -= 1;
        }
        i = 0;
        j = 0;
        for (let u = 0; u < units2; u += 1) {
          n = buf[i++] << 16;
          n += buf[i++] << 8;
          n += buf[i++];
          base642[j++] = base64codes[n >> 18 & mask[6]];
          base642[j++] = base64codes[n >> 12 & mask[6]];
          base642[j++] = base64codes[n >> 6 & mask[6]];
          base642[j++] = base64codes[n & mask[6]];
        }
        if (tail === 0) {
          return base642;
        }
        if (tail === 1) {
          n = buf[i++] << 16;
          n += buf[i] << 8;
          base642[j++] = base64codes[n >> 18 & mask[6]];
          base642[j++] = base64codes[n >> 12 & mask[6]];
          base642[j++] = base64codes[n >> 6 & mask[6]];
          base642[j] = base64codes[64];
          return base642;
        }
        if (tail === 2) {
          n = buf[i] << 16;
          base642[j++] = base64codes[n >> 18 & mask[6]];
          base642[j++] = base64codes[n >> 12 & mask[6]];
          base642[j++] = base64codes[64];
          base642[j] = base64codes[64];
          return base642;
        }
        return void 0;
      },
      decode(codes) {
        function validate(buf2) {
          const chars = [];
          let tail2 = 0;
          for (let i2 = 0; i2 < buf2.length; i2 += 1) {
            const char = buf2[i2];
            const TRUE = true;
            while (TRUE) {
              if (char === 32 || char === 9 || char === 10 || char === 13) {
                break;
              }
              if (char >= 65 && char <= 90) {
                chars.push(char - 65);
                break;
              }
              if (char >= 97 && char <= 122) {
                chars.push(char - 71);
                break;
              }
              if (char >= 48 && char <= 57) {
                chars.push(char + 4);
                break;
              }
              if (char === 43) {
                chars.push(62);
                break;
              }
              if (char === 47) {
                chars.push(63);
                break;
              }
              if (char === 61) {
                chars.push(64);
                tail2 += 1;
                break;
              }
              throw new RangeError(`base64.decode: invalid character buf[${i2}]: ${char}`);
            }
          }
          if (chars.length % 4 > 0) {
            throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);
          }
          switch (tail2) {
            case 0:
              break;
            case 1:
              if (chars[chars.length - 1] !== 64) {
                throw new RangeError("base64.decode: one tail character found: not last character");
              }
              break;
            case 2:
              if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {
                throw new RangeError("base64.decode: two tail characters found: not last characters");
              }
              break;
            default:
              throw new RangeError(`base64.decode: more than two tail characters found: ${tail2}`);
          }
          return { tail: tail2, buf: Buffer2.from(chars) };
        }
        if (codes.length === 0) {
          return Buffer2.alloc(0);
        }
        const val = validate(codes);
        const { tail } = val;
        const base642 = val.buf;
        let i;
        let j;
        let n;
        let units2 = base642.length / 4;
        const buf = Buffer2.alloc(units2 * 3 - tail);
        if (tail > 0) {
          units2 -= 1;
        }
        j = 0;
        i = 0;
        for (let u = 0; u < units2; u += 1) {
          n = base642[i++] << 18;
          n += base642[i++] << 12;
          n += base642[i++] << 6;
          n += base642[i++];
          buf[j++] = n >> 16 & mask[8];
          buf[j++] = n >> 8 & mask[8];
          buf[j++] = n & mask[8];
        }
        if (tail === 1) {
          n = base642[i++] << 18;
          n += base642[i++] << 12;
          n += base642[i] << 6;
          buf[j++] = n >> 16 & mask[8];
          buf[j] = n >> 8 & mask[8];
        }
        if (tail === 2) {
          n = base642[i++] << 18;
          n += base642[i++] << 12;
          buf[j] = n >> 16 & mask[8];
        }
        return buf;
      },
      // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.
      toString(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);
        }
        let str = "";
        let lineLen = 0;
        function buildLine(c1, c2, c3, c4) {
          switch (lineLen) {
            case 76:
              str += `\r
${c1}${c2}${c3}${c4}`;
              lineLen = 4;
              break;
            case 75:
              str += `${c1}\r
${c2}${c3}${c4}`;
              lineLen = 3;
              break;
            case 74:
              str += `${c1 + c2}\r
${c3}${c4}`;
              lineLen = 2;
              break;
            case 73:
              str += `${c1 + c2 + c3}\r
${c4}`;
              lineLen = 1;
              break;
            default:
              str += c1 + c2 + c3 + c4;
              lineLen += 4;
              break;
          }
        }
        function validate(c) {
          if (c >= 65 && c <= 90) {
            return true;
          }
          if (c >= 97 && c <= 122) {
            return true;
          }
          if (c >= 48 && c <= 57) {
            return true;
          }
          if (c === 43) {
            return true;
          }
          if (c === 47) {
            return true;
          }
          if (c === 61) {
            return true;
          }
          return false;
        }
        for (let i = 0; i < buf.length; i += 4) {
          for (let j = i; j < i + 4; j += 1) {
            if (!validate(buf[j])) {
              throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);
            }
          }
          buildLine(
            String.fromCharCode(buf[i]),
            String.fromCharCode(buf[i + 1]),
            String.fromCharCode(buf[i + 2]),
            String.fromCharCode(buf[i + 3])
          );
        }
        return str;
      }
    };
  })(transformers);
  return transformers;
}
var hasRequiredConverter;
function requireConverter() {
  if (hasRequiredConverter) return converter;
  hasRequiredConverter = 1;
  (function(exports) {
    "use strict;";
    const { Buffer: Buffer2 } = require$$0$4;
    const trans = requireTransformers();
    const UTF8 = "UTF8";
    const UTF16 = "UTF16";
    const UTF16BE = "UTF16BE";
    const UTF16LE = "UTF16LE";
    const UTF32 = "UTF32";
    const UTF32BE = "UTF32BE";
    const UTF32LE = "UTF32LE";
    const UINT7 = "UINT7";
    const ASCII = "ASCII";
    const BINARY = "BINARY";
    const UINT8 = "UINT8";
    const UINT16 = "UINT16";
    const UINT16LE = "UINT16LE";
    const UINT16BE = "UINT16BE";
    const UINT32 = "UINT32";
    const UINT32LE = "UINT32LE";
    const UINT32BE = "UINT32BE";
    const ESCAPED = "ESCAPED";
    const STRING = "STRING";
    const bom8 = function bom82(src) {
      src.type = UTF8;
      const buf = src.data;
      src.bom = 0;
      if (buf.length >= 3) {
        if (buf[0] === 239 && buf[1] === 187 && buf[2] === 191) {
          src.bom = 3;
        }
      }
    };
    const bom16 = function bom162(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF16:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 254 && buf[1] === 255) {
              src.bom = 2;
            } else if (buf[0] === 255 && buf[1] === 254) {
              src.type = UTF16LE;
              src.bom = 2;
            }
          }
          break;
        case UTF16BE:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 254 && buf[1] === 255) {
              src.bom = 2;
            } else if (buf[0] === 255 && buf[1] === 254) {
              throw new TypeError(`src type: "${UTF16BE}" specified but BOM is for "${UTF16LE}"`);
            }
          }
          break;
        case UTF16LE:
          src.type = UTF16LE;
          if (buf.length >= 0) {
            if (buf[0] === 254 && buf[1] === 255) {
              throw new TypeError(`src type: "${UTF16LE}" specified but BOM is for "${UTF16BE}"`);
            } else if (buf[0] === 255 && buf[1] === 254) {
              src.bom = 2;
            }
          }
          break;
        default:
          throw new TypeError(`UTF16 BOM: src type "${src.type}" unrecognized`);
      }
    };
    const bom32 = function bom322(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF32:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              src.bom = 4;
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              src.type = UTF32LE;
              src.bom = 4;
            }
          }
          break;
        case UTF32BE:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              src.bom = 4;
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}"`);
            }
          }
          break;
        case UTF32LE:
          src.type = UTF32LE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              throw new TypeError(`src type: "${UTF32LE}" specified but BOM is for "${UTF32BE}"`);
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              src.bom = 4;
            }
          }
          break;
        default:
          throw new TypeError(`UTF32 BOM: src type "${src.type}" unrecognized`);
      }
    };
    const validateSrc = function validateSrc2(type2, data2) {
      function getType(typeArg) {
        const ret2 = {
          type: "",
          base64: false
        };
        const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;
        const result = rx.exec(typeArg);
        if (result) {
          if (result[2]) {
            ret2.type = result[2].toUpperCase();
          }
          if (result[1]) {
            ret2.base64 = true;
          }
        }
        return ret2;
      }
      const ret = getType(type2.toUpperCase());
      if (ret.base64) {
        if (ret.type === STRING) {
          throw new TypeError(`type: "${type2} "BASE64:" prefix not allowed with type ${STRING}`);
        }
        if (Buffer2.isBuffer(data2)) {
          ret.data = trans.base64.decode(data2);
        } else if (typeof data2 === "string") {
          const buf = Buffer2.from(data2, "ascii");
          ret.data = trans.base64.decode(buf);
        } else {
          throw new TypeError(`type: "${type2} unrecognized data type: typeof(data): ${typeof data2}`);
        }
      } else {
        ret.data = data2;
      }
      switch (ret.type) {
        case UTF8:
          bom8(ret);
          break;
        case UTF16:
        case UTF16BE:
        case UTF16LE:
          bom16(ret);
          break;
        case UTF32:
        case UTF32BE:
        case UTF32LE:
          bom32(ret);
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case STRING:
        case ESCAPED:
          break;
        default:
          throw new TypeError(`type: "${type2}" not recognized`);
      }
      if (ret.type === STRING) {
        if (typeof ret.data !== "string") {
          throw new TypeError(`type: "${type2}" but data is not a string`);
        }
      } else if (!Buffer2.isBuffer(ret.data)) {
        throw new TypeError(`type: "${type2}" but data is not a Buffer`);
      }
      return ret;
    };
    const validateDst = function validateDst2(type2, chars) {
      function getType(typeArg) {
        let fix;
        let rem;
        const ret2 = {
          crlf: false,
          lf: false,
          base64: false,
          type: ""
        };
        const TRUE = true;
        while (TRUE) {
          rem = typeArg;
          fix = typeArg.slice(0, 5);
          if (fix === "CRLF:") {
            ret2.crlf = true;
            rem = typeArg.slice(5);
            break;
          }
          fix = typeArg.slice(0, 3);
          if (fix === "LF:") {
            ret2.lf = true;
            rem = typeArg.slice(3);
            break;
          }
          break;
        }
        fix = rem.split(":");
        if (fix.length === 1) {
          ret2.type = fix[0];
        } else if (fix.length === 2 && fix[1] === "BASE64") {
          ret2.base64 = true;
          ret2.type = fix[0];
        }
        return ret2;
      }
      if (!Array.isArray(chars)) {
        throw new TypeError(`dst chars: not array: "${typeof chars}`);
      }
      if (typeof type2 !== "string") {
        throw new TypeError(`dst type: not string: "${typeof type2}`);
      }
      const ret = getType(type2.toUpperCase());
      switch (ret.type) {
        case UTF8:
        case UTF16BE:
        case UTF16LE:
        case UTF32BE:
        case UTF32LE:
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case ESCAPED:
          break;
        case STRING:
          if (ret.base64) {
            throw new TypeError(`":BASE64" suffix not allowed with type ${STRING}`);
          }
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UTF16:
          ret.type = UTF16BE;
          break;
        case UTF32:
          ret.type = UTF32BE;
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        default:
          throw new TypeError(`dst type unrecognized: "${type2}" : must have form [crlf:|lf:]type[:base64]`);
      }
      return ret;
    };
    const encode2 = function encode3(type2, chars) {
      switch (type2) {
        case UTF8:
          return trans.utf8.encode(chars);
        case UTF16BE:
          return trans.utf16be.encode(chars);
        case UTF16LE:
          return trans.utf16le.encode(chars);
        case UTF32BE:
          return trans.utf32be.encode(chars);
        case UTF32LE:
          return trans.utf32le.encode(chars);
        case UINT7:
          return trans.uint7.encode(chars);
        case UINT8:
          return trans.uint8.encode(chars);
        case UINT16BE:
          return trans.uint16be.encode(chars);
        case UINT16LE:
          return trans.uint16le.encode(chars);
        case UINT32BE:
          return trans.uint32be.encode(chars);
        case UINT32LE:
          return trans.uint32le.encode(chars);
        case STRING:
          return trans.string.encode(chars);
        case ESCAPED:
          return trans.escaped.encode(chars);
        default:
          throw new TypeError(`encode type "${type2}" not recognized`);
      }
    };
    const decode = function decode2(src) {
      switch (src.type) {
        case UTF8:
          return trans.utf8.decode(src.data, src.bom);
        case UTF16LE:
          return trans.utf16le.decode(src.data, src.bom);
        case UTF16BE:
          return trans.utf16be.decode(src.data, src.bom);
        case UTF32BE:
          return trans.utf32be.decode(src.data, src.bom);
        case UTF32LE:
          return trans.utf32le.decode(src.data, src.bom);
        case UINT7:
          return trans.uint7.decode(src.data);
        case UINT8:
          return trans.uint8.decode(src.data);
        case UINT16BE:
          return trans.uint16be.decode(src.data);
        case UINT16LE:
          return trans.uint16le.decode(src.data);
        case UINT32BE:
          return trans.uint32be.decode(src.data);
        case UINT32LE:
          return trans.uint32le.decode(src.data);
        case STRING:
          return trans.string.decode(src.data);
        case ESCAPED:
          return trans.escaped.decode(src.data);
        default:
          throw new TypeError(`decode type "${src.type}" not recognized`);
      }
    };
    exports.decode = function exportsDecode(type2, data2) {
      const src = validateSrc(type2, data2);
      return decode(src);
    };
    exports.encode = function exportsEncode(type2, chars) {
      let c;
      let buf;
      const dst = validateDst(type2, chars);
      if (dst.crlf) {
        c = trans.lineEnds.crlf(chars);
        buf = encode2(dst.type, c);
      } else if (dst.lf) {
        c = trans.lineEnds.lf(chars);
        buf = encode2(dst.type, c);
      } else {
        buf = encode2(dst.type, chars);
      }
      if (dst.base64) {
        buf = trans.base64.encode(buf);
      }
      return buf;
    };
    const convert = function convert2(srcType, srcData, dstType) {
      return exports.encode(dstType, exports.decode(srcType, srcData));
    };
    exports.convert = convert;
  })(converter);
  return converter;
}
var emitcss;
var hasRequiredEmitcss;
function requireEmitcss() {
  if (hasRequiredEmitcss) return emitcss;
  hasRequiredEmitcss = 1;
  emitcss = function emittcss() {
    return "/* This file automatically generated by jsonToless() and LESS. */\n.apg-mono {\n  font-family: monospace;\n}\n.apg-active {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-match {\n  font-weight: bold;\n  color: #264BFF;\n}\n.apg-empty {\n  font-weight: bold;\n  color: #0fbd0f;\n}\n.apg-nomatch {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-lh-match {\n  font-weight: bold;\n  color: #1A97BA;\n}\n.apg-lb-match {\n  font-weight: bold;\n  color: #5F1687;\n}\n.apg-remainder {\n  font-weight: bold;\n  color: #999999;\n}\n.apg-ctrl-char {\n  font-weight: bolder;\n  font-style: italic;\n  font-size: 0.6em;\n}\n.apg-line-end {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-error {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-phrase {\n  color: #000000;\n  background-color: #8caae6;\n}\n.apg-empty-phrase {\n  color: #0fbd0f;\n}\ntable.apg-state {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th,\ntable.apg-state td {\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th:nth-last-child(2),\ntable.apg-state td:nth-last-child(2) {\n  text-align: right;\n}\ntable.apg-state caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-stats {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats th,\ntable.apg-stats td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace th,\ntable.apg-trace td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace th:last-child,\ntable.apg-trace th:nth-last-child(2),\ntable.apg-trace td:last-child,\ntable.apg-trace td:nth-last-child(2) {\n  text-align: left;\n}\ntable.apg-grammar {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-grammar th,\ntable.apg-grammar td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar th:last-child,\ntable.apg-grammar td:last-child {\n  text-align: left;\n}\ntable.apg-rules {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-rules th,\ntable.apg-rules td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules a {\n  color: #003399 !important;\n}\ntable.apg-rules a:hover {\n  color: #8caae6 !important;\n}\ntable.apg-attrs {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-attrs th,\ntable.apg-attrs td {\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs th:nth-child(1),\ntable.apg-attrs th:nth-child(2),\ntable.apg-attrs th:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs td:nth-child(1),\ntable.apg-attrs td:nth-child(2),\ntable.apg-attrs td:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs a {\n  color: #003399 !important;\n}\ntable.apg-attrs a:hover {\n  color: #8caae6 !important;\n}\n";
  };
  return emitcss;
}
var hasRequiredUtilities;
function requireUtilities() {
  if (hasRequiredUtilities) return utilities;
  hasRequiredUtilities = 1;
  (function(exports) {
    const style2 = requireStyle();
    const converter2 = requireConverter();
    const emitCss = requireEmitcss();
    const id2 = requireIdentifiers();
    const thisFileName = "utilities.js: ";
    const getBounds = function(length, begArg, len) {
      let end;
      let beg = begArg;
      const TRUE = true;
      while (TRUE) {
        if (length <= 0) {
          beg = 0;
          end = 0;
          break;
        }
        if (typeof beg !== "number") {
          beg = 0;
          end = length;
          break;
        }
        if (beg >= length) {
          beg = length;
          end = length;
          break;
        }
        if (typeof len !== "number") {
          end = length;
          break;
        }
        end = beg + len;
        if (end > length) {
          end = length;
          break;
        }
        break;
      }
      return {
        beg,
        end
      };
    };
    exports.htmlToPage = function(html, titleArg) {
      let title2;
      if (typeof html !== "string") {
        throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);
      }
      if (typeof titleArg !== "string") {
        title2 = "htmlToPage";
      } else {
        title2 = titleArg;
      }
      let page = "";
      page += "<!DOCTYPE html>\n";
      page += '<html lang="en">\n';
      page += "<head>\n";
      page += '<meta charset="utf-8">\n';
      page += `<title>${title2}</title>
`;
      page += "<style>\n";
      page += emitCss();
      page += "</style>\n";
      page += "</head>\n<body>\n";
      page += `<p>${/* @__PURE__ */ new Date()}</p>
`;
      page += html;
      page += "</body>\n</html>\n";
      return page;
    };
    exports.parserResultToHtml = function(result, caption) {
      let cap = null;
      if (typeof caption === "string" && caption !== "") {
        cap = caption;
      }
      let success;
      let state;
      if (result.success === true) {
        success = `<span class="${style2.CLASS_MATCH}">true</span>`;
      } else {
        success = `<span class="${style2.CLASS_NOMATCH}">false</span>`;
      }
      if (result.state === id2.EMPTY) {
        state = `<span class="${style2.CLASS_EMPTY}">EMPTY</span>`;
      } else if (result.state === id2.MATCH) {
        state = `<span class="${style2.CLASS_MATCH}">MATCH</span>`;
      } else if (result.state === id2.NOMATCH) {
        state = `<span class="${style2.CLASS_NOMATCH}">NOMATCH</span>`;
      } else {
        state = `<span class="${style2.CLASS_NOMATCH}">unrecognized</span>`;
      }
      let html = "";
      html += `<table class="${style2.CLASS_STATE}">
`;
      if (cap) {
        html += `<caption>${cap}</caption>
`;
      }
      html += "<tr><th>state item</th><th>value</th><th>description</th></tr>\n";
      html += `<tr><td>parser success</td><td>${success}</td>
`;
      html += `<td><span class="${style2.CLASS_MATCH}">true</span> if the parse succeeded,
`;
      html += ` <span class="${style2.CLASS_NOMATCH}">false</span> otherwise`;
      html += "<br><i>NOTE: for success, entire string must be matched</i></td></tr>\n";
      html += `<tr><td>parser state</td><td>${state}</td>
`;
      html += `<td><span class="${style2.CLASS_EMPTY}">EMPTY</span>, `;
      html += `<span class="${style2.CLASS_MATCH}">MATCH</span> or 
`;
      html += `<span class="${style2.CLASS_NOMATCH}">NOMATCH</span></td></tr>
`;
      html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>
`;
      html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>
`;
      html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>
`;
      html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>
`;
      html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>
`;
      html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>
`;
      html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>
`;
      html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>
`;
      html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>
`;
      html += "</table>\n";
      return html;
    };
    exports.charsToString = function(chars, phraseIndex, phraseLength) {
      let beg;
      let end;
      if (typeof phraseIndex === "number") {
        if (phraseIndex >= chars.length) {
          return "";
        }
        beg = phraseIndex < 0 ? 0 : phraseIndex;
      } else {
        beg = 0;
      }
      if (typeof phraseLength === "number") {
        if (phraseLength <= 0) {
          return "";
        }
        end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;
      } else {
        end = chars.length;
      }
      if (beg < end) {
        return converter2.encode("UTF16LE", chars.slice(beg, end)).toString("utf16le");
      }
      return "";
    };
    exports.stringToChars = function(string2) {
      return converter2.decode("STRING", string2);
    };
    exports.opcodeToString = function(type2) {
      let ret = "unknown";
      switch (type2) {
        case id2.ALT:
          ret = "ALT";
          break;
        case id2.CAT:
          ret = "CAT";
          break;
        case id2.RNM:
          ret = "RNM";
          break;
        case id2.UDT:
          ret = "UDT";
          break;
        case id2.AND:
          ret = "AND";
          break;
        case id2.NOT:
          ret = "NOT";
          break;
        case id2.REP:
          ret = "REP";
          break;
        case id2.TRG:
          ret = "TRG";
          break;
        case id2.TBS:
          ret = "TBS";
          break;
        case id2.TLS:
          ret = "TLS";
          break;
        case id2.BKR:
          ret = "BKR";
          break;
        case id2.BKA:
          ret = "BKA";
          break;
        case id2.BKN:
          ret = "BKN";
          break;
        case id2.ABG:
          ret = "ABG";
          break;
        case id2.AEN:
          ret = "AEN";
          break;
        default:
          throw new Error("unrecognized opcode");
      }
      return ret;
    };
    exports.stateToString = function(state) {
      let ret = "unknown";
      switch (state) {
        case id2.ACTIVE:
          ret = "ACTIVE";
          break;
        case id2.MATCH:
          ret = "MATCH";
          break;
        case id2.EMPTY:
          ret = "EMPTY";
          break;
        case id2.NOMATCH:
          ret = "NOMATCH";
          break;
        default:
          throw new Error("unrecognized state");
      }
      return ret;
    };
    exports.asciiChars = [
      "NUL",
      "SOH",
      "STX",
      "ETX",
      "EOT",
      "ENQ",
      "ACK",
      "BEL",
      "BS",
      "TAB",
      "LF",
      "VT",
      "FF",
      "CR",
      "SO",
      "SI",
      "DLE",
      "DC1",
      "DC2",
      "DC3",
      "DC4",
      "NAK",
      "SYN",
      "ETB",
      "CAN",
      "EM",
      "SUB",
      "ESC",
      "FS",
      "GS",
      "RS",
      "US",
      "&nbsp;",
      "!",
      "&#34;",
      "#",
      "$",
      "%",
      "&#38;",
      "&#39;",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ":",
      ";",
      "&#60;",
      "=",
      "&#62;",
      "?",
      "@",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "[",
      "&#92;",
      "]",
      "^",
      "_",
      "`",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "{",
      "|",
      "}",
      "~",
      "DEL"
    ];
    exports.charToHex = function(char) {
      let ch = char.toString(16).toUpperCase();
      switch (ch.length) {
        case 1:
        case 3:
        case 7:
          ch = `0${ch}`;
          break;
        case 2:
        case 6:
          ch = `00${ch}`;
          break;
        case 4:
          break;
        case 5:
          ch = `000${ch}`;
          break;
        default:
          throw new Error("unrecognized option");
      }
      return ch;
    };
    exports.charsToDec = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += chars[bounds.beg];
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,${chars[i]}`;
        }
      }
      return ret;
    };
    exports.charsToHex = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\x${exports.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\x${exports.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    exports.charsToHtmlEntities = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          ret += `&#x${chars[i].toString(16)};`;
        }
      }
      return ret;
    };
    function isUnicode(char) {
      if (char >= 55296 && char <= 57343) {
        return false;
      }
      if (char > 1114111) {
        return false;
      }
      return true;
    }
    exports.charsToUnicode = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          if (isUnicode(chars[i])) {
            ret += `&#${chars[i]};`;
          } else {
            ret += ` U+${exports.charToHex(chars[i])}`;
          }
        }
      }
      return ret;
    };
    exports.charsToJsUnicode = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\u${exports.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\u${exports.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    exports.charsToAscii = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        const char = chars[i];
        if (char >= 32 && char <= 126) {
          ret += String.fromCharCode(char);
        } else {
          ret += `\\x${exports.charToHex(char)}`;
        }
      }
      return ret;
    };
    exports.charsToAsciiHtml = function(chars, beg, len) {
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);
      }
      let html = "";
      let char;
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        char = chars[i];
        if (char < 32 || char === 127) {
          html += `<span class="${style2.CLASS_CTRLCHAR}">${exports.asciiChars[char]}</span>`;
        } else if (char > 127) {
          html += `<span class="${style2.CLASS_CTRLCHAR}">U+${exports.charToHex(char)}</span>`;
        } else {
          html += exports.asciiChars[char];
        }
      }
      return html;
    };
    exports.stringToAsciiHtml = function(str) {
      const chars = converter2.decode("STRING", str);
      return this.charsToAsciiHtml(chars);
    };
  })(utilities);
  return utilities;
}
var ast;
var hasRequiredAst;
function requireAst() {
  if (hasRequiredAst) return ast;
  hasRequiredAst = 1;
  ast = function exportsAst() {
    const id2 = requireIdentifiers();
    const utils2 = requireUtilities();
    const thisFileName = "ast.js: ";
    const that = this;
    let rules = null;
    let udts = null;
    let chars = null;
    let nodeCount = 0;
    const nodesDefined = [];
    const nodeCallbacks = [];
    const stack = [];
    const records = [];
    this.callbacks = [];
    this.astObject = "astObject";
    this.init = function init(rulesIn, udtsIn, charsIn) {
      stack.length = 0;
      records.length = 0;
      nodesDefined.length = 0;
      nodeCount = 0;
      rules = rulesIn;
      udts = udtsIn;
      chars = charsIn;
      let i;
      const list = [];
      for (i = 0; i < rules.length; i += 1) {
        list.push(rules[i].lower);
      }
      for (i = 0; i < udts.length; i += 1) {
        list.push(udts[i].lower);
      }
      nodeCount = rules.length + udts.length;
      for (i = 0; i < nodeCount; i += 1) {
        nodesDefined[i] = false;
        nodeCallbacks[i] = null;
      }
      for (const index in that.callbacks) {
        const lower = index.toLowerCase();
        i = list.indexOf(lower);
        if (i < 0) {
          throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);
        }
        if (typeof that.callbacks[index] === "function") {
          nodesDefined[i] = true;
          nodeCallbacks[i] = that.callbacks[index];
        }
        if (that.callbacks[index] === true) {
          nodesDefined[i] = true;
        }
      }
    };
    this.ruleDefined = function ruleDefined(index) {
      return nodesDefined[index] !== false;
    };
    this.udtDefined = function udtDefined(index) {
      return nodesDefined[rules.length + index] !== false;
    };
    this.down = function down(callbackIndex, name) {
      const thisIndex = records.length;
      stack.push(thisIndex);
      records.push({
        name,
        thisIndex,
        thatIndex: null,
        state: id2.SEM_PRE,
        callbackIndex,
        phraseIndex: null,
        phraseLength: null,
        stack: stack.length
      });
      return thisIndex;
    };
    this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {
      const thisIndex = records.length;
      const thatIndex = stack.pop();
      records.push({
        name,
        thisIndex,
        thatIndex,
        state: id2.SEM_POST,
        callbackIndex,
        phraseIndex,
        phraseLength,
        stack: stack.length
      });
      records[thatIndex].thatIndex = thisIndex;
      records[thatIndex].phraseIndex = phraseIndex;
      records[thatIndex].phraseLength = phraseLength;
      return thisIndex;
    };
    this.translate = function translate(data2) {
      let ret;
      let callback;
      let record;
      for (let i = 0; i < records.length; i += 1) {
        record = records[i];
        callback = nodeCallbacks[record.callbackIndex];
        if (record.state === id2.SEM_PRE) {
          if (callback !== null) {
            ret = callback(id2.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data2);
            if (ret === id2.SEM_SKIP) {
              i = record.thatIndex;
            }
          }
        } else if (callback !== null) {
          callback(id2.SEM_POST, chars, record.phraseIndex, record.phraseLength, data2);
        }
      }
    };
    this.setLength = function setLength(length) {
      records.length = length;
      if (length > 0) {
        stack.length = records[length - 1].stack;
      } else {
        stack.length = 0;
      }
    };
    this.getLength = function getLength() {
      return records.length;
    };
    function indent(n) {
      let ret = "";
      for (let i = 0; i < n; i += 1) {
        ret += " ";
      }
      return ret;
    }
    this.toXml = function toSml(modeArg) {
      let display = utils2.charsToDec;
      let caption = "decimal integer character codes";
      if (typeof modeArg === "string" && modeArg.length >= 3) {
        const mode2 = modeArg.slice(0, 3).toLowerCase();
        if (mode2 === "asc") {
          display = utils2.charsToAscii;
          caption = "ASCII for printing characters, hex for non-printing";
        } else if (mode2 === "hex") {
          display = utils2.charsToHex;
          caption = "hexadecimal integer character codes";
        } else if (mode2 === "uni") {
          display = utils2.charsToUnicode;
          caption = "Unicode UTF-32 integer character codes";
        }
      }
      let xml = "";
      let depth = 0;
      xml += '<?xml version="1.0" encoding="utf-8"?>\n';
      xml += `<root nodes="${records.length / 2}" characters="${chars.length}">
`;
      xml += `<!-- input string, ${caption} -->
`;
      xml += indent(depth + 2);
      xml += display(chars);
      xml += "\n";
      records.forEach((rec) => {
        if (rec.state === id2.SEM_PRE) {
          depth += 1;
          xml += indent(depth);
          xml += `<node name="${rec.name}" index="${rec.phraseIndex}" length="${rec.phraseLength}">
`;
          xml += indent(depth + 2);
          xml += display(chars, rec.phraseIndex, rec.phraseLength);
          xml += "\n";
        } else {
          xml += indent(depth);
          xml += `</node><!-- name="${rec.name}" -->
`;
          depth -= 1;
        }
      });
      xml += "</root>\n";
      return xml;
    };
    this.phrases = function phrases() {
      const obj = {};
      let i;
      let record;
      for (i = 0; i < records.length; i += 1) {
        record = records[i];
        if (record.state === id2.SEM_PRE) {
          if (!Array.isArray(obj[record.name])) {
            obj[record.name] = [];
          }
          obj[record.name].push({
            index: record.phraseIndex,
            length: record.phraseLength
          });
        }
      }
      return obj;
    };
  };
  return ast;
}
var circularBuffer;
var hasRequiredCircularBuffer;
function requireCircularBuffer() {
  if (hasRequiredCircularBuffer) return circularBuffer;
  hasRequiredCircularBuffer = 1;
  circularBuffer = function exportsCircularBuffer() {
    "use strict;";
    const thisFileName = "circular-buffer.js: ";
    let itemIndex = -1;
    let maxListSize = 0;
    this.init = function init(size) {
      if (typeof size !== "number" || size <= 0) {
        throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);
      }
      maxListSize = Math.ceil(size);
      itemIndex = -1;
    };
    this.increment = function increment() {
      itemIndex += 1;
      return (itemIndex + maxListSize) % maxListSize;
    };
    this.maxSize = function maxSize() {
      return maxListSize;
    };
    this.items = function items() {
      return itemIndex + 1;
    };
    this.getListIndex = function getListIndex(item) {
      if (itemIndex === -1) {
        return -1;
      }
      if (item < 0 || item > itemIndex) {
        return -1;
      }
      if (itemIndex - item >= maxListSize) {
        return -1;
      }
      return (item + maxListSize) % maxListSize;
    };
    this.forEach = function forEach2(fn) {
      if (itemIndex === -1) {
        return;
      }
      if (itemIndex < maxListSize) {
        for (let i = 0; i <= itemIndex; i += 1) {
          fn(i, i);
        }
        return;
      }
      for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {
        const listIndex = (i + maxListSize) % maxListSize;
        fn(listIndex, i);
      }
    };
  };
  return circularBuffer;
}
var parser;
var hasRequiredParser;
function requireParser() {
  if (hasRequiredParser) return parser;
  hasRequiredParser = 1;
  parser = function parser2() {
    const id2 = requireIdentifiers();
    const utils2 = requireUtilities();
    const thisFileName = "parser.js: ";
    const thisThis = this;
    let opExecute;
    this.ast = null;
    this.stats = null;
    this.trace = null;
    this.callbacks = [];
    let opcodes = null;
    let chars = null;
    let charsBegin;
    let charsLength;
    let charsEnd;
    let lookAround;
    let treeDepth = 0;
    let maxTreeDepth = 0;
    let nodeHits = 0;
    let ruleCallbacks = null;
    let udtCallbacks = null;
    let rules = null;
    let udts = null;
    let syntaxData = null;
    let maxMatched = 0;
    let limitTreeDepth = Infinity;
    let limitNodeHits = Infinity;
    const evaluateRule = function evaluateRule2(ruleIndex, phraseIndex, sysData) {
      const functionName = `${thisFileName}evaluateRule(): `;
      if (ruleIndex >= rules.length) {
        throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);
      }
      if (phraseIndex >= charsEnd) {
        throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
      }
      const { length } = opcodes;
      opcodes.push({
        type: id2.RNM,
        index: ruleIndex
      });
      opExecute(length, phraseIndex, sysData);
      opcodes.pop();
    };
    const evaluateUdt = function(udtIndex, phraseIndex, sysData) {
      const functionName = `${thisFileName}evaluateUdt(): `;
      if (udtIndex >= udts.length) {
        throw new Error(`${functionName}udt index: ${udtIndex} out of range`);
      }
      if (phraseIndex >= charsEnd) {
        throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
      }
      const { length } = opcodes;
      opcodes.push({
        type: id2.UDT,
        empty: udts[udtIndex].empty,
        index: udtIndex
      });
      opExecute(length, phraseIndex, sysData);
      opcodes.pop();
    };
    const clear = function() {
      treeDepth = 0;
      maxTreeDepth = 0;
      nodeHits = 0;
      maxMatched = 0;
      lookAround = [
        {
          lookAround: id2.LOOKAROUND_NONE,
          anchor: 0,
          charsEnd: 0,
          charsLength: 0
        }
      ];
      rules = null;
      udts = null;
      chars = null;
      charsBegin = 0;
      charsLength = 0;
      charsEnd = 0;
      ruleCallbacks = null;
      udtCallbacks = null;
      syntaxData = null;
      opcodes = null;
    };
    const backRef = function() {
      const stack = [];
      const init = function() {
        const obj = {};
        rules.forEach((rule) => {
          if (rule.isBkr) {
            obj[rule.lower] = null;
          }
        });
        if (udts.length > 0) {
          udts.forEach((udt) => {
            if (udt.isBkr) {
              obj[udt.lower] = null;
            }
          });
        }
        stack.push(obj);
      };
      const copy = function() {
        const top = stack[stack.length - 1];
        const obj = {};
        for (const name in top) {
          obj[name] = top[name];
        }
        return obj;
      };
      this.push = function push() {
        stack.push(copy());
      };
      this.pop = function pop(lengthArg) {
        let length = lengthArg;
        if (!length) {
          length = stack.length - 1;
        }
        if (length < 1 || length > stack.length) {
          throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);
        }
        stack.length = length;
        return stack[stack.length - 1];
      };
      this.length = function length() {
        return stack.length;
      };
      this.savePhrase = function savePhrase(name, index, length) {
        stack[stack.length - 1][name] = {
          phraseIndex: index,
          phraseLength: length
        };
      };
      this.getPhrase = function(name) {
        return stack[stack.length - 1][name];
      };
      init();
    };
    const systemData = function systemData2() {
      const thisData = this;
      this.state = id2.ACTIVE;
      this.phraseLength = 0;
      this.ruleIndex = 0;
      this.udtIndex = 0;
      this.lookAround = lookAround[lookAround.length - 1];
      this.uFrame = new backRef();
      this.pFrame = new backRef();
      this.evaluateRule = evaluateRule;
      this.evaluateUdt = evaluateUdt;
      this.refresh = function refresh2() {
        thisData.state = id2.ACTIVE;
        thisData.phraseLength = 0;
        thisData.lookAround = lookAround[lookAround.length - 1];
      };
    };
    const lookAroundValue = function lookAroundValue2() {
      return lookAround[lookAround.length - 1];
    };
    const inLookAround = function inLookAround2() {
      return lookAround.length > 1;
    };
    const inLookBehind = function() {
      return lookAround[lookAround.length - 1].lookAround === id2.LOOKAROUND_BEHIND;
    };
    const initializeAst = function() {
      const functionName = `${thisFileName}initializeAst(): `;
      const TRUE = true;
      while (TRUE) {
        if (thisThis.ast === void 0) {
          thisThis.ast = null;
          break;
        }
        if (thisThis.ast === null) {
          break;
        }
        if (thisThis.ast.astObject !== "astObject") {
          throw new Error(`${functionName}ast object not recognized`);
        }
        break;
      }
      if (thisThis.ast !== null) {
        thisThis.ast.init(rules, udts, chars);
      }
    };
    const initializeTrace = function() {
      const functionName = `${thisFileName}initializeTrace(): `;
      const TRUE = true;
      while (TRUE) {
        if (thisThis.trace === void 0) {
          thisThis.trace = null;
          break;
        }
        if (thisThis.trace === null) {
          break;
        }
        if (thisThis.trace.traceObject !== "traceObject") {
          throw new Error(`${functionName}trace object not recognized`);
        }
        break;
      }
      if (thisThis.trace !== null) {
        thisThis.trace.init(rules, udts, chars);
      }
    };
    const initializeStats = function() {
      const functionName = `${thisFileName}initializeStats(): `;
      const TRUE = true;
      while (TRUE) {
        if (thisThis.stats === void 0) {
          thisThis.stats = null;
          break;
        }
        if (thisThis.stats === null) {
          break;
        }
        if (thisThis.stats.statsObject !== "statsObject") {
          throw new Error(`${functionName}stats object not recognized`);
        }
        break;
      }
      if (thisThis.stats !== null) {
        thisThis.stats.init(rules, udts);
      }
    };
    const initializeGrammar = function(grammar) {
      const functionName = `${thisFileName}initializeGrammar(): `;
      if (!grammar) {
        throw new Error(`${functionName}grammar object undefined`);
      }
      if (grammar.grammarObject !== "grammarObject") {
        throw new Error(`${functionName}bad grammar object`);
      }
      rules = grammar.rules;
      udts = grammar.udts;
    };
    const initializeStartRule = function(startRule) {
      const functionName = `${thisFileName}initializeStartRule(): `;
      let start = null;
      if (typeof startRule === "number") {
        if (startRule >= rules.length) {
          throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);
        }
        start = startRule;
      } else if (typeof startRule === "string") {
        const lower = startRule.toLowerCase();
        for (let i = 0; i < rules.length; i += 1) {
          if (lower === rules[i].lower) {
            start = rules[i].index;
            break;
          }
        }
        if (start === null) {
          throw new Error(`${functionName}start rule name '${startRule}' not recognized`);
        }
      } else {
        throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);
      }
      return start;
    };
    const initializeInputChars = function initializeInputChars2(inputArg, begArg, lenArg) {
      const functionName = `${thisFileName}initializeInputChars(): `;
      let input = inputArg;
      let beg = begArg;
      let len = lenArg;
      if (input === void 0) {
        throw new Error(`${functionName}input string is undefined`);
      }
      if (input === null) {
        throw new Error(`${functionName}input string is null`);
      }
      if (typeof input === "string") {
        input = utils2.stringToChars(input);
      } else if (!Array.isArray(input)) {
        throw new Error(`${functionName}input string is not a string or array`);
      }
      if (input.length > 0) {
        if (typeof input[0] !== "number") {
          throw new Error(`${functionName}input string not an array of integers`);
        }
      }
      if (typeof beg !== "number") {
        beg = 0;
      } else {
        beg = Math.floor(beg);
        if (beg < 0 || beg > input.length) {
          throw new Error(`${functionName}input beginning index out of range: ${beg}`);
        }
      }
      if (typeof len !== "number") {
        len = input.length - beg;
      } else {
        len = Math.floor(len);
        if (len < 0 || len > input.length - beg) {
          throw new Error(`${functionName}input length out of range: ${len}`);
        }
      }
      chars = input;
      charsBegin = beg;
      charsLength = len;
      charsEnd = charsBegin + charsLength;
    };
    const initializeCallbacks = function() {
      const functionName = `${thisFileName}initializeCallbacks(): `;
      let i;
      ruleCallbacks = [];
      udtCallbacks = [];
      for (i = 0; i < rules.length; i += 1) {
        ruleCallbacks[i] = null;
      }
      for (i = 0; i < udts.length; i += 1) {
        udtCallbacks[i] = null;
      }
      let func;
      const list = [];
      for (i = 0; i < rules.length; i += 1) {
        list.push(rules[i].lower);
      }
      for (i = 0; i < udts.length; i += 1) {
        list.push(udts[i].lower);
      }
      for (const index in thisThis.callbacks) {
        i = list.indexOf(index.toLowerCase());
        if (i < 0) {
          throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);
        }
        func = thisThis.callbacks[index];
        if (!func) {
          func = null;
        }
        if (typeof func === "function" || func === null) {
          if (i < rules.length) {
            ruleCallbacks[i] = func;
          } else {
            udtCallbacks[i - rules.length] = func;
          }
        } else {
          throw new Error(
            `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`
          );
        }
      }
      for (i = 0; i < udts.length; i += 1) {
        if (udtCallbacks[i] === null) {
          throw new Error(
            `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`
          );
        }
      }
    };
    this.setMaxTreeDepth = function(depth) {
      if (typeof depth !== "number") {
        throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
      }
      limitTreeDepth = Math.floor(depth);
      if (limitTreeDepth <= 0) {
        throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
      }
    };
    this.setMaxNodeHits = function(hits) {
      if (typeof hits !== "number") {
        throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
      }
      limitNodeHits = Math.floor(hits);
      if (limitNodeHits <= 0) {
        throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
      }
    };
    const privateParse = function(grammar, startRuleArg, callbackData) {
      let success;
      const functionName = `${thisFileName}parse(): `;
      initializeGrammar(grammar);
      const startRule = initializeStartRule(startRuleArg);
      initializeCallbacks();
      initializeTrace();
      initializeStats();
      initializeAst();
      const sysData = new systemData();
      if (!(callbackData === void 0 || callbackData === null)) {
        syntaxData = callbackData;
      }
      opcodes = [
        {
          type: id2.RNM,
          index: startRule
        }
      ];
      opExecute(0, charsBegin, sysData);
      opcodes = null;
      switch (sysData.state) {
        case id2.ACTIVE:
          throw new Error(`${functionName}final state should never be 'ACTIVE'`);
        case id2.NOMATCH:
          success = false;
          break;
        case id2.EMPTY:
        case id2.MATCH:
          if (sysData.phraseLength === charsLength) {
            success = true;
          } else {
            success = false;
          }
          break;
        default:
          throw new Error("unrecognized state");
      }
      return {
        success,
        state: sysData.state,
        length: charsLength,
        matched: sysData.phraseLength,
        maxMatched,
        maxTreeDepth,
        nodeHits,
        inputLength: chars.length,
        subBegin: charsBegin,
        subEnd: charsEnd,
        subLength: charsLength
      };
    };
    this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {
      clear();
      initializeInputChars(inputChars, inputIndex, inputLength);
      return privateParse(grammar, startRule, callbackData);
    };
    this.parse = function parse(grammar, startRule, inputChars, callbackData) {
      clear();
      initializeInputChars(inputChars, 0, inputChars.length);
      return privateParse(grammar, startRule, callbackData);
    };
    const opALT = function(opIndex, phraseIndex, sysData) {
      const op = opcodes[opIndex];
      for (let i = 0; i < op.children.length; i += 1) {
        opExecute(op.children[i], phraseIndex, sysData);
        if (sysData.state !== id2.NOMATCH) {
          break;
        }
      }
    };
    const opCAT = function(opIndex, phraseIndex, sysData) {
      let success;
      let astLength;
      let catCharIndex;
      let catPhrase;
      const op = opcodes[opIndex];
      const ulen = sysData.uFrame.length();
      const plen = sysData.pFrame.length();
      if (thisThis.ast) {
        astLength = thisThis.ast.getLength();
      }
      success = true;
      catCharIndex = phraseIndex;
      catPhrase = 0;
      for (let i = 0; i < op.children.length; i += 1) {
        opExecute(op.children[i], catCharIndex, sysData);
        if (sysData.state === id2.NOMATCH) {
          success = false;
          break;
        } else {
          catCharIndex += sysData.phraseLength;
          catPhrase += sysData.phraseLength;
        }
      }
      if (success) {
        sysData.state = catPhrase === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = catPhrase;
      } else {
        sysData.state = id2.NOMATCH;
        sysData.phraseLength = 0;
        sysData.uFrame.pop(ulen);
        sysData.pFrame.pop(plen);
        if (thisThis.ast) {
          thisThis.ast.setLength(astLength);
        }
      }
    };
    const opREP = function(opIndex, phraseIndex, sysData) {
      let astLength;
      let repCharIndex;
      let repPhrase;
      let repCount;
      const op = opcodes[opIndex];
      if (op.max === 0) {
        sysData.state = id2.EMPTY;
        sysData.phraseLength = 0;
        return;
      }
      repCharIndex = phraseIndex;
      repPhrase = 0;
      repCount = 0;
      const ulen = sysData.uFrame.length();
      const plen = sysData.pFrame.length();
      if (thisThis.ast) {
        astLength = thisThis.ast.getLength();
      }
      const TRUE = true;
      while (TRUE) {
        if (repCharIndex >= charsEnd) {
          break;
        }
        opExecute(opIndex + 1, repCharIndex, sysData);
        if (sysData.state === id2.NOMATCH) {
          break;
        }
        if (sysData.state === id2.EMPTY) {
          break;
        }
        repCount += 1;
        repPhrase += sysData.phraseLength;
        repCharIndex += sysData.phraseLength;
        if (repCount === op.max) {
          break;
        }
      }
      if (sysData.state === id2.EMPTY) {
        sysData.state = repPhrase === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = repPhrase;
      } else if (repCount >= op.min) {
        sysData.state = repPhrase === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = repPhrase;
      } else {
        sysData.state = id2.NOMATCH;
        sysData.phraseLength = 0;
        sysData.uFrame.pop(ulen);
        sysData.pFrame.pop(plen);
        if (thisThis.ast) {
          thisThis.ast.setLength(astLength);
        }
      }
    };
    const validateRnmCallbackResult = function(rule, sysData, charsLeft, down) {
      if (sysData.phraseLength > charsLeft) {
        let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;
        str += `sysData.phraseLength: ${sysData.phraseLength}`;
        str += ` must be <= remaining chars: ${charsLeft}`;
        throw new Error(str);
      }
      switch (sysData.state) {
        case id2.ACTIVE:
          if (down !== true) {
            throw new Error(
              `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`
            );
          }
          break;
        case id2.EMPTY:
          sysData.phraseLength = 0;
          break;
        case id2.MATCH:
          if (sysData.phraseLength === 0) {
            sysData.state = id2.EMPTY;
          }
          break;
        case id2.NOMATCH:
          sysData.phraseLength = 0;
          break;
        default:
          throw new Error(
            `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`
          );
      }
    };
    const opRNM = function(opIndex, phraseIndex, sysData) {
      let astLength;
      let astDefined;
      let savedOpcodes;
      let ulen;
      let plen;
      let saveFrame;
      const op = opcodes[opIndex];
      const rule = rules[op.index];
      const callback = ruleCallbacks[rule.index];
      const notLookAround = !inLookAround();
      if (notLookAround) {
        astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);
        if (astDefined) {
          astLength = thisThis.ast.getLength();
          thisThis.ast.down(op.index, rules[op.index].name);
        }
        ulen = sysData.uFrame.length();
        plen = sysData.pFrame.length();
        sysData.uFrame.push();
        sysData.pFrame.push();
        saveFrame = sysData.pFrame;
        sysData.pFrame = new backRef();
      }
      if (callback === null) {
        savedOpcodes = opcodes;
        opcodes = rule.opcodes;
        opExecute(0, phraseIndex, sysData);
        opcodes = savedOpcodes;
      } else {
        const charsLeft = charsEnd - phraseIndex;
        sysData.ruleIndex = rule.index;
        callback(sysData, chars, phraseIndex, syntaxData);
        validateRnmCallbackResult(rule, sysData, charsLeft, true);
        if (sysData.state === id2.ACTIVE) {
          savedOpcodes = opcodes;
          opcodes = rule.opcodes;
          opExecute(0, phraseIndex, sysData);
          opcodes = savedOpcodes;
          sysData.ruleIndex = rule.index;
          callback(sysData, chars, phraseIndex, syntaxData);
          validateRnmCallbackResult(rule, sysData, charsLeft, false);
        }
      }
      if (notLookAround) {
        if (astDefined) {
          if (sysData.state === id2.NOMATCH) {
            thisThis.ast.setLength(astLength);
          } else {
            thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);
          }
        }
        sysData.pFrame = saveFrame;
        if (sysData.state === id2.NOMATCH) {
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
        } else if (rule.isBkr) {
          sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
          sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
        }
      }
    };
    const validateUdtCallbackResult = function(udt, sysData, charsLeft) {
      if (sysData.phraseLength > charsLeft) {
        let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;
        str += `sysData.phraseLength: ${sysData.phraseLength}`;
        str += ` must be <= remaining chars: ${charsLeft}`;
        throw new Error(str);
      }
      switch (sysData.state) {
        case id2.ACTIVE:
          throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);
        case id2.EMPTY:
          if (udt.empty === false) {
            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
          } else {
            sysData.phraseLength = 0;
          }
          break;
        case id2.MATCH:
          if (sysData.phraseLength === 0) {
            if (udt.empty === false) {
              throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
            } else {
              sysData.state = id2.EMPTY;
            }
          }
          break;
        case id2.NOMATCH:
          sysData.phraseLength = 0;
          break;
        default:
          throw new Error(
            `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`
          );
      }
    };
    const opUDT = function(opIndex, phraseIndex, sysData) {
      let astLength;
      let astIndex;
      let astDefined;
      let ulen;
      let plen;
      let saveFrame;
      const op = opcodes[opIndex];
      const udt = udts[op.index];
      sysData.UdtIndex = udt.index;
      const notLookAround = !inLookAround();
      if (notLookAround) {
        astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);
        if (astDefined) {
          astIndex = rules.length + op.index;
          astLength = thisThis.ast.getLength();
          thisThis.ast.down(astIndex, udt.name);
        }
        ulen = sysData.uFrame.length();
        plen = sysData.pFrame.length();
        sysData.uFrame.push();
        sysData.pFrame.push();
        saveFrame = sysData.pFrame;
        sysData.pFrame = new backRef();
      }
      const charsLeft = charsEnd - phraseIndex;
      udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);
      validateUdtCallbackResult(udt, sysData, charsLeft);
      if (notLookAround) {
        if (astDefined) {
          if (sysData.state === id2.NOMATCH) {
            thisThis.ast.setLength(astLength);
          } else {
            thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);
          }
        }
        sysData.pFrame = saveFrame;
        if (sysData.state === id2.NOMATCH) {
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
        } else if (udt.isBkr) {
          sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
          sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
        }
      }
    };
    const opAND = function(opIndex, phraseIndex, sysData) {
      lookAround.push({
        lookAround: id2.LOOKAROUND_AHEAD,
        anchor: phraseIndex,
        charsEnd,
        charsLength
      });
      charsEnd = chars.length;
      charsLength = chars.length - charsBegin;
      opExecute(opIndex + 1, phraseIndex, sysData);
      const pop = lookAround.pop();
      charsEnd = pop.charsEnd;
      charsLength = pop.charsLength;
      sysData.phraseLength = 0;
      switch (sysData.state) {
        case id2.EMPTY:
          sysData.state = id2.EMPTY;
          break;
        case id2.MATCH:
          sysData.state = id2.EMPTY;
          break;
        case id2.NOMATCH:
          sysData.state = id2.NOMATCH;
          break;
        default:
          throw new Error(`opAND: invalid state ${sysData.state}`);
      }
    };
    const opNOT = function(opIndex, phraseIndex, sysData) {
      lookAround.push({
        lookAround: id2.LOOKAROUND_AHEAD,
        anchor: phraseIndex,
        charsEnd,
        charsLength
      });
      charsEnd = chars.length;
      charsLength = chars.length - charsBegin;
      opExecute(opIndex + 1, phraseIndex, sysData);
      const pop = lookAround.pop();
      charsEnd = pop.charsEnd;
      charsLength = pop.charsLength;
      sysData.phraseLength = 0;
      switch (sysData.state) {
        case id2.EMPTY:
        case id2.MATCH:
          sysData.state = id2.NOMATCH;
          break;
        case id2.NOMATCH:
          sysData.state = id2.EMPTY;
          break;
        default:
          throw new Error(`opNOT: invalid state ${sysData.state}`);
      }
    };
    const opTRG = function(opIndex, phraseIndex, sysData) {
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      if (phraseIndex < charsEnd) {
        if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {
          sysData.state = id2.MATCH;
          sysData.phraseLength = 1;
        }
      }
    };
    const opTBS = function(opIndex, phraseIndex, sysData) {
      let i;
      const op = opcodes[opIndex];
      const len = op.string.length;
      sysData.state = id2.NOMATCH;
      if (phraseIndex + len <= charsEnd) {
        for (i = 0; i < len; i += 1) {
          if (chars[phraseIndex + i] !== op.string[i]) {
            return;
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    const opTLS = function(opIndex, phraseIndex, sysData) {
      let i;
      let code;
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      const len = op.string.length;
      if (len === 0) {
        sysData.state = id2.EMPTY;
        return;
      }
      if (phraseIndex + len <= charsEnd) {
        for (i = 0; i < len; i += 1) {
          code = chars[phraseIndex + i];
          if (code >= 65 && code <= 90) {
            code += 32;
          }
          if (code !== op.string[i]) {
            return;
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    const opABG = function(opIndex, phraseIndex, sysData) {
      sysData.state = id2.NOMATCH;
      sysData.phraseLength = 0;
      sysData.state = phraseIndex === 0 ? id2.EMPTY : id2.NOMATCH;
    };
    const opAEN = function(opIndex, phraseIndex, sysData) {
      sysData.state = id2.NOMATCH;
      sysData.phraseLength = 0;
      sysData.state = phraseIndex === chars.length ? id2.EMPTY : id2.NOMATCH;
    };
    const opBKR = function(opIndex, phraseIndex, sysData) {
      let i;
      let code;
      let lmcode;
      let lower;
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      if (op.index < rules.length) {
        lower = rules[op.index].lower;
      } else {
        lower = udts[op.index - rules.length].lower;
      }
      const frame = op.bkrMode === id2.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
      const insensitive = op.bkrCase === id2.BKR_MODE_CI;
      if (frame === null) {
        return;
      }
      const lmIndex = frame.phraseIndex;
      const len = frame.phraseLength;
      if (len === 0) {
        sysData.state = id2.EMPTY;
        return;
      }
      if (phraseIndex + len <= charsEnd) {
        if (insensitive) {
          for (i = 0; i < len; i += 1) {
            code = chars[phraseIndex + i];
            lmcode = chars[lmIndex + i];
            if (code >= 65 && code <= 90) {
              code += 32;
            }
            if (lmcode >= 65 && lmcode <= 90) {
              lmcode += 32;
            }
            if (code !== lmcode) {
              return;
            }
          }
          sysData.state = id2.MATCH;
          sysData.phraseLength = len;
        } else {
          for (i = 0; i < len; i += 1) {
            code = chars[phraseIndex + i];
            lmcode = chars[lmIndex + i];
            if (code !== lmcode) {
              return;
            }
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    const opBKA = function(opIndex, phraseIndex, sysData) {
      lookAround.push({
        lookAround: id2.LOOKAROUND_BEHIND,
        anchor: phraseIndex
      });
      opExecute(opIndex + 1, phraseIndex, sysData);
      lookAround.pop();
      sysData.phraseLength = 0;
      switch (sysData.state) {
        case id2.EMPTY:
          sysData.state = id2.EMPTY;
          break;
        case id2.MATCH:
          sysData.state = id2.EMPTY;
          break;
        case id2.NOMATCH:
          sysData.state = id2.NOMATCH;
          break;
        default:
          throw new Error(`opBKA: invalid state ${sysData.state}`);
      }
    };
    const opBKN = function(opIndex, phraseIndex, sysData) {
      lookAround.push({
        lookAround: id2.LOOKAROUND_BEHIND,
        anchor: phraseIndex
      });
      opExecute(opIndex + 1, phraseIndex, sysData);
      lookAround.pop();
      sysData.phraseLength = 0;
      switch (sysData.state) {
        case id2.EMPTY:
        case id2.MATCH:
          sysData.state = id2.NOMATCH;
          break;
        case id2.NOMATCH:
          sysData.state = id2.EMPTY;
          break;
        default:
          throw new Error(`opBKN: invalid state ${sysData.state}`);
      }
    };
    const opCATBehind = function(opIndex, phraseIndex, sysData) {
      let success;
      let astLength;
      let catCharIndex;
      let catMatched;
      const op = opcodes[opIndex];
      const ulen = sysData.uFrame.length();
      const plen = sysData.pFrame.length();
      if (thisThis.ast) {
        astLength = thisThis.ast.getLength();
      }
      success = true;
      catCharIndex = phraseIndex;
      catMatched = 0;
      for (let i = op.children.length - 1; i >= 0; i -= 1) {
        opExecute(op.children[i], catCharIndex, sysData);
        catCharIndex -= sysData.phraseLength;
        catMatched += sysData.phraseLength;
        if (sysData.state === id2.NOMATCH) {
          success = false;
          break;
        }
      }
      if (success) {
        sysData.state = catMatched === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = catMatched;
      } else {
        sysData.state = id2.NOMATCH;
        sysData.phraseLength = 0;
        sysData.uFrame.pop(ulen);
        sysData.pFrame.pop(plen);
        if (thisThis.ast) {
          thisThis.ast.setLength(astLength);
        }
      }
    };
    const opREPBehind = function(opIndex, phraseIndex, sysData) {
      let astLength;
      let repCharIndex;
      let repPhrase;
      let repCount;
      const op = opcodes[opIndex];
      repCharIndex = phraseIndex;
      repPhrase = 0;
      repCount = 0;
      const ulen = sysData.uFrame.length();
      const plen = sysData.pFrame.length();
      if (thisThis.ast) {
        astLength = thisThis.ast.getLength();
      }
      const TRUE = true;
      while (TRUE) {
        if (repCharIndex <= 0) {
          break;
        }
        opExecute(opIndex + 1, repCharIndex, sysData);
        if (sysData.state === id2.NOMATCH) {
          break;
        }
        if (sysData.state === id2.EMPTY) {
          break;
        }
        repCount += 1;
        repPhrase += sysData.phraseLength;
        repCharIndex -= sysData.phraseLength;
        if (repCount === op.max) {
          break;
        }
      }
      if (sysData.state === id2.EMPTY) {
        sysData.state = repPhrase === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = repPhrase;
      } else if (repCount >= op.min) {
        sysData.state = repPhrase === 0 ? id2.EMPTY : id2.MATCH;
        sysData.phraseLength = repPhrase;
      } else {
        sysData.state = id2.NOMATCH;
        sysData.phraseLength = 0;
        sysData.uFrame.pop(ulen);
        sysData.pFrame.pop(plen);
        if (thisThis.ast) {
          thisThis.ast.setLength(astLength);
        }
      }
    };
    const opTRGBehind = function(opIndex, phraseIndex, sysData) {
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      sysData.phraseLength = 0;
      if (phraseIndex > 0) {
        const char = chars[phraseIndex - 1];
        if (op.min <= char && char <= op.max) {
          sysData.state = id2.MATCH;
          sysData.phraseLength = 1;
        }
      }
    };
    const opTBSBehind = function(opIndex, phraseIndex, sysData) {
      let i;
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      const len = op.string.length;
      const beg = phraseIndex - len;
      if (beg >= 0) {
        for (i = 0; i < len; i += 1) {
          if (chars[beg + i] !== op.string[i]) {
            return;
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    const opTLSBehind = function(opIndex, phraseIndex, sysData) {
      let char;
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      const len = op.string.length;
      if (len === 0) {
        sysData.state = id2.EMPTY;
        return;
      }
      const beg = phraseIndex - len;
      if (beg >= 0) {
        for (let i = 0; i < len; i += 1) {
          char = chars[beg + i];
          if (char >= 65 && char <= 90) {
            char += 32;
          }
          if (char !== op.string[i]) {
            return;
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    const opBKRBehind = function(opIndex, phraseIndex, sysData) {
      let i;
      let code;
      let lmcode;
      let lower;
      const op = opcodes[opIndex];
      sysData.state = id2.NOMATCH;
      sysData.phraseLength = 0;
      if (op.index < rules.length) {
        lower = rules[op.index].lower;
      } else {
        lower = udts[op.index - rules.length].lower;
      }
      const frame = op.bkrMode === id2.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
      const insensitive = op.bkrCase === id2.BKR_MODE_CI;
      if (frame === null) {
        return;
      }
      const lmIndex = frame.phraseIndex;
      const len = frame.phraseLength;
      if (len === 0) {
        sysData.state = id2.EMPTY;
        sysData.phraseLength = 0;
        return;
      }
      const beg = phraseIndex - len;
      if (beg >= 0) {
        if (insensitive) {
          for (i = 0; i < len; i += 1) {
            code = chars[beg + i];
            lmcode = chars[lmIndex + i];
            if (code >= 65 && code <= 90) {
              code += 32;
            }
            if (lmcode >= 65 && lmcode <= 90) {
              lmcode += 32;
            }
            if (code !== lmcode) {
              return;
            }
          }
          sysData.state = id2.MATCH;
          sysData.phraseLength = len;
        } else {
          for (i = 0; i < len; i += 1) {
            code = chars[beg + i];
            lmcode = chars[lmIndex + i];
            if (code !== lmcode) {
              return;
            }
          }
        }
        sysData.state = id2.MATCH;
        sysData.phraseLength = len;
      }
    };
    opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {
      let ret = true;
      const op = opcodes[opIndex];
      nodeHits += 1;
      if (nodeHits > limitNodeHits) {
        throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);
      }
      treeDepth += 1;
      if (treeDepth > maxTreeDepth) {
        maxTreeDepth = treeDepth;
        if (maxTreeDepth > limitTreeDepth) {
          throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);
        }
      }
      sysData.refresh();
      if (thisThis.trace !== null) {
        const lk = lookAroundValue();
        thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
      }
      if (inLookBehind()) {
        switch (op.type) {
          case id2.ALT:
            opALT(opIndex, phraseIndex, sysData);
            break;
          case id2.CAT:
            opCATBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.REP:
            opREPBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.RNM:
            opRNM(opIndex, phraseIndex, sysData);
            break;
          case id2.UDT:
            opUDT(opIndex, phraseIndex, sysData);
            break;
          case id2.AND:
            opAND(opIndex, phraseIndex, sysData);
            break;
          case id2.NOT:
            opNOT(opIndex, phraseIndex, sysData);
            break;
          case id2.TRG:
            opTRGBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.TBS:
            opTBSBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.TLS:
            opTLSBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.BKR:
            opBKRBehind(opIndex, phraseIndex, sysData);
            break;
          case id2.BKA:
            opBKA(opIndex, phraseIndex, sysData);
            break;
          case id2.BKN:
            opBKN(opIndex, phraseIndex, sysData);
            break;
          case id2.ABG:
            opABG(opIndex, phraseIndex, sysData);
            break;
          case id2.AEN:
            opAEN(opIndex, phraseIndex, sysData);
            break;
          default:
            ret = false;
            break;
        }
      } else {
        switch (op.type) {
          case id2.ALT:
            opALT(opIndex, phraseIndex, sysData);
            break;
          case id2.CAT:
            opCAT(opIndex, phraseIndex, sysData);
            break;
          case id2.REP:
            opREP(opIndex, phraseIndex, sysData);
            break;
          case id2.RNM:
            opRNM(opIndex, phraseIndex, sysData);
            break;
          case id2.UDT:
            opUDT(opIndex, phraseIndex, sysData);
            break;
          case id2.AND:
            opAND(opIndex, phraseIndex, sysData);
            break;
          case id2.NOT:
            opNOT(opIndex, phraseIndex, sysData);
            break;
          case id2.TRG:
            opTRG(opIndex, phraseIndex, sysData);
            break;
          case id2.TBS:
            opTBS(opIndex, phraseIndex, sysData);
            break;
          case id2.TLS:
            opTLS(opIndex, phraseIndex, sysData);
            break;
          case id2.BKR:
            opBKR(opIndex, phraseIndex, sysData);
            break;
          case id2.BKA:
            opBKA(opIndex, phraseIndex, sysData);
            break;
          case id2.BKN:
            opBKN(opIndex, phraseIndex, sysData);
            break;
          case id2.ABG:
            opABG(opIndex, phraseIndex, sysData);
            break;
          case id2.AEN:
            opAEN(opIndex, phraseIndex, sysData);
            break;
          default:
            ret = false;
            break;
        }
      }
      if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {
        maxMatched = phraseIndex + sysData.phraseLength;
      }
      if (thisThis.stats !== null) {
        thisThis.stats.collect(op, sysData);
      }
      if (thisThis.trace !== null) {
        const lk = lookAroundValue();
        thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
      }
      treeDepth -= 1;
      return ret;
    };
  };
  return parser;
}
var stats;
var hasRequiredStats;
function requireStats() {
  if (hasRequiredStats) return stats;
  hasRequiredStats = 1;
  stats = function statsFunc() {
    const id2 = requireIdentifiers();
    const utils2 = requireUtilities();
    const style2 = requireStyle();
    const thisFileName = "stats.js: ";
    let rules = [];
    let udts = [];
    const stats2 = [];
    let totals;
    const ruleStats = [];
    const udtStats = [];
    this.statsObject = "statsObject";
    const nameId = "stats";
    const sortAlpha = function sortAlpha2(lhs, rhs) {
      if (lhs.lower < rhs.lower) {
        return -1;
      }
      if (lhs.lower > rhs.lower) {
        return 1;
      }
      return 0;
    };
    const sortHits = function sortHits2(lhs, rhs) {
      if (lhs.total < rhs.total) {
        return 1;
      }
      if (lhs.total > rhs.total) {
        return -1;
      }
      return sortAlpha(lhs, rhs);
    };
    const sortIndex = function sortIndex2(lhs, rhs) {
      if (lhs.index < rhs.index) {
        return -1;
      }
      if (lhs.index > rhs.index) {
        return 1;
      }
      return 0;
    };
    const EmptyStat = function EmptyStat2() {
      this.empty = 0;
      this.match = 0;
      this.nomatch = 0;
      this.total = 0;
    };
    const clear = function clear2() {
      stats2.length = 0;
      totals = new EmptyStat();
      stats2[id2.ALT] = new EmptyStat();
      stats2[id2.CAT] = new EmptyStat();
      stats2[id2.REP] = new EmptyStat();
      stats2[id2.RNM] = new EmptyStat();
      stats2[id2.TRG] = new EmptyStat();
      stats2[id2.TBS] = new EmptyStat();
      stats2[id2.TLS] = new EmptyStat();
      stats2[id2.UDT] = new EmptyStat();
      stats2[id2.AND] = new EmptyStat();
      stats2[id2.NOT] = new EmptyStat();
      stats2[id2.BKR] = new EmptyStat();
      stats2[id2.BKA] = new EmptyStat();
      stats2[id2.BKN] = new EmptyStat();
      stats2[id2.ABG] = new EmptyStat();
      stats2[id2.AEN] = new EmptyStat();
      ruleStats.length = 0;
      for (let i = 0; i < rules.length; i += 1) {
        ruleStats.push({
          empty: 0,
          match: 0,
          nomatch: 0,
          total: 0,
          name: rules[i].name,
          lower: rules[i].lower,
          index: rules[i].index
        });
      }
      if (udts.length > 0) {
        udtStats.length = 0;
        for (let i = 0; i < udts.length; i += 1) {
          udtStats.push({
            empty: 0,
            match: 0,
            nomatch: 0,
            total: 0,
            name: udts[i].name,
            lower: udts[i].lower,
            index: udts[i].index
          });
        }
      }
    };
    const incStat = function incStat2(stat2, state) {
      stat2.total += 1;
      switch (state) {
        case id2.EMPTY:
          stat2.empty += 1;
          break;
        case id2.MATCH:
          stat2.match += 1;
          break;
        case id2.NOMATCH:
          stat2.nomatch += 1;
          break;
        default:
          throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);
      }
    };
    const displayRow = function displayRow2(name, stat2) {
      let html = "";
      html += "<tr>";
      html += `<td class="${style2.CLASS_ACTIVE}">${name}</td>`;
      html += `<td class="${style2.CLASS_EMPTY}">${stat2.empty}</td>`;
      html += `<td class="${style2.CLASS_MATCH}">${stat2.match}</td>`;
      html += `<td class="${style2.CLASS_NOMATCH}">${stat2.nomatch}</td>`;
      html += `<td class="${style2.CLASS_ACTIVE}">${stat2.total}</td>`;
      html += "</tr>\n";
      return html;
    };
    const displayOpsOnly = function displayOpsOnly2() {
      let html = "";
      html += displayRow("ALT", stats2[id2.ALT]);
      html += displayRow("CAT", stats2[id2.CAT]);
      html += displayRow("REP", stats2[id2.REP]);
      html += displayRow("RNM", stats2[id2.RNM]);
      html += displayRow("TRG", stats2[id2.TRG]);
      html += displayRow("TBS", stats2[id2.TBS]);
      html += displayRow("TLS", stats2[id2.TLS]);
      html += displayRow("UDT", stats2[id2.UDT]);
      html += displayRow("AND", stats2[id2.AND]);
      html += displayRow("NOT", stats2[id2.NOT]);
      html += displayRow("BKR", stats2[id2.BKR]);
      html += displayRow("BKA", stats2[id2.BKA]);
      html += displayRow("BKN", stats2[id2.BKN]);
      html += displayRow("ABG", stats2[id2.ABG]);
      html += displayRow("AEN", stats2[id2.AEN]);
      html += displayRow("totals", totals);
      return html;
    };
    const displayRules = function displayRules2() {
      let html = "";
      html += "<tr><th></th><th></th><th></th><th></th><th></th></tr>\n";
      html += "<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\n";
      for (let i = 0; i < rules.length; i += 1) {
        if (ruleStats[i].total > 0) {
          html += "<tr>";
          html += `<td class="${style2.CLASS_ACTIVE}">${ruleStats[i].name}</td>`;
          html += `<td class="${style2.CLASS_EMPTY}">${ruleStats[i].empty}</td>`;
          html += `<td class="${style2.CLASS_MATCH}">${ruleStats[i].match}</td>`;
          html += `<td class="${style2.CLASS_NOMATCH}">${ruleStats[i].nomatch}</td>`;
          html += `<td class="${style2.CLASS_ACTIVE}">${ruleStats[i].total}</td>`;
          html += "</tr>\n";
        }
      }
      if (udts.length > 0) {
        html += "<tr><th></th><th></th><th></th><th></th><th></th></tr>\n";
        html += "<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\n";
        for (let i = 0; i < udts.length; i += 1) {
          if (udtStats[i].total > 0) {
            html += "<tr>";
            html += `<td class="${style2.CLASS_ACTIVE}">${udtStats[i].name}</td>`;
            html += `<td class="${style2.CLASS_EMPTY}">${udtStats[i].empty}</td>`;
            html += `<td class="${style2.CLASS_MATCH}">${udtStats[i].match}</td>`;
            html += `<td class="${style2.CLASS_NOMATCH}">${udtStats[i].nomatch}</td>`;
            html += `<td class="${style2.CLASS_ACTIVE}">${udtStats[i].total}</td>`;
            html += "</tr>\n";
          }
        }
      }
      return html;
    };
    this.validate = function validate(name) {
      let ret = false;
      if (typeof name === "string" && nameId === name) {
        ret = true;
      }
      return ret;
    };
    this.init = function init(inputRules, inputUdts) {
      rules = inputRules;
      udts = inputUdts;
      clear();
    };
    this.collect = function collect(op, result) {
      incStat(totals, result.state, result.phraseLength);
      incStat(stats2[op.type], result.state, result.phraseLength);
      if (op.type === id2.RNM) {
        incStat(ruleStats[op.index], result.state, result.phraseLength);
      }
      if (op.type === id2.UDT) {
        incStat(udtStats[op.index], result.state, result.phraseLength);
      }
    };
    this.toHtml = function toHtml(type2, caption) {
      let html = "";
      html += `<table class="${style2.CLASS_STATS}">
`;
      if (typeof caption === "string") {
        html += `<caption>${caption}</caption>
`;
      }
      html += `<tr><th class="${style2.CLASS_ACTIVE}">ops</th>
`;
      html += `<th class="${style2.CLASS_EMPTY}">EMPTY</th>
`;
      html += `<th class="${style2.CLASS_MATCH}">MATCH</th>
`;
      html += `<th class="${style2.CLASS_NOMATCH}">NOMATCH</th>
`;
      html += `<th class="${style2.CLASS_ACTIVE}">totals</th></tr>
`;
      const test2 = true;
      while (test2) {
        if (type2 === void 0) {
          html += displayOpsOnly();
          break;
        }
        if (type2 === null) {
          html += displayOpsOnly();
          break;
        }
        if (type2 === "ops") {
          html += displayOpsOnly();
          break;
        }
        if (type2 === "index") {
          ruleStats.sort(sortIndex);
          if (udtStats.length > 0) {
            udtStats.sort(sortIndex);
          }
          html += displayOpsOnly();
          html += displayRules();
          break;
        }
        if (type2 === "hits") {
          ruleStats.sort(sortHits);
          if (udtStats.length > 0) {
            udtStats.sort(sortIndex);
          }
          html += displayOpsOnly();
          html += displayRules();
          break;
        }
        if (type2 === "alpha") {
          ruleStats.sort(sortAlpha);
          if (udtStats.length > 0) {
            udtStats.sort(sortAlpha);
          }
          html += displayOpsOnly();
          html += displayRules();
          break;
        }
        break;
      }
      html += "</table>\n";
      return html;
    };
    this.toHtmlPage = function toHtmlPage(type2, caption, title2) {
      return utils2.htmlToPage(this.toHtml(type2, caption), title2);
    };
  };
  return stats;
}
var trace;
var hasRequiredTrace;
function requireTrace() {
  if (hasRequiredTrace) return trace;
  hasRequiredTrace = 1;
  trace = function exportTrace() {
    const utils2 = requireUtilities();
    const style2 = requireStyle();
    const circular = new (requireCircularBuffer())();
    const id2 = requireIdentifiers();
    const thisFileName = "trace.js: ";
    const that = this;
    const MODE_HEX = 16;
    const MODE_DEC = 10;
    const MODE_ASCII = 8;
    const MODE_UNICODE = 32;
    const MAX_PHRASE = 80;
    const MAX_TLS = 5;
    const records = [];
    let maxRecords = 5e3;
    let lastRecord = -1;
    let filteredRecords = 0;
    let treeDepth = 0;
    const recordStack = [];
    let chars = null;
    let rules = null;
    let udts = null;
    const operatorFilter = [];
    const ruleFilter = [];
    const PHRASE_END = `<span class="${style2.CLASS_LINEEND}">&bull;</span>`;
    const PHRASE_CONTINUE = `<span class="${style2.CLASS_LINEEND}">&hellip;</span>`;
    const PHRASE_EMPTY = `<span class="${style2.CLASS_EMPTY}">&#120634;</span>`;
    const initOperatorFilter = function() {
      const setOperators = function(set) {
        operatorFilter[id2.ALT] = set;
        operatorFilter[id2.CAT] = set;
        operatorFilter[id2.REP] = set;
        operatorFilter[id2.TLS] = set;
        operatorFilter[id2.TBS] = set;
        operatorFilter[id2.TRG] = set;
        operatorFilter[id2.AND] = set;
        operatorFilter[id2.NOT] = set;
        operatorFilter[id2.BKR] = set;
        operatorFilter[id2.BKA] = set;
        operatorFilter[id2.BKN] = set;
        operatorFilter[id2.ABG] = set;
        operatorFilter[id2.AEN] = set;
      };
      let items = 0;
      for (const name in that.filter.operators) {
        items += 1;
      }
      if (items === 0) {
        setOperators(false);
        return;
      }
      for (const name in that.filter.operators) {
        const upper = name.toUpperCase();
        if (upper === "<ALL>") {
          setOperators(true);
          return;
        }
        if (upper === "<NONE>") {
          setOperators(false);
          return;
        }
      }
      setOperators(false);
      for (const name in that.filter.operators) {
        const upper = name.toUpperCase();
        if (upper === "ALT") {
          operatorFilter[id2.ALT] = that.filter.operators[name] === true;
        } else if (upper === "CAT") {
          operatorFilter[id2.CAT] = that.filter.operators[name] === true;
        } else if (upper === "REP") {
          operatorFilter[id2.REP] = that.filter.operators[name] === true;
        } else if (upper === "AND") {
          operatorFilter[id2.AND] = that.filter.operators[name] === true;
        } else if (upper === "NOT") {
          operatorFilter[id2.NOT] = that.filter.operators[name] === true;
        } else if (upper === "TLS") {
          operatorFilter[id2.TLS] = that.filter.operators[name] === true;
        } else if (upper === "TBS") {
          operatorFilter[id2.TBS] = that.filter.operators[name] === true;
        } else if (upper === "TRG") {
          operatorFilter[id2.TRG] = that.filter.operators[name] === true;
        } else if (upper === "BKR") {
          operatorFilter[id2.BKR] = that.filter.operators[name] === true;
        } else if (upper === "BKA") {
          operatorFilter[id2.BKA] = that.filter.operators[name] === true;
        } else if (upper === "BKN") {
          operatorFilter[id2.BKN] = that.filter.operators[name] === true;
        } else if (upper === "ABG") {
          operatorFilter[id2.ABG] = that.filter.operators[name] === true;
        } else if (upper === "AEN") {
          operatorFilter[id2.AEN] = that.filter.operators[name] === true;
        } else {
          throw new Error(
            `${thisFileName}initOpratorFilter: '${name}' not a valid operator name. Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`
          );
        }
      }
    };
    const initRuleFilter = function() {
      const setRules = function(set) {
        operatorFilter[id2.RNM] = set;
        operatorFilter[id2.UDT] = set;
        const count = rules.length + udts.length;
        ruleFilter.length = 0;
        for (let i2 = 0; i2 < count; i2 += 1) {
          ruleFilter.push(set);
        }
      };
      let items;
      let i;
      const list = [];
      for (i = 0; i < rules.length; i += 1) {
        list.push(rules[i].lower);
      }
      for (i = 0; i < udts.length; i += 1) {
        list.push(udts[i].lower);
      }
      ruleFilter.length = 0;
      items = 0;
      for (const name in that.filter.rules) {
        items += 1;
      }
      if (items === 0) {
        setRules(true);
        return;
      }
      for (const name in that.filter.rules) {
        const lower = name.toLowerCase();
        if (lower === "<all>") {
          setRules(true);
          return;
        }
        if (lower === "<none>") {
          setRules(false);
          return;
        }
      }
      setRules(false);
      operatorFilter[id2.RNM] = true;
      operatorFilter[id2.UDT] = true;
      for (const name in that.filter.rules) {
        const lower = name.toLowerCase();
        i = list.indexOf(lower);
        if (i < 0) {
          throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);
        }
        ruleFilter[i] = that.filter.rules[name] === true;
      }
    };
    this.traceObject = "traceObject";
    this.filter = {
      operators: [],
      rules: []
    };
    this.setMaxRecords = function(max2, last) {
      lastRecord = -1;
      if (typeof max2 === "number" && max2 > 0) {
        maxRecords = Math.ceil(max2);
      } else {
        maxRecords = 0;
        return;
      }
      if (typeof last === "number") {
        lastRecord = Math.floor(last);
        if (lastRecord < 0) {
          lastRecord = -1;
        }
      }
    };
    this.getMaxRecords = function() {
      return maxRecords;
    };
    this.getLastRecord = function() {
      return lastRecord;
    };
    this.init = function(rulesIn, udtsIn, charsIn) {
      records.length = 0;
      recordStack.length = 0;
      filteredRecords = 0;
      treeDepth = 0;
      chars = charsIn;
      rules = rulesIn;
      udts = udtsIn;
      initOperatorFilter();
      initRuleFilter();
      circular.init(maxRecords);
    };
    const filterOps = function(op) {
      let ret = false;
      if (op.type === id2.RNM) {
        if (operatorFilter[op.type] && ruleFilter[op.index]) {
          ret = true;
        } else {
          ret = false;
        }
      } else if (op.type === id2.UDT) {
        if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {
          ret = true;
        } else {
          ret = false;
        }
      } else {
        ret = operatorFilter[op.type];
      }
      return ret;
    };
    const filterRecords = function(record) {
      if (lastRecord === -1) {
        return true;
      }
      if (record <= lastRecord) {
        return true;
      }
      return false;
    };
    this.down = function(op, state, offset, length, anchor, lookAround) {
      if (filterRecords(filteredRecords) && filterOps(op)) {
        recordStack.push(filteredRecords);
        records[circular.increment()] = {
          dirUp: false,
          depth: treeDepth,
          thisLine: filteredRecords,
          thatLine: void 0,
          opcode: op,
          state,
          phraseIndex: offset,
          phraseLength: length,
          lookAnchor: anchor,
          lookAround
        };
        filteredRecords += 1;
        treeDepth += 1;
      }
    };
    this.up = function(op, state, offset, length, anchor, lookAround) {
      if (filterRecords(filteredRecords) && filterOps(op)) {
        const thisLine = filteredRecords;
        const thatLine = recordStack.pop();
        const thatRecord = circular.getListIndex(thatLine);
        if (thatRecord !== -1) {
          records[thatRecord].thatLine = thisLine;
        }
        treeDepth -= 1;
        records[circular.increment()] = {
          dirUp: true,
          depth: treeDepth,
          thisLine,
          thatLine,
          opcode: op,
          state,
          phraseIndex: offset,
          phraseLength: length,
          lookAnchor: anchor,
          lookAround
        };
        filteredRecords += 1;
      }
    };
    const toTreeObj = function() {
      function nodeOpcode(node3, opcode) {
        let name;
        let casetype;
        let modetype;
        if (opcode) {
          node3.op = { id: opcode.type, name: utils2.opcodeToString(opcode.type) };
          node3.opData = void 0;
          switch (opcode.type) {
            case id2.RNM:
              node3.opData = rules[opcode.index].name;
              break;
            case id2.UDT:
              node3.opData = udts[opcode.index].name;
              break;
            case id2.BKR:
              if (opcode.index < rules.length) {
                name = rules[opcode.index].name;
              } else {
                name = udts[opcode.index - rules.length].name;
              }
              casetype = opcode.bkrCase === id2.BKR_MODE_CI ? "%i" : "%s";
              modetype = opcode.bkrMode === id2.BKR_MODE_UM ? "%u" : "%p";
              node3.opData = `\\\\${casetype}${modetype}${name}`;
              break;
            case id2.TLS:
              node3.opData = [];
              for (let i = 0; i < opcode.string.length; i += 1) {
                node3.opData.push(opcode.string[i]);
              }
              break;
            case id2.TBS:
              node3.opData = [];
              for (let i = 0; i < opcode.string.length; i += 1) {
                node3.opData.push(opcode.string[i]);
              }
              break;
            case id2.TRG:
              node3.opData = [opcode.min, opcode.max];
              break;
            case id2.REP:
              node3.opData = [opcode.min, opcode.max];
              break;
            default:
              throw new Error("unrecognized opcode");
          }
        } else {
          node3.op = { id: void 0, name: void 0 };
          node3.opData = void 0;
        }
      }
      function nodePhrase(state, index, length) {
        if (state === id2.MATCH) {
          return {
            index,
            length
          };
        }
        if (state === id2.NOMATCH) {
          return {
            index,
            length: 0
          };
        }
        if (state === id2.EMPTY) {
          return {
            index,
            length: 0
          };
        }
        return null;
      }
      let nodeId = -1;
      function nodeDown(parent2, record2, depth2) {
        const node3 = {
          // eslint-disable-next-line no-plusplus
          id: nodeId++,
          branch: -1,
          parent: parent2,
          up: false,
          down: false,
          depth: depth2,
          children: []
        };
        if (record2) {
          node3.down = true;
          node3.state = { id: record2.state, name: utils2.stateToString(record2.state) };
          node3.phrase = null;
          nodeOpcode(node3, record2.opcode);
        } else {
          node3.state = { id: void 0, name: void 0 };
          node3.phrase = nodePhrase();
          nodeOpcode(node3, void 0);
        }
        return node3;
      }
      function nodeUp(node3, record2) {
        if (record2) {
          node3.up = true;
          node3.state = { id: record2.state, name: utils2.stateToString(record2.state) };
          node3.phrase = nodePhrase(record2.state, record2.phraseIndex, record2.phraseLength);
          if (!node3.down) {
            nodeOpcode(node3, record2.opcode);
          }
        }
      }
      let leafNodes = 0;
      let depth = -1;
      let branchCount = 1;
      function walk(node3) {
        depth += 1;
        node3.branch = branchCount;
        if (depth > treeDepth) {
          treeDepth = depth;
        }
        if (node3.children.length === 0) {
          leafNodes += 1;
        } else {
          for (let i = 0; i < node3.children.length; i += 1) {
            if (i > 0) {
              branchCount += 1;
            }
            node3.children[i].leftMost = false;
            node3.children[i].rightMost = false;
            if (node3.leftMost) {
              node3.children[i].leftMost = i === 0;
            }
            if (node3.rightMost) {
              node3.children[i].rightMost = i === node3.children.length - 1;
            }
            walk(node3.children[i]);
          }
        }
        depth -= 1;
      }
      function display(node3, offset) {
        let name;
        const obj2 = {};
        obj2.id = node3.id;
        obj2.branch = node3.branch;
        obj2.leftMost = node3.leftMost;
        obj2.rightMost = node3.rightMost;
        name = node3.state.name ? node3.state.name : "ACTIVE";
        obj2.state = { id: node3.state.id, name };
        name = node3.op.name ? node3.op.name : "?";
        obj2.op = { id: node3.op.id, name };
        if (typeof node3.opData === "string") {
          obj2.opData = node3.opData;
        } else if (Array.isArray(node3.opData)) {
          obj2.opData = [];
          for (let i = 0; i < node3.opData.length; i += 1) {
            obj2.opData[i] = node3.opData[i];
          }
        } else {
          obj2.opData = void 0;
        }
        if (node3.phrase) {
          obj2.phrase = { index: node3.phrase.index, length: node3.phrase.length };
        } else {
          obj2.phrase = null;
        }
        obj2.depth = node3.depth;
        obj2.children = [];
        for (let i = 0; i < node3.children.length; i += 1) {
          i !== node3.children.length - 1;
          obj2.children[i] = display(node3.children[i]);
        }
        return obj2;
      }
      const branch = [];
      let root;
      let node2;
      let parent;
      let record;
      let firstRecord = true;
      const dummy = nodeDown(null, null, -1);
      branch.push(dummy);
      node2 = dummy;
      circular.forEach((lineIndex) => {
        record = records[lineIndex];
        if (firstRecord) {
          firstRecord = false;
          if (record.depth > 0) {
            const num = record.dirUp ? record.depth + 1 : record.depth;
            for (let i = 0; i < num; i += 1) {
              parent = node2;
              node2 = nodeDown(node2, null, i);
              branch.push(node2);
              parent.children.push(node2);
            }
          }
        }
        if (record.dirUp) {
          node2 = branch.pop();
          nodeUp(node2, record);
          node2 = branch[branch.length - 1];
        } else {
          parent = node2;
          node2 = nodeDown(node2, record, record.depth);
          branch.push(node2);
          parent.children.push(node2);
        }
      });
      while (branch.length > 1) {
        node2 = branch.pop();
        nodeUp(node2, null);
      }
      if (dummy.children.length === 0) {
        throw new Error("trace.toTree(): parse tree has no nodes");
      }
      if (branch.length === 0) {
        throw new Error("trace.toTree(): integrity check: dummy root node disappeared?");
      }
      root = dummy.children[0];
      let prev = root;
      while (root && !root.down && !root.up) {
        prev = root;
        root = root.children[0];
      }
      root = prev;
      root.leftMost = true;
      root.rightMost = true;
      walk(root);
      root.branch = 0;
      const obj = {};
      obj.string = [];
      for (let i = 0; i < chars.length; i += 1) {
        obj.string[i] = chars[i];
      }
      obj.rules = [];
      for (let i = 0; i < rules.length; i += 1) {
        obj.rules[i] = rules[i].name;
      }
      obj.udts = [];
      for (let i = 0; i < udts.length; i += 1) {
        obj.udts[i] = udts[i].name;
      }
      obj.id = {};
      obj.id.ALT = { id: id2.ALT, name: "ALT" };
      obj.id.CAT = { id: id2.CAT, name: "CAT" };
      obj.id.REP = { id: id2.REP, name: "REP" };
      obj.id.RNM = { id: id2.RNM, name: "RNM" };
      obj.id.TLS = { id: id2.TLS, name: "TLS" };
      obj.id.TBS = { id: id2.TBS, name: "TBS" };
      obj.id.TRG = { id: id2.TRG, name: "TRG" };
      obj.id.UDT = { id: id2.UDT, name: "UDT" };
      obj.id.AND = { id: id2.AND, name: "AND" };
      obj.id.NOT = { id: id2.NOT, name: "NOT" };
      obj.id.BKR = { id: id2.BKR, name: "BKR" };
      obj.id.BKA = { id: id2.BKA, name: "BKA" };
      obj.id.BKN = { id: id2.BKN, name: "BKN" };
      obj.id.ABG = { id: id2.ABG, name: "ABG" };
      obj.id.AEN = { id: id2.AEN, name: "AEN" };
      obj.id.ACTIVE = { id: id2.ACTIVE, name: "ACTIVE" };
      obj.id.MATCH = { id: id2.MATCH, name: "MATCH" };
      obj.id.EMPTY = { id: id2.EMPTY, name: "EMPTY" };
      obj.id.NOMATCH = { id: id2.NOMATCH, name: "NOMATCH" };
      obj.treeDepth = treeDepth;
      obj.leafNodes = leafNodes;
      let branchesIncomplete;
      if (root.down) {
        if (root.up) {
          branchesIncomplete = "none";
        } else {
          branchesIncomplete = "right";
        }
      } else if (root.up) {
        branchesIncomplete = "left";
      } else {
        branchesIncomplete = "both";
      }
      obj.branchesIncomplete = branchesIncomplete;
      obj.tree = display(root, root.depth);
      return obj;
    };
    this.toTree = function(stringify2) {
      const obj = toTreeObj();
      if (stringify2) {
        return JSON.stringify(obj);
      }
      return obj;
    };
    this.toHtmlPage = function(mode2, caption, title2) {
      return utils2.htmlToPage(this.toHtml(mode2, caption), title2);
    };
    const htmlHeader = function(mode2, caption) {
      let modeName;
      switch (mode2) {
        case MODE_HEX:
          modeName = "hexadecimal";
          break;
        case MODE_DEC:
          modeName = "decimal";
          break;
        case MODE_ASCII:
          modeName = "ASCII";
          break;
        case MODE_UNICODE:
          modeName = "UNICODE";
          break;
        default:
          throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode2}`);
      }
      let header = "";
      header += `<p>display mode: ${modeName}</p>
`;
      header += `<table class="${style2.CLASS_TRACE}">
`;
      if (typeof caption === "string") {
        header += `<caption>${caption}</caption>`;
      }
      return header;
    };
    const htmlFooter = function() {
      let footer = "";
      footer += "</table>\n";
      footer += `<p class="${style2.CLASS_MONOSPACE}">legend:<br>
`;
      footer += "(a)&nbsp;-&nbsp;line number<br>\n";
      footer += "(b)&nbsp;-&nbsp;matching line number<br>\n";
      footer += "(c)&nbsp;-&nbsp;phrase offset<br>\n";
      footer += "(d)&nbsp;-&nbsp;phrase length<br>\n";
      footer += "(e)&nbsp;-&nbsp;tree depth<br>\n";
      footer += "(f)&nbsp;-&nbsp;operator state<br>\n";
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_ACTIVE}">&darr;</span>&nbsp;&nbsp;phrase opened<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_MATCH}">&uarr;M</span> phrase matched<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_EMPTY}">&uarr;E</span> empty phrase matched<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_NOMATCH}">&uarr;N</span> phrase not matched<br>
`;
      footer += "operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\n";
      footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_MATCH}">matched characters</span><br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_LOOKAHEAD}">matched characters in look ahead mode</span><br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_LOOKBEHIND}">matched characters in look behind mode</span><br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_REMAINDER}">remainder characters(not yet examined by parser)</span><br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style2.CLASS_CTRLCHAR}">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>
`;
      footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>
`;
      footer += "</p>\n";
      footer += `<p class="${style2.CLASS_MONOSPACE}">
`;
      footer += "<sup>&dagger;</sup>original ABNF operators:<br>\n";
      footer += "ALT - alternation<br>\n";
      footer += "CAT - concatenation<br>\n";
      footer += "REP - repetition<br>\n";
      footer += "RNM - rule name<br>\n";
      footer += "TRG - terminal range<br>\n";
      footer += "TLS - terminal literal string (case insensitive)<br>\n";
      footer += "TBS - terminal binary string (case sensitive)<br>\n";
      footer += "<br>\n";
      footer += "<sup>&Dagger;</sup>super set SABNF operators:<br>\n";
      footer += "UDT - user-defined terminal<br>\n";
      footer += "AND - positive look ahead<br>\n";
      footer += "NOT - negative look ahead<br>\n";
      footer += "BKA - positive look behind<br>\n";
      footer += "BKN - negative look behind<br>\n";
      footer += "BKR - back reference<br>\n";
      footer += "ABG - anchor - begin of input string<br>\n";
      footer += "AEN - anchor - end of input string<br>\n";
      footer += "</p>\n";
      return footer;
    };
    this.indent = function(depth) {
      let html = "";
      for (let i = 0; i < depth; i += 1) {
        html += ".";
      }
      return html;
    };
    const displayTrg = function(mode2, op) {
      let html = "";
      if (op.type === id2.TRG) {
        if (mode2 === MODE_HEX || mode2 === MODE_UNICODE) {
          let hex = op.min.toString(16).toUpperCase();
          if (hex.length % 2 !== 0) {
            hex = `0${hex}`;
          }
          html += mode2 === MODE_HEX ? "%x" : "U+";
          html += hex;
          hex = op.max.toString(16).toUpperCase();
          if (hex.length % 2 !== 0) {
            hex = `0${hex}`;
          }
          html += `&ndash;${hex}`;
        } else {
          html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
        }
      }
      return html;
    };
    const displayRep = function(mode2, op) {
      let html = "";
      if (op.type === id2.REP) {
        if (mode2 === MODE_HEX) {
          let hex = op.min.toString(16).toUpperCase();
          if (hex.length % 2 !== 0) {
            hex = `0${hex}`;
          }
          html = `x${hex}`;
          if (op.max < Infinity) {
            hex = op.max.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
          } else {
            hex = "inf";
          }
          html += `&ndash;${hex}`;
        } else if (op.max < Infinity) {
          html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
        } else {
          html = `${op.min.toString(10)}&ndash;inf`;
        }
      }
      return html;
    };
    const displayTbs = function(mode2, op) {
      let html = "";
      if (op.type === id2.TBS) {
        const len = Math.min(op.string.length, MAX_TLS * 2);
        if (mode2 === MODE_HEX || mode2 === MODE_UNICODE) {
          html += mode2 === MODE_HEX ? "%x" : "U+";
          for (let i = 0; i < len; i += 1) {
            let hex;
            if (i > 0) {
              html += ".";
            }
            hex = op.string[i].toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html += hex;
          }
        } else {
          html = "%d";
          for (let i = 0; i < len; i += 1) {
            if (i > 0) {
              html += ".";
            }
            html += op.string[i].toString(10);
          }
        }
        if (len < op.string.length) {
          html += PHRASE_CONTINUE;
        }
      }
      return html;
    };
    const displayTls = function(mode2, op) {
      let html = "";
      if (op.type === id2.TLS) {
        const len = Math.min(op.string.length, MAX_TLS);
        if (mode2 === MODE_HEX || mode2 === MODE_DEC) {
          let charu;
          let charl;
          let base;
          if (mode2 === MODE_HEX) {
            html = "%x";
            base = 16;
          } else {
            html = "%d";
            base = 10;
          }
          for (let i = 0; i < len; i += 1) {
            if (i > 0) {
              html += ".";
            }
            charl = op.string[i];
            if (charl >= 97 && charl <= 122) {
              charu = charl - 32;
              html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
            } else if (charl >= 65 && charl <= 90) {
              charu = charl;
              charl += 32;
              html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
            } else {
              html += charl.toString(base).toUpperCase();
            }
          }
          if (len < op.string.length) {
            html += PHRASE_CONTINUE;
          }
        } else {
          html = '"';
          for (let i = 0; i < len; i += 1) {
            html += utils2.asciiChars[op.string[i]];
          }
          if (len < op.string.length) {
            html += PHRASE_CONTINUE;
          }
          html += '"';
        }
      }
      return html;
    };
    const subPhrase = function(mode2, charsArg, index, length, prev) {
      if (length === 0) {
        return "";
      }
      let phrase = "";
      const comma = prev ? "," : "";
      switch (mode2) {
        case MODE_HEX:
          phrase = comma + utils2.charsToHex(charsArg, index, length);
          break;
        case MODE_DEC:
          if (prev) {
            return `,${utils2.charsToDec(charsArg, index, length)}`;
          }
          phrase = comma + utils2.charsToDec(charsArg, index, length);
          break;
        case MODE_UNICODE:
          phrase = utils2.charsToUnicode(charsArg, index, length);
          break;
        case MODE_ASCII:
        default:
          phrase = utils2.charsToAsciiHtml(charsArg, index, length);
          break;
      }
      return phrase;
    };
    const displayBehind = function(mode2, charsArg, state, index, length, anchor) {
      let html = "";
      let beg1;
      let len1;
      let beg2;
      let len2;
      let lastchar = PHRASE_END;
      const spanBehind = `<span class="${style2.CLASS_LOOKBEHIND}">`;
      const spanRemainder = `<span class="${style2.CLASS_REMAINDER}">`;
      const spanend = "</span>";
      let prev = false;
      switch (state) {
        case id2.EMPTY:
          html += PHRASE_EMPTY;
        /* // eslint-disable-next-line no-fallthrough */
        case id2.NOMATCH:
        case id2.MATCH:
        case id2.ACTIVE:
          beg1 = index - length;
          len1 = anchor - beg1;
          beg2 = anchor;
          len2 = charsArg.length - beg2;
          break;
        default:
          throw new Error("unrecognized state");
      }
      lastchar = PHRASE_END;
      if (len1 > MAX_PHRASE) {
        len1 = MAX_PHRASE;
        lastchar = PHRASE_CONTINUE;
        len2 = 0;
      } else if (len1 + len2 > MAX_PHRASE) {
        lastchar = PHRASE_CONTINUE;
        len2 = MAX_PHRASE - len1;
      }
      if (len1 > 0) {
        html += spanBehind;
        html += subPhrase(mode2, charsArg, beg1, len1, prev);
        html += spanend;
        prev = true;
      }
      if (len2 > 0) {
        html += spanRemainder;
        html += subPhrase(mode2, charsArg, beg2, len2, prev);
        html += spanend;
      }
      return html + lastchar;
    };
    const displayForward = function(mode2, charsArg, state, index, length, spanAhead) {
      let html = "";
      let beg1;
      let len1;
      let beg2;
      let len2;
      let lastchar = PHRASE_END;
      const spanRemainder = `<span class="${style2.CLASS_REMAINDER}">`;
      const spanend = "</span>";
      let prev = false;
      switch (state) {
        case id2.EMPTY:
          html += PHRASE_EMPTY;
        /* // eslint-disable-next-line no-fallthrough */
        case id2.NOMATCH:
        case id2.ACTIVE:
          beg1 = index;
          len1 = 0;
          beg2 = index;
          len2 = charsArg.length - beg2;
          break;
        case id2.MATCH:
          beg1 = index;
          len1 = length;
          beg2 = index + len1;
          len2 = charsArg.length - beg2;
          break;
        default:
          throw new Error("unrecognized state");
      }
      lastchar = PHRASE_END;
      if (len1 > MAX_PHRASE) {
        len1 = MAX_PHRASE;
        lastchar = PHRASE_CONTINUE;
        len2 = 0;
      } else if (len1 + len2 > MAX_PHRASE) {
        lastchar = PHRASE_CONTINUE;
        len2 = MAX_PHRASE - len1;
      }
      if (len1 > 0) {
        html += spanAhead;
        html += subPhrase(mode2, charsArg, beg1, len1, prev);
        html += spanend;
        prev = true;
      }
      if (len2 > 0) {
        html += spanRemainder;
        html += subPhrase(mode2, charsArg, beg2, len2, prev);
        html += spanend;
      }
      return html + lastchar;
    };
    const displayAhead = function(mode2, charsArg, state, index, length) {
      const spanAhead = `<span class="${style2.CLASS_LOOKAHEAD}">`;
      return displayForward(mode2, charsArg, state, index, length, spanAhead);
    };
    const displayNone = function(mode2, charsArg, state, index, length) {
      const spanAhead = `<span class="${style2.CLASS_MATCH}">`;
      return displayForward(mode2, charsArg, state, index, length, spanAhead);
    };
    const htmlTable = function(mode2) {
      if (rules === null) {
        return "";
      }
      let html = "";
      let thisLine;
      let thatLine;
      let lookAhead;
      let lookBehind;
      let lookAround;
      let anchor;
      html += "<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>";
      html += "<th>operator</th><th>phrase</th></tr>\n";
      circular.forEach((lineIndex) => {
        const line = records[lineIndex];
        thisLine = line.thisLine;
        thatLine = line.thatLine !== void 0 ? line.thatLine : "--";
        lookAhead = false;
        lookBehind = false;
        lookAround = false;
        if (line.lookAround === id2.LOOKAROUND_AHEAD) {
          lookAhead = true;
          lookAround = true;
          anchor = line.lookAnchor;
        }
        if (line.opcode.type === id2.AND || line.opcode.type === id2.NOT) {
          lookAhead = true;
          lookAround = true;
          anchor = line.phraseIndex;
        }
        if (line.lookAround === id2.LOOKAROUND_BEHIND) {
          lookBehind = true;
          lookAround = true;
          anchor = line.lookAnchor;
        }
        if (line.opcode.type === id2.BKA || line.opcode.type === id2.BKN) {
          lookBehind = true;
          lookAround = true;
          anchor = line.phraseIndex;
        }
        html += "<tr>";
        html += `<td>${thisLine}</td><td>${thatLine}</td>`;
        html += `<td>${line.phraseIndex}</td>`;
        html += `<td>${line.phraseLength}</td>`;
        html += `<td>${line.depth}</td>`;
        html += "<td>";
        switch (line.state) {
          case id2.ACTIVE:
            html += `<span class="${style2.CLASS_ACTIVE}">&darr;&nbsp;</span>`;
            break;
          case id2.MATCH:
            html += `<span class="${style2.CLASS_MATCH}">&uarr;M</span>`;
            break;
          case id2.NOMATCH:
            html += `<span class="${style2.CLASS_NOMATCH}">&uarr;N</span>`;
            break;
          case id2.EMPTY:
            html += `<span class="${style2.CLASS_EMPTY}">&uarr;E</span>`;
            break;
          default:
            html += `<span class="${style2.CLASS_ACTIVE}">--</span>`;
            break;
        }
        html += "</td>";
        html += "<td>";
        html += that.indent(line.depth);
        if (lookAhead) {
          html += `<span class="${style2.CLASS_LOOKAHEAD}">`;
        } else if (lookBehind) {
          html += `<span class="${style2.CLASS_LOOKBEHIND}">`;
        }
        html += utils2.opcodeToString(line.opcode.type);
        if (line.opcode.type === id2.RNM) {
          html += `(${rules[line.opcode.index].name}) `;
        }
        if (line.opcode.type === id2.BKR) {
          const casetype = line.opcode.bkrCase === id2.BKR_MODE_CI ? "%i" : "%s";
          const modetype = line.opcode.bkrMode === id2.BKR_MODE_UM ? "%u" : "%p";
          html += `(\\${casetype}${modetype}${rules[line.opcode.index].name}) `;
        }
        if (line.opcode.type === id2.UDT) {
          html += `(${udts[line.opcode.index].name}) `;
        }
        if (line.opcode.type === id2.TRG) {
          html += `(${displayTrg(mode2, line.opcode)}) `;
        }
        if (line.opcode.type === id2.TBS) {
          html += `(${displayTbs(mode2, line.opcode)}) `;
        }
        if (line.opcode.type === id2.TLS) {
          html += `(${displayTls(mode2, line.opcode)}) `;
        }
        if (line.opcode.type === id2.REP) {
          html += `(${displayRep(mode2, line.opcode)}) `;
        }
        if (lookAround) {
          html += "</span>";
        }
        html += "</td>";
        html += "<td>";
        if (lookBehind) {
          html += displayBehind(mode2, chars, line.state, line.phraseIndex, line.phraseLength, anchor);
        } else if (lookAhead) {
          html += displayAhead(mode2, chars, line.state, line.phraseIndex, line.phraseLength);
        } else {
          html += displayNone(mode2, chars, line.state, line.phraseIndex, line.phraseLength);
        }
        html += "</td></tr>\n";
      });
      html += "<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>";
      html += "<th>operator</th><th>phrase</th></tr>\n";
      html += "</table>\n";
      return html;
    };
    this.toHtml = function(modearg, caption) {
      let mode2 = MODE_ASCII;
      if (typeof modearg === "string" && modearg.length >= 3) {
        const modein = modearg.toLowerCase().slice(0, 3);
        if (modein === "hex") {
          mode2 = MODE_HEX;
        } else if (modein === "dec") {
          mode2 = MODE_DEC;
        } else if (modein === "uni") {
          mode2 = MODE_UNICODE;
        }
      }
      let html = "";
      html += htmlHeader(mode2, caption);
      html += htmlTable(mode2);
      html += htmlFooter();
      return html;
    };
  };
  return trace;
}
var nodeExports;
var hasRequiredNodeExports;
function requireNodeExports() {
  if (hasRequiredNodeExports) return nodeExports;
  hasRequiredNodeExports = 1;
  nodeExports = {
    ast: requireAst(),
    circular: requireCircularBuffer(),
    ids: requireIdentifiers(),
    parser: requireParser(),
    stats: requireStats(),
    trace: requireTrace(),
    utils: requireUtilities(),
    emitcss: requireEmitcss(),
    style: requireStyle()
  };
  return nodeExports;
}
var utils$7 = {};
var sha3 = {};
var _assert = {};
var hasRequired_assert;
function require_assert() {
  if (hasRequired_assert) return _assert;
  hasRequired_assert = 1;
  Object.defineProperty(_assert, "__esModule", { value: true });
  _assert.output = _assert.exists = _assert.hash = _assert.bytes = _assert.bool = _assert.number = void 0;
  function number2(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`Wrong positive integer: ${n}`);
  }
  _assert.number = number2;
  function bool(b) {
    if (typeof b !== "boolean")
      throw new Error(`Expected boolean, not ${b}`);
  }
  _assert.bool = bool;
  function bytes2(b, ...lengths) {
    if (!(b instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  _assert.bytes = bytes2;
  function hash2(hash3) {
    if (typeof hash3 !== "function" || typeof hash3.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number2(hash3.outputLen);
    number2(hash3.blockLen);
  }
  _assert.hash = hash2;
  function exists2(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  _assert.exists = exists2;
  function output(out, instance) {
    bytes2(out);
    const min2 = instance.outputLen;
    if (out.length < min2) {
      throw new Error(`digestInto() expects output buffer of length at least ${min2}`);
    }
  }
  _assert.output = output;
  const assert2 = { number: number2, bool, bytes: bytes2, hash: hash2, exists: exists2, output };
  _assert.default = assert2;
  return _assert;
}
var _u64 = {};
var hasRequired_u64;
function require_u64() {
  if (hasRequired_u64) return _u64;
  hasRequired_u64 = 1;
  Object.defineProperty(_u64, "__esModule", { value: true });
  _u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.add = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = _u64.split = _u64.fromBig = void 0;
  const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  const _32n = /* @__PURE__ */ BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  _u64.fromBig = fromBig;
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  _u64.split = split;
  const toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
  _u64.toBig = toBig;
  const shrSH = (h, _l, s) => h >>> s;
  _u64.shrSH = shrSH;
  const shrSL = (h, l, s) => h << 32 - s | l >>> s;
  _u64.shrSL = shrSL;
  const rotrSH = (h, l, s) => h >>> s | l << 32 - s;
  _u64.rotrSH = rotrSH;
  const rotrSL = (h, l, s) => h << 32 - s | l >>> s;
  _u64.rotrSL = rotrSL;
  const rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
  _u64.rotrBH = rotrBH;
  const rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
  _u64.rotrBL = rotrBL;
  const rotr32H = (_h, l) => l;
  _u64.rotr32H = rotr32H;
  const rotr32L = (h, _l) => h;
  _u64.rotr32L = rotr32L;
  const rotlSH = (h, l, s) => h << s | l >>> 32 - s;
  _u64.rotlSH = rotlSH;
  const rotlSL = (h, l, s) => l << s | h >>> 32 - s;
  _u64.rotlSL = rotlSL;
  const rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
  _u64.rotlBH = rotlBH;
  const rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
  _u64.rotlBL = rotlBL;
  function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
  }
  _u64.add = add;
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  _u64.add3L = add3L;
  const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
  _u64.add3H = add3H;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  _u64.add4L = add4L;
  const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
  _u64.add4H = add4H;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  _u64.add5L = add5L;
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
  _u64.add5H = add5H;
  const u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
  };
  _u64.default = u64;
  return _u64;
}
var utils$6 = {};
var crypto$4 = {};
var hasRequiredCrypto$2;
function requireCrypto$2() {
  if (hasRequiredCrypto$2) return crypto$4;
  hasRequiredCrypto$2 = 1;
  Object.defineProperty(crypto$4, "__esModule", { value: true });
  crypto$4.crypto = void 0;
  crypto$4.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  return crypto$4;
}
var hasRequiredUtils$5;
function requireUtils$5() {
  if (hasRequiredUtils$5) return utils$6;
  hasRequiredUtils$5 = 1;
  (function(exports) {
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
    const crypto_1 = /* @__PURE__ */ requireCrypto$2();
    const u8a = (a) => a instanceof Uint8Array;
    const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u32;
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView;
    const rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports.isLE)
      throw new Error("Non little-endian hardware is not supported");
    const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes2) {
      if (!u8a(bytes2))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes2.length; i++) {
        hex += hexes[bytes2[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array2 = new Uint8Array(len / 2);
      for (let i = 0; i < array2.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array2[i] = byte;
      }
      return array2;
    }
    exports.hexToBytes = hexToBytes;
    const nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function toBytes(data2) {
      if (typeof data2 === "string")
        data2 = utf8ToBytes(data2);
      if (!u8a(data2))
        throw new Error(`expected Uint8Array, got ${typeof data2}`);
      return data2;
    }
    exports.toBytes = toBytes;
    function concatBytes(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports.concatBytes = concatBytes;
    class Hash2 {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    exports.Hash = Hash2;
    const toStr = {}.toString;
    function checkOpts(defaults2, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults2, opts);
      return merged;
    }
    exports.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes2;
  })(utils$6);
  return utils$6;
}
var hasRequiredSha3;
function requireSha3() {
  if (hasRequiredSha3) return sha3;
  hasRequiredSha3 = 1;
  Object.defineProperty(sha3, "__esModule", { value: true });
  sha3.shake256 = sha3.shake128 = sha3.keccak_512 = sha3.keccak_384 = sha3.keccak_256 = sha3.keccak_224 = sha3.sha3_512 = sha3.sha3_384 = sha3.sha3_256 = sha3.sha3_224 = sha3.Keccak = sha3.keccakP = void 0;
  const _assert_js_1 = /* @__PURE__ */ require_assert();
  const _u64_js_1 = /* @__PURE__ */ require_u64();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  const _0n = /* @__PURE__ */ BigInt(0);
  const _1n = /* @__PURE__ */ BigInt(1);
  const _2n = /* @__PURE__ */ BigInt(2);
  const _7n = /* @__PURE__ */ BigInt(7);
  const _256n = /* @__PURE__ */ BigInt(256);
  const _0x71n = /* @__PURE__ */ BigInt(113);
  for (let round2 = 0, R = _1n, x = 1, y = 0; round2 < 24; round2++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
    let t = _0n;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n)
        t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
  const rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
  const rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round2 = 24 - rounds; round2 < 24; round2++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round2];
      s[1] ^= SHA3_IOTA_L[round2];
    }
    B.fill(0);
  }
  sha3.keccakP = keccakP;
  class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_1.number)(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
      keccakP(this.state32, this.rounds);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data2) {
      (0, _assert_js_1.exists)(this);
      const { blockLen, state } = this;
      data2 = (0, utils_js_1.toBytes)(data2);
      const len = data2.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0; i < take; i++)
          state[this.pos++] ^= data2[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      (0, _assert_js_1.exists)(this, false);
      (0, _assert_js_1.bytes)(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      (0, _assert_js_1.number)(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      (0, _assert_js_1.output)(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  }
  sha3.Keccak = Keccak;
  const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
  sha3.sha3_224 = gen(6, 144, 224 / 8);
  sha3.sha3_256 = gen(6, 136, 256 / 8);
  sha3.sha3_384 = gen(6, 104, 384 / 8);
  sha3.sha3_512 = gen(6, 72, 512 / 8);
  sha3.keccak_224 = gen(1, 144, 224 / 8);
  sha3.keccak_256 = gen(1, 136, 256 / 8);
  sha3.keccak_384 = gen(1, 104, 384 / 8);
  sha3.keccak_512 = gen(1, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  sha3.shake128 = genShake(31, 168, 128 / 8);
  sha3.shake256 = genShake(31, 136, 256 / 8);
  return sha3;
}
var hasRequiredUtils$4;
function requireUtils$4() {
  if (hasRequiredUtils$4) return utils$7;
  hasRequiredUtils$4 = 1;
  Object.defineProperty(utils$7, "__esModule", { value: true });
  utils$7.parseIntegerNumber = utils$7.isEIP55Address = void 0;
  const sha3_1 = /* @__PURE__ */ requireSha3();
  const utils_1 = /* @__PURE__ */ requireUtils$5();
  const isEIP55Address = (address2) => {
    if (address2.length != 42) {
      return false;
    }
    const lowerAddress = `${address2}`.toLowerCase().replace("0x", "");
    const hash2 = (0, utils_1.bytesToHex)((0, sha3_1.keccak_256)(lowerAddress));
    let ret = "0x";
    for (let i = 0; i < lowerAddress.length; i++) {
      if (parseInt(hash2[i], 16) >= 8) {
        ret += lowerAddress[i].toUpperCase();
      } else {
        ret += lowerAddress[i];
      }
    }
    return address2 === ret;
  };
  utils$7.isEIP55Address = isEIP55Address;
  const parseIntegerNumber = (number2) => {
    const parsed = parseInt(number2);
    if (isNaN(parsed))
      throw new Error("Invalid number.");
    if (parsed === Infinity)
      throw new Error("Invalid number.");
    return parsed;
  };
  utils$7.parseIntegerNumber = parseIntegerNumber;
  return utils$7;
}
var hasRequiredCallbacks;
function requireCallbacks() {
  if (hasRequiredCallbacks) return callbacks;
  hasRequiredCallbacks = 1;
  var __importDefault2 = callbacks && callbacks.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(callbacks, "__esModule", { value: true });
  callbacks.cb = void 0;
  const node_exports_1 = __importDefault2(requireNodeExports());
  const utils2 = node_exports_1.default.utils;
  const id2 = node_exports_1.default.ids;
  const utils_1 = requireUtils$4();
  const ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
  const isValidISO8601Date = (inputDate) => {
    const inputMatch = ISO8601.exec(inputDate);
    if (!inputMatch) {
      return false;
    }
    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();
    const parsedInputMatch = ISO8601.exec(inputDateParsed);
    return inputMatch.groups.date === parsedInputMatch.groups.date;
  };
  callbacks.cb = {
    signInWithEtherium: function(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.ACTIVE:
          if (typeof data2 !== "object" || data2 === null) {
            throw new Error("data must be an object");
          }
          break;
        case id2.NOMATCH:
          data2.errors.push(`invalid message: max line number was ${data2.lineno}`);
      }
    },
    lineno: function lineno(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.lineno += 1;
      }
    },
    exTitle: function exTitle(result, chars, phraseIndex, data2) {
      if (result.state === id2.NOMATCH) {
        data2.lineno -= 1;
      }
    },
    nbTitle: function nbTitle(result, chars, phraseIndex, data2) {
      if (result.state === id2.NOMATCH) {
        data2.lineno -= 1;
      }
    },
    riTitle: function riTitle(result, chars, phraseIndex, data2) {
      if (result.state === id2.NOMATCH) {
        data2.lineno -= 1;
      }
    },
    reTitle: function reTitle(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.resources = [];
      } else if (result.state === id2.NOMATCH) {
        data2.lineno -= 1;
      }
    },
    oscheme: function oscheme(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.scheme = utils2.charsToString(chars, phraseIndex, result.phraseLength - 3);
      }
    },
    domain: function domain2(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.domain = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
          data2.errors.push(`line ${data2.lineno}: domain cannot be empty`);
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid domain`);
      }
    },
    address: function address2(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.address = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          if (!(0, utils_1.isEIP55Address)(data2.address)) {
            data2.errors.push(`line ${data2.lineno}: invalid EIP-55 address - ${data2.address}`);
          }
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid address`);
          break;
      }
    },
    statement: function statement(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.statement = utils2.charsToString(chars, phraseIndex, result.phraseLength);
      }
    },
    emptyStatement: function emptyStatement(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.statement = "";
      }
    },
    version: function version2(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.version = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid version`);
          break;
      }
    },
    nonce: function nonce(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.nonce = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid nonce`);
          break;
      }
    },
    issuedAt: function issuedAt(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.issuedAt = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          if (!isValidISO8601Date(data2.issuedAt)) {
            data2.errors.push(`line ${data2.lineno}: invalid issued-at date time semantics`);
          }
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid issued-at date time syntax`);
          break;
      }
    },
    expirationTime: function expirationTime(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.expirationTime = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          if (!isValidISO8601Date(data2.expirationTime)) {
            data2.errors.push(`line ${data2.lineno}: invalid expiration-time date time semantics`);
          }
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid expiration-time date time syntax`);
          break;
      }
    },
    notBefore: function notBefore(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.notBefore = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          if (!isValidISO8601Date(data2.notBefore)) {
            data2.errors.push(`line ${data2.lineno}: invalid not-before date time semantics`);
          }
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid not-before date time syntax`);
          break;
      }
    },
    requestId: function requestId(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.requestId = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
          data2.requestId = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid requestID`);
          break;
      }
    },
    chainId: function chainId(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.chainId = (0, utils_1.parseIntegerNumber)(utils2.charsToString(chars, phraseIndex, result.phraseLength));
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid chain-id`);
          break;
      }
    },
    uriR: function uriR(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriR = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid resource URI`);
          break;
      }
    },
    resource: function resource(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.resources.push(data2.uriR);
          delete data2.uriR;
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid resource`);
          break;
      }
    },
    // handle the URI
    scheme: function scheme(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.scheme = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI scheme`);
          break;
      }
    },
    userinfo: function userinfo(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.userinfo = utils2.charsToString(chars, phraseIndex, result.phraseLength - 1);
          break;
      }
    },
    host: function host(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.ACTIVE:
          data2.iplit = false;
          break;
        case id2.MATCH:
          if (data2.iplit) {
            data2.uriElements.host = utils2.charsToString(chars, phraseIndex + 1, result.phraseLength - 2);
          } else {
            data2.uriElements.host = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          }
          break;
        case id2.EMPTY:
          data2.uriElements.host = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI host`);
          break;
      }
    },
    ipLiteral: function ipLiteral(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.iplit = true;
      }
    },
    port: function port(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.port = (0, utils_1.parseIntegerNumber)(utils2.charsToString(chars, phraseIndex, result.phraseLength));
          break;
        case id2.EMPTY:
          data2.uriElements.port = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI port`);
          break;
      }
    },
    pathAbempty: function pathAbempty(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.path = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
          data2.uriElements.path = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI path-abempty`);
          break;
      }
    },
    pathAbsolute: function pathAbsolute(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.path = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
      }
    },
    pathRootless: function pathRootless(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.path = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
      }
    },
    pathEmpty: function pathEmpty(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI - path-empty must be empty`);
          break;
        case id2.EMPTY:
          data2.uriElements.path = "";
          break;
      }
    },
    query: function query(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.query = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
          data2.uriElements.query = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI query`);
          break;
      }
    },
    fragment: function fragment(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uriElements.fragment = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
          data2.uriElements.fragment = "";
          break;
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI fragment`);
          break;
      }
    },
    uri: function URI(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.uri = utils2.charsToString(chars, phraseIndex, result.phraseLength);
          break;
        case id2.EMPTY:
        case id2.NOMATCH:
          data2.errors.push(`line ${data2.lineno}: invalid URI`);
          break;
      }
    },
    ipv4: function ipv4(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.ipv4 = true;
      }
    },
    h16: function h16(result, chars, phraseIndex, data2) {
      if (result.state === id2.MATCH) {
        data2.h16count += 1;
      }
    },
    nodcolon: function nodcolon(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.ACTIVE:
          data2.h16count = 0;
          data2.ipv4 = false;
          break;
        case id2.MATCH:
          if (data2.ipv4) {
            if (data2.h16count === 6) {
              result.state = id2.MATCH;
            } else {
              result.state = id2.NOMATCH;
              result.phraseLength = 0;
            }
          } else {
            if (data2.h16count === 8) {
              result.state = id2.MATCH;
            } else {
              result.state = id2.NOMATCH;
              result.phraseLength = 0;
            }
          }
          break;
      }
    },
    dcolon: function dcolon(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.ACTIVE:
          data2.h16count = 0;
          data2.ipv4 = false;
          break;
        case id2.MATCH:
          if (data2.ipv4) {
            if (data2.h16count < 6) {
              result.state = id2.MATCH;
            } else {
              result.state = id2.NOMATCH;
              result.phraseLength = 0;
            }
          } else {
            if (data2.h16count < 8) {
              result.state = id2.MATCH;
            } else {
              result.state = id2.NOMATCH;
              result.phraseLength = 0;
            }
          }
          break;
      }
    },
    decOctet: function decOctet(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.ACTIVE:
          data2.octet = 0;
          break;
        case id2.MATCH:
          if (data2.octet > 255) {
            result.state = id2.NOMATCH;
            result.phraseLength = 0;
          } else {
            result.state = id2.MATCH;
          }
          break;
      }
    },
    decDigit: function decDigit(result, chars, phraseIndex, data2) {
      switch (result.state) {
        case id2.MATCH:
          data2.octet = 10 * data2.octet + chars[phraseIndex] - 48;
          break;
      }
    }
  };
  return callbacks;
}
var hasRequiredAbnf;
function requireAbnf() {
  if (hasRequiredAbnf) return abnf;
  hasRequiredAbnf = 1;
  var __importDefault2 = abnf && abnf.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(abnf, "__esModule", { value: true });
  abnf.isUri = abnf.ParsedMessage = void 0;
  const siwe_grammar_1 = requireSiweGrammar();
  const callbacks_1 = requireCallbacks();
  const node_exports_1 = __importDefault2(requireNodeExports());
  const grammarObj = new siwe_grammar_1.grammar();
  class ParsedMessage {
    // and display it on an HTML page.
    constructor(msg) {
      const parser2 = new node_exports_1.default.parser();
      parser2.callbacks["sign-in-with-ethereum"] = callbacks_1.cb.signInWithEtherium;
      parser2.callbacks["oscheme"] = callbacks_1.cb.oscheme;
      parser2.callbacks["domain"] = callbacks_1.cb.domain;
      parser2.callbacks["LF"] = callbacks_1.cb.lineno;
      parser2.callbacks["ex-title"] = callbacks_1.cb.exTitle;
      parser2.callbacks["nb-title"] = callbacks_1.cb.nbTitle;
      parser2.callbacks["ri-title"] = callbacks_1.cb.riTitle;
      parser2.callbacks["re-title"] = callbacks_1.cb.reTitle;
      parser2.callbacks["address"] = callbacks_1.cb.address;
      parser2.callbacks["statement"] = callbacks_1.cb.statement;
      parser2.callbacks["empty-statement"] = callbacks_1.cb.emptyStatement;
      parser2.callbacks["version"] = callbacks_1.cb.version;
      parser2.callbacks["chain-id"] = callbacks_1.cb.chainId;
      parser2.callbacks["nonce"] = callbacks_1.cb.nonce;
      parser2.callbacks["issued-at"] = callbacks_1.cb.issuedAt;
      parser2.callbacks["expiration-time"] = callbacks_1.cb.expirationTime;
      parser2.callbacks["not-before"] = callbacks_1.cb.notBefore;
      parser2.callbacks["request-id"] = callbacks_1.cb.requestId;
      parser2.callbacks["uri"] = callbacks_1.cb.uri;
      parser2.callbacks["uri-r"] = callbacks_1.cb.uriR;
      parser2.callbacks["resource"] = callbacks_1.cb.resource;
      parser2.callbacks["scheme"] = callbacks_1.cb.scheme;
      parser2.callbacks["userinfo-at"] = callbacks_1.cb.userinfo;
      parser2.callbacks["host"] = callbacks_1.cb.host;
      parser2.callbacks["IP-literal"] = callbacks_1.cb.ipLiteral;
      parser2.callbacks["port"] = callbacks_1.cb.port;
      parser2.callbacks["path-abempty"] = callbacks_1.cb.pathAbempty;
      parser2.callbacks["path-absolute"] = callbacks_1.cb.pathAbsolute;
      parser2.callbacks["path-rootless"] = callbacks_1.cb.pathRootless;
      parser2.callbacks["path-empty"] = callbacks_1.cb.pathEmpty;
      parser2.callbacks["query"] = callbacks_1.cb.query;
      parser2.callbacks["fragment"] = callbacks_1.cb.fragment;
      parser2.callbacks["IPv4address"] = callbacks_1.cb.ipv4;
      parser2.callbacks["nodcolon"] = callbacks_1.cb.nodcolon;
      parser2.callbacks["dcolon"] = callbacks_1.cb.dcolon;
      parser2.callbacks["h16"] = callbacks_1.cb.h16;
      parser2.callbacks["h16c"] = callbacks_1.cb.h16;
      parser2.callbacks["h16n"] = callbacks_1.cb.h16;
      parser2.callbacks["h16cn"] = callbacks_1.cb.h16;
      parser2.callbacks["dec-octet"] = callbacks_1.cb.decOctet;
      parser2.callbacks["dec-digit"] = callbacks_1.cb.decDigit;
      const elements = {
        errors: [],
        lineno: 1,
        scheme: void 0,
        domain: void 0,
        address: void 0,
        statement: void 0,
        uri: void 0,
        version: void 0,
        chainId: void 0,
        nonce: void 0,
        issuedAt: void 0,
        expirationTime: void 0,
        notBefore: void 0,
        requestId: void 0,
        resources: void 0,
        uriElements: {
          scheme: void 0,
          userinfo: void 0,
          host: void 0,
          port: void 0,
          path: void 0,
          query: void 0,
          fragment: void 0
        }
      };
      const result = parser2.parse(grammarObj, 0, msg, elements);
      let throwMsg = "";
      for (let i = 0; i < elements.errors.length; i += 1) {
        throwMsg += elements.errors[i] + "\n";
      }
      if (!result.success) {
        throwMsg += `Invalid message: ${JSON.stringify(result)}`;
      }
      if (throwMsg !== "") {
        throw new Error(throwMsg);
      }
      this.scheme = elements.scheme;
      this.domain = elements.domain;
      this.address = elements.address;
      this.statement = elements.statement;
      this.uri = elements.uri;
      this.version = elements.version;
      this.chainId = elements.chainId;
      this.nonce = elements.nonce;
      this.issuedAt = elements.issuedAt;
      this.expirationTime = elements.expirationTime;
      this.notBefore = elements.notBefore;
      this.requestId = elements.requestId;
      this.resources = elements.resources;
      this.uriElements = elements.uriElements;
    }
  }
  abnf.ParsedMessage = ParsedMessage;
  const isUri = (uri2) => {
    const parser2 = new node_exports_1.default.parser();
    parser2.callbacks["IP-literal"] = callbacks_1.cb.ipLiteral;
    parser2.callbacks["IPv4address"] = callbacks_1.cb.ipv4;
    parser2.callbacks["nodcolon"] = callbacks_1.cb.nodcolon;
    parser2.callbacks["dcolon"] = callbacks_1.cb.dcolon;
    parser2.callbacks["h16"] = callbacks_1.cb.h16;
    parser2.callbacks["h16c"] = callbacks_1.cb.h16;
    parser2.callbacks["h16n"] = callbacks_1.cb.h16;
    parser2.callbacks["h16cn"] = callbacks_1.cb.h16;
    parser2.callbacks["dec-octet"] = callbacks_1.cb.decOctet;
    parser2.callbacks["dec-digit"] = callbacks_1.cb.decDigit;
    const data2 = { errors: [] };
    const result = parser2.parse(grammarObj, "uri-r", uri2, data2);
    return result.success;
  };
  abnf.isUri = isUri;
  return abnf;
}
var hasRequiredParsers;
function requireParsers() {
  if (hasRequiredParsers) return parsers;
  hasRequiredParsers = 1;
  (function(exports) {
    var __createBinding2 = parsers && parsers.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = parsers && parsers.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isUri = exports.ParsedMessage = void 0;
    const abnf_1 = requireAbnf();
    Object.defineProperty(exports, "ParsedMessage", { enumerable: true, get: function() {
      return abnf_1.ParsedMessage;
    } });
    const abnf_2 = requireAbnf();
    Object.defineProperty(exports, "isUri", { enumerable: true, get: function() {
      return abnf_2.isUri;
    } });
    __exportStar2(requireUtils$4(), exports);
  })(parsers);
  return parsers;
}
var ethersCompat = {};
var lib_commonjs$1 = {};
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done) throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0) continue;
      if (result === null || typeof result !== "object") throw new TypeError("Object expected");
      if (_ = accept(result.get)) descriptor.get = _;
      if (_ = accept(result.set)) descriptor.set = _;
      if (_ = accept(result.init)) initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field") initializers.unshift(_);
      else descriptor[key] = _;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter$2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
  if (k2 === void 0) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m[k];
    } };
  }
  Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
  if (k2 === void 0) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values$1(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await$1(v) {
  return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
}
function __asyncGenerator$1(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle2(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle2(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle2(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await$1(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues$1(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle2(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle2(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
};
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env2, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() {
      try {
        inner.call(this);
      } catch (e) {
        return Promise.reject(e);
      }
    };
    env2.stack.push({ value, dispose, async });
  } else if (async) {
    env2.stack.push({ async: true });
  }
  return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
  var e = new Error(message2);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env2) {
  function fail(e) {
    env2.error = env2.hasError ? new _SuppressedError(e, env2.error, "An error was suppressed during disposal.") : e;
    env2.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env2.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env2.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
        } else s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env2.hasError ? Promise.reject(env2.error) : Promise.resolve();
    if (env2.hasError) throw env2.error;
  }
  return next();
}
const tslib_es6 = {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter: __awaiter$2,
  __generator,
  __createBinding,
  __exportStar,
  __values: __values$1,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await: __await$1,
  __asyncGenerator: __asyncGenerator$1,
  __asyncDelegator,
  __asyncValues: __asyncValues$1,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources
};
const tslib_es6$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  __addDisposableResource,
  get __assign() {
    return __assign;
  },
  __asyncDelegator,
  __asyncGenerator: __asyncGenerator$1,
  __asyncValues: __asyncValues$1,
  __await: __await$1,
  __awaiter: __awaiter$2,
  __classPrivateFieldGet,
  __classPrivateFieldIn,
  __classPrivateFieldSet,
  __createBinding,
  __decorate,
  __disposeResources,
  __esDecorate,
  __exportStar,
  __extends,
  __generator,
  __importDefault,
  __importStar,
  __makeTemplateObject,
  __metadata,
  __param,
  __propKey,
  __read,
  __rest,
  __runInitializers,
  __setFunctionName,
  __spread,
  __spreadArray,
  __spreadArrays,
  __values: __values$1,
  default: tslib_es6
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$3 = /* @__PURE__ */ getAugmentedNamespace(tslib_es6$1);
var ethers = {};
var _version = {};
var hasRequired_version;
function require_version() {
  if (hasRequired_version) return _version;
  hasRequired_version = 1;
  Object.defineProperty(_version, "__esModule", { value: true });
  _version.version = void 0;
  _version.version = "6.15.0";
  return _version;
}
var abi = {};
var abiCoder = {};
var utils$5 = {};
var base58 = {};
var data = {};
var errors = {};
var properties = {};
var hasRequiredProperties;
function requireProperties() {
  if (hasRequiredProperties) return properties;
  hasRequiredProperties = 1;
  Object.defineProperty(properties, "__esModule", { value: true });
  properties.defineProperties = properties.resolveProperties = void 0;
  function checkType(value, type2, name) {
    const types2 = type2.split("|").map((t) => t.trim());
    for (let i = 0; i < types2.length; i++) {
      switch (type2) {
        case "any":
          return;
        case "bigint":
        case "boolean":
        case "number":
        case "string":
          if (typeof value === type2) {
            return;
          }
      }
    }
    const error = new Error(`invalid value for type ${type2}`);
    error.code = "INVALID_ARGUMENT";
    error.argument = `value.${name}`;
    error.value = value;
    throw error;
  }
  async function resolveProperties2(value) {
    const keys = Object.keys(value);
    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
    return results.reduce((accum, v, index) => {
      accum[keys[index]] = v;
      return accum;
    }, {});
  }
  properties.resolveProperties = resolveProperties2;
  function defineProperties(target, values, types2) {
    for (let key in values) {
      let value = values[key];
      const type2 = types2 ? types2[key] : null;
      if (type2) {
        checkType(value, type2, key);
      }
      Object.defineProperty(target, key, { enumerable: true, value, writable: false });
    }
  }
  properties.defineProperties = defineProperties;
  return properties;
}
var hasRequiredErrors;
function requireErrors() {
  if (hasRequiredErrors) return errors;
  hasRequiredErrors = 1;
  Object.defineProperty(errors, "__esModule", { value: true });
  errors.assertPrivate = errors.assertNormalize = errors.assertArgumentCount = errors.assertArgument = errors.assert = errors.makeError = errors.isCallException = errors.isError = void 0;
  const _version_js_1 = /* @__PURE__ */ require_version();
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  function stringify2(value, seen) {
    if (value == null) {
      return "null";
    }
    if (seen == null) {
      seen = /* @__PURE__ */ new Set();
    }
    if (typeof value === "object") {
      if (seen.has(value)) {
        return "[Circular]";
      }
      seen.add(value);
    }
    if (Array.isArray(value)) {
      return "[ " + value.map((v) => stringify2(v, seen)).join(", ") + " ]";
    }
    if (value instanceof Uint8Array) {
      const HEX2 = "0123456789abcdef";
      let result = "0x";
      for (let i = 0; i < value.length; i++) {
        result += HEX2[value[i] >> 4];
        result += HEX2[value[i] & 15];
      }
      return result;
    }
    if (typeof value === "object" && typeof value.toJSON === "function") {
      return stringify2(value.toJSON(), seen);
    }
    switch (typeof value) {
      case "boolean":
      case "number":
      case "symbol":
        return value.toString();
      case "bigint":
        return BigInt(value).toString();
      case "string":
        return JSON.stringify(value);
      case "object": {
        const keys = Object.keys(value);
        keys.sort();
        return "{ " + keys.map((k) => `${stringify2(k, seen)}: ${stringify2(value[k], seen)}`).join(", ") + " }";
      }
    }
    return `[ COULD NOT SERIALIZE ]`;
  }
  function isError2(error, code) {
    return error && error.code === code;
  }
  errors.isError = isError2;
  function isCallException(error) {
    return isError2(error, "CALL_EXCEPTION");
  }
  errors.isCallException = isCallException;
  function makeError(message2, code, info) {
    let shortMessage = message2;
    {
      const details = [];
      if (info) {
        if ("message" in info || "code" in info || "name" in info) {
          throw new Error(`value will overwrite populated values: ${stringify2(info)}`);
        }
        for (const key in info) {
          if (key === "shortMessage") {
            continue;
          }
          const value = info[key];
          details.push(key + "=" + stringify2(value));
        }
      }
      details.push(`code=${code}`);
      details.push(`version=${_version_js_1.version}`);
      if (details.length) {
        message2 += " (" + details.join(", ") + ")";
      }
    }
    let error;
    switch (code) {
      case "INVALID_ARGUMENT":
        error = new TypeError(message2);
        break;
      case "NUMERIC_FAULT":
      case "BUFFER_OVERRUN":
        error = new RangeError(message2);
        break;
      default:
        error = new Error(message2);
    }
    (0, properties_js_1.defineProperties)(error, { code });
    if (info) {
      Object.assign(error, info);
    }
    if (error.shortMessage == null) {
      (0, properties_js_1.defineProperties)(error, { shortMessage });
    }
    return error;
  }
  errors.makeError = makeError;
  function assert2(check, message2, code, info) {
    if (!check) {
      throw makeError(message2, code, info);
    }
  }
  errors.assert = assert2;
  function assertArgument(check, message2, name, value) {
    assert2(check, message2, "INVALID_ARGUMENT", { argument: name, value });
  }
  errors.assertArgument = assertArgument;
  function assertArgumentCount(count, expectedCount, message2) {
    if (message2 == null) {
      message2 = "";
    }
    if (message2) {
      message2 = ": " + message2;
    }
    assert2(count >= expectedCount, "missing argument" + message2, "MISSING_ARGUMENT", {
      count,
      expectedCount
    });
    assert2(count <= expectedCount, "too many arguments" + message2, "UNEXPECTED_ARGUMENT", {
      count,
      expectedCount
    });
  }
  errors.assertArgumentCount = assertArgumentCount;
  const _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
    try {
      if ("test".normalize(form) !== "test") {
        throw new Error("bad");
      }
      ;
      if (form === "NFD") {
        const check = String.fromCharCode(233).normalize("NFD");
        const expected = String.fromCharCode(101, 769);
        if (check !== expected) {
          throw new Error("broken");
        }
      }
      accum.push(form);
    } catch (error) {
    }
    return accum;
  }, []);
  function assertNormalize(form) {
    assert2(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
      operation: "String.prototype.normalize",
      info: { form }
    });
  }
  errors.assertNormalize = assertNormalize;
  function assertPrivate(givenGuard, guard, className) {
    if (className == null) {
      className = "";
    }
    if (givenGuard !== guard) {
      let method = className, operation = "new";
      if (className) {
        method += ".";
        operation += " " + className;
      }
      assert2(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
        operation
      });
    }
  }
  errors.assertPrivate = assertPrivate;
  return errors;
}
var hasRequiredData;
function requireData() {
  if (hasRequiredData) return data;
  hasRequiredData = 1;
  Object.defineProperty(data, "__esModule", { value: true });
  data.zeroPadBytes = data.zeroPadValue = data.stripZerosLeft = data.dataSlice = data.dataLength = data.concat = data.hexlify = data.isBytesLike = data.isHexString = data.getBytesCopy = data.getBytes = void 0;
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  function _getBytes(value, name, copy) {
    if (value instanceof Uint8Array) {
      if (copy) {
        return new Uint8Array(value);
      }
      return value;
    }
    if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset = 2;
      for (let i = 0; i < result.length; i++) {
        result[i] = parseInt(value.substring(offset, offset + 2), 16);
        offset += 2;
      }
      return result;
    }
    (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
  }
  function getBytes(value, name) {
    return _getBytes(value, name, false);
  }
  data.getBytes = getBytes;
  function getBytesCopy(value, name) {
    return _getBytes(value, name, true);
  }
  data.getBytesCopy = getBytesCopy;
  function isHexString2(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
      return false;
    }
    if (typeof length === "number" && value.length !== 2 + 2 * length) {
      return false;
    }
    if (length === true && value.length % 2 !== 0) {
      return false;
    }
    return true;
  }
  data.isHexString = isHexString2;
  function isBytesLike2(value) {
    return isHexString2(value, true) || value instanceof Uint8Array;
  }
  data.isBytesLike = isBytesLike2;
  const HexCharacters2 = "0123456789abcdef";
  function hexlify2(data2) {
    const bytes2 = getBytes(data2);
    let result = "0x";
    for (let i = 0; i < bytes2.length; i++) {
      const v = bytes2[i];
      result += HexCharacters2[(v & 240) >> 4] + HexCharacters2[v & 15];
    }
    return result;
  }
  data.hexlify = hexlify2;
  function concat2(datas) {
    return "0x" + datas.map((d) => hexlify2(d).substring(2)).join("");
  }
  data.concat = concat2;
  function dataLength(data2) {
    if (isHexString2(data2, true)) {
      return (data2.length - 2) / 2;
    }
    return getBytes(data2).length;
  }
  data.dataLength = dataLength;
  function dataSlice(data2, start, end) {
    const bytes2 = getBytes(data2);
    if (end != null && end > bytes2.length) {
      (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
        buffer: bytes2,
        length: bytes2.length,
        offset: end
      });
    }
    return hexlify2(bytes2.slice(start == null ? 0 : start, end == null ? bytes2.length : end));
  }
  data.dataSlice = dataSlice;
  function stripZerosLeft(data2) {
    let bytes2 = hexlify2(data2).substring(2);
    while (bytes2.startsWith("00")) {
      bytes2 = bytes2.substring(2);
    }
    return "0x" + bytes2;
  }
  data.stripZerosLeft = stripZerosLeft;
  function zeroPad2(data2, length, left) {
    const bytes2 = getBytes(data2);
    (0, errors_js_1.assert)(length >= bytes2.length, "padding exceeds data length", "BUFFER_OVERRUN", {
      buffer: new Uint8Array(bytes2),
      length,
      offset: length + 1
    });
    const result = new Uint8Array(length);
    result.fill(0);
    if (left) {
      result.set(bytes2, length - bytes2.length);
    } else {
      result.set(bytes2, 0);
    }
    return hexlify2(result);
  }
  function zeroPadValue(data2, length) {
    return zeroPad2(data2, length, true);
  }
  data.zeroPadValue = zeroPadValue;
  function zeroPadBytes(data2, length) {
    return zeroPad2(data2, length, false);
  }
  data.zeroPadBytes = zeroPadBytes;
  return data;
}
var maths = {};
var hasRequiredMaths;
function requireMaths() {
  if (hasRequiredMaths) return maths;
  hasRequiredMaths = 1;
  Object.defineProperty(maths, "__esModule", { value: true });
  maths.toQuantity = maths.toBeArray = maths.toBeHex = maths.toNumber = maths.getNumber = maths.toBigInt = maths.getUint = maths.getBigInt = maths.mask = maths.toTwos = maths.fromTwos = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const maxValue = 9007199254740991;
  function fromTwos(_value, _width) {
    const value = getUint(_value, "value");
    const width = BigInt(getNumber(_width, "width"));
    (0, errors_js_1.assert)(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
      operation: "fromTwos",
      fault: "overflow",
      value: _value
    });
    if (value >> width - BN_1) {
      const mask2 = (BN_1 << width) - BN_1;
      return -((~value & mask2) + BN_1);
    }
    return value;
  }
  maths.fromTwos = fromTwos;
  function toTwos(_value, _width) {
    let value = getBigInt(_value, "value");
    const width = BigInt(getNumber(_width, "width"));
    const limit = BN_1 << width - BN_1;
    if (value < BN_0) {
      value = -value;
      (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value
      });
      const mask2 = (BN_1 << width) - BN_1;
      return (~value & mask2) + BN_1;
    } else {
      (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value
      });
    }
    return value;
  }
  maths.toTwos = toTwos;
  function mask(_value, _bits) {
    const value = getUint(_value, "value");
    const bits = BigInt(getNumber(_bits, "bits"));
    return value & (BN_1 << bits) - BN_1;
  }
  maths.mask = mask;
  function getBigInt(value, name) {
    switch (typeof value) {
      case "bigint":
        return value;
      case "number":
        (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
        (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return BigInt(value);
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          if (value[0] === "-" && value[1] !== "-") {
            return -BigInt(value.substring(1));
          }
          return BigInt(value);
        } catch (e) {
          (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
        }
    }
    (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
  }
  maths.getBigInt = getBigInt;
  function getUint(value, name) {
    const result = getBigInt(value, name);
    (0, errors_js_1.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
      fault: "overflow",
      operation: "getUint",
      value
    });
    return result;
  }
  maths.getUint = getUint;
  const Nibbles = "0123456789abcdef";
  function toBigInt(value) {
    if (value instanceof Uint8Array) {
      let result = "0x0";
      for (const v of value) {
        result += Nibbles[v >> 4];
        result += Nibbles[v & 15];
      }
      return BigInt(result);
    }
    return getBigInt(value);
  }
  maths.toBigInt = toBigInt;
  function getNumber(value, name) {
    switch (typeof value) {
      case "bigint":
        (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return Number(value);
      case "number":
        (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
        (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
        return value;
      case "string":
        try {
          if (value === "") {
            throw new Error("empty string");
          }
          return getNumber(BigInt(value), name);
        } catch (e) {
          (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
        }
    }
    (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
  }
  maths.getNumber = getNumber;
  function toNumber(value) {
    return getNumber(toBigInt(value));
  }
  maths.toNumber = toNumber;
  function toBeHex(_value, _width) {
    const value = getUint(_value, "value");
    let result = value.toString(16);
    if (_width == null) {
      if (result.length % 2) {
        result = "0" + result;
      }
    } else {
      const width = getNumber(_width, "width");
      (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
        operation: "toBeHex",
        fault: "overflow",
        value: _value
      });
      while (result.length < width * 2) {
        result = "0" + result;
      }
    }
    return "0x" + result;
  }
  maths.toBeHex = toBeHex;
  function toBeArray(_value) {
    const value = getUint(_value, "value");
    if (value === BN_0) {
      return new Uint8Array([]);
    }
    let hex = value.toString(16);
    if (hex.length % 2) {
      hex = "0" + hex;
    }
    const result = new Uint8Array(hex.length / 2);
    for (let i = 0; i < result.length; i++) {
      const offset = i * 2;
      result[i] = parseInt(hex.substring(offset, offset + 2), 16);
    }
    return result;
  }
  maths.toBeArray = toBeArray;
  function toQuantity(value) {
    let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
    while (result.startsWith("0")) {
      result = result.substring(1);
    }
    if (result === "") {
      result = "0";
    }
    return "0x" + result;
  }
  maths.toQuantity = toQuantity;
  return maths;
}
var hasRequiredBase58;
function requireBase58() {
  if (hasRequiredBase58) return base58;
  hasRequiredBase58 = 1;
  Object.defineProperty(base58, "__esModule", { value: true });
  base58.decodeBase58 = base58.encodeBase58 = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const maths_js_1 = /* @__PURE__ */ requireMaths();
  const Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  let Lookup = null;
  function getAlpha(letter) {
    if (Lookup == null) {
      Lookup = {};
      for (let i = 0; i < Alphabet.length; i++) {
        Lookup[Alphabet[i]] = BigInt(i);
      }
    }
    const result = Lookup[letter];
    (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
    return result;
  }
  const BN_0 = BigInt(0);
  const BN_58 = BigInt(58);
  function encodeBase58(_value) {
    const bytes2 = (0, data_js_1.getBytes)(_value);
    let value = (0, maths_js_1.toBigInt)(bytes2);
    let result = "";
    while (value) {
      result = Alphabet[Number(value % BN_58)] + result;
      value /= BN_58;
    }
    for (let i = 0; i < bytes2.length; i++) {
      if (bytes2[i]) {
        break;
      }
      result = Alphabet[0] + result;
    }
    return result;
  }
  base58.encodeBase58 = encodeBase58;
  function decodeBase58(value) {
    let result = BN_0;
    for (let i = 0; i < value.length; i++) {
      result *= BN_58;
      result += getAlpha(value[i]);
    }
    return result;
  }
  base58.decodeBase58 = decodeBase58;
  return base58;
}
var base64 = {};
var hasRequiredBase64;
function requireBase64() {
  if (hasRequiredBase64) return base64;
  hasRequiredBase64 = 1;
  Object.defineProperty(base64, "__esModule", { value: true });
  base64.encodeBase64 = base64.decodeBase64 = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  function decodeBase64(value) {
    return (0, data_js_1.getBytesCopy)(Buffer.from(value, "base64"));
  }
  base64.decodeBase64 = decodeBase64;
  function encodeBase64(data2) {
    return Buffer.from((0, data_js_1.getBytes)(data2)).toString("base64");
  }
  base64.encodeBase64 = encodeBase64;
  return base64;
}
var events = {};
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents) return events;
  hasRequiredEvents = 1;
  Object.defineProperty(events, "__esModule", { value: true });
  events.EventPayload = void 0;
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  class EventPayload {
    /**
     *  The event filter.
     */
    filter;
    /**
     *  The **EventEmitterable**.
     */
    emitter;
    #listener;
    /**
     *  Create a new **EventPayload** for %%emitter%% with
     *  the %%listener%% and for %%filter%%.
     */
    constructor(emitter, listener, filter2) {
      this.#listener = listener;
      (0, properties_js_1.defineProperties)(this, { emitter, filter: filter2 });
    }
    /**
     *  Unregister the triggered listener for future events.
     */
    async removeListener() {
      if (this.#listener == null) {
        return;
      }
      await this.emitter.off(this.filter, this.#listener);
    }
  }
  events.EventPayload = EventPayload;
  return events;
}
var fetch$1 = {};
var utf8 = {};
var hasRequiredUtf8;
function requireUtf8() {
  if (hasRequiredUtf8) return utf8;
  hasRequiredUtf8 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8CodePoints = exports.toUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = void 0;
    const data_js_1 = /* @__PURE__ */ requireData();
    const errors_js_1 = /* @__PURE__ */ requireErrors();
    function errorFunc(reason, offset, bytes2, output, badCodepoint) {
      (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes2);
    }
    function ignoreFunc(reason, offset, bytes2, output, badCodepoint) {
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for (let o = offset + 1; o < bytes2.length; o++) {
          if (bytes2[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === "OVERRUN") {
        return bytes2.length - offset - 1;
      }
      return 0;
    }
    function replaceFunc(reason, offset, bytes2, output, badCodepoint) {
      if (reason === "OVERLONG") {
        (0, errors_js_1.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output.push(badCodepoint);
        return 0;
      }
      output.push(65533);
      return ignoreFunc(reason, offset, bytes2);
    }
    exports.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
    function getUtf8CodePoints(_bytes, onError) {
      if (onError == null) {
        onError = exports.Utf8ErrorFuncs.error;
      }
      const bytes2 = (0, data_js_1.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      while (i < bytes2.length) {
        const c = bytes2[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError("UNEXPECTED_CONTINUE", i - 1, bytes2, result);
          } else {
            i += onError("BAD_PREFIX", i - 1, bytes2, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes2.length) {
          i += onError("OVERRUN", i - 1, bytes2, result);
          continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for (let j = 0; j < extraLength; j++) {
          let nextChar = bytes2[i];
          if ((nextChar & 192) != 128) {
            i += onError("MISSING_CONTINUE", i, bytes2, result);
            res = null;
            break;
          }
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes2, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes2, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError("OVERLONG", i - 1 - extraLength, bytes2, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes(str, form) {
      (0, errors_js_1.assertArgument)(typeof str === "string", "invalid string value", "str", str);
      if (form != null) {
        (0, errors_js_1.assertNormalize)(form);
        str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          const c2 = str.charCodeAt(i);
          (0, errors_js_1.assertArgument)(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
          const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return new Uint8Array(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    function toUtf8String(bytes2, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes2, onError));
    }
    exports.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports.toUtf8CodePoints = toUtf8CodePoints;
  })(utf8);
  return utf8;
}
var geturl = {};
class IncomingMessage extends Readable {
  __unenv__ = {};
  aborted = false;
  httpVersion = "1.1";
  httpVersionMajor = 1;
  httpVersionMinor = 1;
  complete = true;
  connection;
  socket;
  headers = {};
  trailers = {};
  method = "GET";
  url = "/";
  statusCode = 200;
  statusMessage = "";
  closed = false;
  errored = null;
  readable = false;
  constructor(socket) {
    super();
    this.socket = this.connection = socket || new Socket();
  }
  get rawHeaders() {
    return /* @__PURE__ */ rawHeaders(this.headers);
  }
  get rawTrailers() {
    return [];
  }
  setTimeout(_msecs, _callback) {
    return this;
  }
  get headersDistinct() {
    return _distinct(this.headers);
  }
  get trailersDistinct() {
    return _distinct(this.trailers);
  }
  _read() {
  }
}
function _distinct(obj) {
  const d = {};
  for (const [key, value] of Object.entries(obj)) {
    if (key) {
      d[key] = (Array.isArray(value) ? value : [value]).filter(Boolean);
    }
  }
  return d;
}
class ServerResponse extends Writable {
  __unenv__ = true;
  statusCode = 200;
  statusMessage = "";
  upgrading = false;
  chunkedEncoding = false;
  shouldKeepAlive = false;
  useChunkedEncodingByDefault = false;
  sendDate = false;
  finished = false;
  headersSent = false;
  strictContentLength = false;
  connection = null;
  socket = null;
  req;
  _headers = {};
  constructor(req) {
    super();
    this.req = req;
  }
  assignSocket(socket) {
    socket._httpMessage = this;
    this.socket = socket;
    this.connection = socket;
    this.emit("socket", socket);
    this._flush();
  }
  _flush() {
    this.flushHeaders();
  }
  detachSocket(_socket) {
  }
  writeContinue(_callback) {
  }
  writeHead(statusCode, arg1, arg2) {
    if (statusCode) {
      this.statusCode = statusCode;
    }
    if (typeof arg1 === "string") {
      this.statusMessage = arg1;
      arg1 = void 0;
    }
    const headers = arg2 || arg1;
    if (headers) {
      if (Array.isArray(headers)) ;
      else {
        for (const key in headers) {
          this.setHeader(key, headers[key]);
        }
      }
    }
    this.headersSent = true;
    return this;
  }
  writeProcessing() {
  }
  setTimeout(_msecs, _callback) {
    return this;
  }
  appendHeader(name, value) {
    name = name.toLowerCase();
    const current = this._headers[name];
    const all3 = [...Array.isArray(current) ? current : [current], ...Array.isArray(value) ? value : [value]].filter(Boolean);
    this._headers[name] = all3.length > 1 ? all3 : all3[0];
    return this;
  }
  setHeader(name, value) {
    this._headers[name.toLowerCase()] = Array.isArray(value) ? [...value] : value;
    return this;
  }
  setHeaders(headers) {
    for (const [key, value] of headers.entries()) {
      this.setHeader(key, value);
    }
    return this;
  }
  getHeader(name) {
    return this._headers[name.toLowerCase()];
  }
  getHeaders() {
    return this._headers;
  }
  getHeaderNames() {
    return Object.keys(this._headers);
  }
  hasHeader(name) {
    return name.toLowerCase() in this._headers;
  }
  removeHeader(name) {
    delete this._headers[name.toLowerCase()];
  }
  addTrailers(_headers) {
  }
  flushHeaders() {
  }
  writeEarlyHints(_headers, cb) {
    if (typeof cb === "function") {
      cb();
    }
  }
}
let Agent$1 = class Agent extends EventEmitter {
  __unenv__ = {};
  maxFreeSockets = 256;
  maxSockets = Infinity;
  maxTotalSockets = Infinity;
  freeSockets = {};
  sockets = {};
  requests = {};
  options;
  constructor(opts = {}) {
    super();
    this.options = opts;
  }
  destroy() {
  }
};
const METHODS = [
  "ACL",
  "BIND",
  "CHECKOUT",
  "CONNECT",
  "COPY",
  "DELETE",
  "GET",
  "HEAD",
  "LINK",
  "LOCK",
  "M-SEARCH",
  "MERGE",
  "MKACTIVITY",
  "MKCALENDAR",
  "MKCOL",
  "MOVE",
  "NOTIFY",
  "OPTIONS",
  "PATCH",
  "POST",
  "PRI",
  "PROPFIND",
  "PROPPATCH",
  "PURGE",
  "PUT",
  "REBIND",
  "REPORT",
  "SEARCH",
  "SOURCE",
  "SUBSCRIBE",
  "TRACE",
  "UNBIND",
  "UNLINK",
  "UNLOCK",
  "UNSUBSCRIBE"
];
const STATUS_CODES = {
  100: "Continue",
  101: "Switching Protocols",
  102: "Processing",
  103: "Early Hints",
  200: "OK",
  201: "Created",
  202: "Accepted",
  203: "Non-Authoritative Information",
  204: "No Content",
  205: "Reset Content",
  206: "Partial Content",
  207: "Multi-Status",
  208: "Already Reported",
  226: "IM Used",
  300: "Multiple Choices",
  301: "Moved Permanently",
  302: "Found",
  303: "See Other",
  304: "Not Modified",
  305: "Use Proxy",
  307: "Temporary Redirect",
  308: "Permanent Redirect",
  400: "Bad Request",
  401: "Unauthorized",
  402: "Payment Required",
  403: "Forbidden",
  404: "Not Found",
  405: "Method Not Allowed",
  406: "Not Acceptable",
  407: "Proxy Authentication Required",
  408: "Request Timeout",
  409: "Conflict",
  410: "Gone",
  411: "Length Required",
  412: "Precondition Failed",
  413: "Payload Too Large",
  414: "URI Too Long",
  415: "Unsupported Media Type",
  416: "Range Not Satisfiable",
  417: "Expectation Failed",
  418: "I'm a Teapot",
  421: "Misdirected Request",
  422: "Unprocessable Entity",
  423: "Locked",
  424: "Failed Dependency",
  425: "Too Early",
  426: "Upgrade Required",
  428: "Precondition Required",
  429: "Too Many Requests",
  431: "Request Header Fields Too Large",
  451: "Unavailable For Legal Reasons",
  500: "Internal Server Error",
  501: "Not Implemented",
  502: "Bad Gateway",
  503: "Service Unavailable",
  504: "Gateway Timeout",
  505: "HTTP Version Not Supported",
  506: "Variant Also Negotiates",
  507: "Insufficient Storage",
  508: "Loop Detected",
  509: "Bandwidth Limit Exceeded",
  510: "Not Extended",
  511: "Network Authentication Required"
};
const maxHeaderSize = 16384;
const createServer$1 = /* @__PURE__ */ notImplemented("http.createServer");
const request$1 = /* @__PURE__ */ notImplemented("http.request");
const get$2 = /* @__PURE__ */ notImplemented("http.get");
const Server$1 = /* @__PURE__ */ notImplementedClass("http.Server");
const OutgoingMessage = /* @__PURE__ */ notImplementedClass("http.OutgoingMessage");
const ClientRequest = /* @__PURE__ */ notImplementedClass("http.ClientRequest");
const globalAgent$1 = new Agent$1();
const validateHeaderName = /* @__PURE__ */ notImplemented("http.validateHeaderName");
const validateHeaderValue = /* @__PURE__ */ notImplemented("http.validateHeaderValue");
const setMaxIdleHTTPParsers = /* @__PURE__ */ notImplemented("http.setMaxIdleHTTPParsers");
const _connectionListener = /* @__PURE__ */ notImplemented("http._connectionListener");
const WebSocket = globalThis.WebSocket || /* @__PURE__ */ notImplementedClass("WebSocket");
const CloseEvent = globalThis.CloseEvent || /* @__PURE__ */ notImplementedClass("CloseEvent");
const MessageEvent = globalThis.MessageEvent || /* @__PURE__ */ notImplementedClass("MessageEvent");
const http = {
  METHODS,
  STATUS_CODES,
  maxHeaderSize,
  IncomingMessage,
  ServerResponse,
  WebSocket,
  CloseEvent,
  MessageEvent,
  createServer: createServer$1,
  request: request$1,
  get: get$2,
  Server: Server$1,
  OutgoingMessage,
  ClientRequest,
  Agent: Agent$1,
  globalAgent: globalAgent$1,
  validateHeaderName,
  validateHeaderValue,
  setMaxIdleHTTPParsers,
  _connectionListener
};
const http$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Agent: Agent$1,
  ClientRequest,
  CloseEvent,
  IncomingMessage,
  METHODS,
  MessageEvent,
  OutgoingMessage,
  STATUS_CODES,
  Server: Server$1,
  ServerResponse,
  WebSocket,
  _connectionListener,
  createServer: createServer$1,
  default: http,
  get: get$2,
  globalAgent: globalAgent$1,
  maxHeaderSize,
  request: request$1,
  setMaxIdleHTTPParsers,
  validateHeaderName,
  validateHeaderValue
}, Symbol.toStringTag, { value: "Module" }));
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(http$1);
const Server = /* @__PURE__ */ notImplementedClass("https.Server");
const Agent2 = Agent$1;
const globalAgent = /* @__PURE__ */ new Agent2();
const get$1 = /* @__PURE__ */ notImplemented("https.get");
const createServer = /* @__PURE__ */ notImplemented("https.createServer");
const request = /* @__PURE__ */ notImplemented("https.request");
const https = {
  Server,
  Agent: Agent2,
  globalAgent,
  get: get$1,
  createServer,
  request
};
const https$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Agent: Agent2,
  Server,
  createServer,
  default: https,
  get: get$1,
  globalAgent,
  request
}, Symbol.toStringTag, { value: "Module" }));
const require$$2 = /* @__PURE__ */ getAugmentedNamespace(https$1);
var hasRequiredGeturl;
function requireGeturl() {
  if (hasRequiredGeturl) return geturl;
  hasRequiredGeturl = 1;
  Object.defineProperty(geturl, "__esModule", { value: true });
  geturl.getUrl = geturl.createGetUrl = void 0;
  const tslib_1 = require$$0$3;
  const http_1 = tslib_1.__importDefault(require$$1);
  const https_1 = tslib_1.__importDefault(require$$2);
  const zlib_1 = zlib;
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const data_js_1 = /* @__PURE__ */ requireData();
  function createGetUrl(options) {
    async function getUrl2(req, signal) {
      (0, errors_js_1.assert)(signal == null || !signal.cancelled, "request cancelled before sending", "CANCELLED");
      const protocol = req.url.split(":")[0].toLowerCase();
      (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
        info: { protocol },
        operation: "request"
      });
      (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
        operation: "request"
      });
      const method = req.method;
      const headers = Object.assign({}, req.headers);
      const reqOptions = { method, headers };
      if (options) {
        if (options.agent) {
          reqOptions.agent = options.agent;
        }
      }
      let abort2 = null;
      try {
        abort2 = new AbortController();
        reqOptions.abort = abort2.signal;
      } catch (e) {
        console.log(e);
      }
      const request2 = (protocol === "http" ? http_1.default : https_1.default).request(req.url, reqOptions);
      request2.setTimeout(req.timeout);
      const body = req.body;
      if (body) {
        request2.write(Buffer.from(body));
      }
      request2.end();
      return new Promise((resolve, reject) => {
        if (signal) {
          signal.addListener(() => {
            if (abort2) {
              abort2.abort();
            }
            reject((0, errors_js_1.makeError)("request cancelled", "CANCELLED"));
          });
        }
        request2.on("timeout", () => {
          reject((0, errors_js_1.makeError)("request timeout", "TIMEOUT"));
        });
        request2.once("response", (resp) => {
          const statusCode = resp.statusCode || 0;
          const statusMessage = resp.statusMessage || "";
          const headers2 = Object.keys(resp.headers || {}).reduce((accum, name) => {
            let value = resp.headers[name] || "";
            if (Array.isArray(value)) {
              value = value.join(", ");
            }
            accum[name] = value;
            return accum;
          }, {});
          let body2 = null;
          resp.on("data", (chunk) => {
            if (signal) {
              try {
                signal.checkSignal();
              } catch (error) {
                return reject(error);
              }
            }
            if (body2 == null) {
              body2 = chunk;
            } else {
              const newBody = new Uint8Array(body2.length + chunk.length);
              newBody.set(body2, 0);
              newBody.set(chunk, body2.length);
              body2 = newBody;
            }
          });
          resp.on("end", () => {
            try {
              if (headers2["content-encoding"] === "gzip" && body2) {
                body2 = (0, data_js_1.getBytes)((0, zlib_1.gunzipSync)(body2));
              }
              resolve({ statusCode, statusMessage, headers: headers2, body: body2 });
            } catch (error) {
              reject((0, errors_js_1.makeError)("bad response data", "SERVER_ERROR", {
                request: req,
                info: { response: resp, error }
              }));
            }
          });
          resp.on("error", (error) => {
            error.response = { statusCode, statusMessage, headers: headers2, body: body2 };
            reject(error);
          });
        });
        request2.on("error", (error) => {
          reject(error);
        });
      });
    }
    return getUrl2;
  }
  geturl.createGetUrl = createGetUrl;
  const defaultGetUrl = createGetUrl({});
  async function getUrl(req, signal) {
    return defaultGetUrl(req, signal);
  }
  geturl.getUrl = getUrl;
  return geturl;
}
var hasRequiredFetch;
function requireFetch() {
  if (hasRequiredFetch) return fetch$1;
  hasRequiredFetch = 1;
  Object.defineProperty(fetch$1, "__esModule", { value: true });
  fetch$1.FetchResponse = fetch$1.FetchRequest = fetch$1.FetchCancelSignal = void 0;
  const base64_js_1 = /* @__PURE__ */ requireBase64();
  const data_js_1 = /* @__PURE__ */ requireData();
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  const utf8_js_1 = /* @__PURE__ */ requireUtf8();
  const geturl_js_1 = /* @__PURE__ */ requireGeturl();
  const MAX_ATTEMPTS = 12;
  const SLOT_INTERVAL = 250;
  let defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();
  const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
  const reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
  let locked = false;
  async function dataGatewayFunc(url, signal) {
    try {
      const match = url.match(reData);
      if (!match) {
        throw new Error("invalid data");
      }
      return new FetchResponse(200, "OK", {
        "content-type": match[1] || "text/plain"
      }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
    }
  }
  function getIpfsGatewayFunc(baseUrl) {
    async function gatewayIpfs(url, signal) {
      try {
        const match = url.match(reIpfs);
        if (!match) {
          throw new Error("invalid link");
        }
        return new FetchRequest(`${baseUrl}${match[2]}`);
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
      }
    }
    return gatewayIpfs;
  }
  const Gateways = {
    "data": dataGatewayFunc,
    "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
  };
  const fetchSignals = /* @__PURE__ */ new WeakMap();
  class FetchCancelSignal {
    #listeners;
    #cancelled;
    constructor(request2) {
      this.#listeners = [];
      this.#cancelled = false;
      fetchSignals.set(request2, () => {
        if (this.#cancelled) {
          return;
        }
        this.#cancelled = true;
        for (const listener of this.#listeners) {
          setTimeout(() => {
            listener();
          }, 0);
        }
        this.#listeners = [];
      });
    }
    addListener(listener) {
      (0, errors_js_1.assert)(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
        operation: "fetchCancelSignal.addCancelListener"
      });
      this.#listeners.push(listener);
    }
    get cancelled() {
      return this.#cancelled;
    }
    checkSignal() {
      (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
    }
  }
  fetch$1.FetchCancelSignal = FetchCancelSignal;
  function checkSignal(signal) {
    if (signal == null) {
      throw new Error("missing signal; should not happen");
    }
    signal.checkSignal();
    return signal;
  }
  class FetchRequest {
    #allowInsecure;
    #gzip;
    #headers;
    #method;
    #timeout;
    #url;
    #body;
    #bodyType;
    #creds;
    // Hooks
    #preflight;
    #process;
    #retry;
    #signal;
    #throttle;
    #getUrlFunc;
    /**
     *  The fetch URL to request.
     */
    get url() {
      return this.#url;
    }
    set url(url) {
      this.#url = String(url);
    }
    /**
     *  The fetch body, if any, to send as the request body. //(default: null)//
     *
     *  When setting a body, the intrinsic ``Content-Type`` is automatically
     *  set and will be used if **not overridden** by setting a custom
     *  header.
     *
     *  If %%body%% is null, the body is cleared (along with the
     *  intrinsic ``Content-Type``).
     *
     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
     *  ``text/plain``.
     *
     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
     *  ``application/octet-stream``.
     *
     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
     *  set to ``application/json``.
     */
    get body() {
      if (this.#body == null) {
        return null;
      }
      return new Uint8Array(this.#body);
    }
    set body(body) {
      if (body == null) {
        this.#body = void 0;
        this.#bodyType = void 0;
      } else if (typeof body === "string") {
        this.#body = (0, utf8_js_1.toUtf8Bytes)(body);
        this.#bodyType = "text/plain";
      } else if (body instanceof Uint8Array) {
        this.#body = body;
        this.#bodyType = "application/octet-stream";
      } else if (typeof body === "object") {
        this.#body = (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body));
        this.#bodyType = "application/json";
      } else {
        throw new Error("invalid body");
      }
    }
    /**
     *  Returns true if the request has a body.
     */
    hasBody() {
      return this.#body != null;
    }
    /**
     *  The HTTP method to use when requesting the URI. If no method
     *  has been explicitly set, then ``GET`` is used if the body is
     *  null and ``POST`` otherwise.
     */
    get method() {
      if (this.#method) {
        return this.#method;
      }
      if (this.hasBody()) {
        return "POST";
      }
      return "GET";
    }
    set method(method) {
      if (method == null) {
        method = "";
      }
      this.#method = String(method).toUpperCase();
    }
    /**
     *  The headers that will be used when requesting the URI. All
     *  keys are lower-case.
     *
     *  This object is a copy, so any changes will **NOT** be reflected
     *  in the ``FetchRequest``.
     *
     *  To set a header entry, use the ``setHeader`` method.
     */
    get headers() {
      const headers = Object.assign({}, this.#headers);
      if (this.#creds) {
        headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(this.#creds))}`;
      }
      if (this.allowGzip) {
        headers["accept-encoding"] = "gzip";
      }
      if (headers["content-type"] == null && this.#bodyType) {
        headers["content-type"] = this.#bodyType;
      }
      if (this.body) {
        headers["content-length"] = String(this.body.length);
      }
      return headers;
    }
    /**
     *  Get the header for %%key%%, ignoring case.
     */
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    /**
     *  Set the header for %%key%% to %%value%%. All values are coerced
     *  to a string.
     */
    setHeader(key, value) {
      this.#headers[String(key).toLowerCase()] = String(value);
    }
    /**
     *  Clear all headers, resetting all intrinsic headers.
     */
    clearHeaders() {
      this.#headers = {};
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    /**
     *  The value that will be sent for the ``Authorization`` header.
     *
     *  To set the credentials, use the ``setCredentials`` method.
     */
    get credentials() {
      return this.#creds || null;
    }
    /**
     *  Sets an ``Authorization`` for %%username%% with %%password%%.
     */
    setCredentials(username, password) {
      (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
      this.#creds = `${username}:${password}`;
    }
    /**
     *  Enable and request gzip-encoded responses. The response will
     *  automatically be decompressed. //(default: true)//
     */
    get allowGzip() {
      return this.#gzip;
    }
    set allowGzip(value) {
      this.#gzip = !!value;
    }
    /**
     *  Allow ``Authentication`` credentials to be sent over insecure
     *  channels. //(default: false)//
     */
    get allowInsecureAuthentication() {
      return !!this.#allowInsecure;
    }
    set allowInsecureAuthentication(value) {
      this.#allowInsecure = !!value;
    }
    /**
     *  The timeout (in milliseconds) to wait for a complete response.
     *  //(default: 5 minutes)//
     */
    get timeout() {
      return this.#timeout;
    }
    set timeout(timeout) {
      (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
      this.#timeout = timeout;
    }
    /**
     *  This function is called prior to each request, for example
     *  during a redirection or retry in case of server throttling.
     *
     *  This offers an opportunity to populate headers or update
     *  content before sending a request.
     */
    get preflightFunc() {
      return this.#preflight || null;
    }
    set preflightFunc(preflight) {
      this.#preflight = preflight;
    }
    /**
     *  This function is called after each response, offering an
     *  opportunity to provide client-level throttling or updating
     *  response data.
     *
     *  Any error thrown in this causes the ``send()`` to throw.
     *
     *  To schedule a retry attempt (assuming the maximum retry limit
     *  has not been reached), use [[response.throwThrottleError]].
     */
    get processFunc() {
      return this.#process || null;
    }
    set processFunc(process2) {
      this.#process = process2;
    }
    /**
     *  This function is called on each retry attempt.
     */
    get retryFunc() {
      return this.#retry || null;
    }
    set retryFunc(retry) {
      this.#retry = retry;
    }
    /**
     *  This function is called to fetch content from HTTP and
     *  HTTPS URLs and is platform specific (e.g. nodejs vs
     *  browsers).
     *
     *  This is by default the currently registered global getUrl
     *  function, which can be changed using [[registerGetUrl]].
     *  If this has been set, setting is to ``null`` will cause
     *  this FetchRequest (and any future clones) to revert back to
     *  using the currently registered global getUrl function.
     *
     *  Setting this is generally not necessary, but may be useful
     *  for developers that wish to intercept requests or to
     *  configurege a proxy or other agent.
     */
    get getUrlFunc() {
      return this.#getUrlFunc || defaultGetUrlFunc;
    }
    set getUrlFunc(value) {
      this.#getUrlFunc = value;
    }
    /**
     *  Create a new FetchRequest instance with default values.
     *
     *  Once created, each property may be set before issuing a
     *  ``.send()`` to make the request.
     */
    constructor(url) {
      this.#url = String(url);
      this.#allowInsecure = false;
      this.#gzip = true;
      this.#headers = {};
      this.#method = "";
      this.#timeout = 3e5;
      this.#throttle = {
        slotInterval: SLOT_INTERVAL,
        maxAttempts: MAX_ATTEMPTS
      };
      this.#getUrlFunc = null;
    }
    toString() {
      return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
    }
    /**
     *  Update the throttle parameters used to determine maximum
     *  attempts and exponential-backoff properties.
     */
    setThrottleParams(params) {
      if (params.slotInterval != null) {
        this.#throttle.slotInterval = params.slotInterval;
      }
      if (params.maxAttempts != null) {
        this.#throttle.maxAttempts = params.maxAttempts;
      }
    }
    async #send(attempt, expires, delay, _request, _response) {
      if (attempt >= this.#throttle.maxAttempts) {
        return _response.makeServerError("exceeded maximum retry limit");
      }
      (0, errors_js_1.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
        operation: "request.send",
        reason: "timeout",
        request: _request
      });
      if (delay > 0) {
        await wait(delay);
      }
      let req = this.clone();
      const scheme = (req.url.split(":")[0] || "").toLowerCase();
      if (scheme in Gateways) {
        const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
        if (result instanceof FetchResponse) {
          let response2 = result;
          if (this.processFunc) {
            checkSignal(_request.#signal);
            try {
              response2 = await this.processFunc(req, response2);
            } catch (error) {
              if (error.throttle == null || typeof error.stall !== "number") {
                response2.makeServerError("error in post-processing function", error).assertOk();
              }
            }
          }
          return response2;
        }
        req = result;
      }
      if (this.preflightFunc) {
        req = await this.preflightFunc(req);
      }
      const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
      let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
      if (response.statusCode === 301 || response.statusCode === 302) {
        try {
          const location = response.headers.location || "";
          return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
        } catch (error) {
        }
        return response;
      } else if (response.statusCode === 429) {
        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
          const retryAfter = response.headers["retry-after"];
          let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
            delay2 = parseInt(retryAfter);
          }
          return req.clone().#send(attempt + 1, expires, delay2, _request, response);
        }
      }
      if (this.processFunc) {
        checkSignal(_request.#signal);
        try {
          response = await this.processFunc(req, response);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response.makeServerError("error in post-processing function", error).assertOk();
          }
          let delay2 = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (error.stall >= 0) {
            delay2 = error.stall;
          }
          return req.clone().#send(attempt + 1, expires, delay2, _request, response);
        }
      }
      return response;
    }
    /**
     *  Resolves to the response by sending the request.
     */
    send() {
      (0, errors_js_1.assert)(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
      this.#signal = new FetchCancelSignal(this);
      return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
    }
    /**
     *  Cancels the inflight response, causing a ``CANCELLED``
     *  error to be rejected from the [[send]].
     */
    cancel() {
      (0, errors_js_1.assert)(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
      const signal = fetchSignals.get(this);
      if (!signal) {
        throw new Error("missing signal; should not happen");
      }
      signal();
    }
    /**
     *  Returns a new [[FetchRequest]] that represents the redirection
     *  to %%location%%.
     */
    redirect(location) {
      const current = this.url.split(":")[0].toLowerCase();
      const target = location.split(":")[0].toLowerCase();
      (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
        operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
      });
      const req = new FetchRequest(location);
      req.method = "GET";
      req.allowGzip = this.allowGzip;
      req.timeout = this.timeout;
      req.#headers = Object.assign({}, this.#headers);
      if (this.#body) {
        req.#body = new Uint8Array(this.#body);
      }
      req.#bodyType = this.#bodyType;
      return req;
    }
    /**
     *  Create a new copy of this request.
     */
    clone() {
      const clone = new FetchRequest(this.url);
      clone.#method = this.#method;
      if (this.#body) {
        clone.#body = this.#body;
      }
      clone.#bodyType = this.#bodyType;
      clone.#headers = Object.assign({}, this.#headers);
      clone.#creds = this.#creds;
      if (this.allowGzip) {
        clone.allowGzip = true;
      }
      clone.timeout = this.timeout;
      if (this.allowInsecureAuthentication) {
        clone.allowInsecureAuthentication = true;
      }
      clone.#preflight = this.#preflight;
      clone.#process = this.#process;
      clone.#retry = this.#retry;
      clone.#throttle = Object.assign({}, this.#throttle);
      clone.#getUrlFunc = this.#getUrlFunc;
      return clone;
    }
    /**
     *  Locks all static configuration for gateways and FetchGetUrlFunc
     *  registration.
     */
    static lockConfig() {
      locked = true;
    }
    /**
     *  Get the current Gateway function for %%scheme%%.
     */
    static getGateway(scheme) {
      return Gateways[scheme.toLowerCase()] || null;
    }
    /**
     *  Use the %%func%% when fetching URIs using %%scheme%%.
     *
     *  This method affects all requests globally.
     *
     *  If [[lockConfig]] has been called, no change is made and this
     *  throws.
     */
    static registerGateway(scheme, func) {
      scheme = scheme.toLowerCase();
      if (scheme === "http" || scheme === "https") {
        throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
      }
      if (locked) {
        throw new Error("gateways locked");
      }
      Gateways[scheme] = func;
    }
    /**
     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
     *
     *  This method affects all requests globally.
     *
     *  If [[lockConfig]] has been called, no change is made and this
     *  throws.
     */
    static registerGetUrl(getUrl) {
      if (locked) {
        throw new Error("gateways locked");
      }
      defaultGetUrlFunc = getUrl;
    }
    /**
     *  Creates a getUrl function that fetches content from HTTP and
     *  HTTPS URLs.
     *
     *  The available %%options%% are dependent on the platform
     *  implementation of the default getUrl function.
     *
     *  This is not generally something that is needed, but is useful
     *  when trying to customize simple behaviour when fetching HTTP
     *  content.
     */
    static createGetUrlFunc(options) {
      return (0, geturl_js_1.createGetUrl)(options);
    }
    /**
     *  Creates a function that can "fetch" data URIs.
     *
     *  Note that this is automatically done internally to support
     *  data URIs, so it is not necessary to register it.
     *
     *  This is not generally something that is needed, but may
     *  be useful in a wrapper to perfom custom data URI functionality.
     */
    static createDataGateway() {
      return dataGatewayFunc;
    }
    /**
     *  Creates a function that will fetch IPFS (unvalidated) from
     *  a custom gateway baseUrl.
     *
     *  The default IPFS gateway used internally is
     *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
     */
    static createIpfsGatewayFunc(baseUrl) {
      return getIpfsGatewayFunc(baseUrl);
    }
  }
  fetch$1.FetchRequest = FetchRequest;
  class FetchResponse {
    #statusCode;
    #statusMessage;
    #headers;
    #body;
    #request;
    #error;
    toString() {
      return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
    }
    /**
     *  The response status code.
     */
    get statusCode() {
      return this.#statusCode;
    }
    /**
     *  The response status message.
     */
    get statusMessage() {
      return this.#statusMessage;
    }
    /**
     *  The response headers. All keys are lower-case.
     */
    get headers() {
      return Object.assign({}, this.#headers);
    }
    /**
     *  The response body, or ``null`` if there was no body.
     */
    get body() {
      return this.#body == null ? null : new Uint8Array(this.#body);
    }
    /**
     *  The response body as a UTF-8 encoded string, or the empty
     *  string (i.e. ``""``) if there was no body.
     *
     *  An error is thrown if the body is invalid UTF-8 data.
     */
    get bodyText() {
      try {
        return this.#body == null ? "" : (0, utf8_js_1.toUtf8String)(this.#body);
      } catch (error) {
        (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
          operation: "bodyText",
          info: { response: this }
        });
      }
    }
    /**
     *  The response body, decoded as JSON.
     *
     *  An error is thrown if the body is invalid JSON-encoded data
     *  or if there was no body.
     */
    get bodyJson() {
      try {
        return JSON.parse(this.bodyText);
      } catch (error) {
        (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
          operation: "bodyJson",
          info: { response: this }
        });
      }
    }
    [Symbol.iterator]() {
      const headers = this.headers;
      const keys = Object.keys(headers);
      let index = 0;
      return {
        next: () => {
          if (index < keys.length) {
            const key = keys[index++];
            return {
              value: [key, headers[key]],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    constructor(statusCode, statusMessage, headers, body, request2) {
      this.#statusCode = statusCode;
      this.#statusMessage = statusMessage;
      this.#headers = Object.keys(headers).reduce((accum, k) => {
        accum[k.toLowerCase()] = String(headers[k]);
        return accum;
      }, {});
      this.#body = body == null ? null : new Uint8Array(body);
      this.#request = request2 || null;
      this.#error = { message: "" };
    }
    /**
     *  Return a Response with matching headers and body, but with
     *  an error status code (i.e. 599) and %%message%% with an
     *  optional %%error%%.
     */
    makeServerError(message2, error) {
      let statusMessage;
      if (!message2) {
        message2 = `${this.statusCode} ${this.statusMessage}`;
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${message2})`;
      } else {
        statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message2})`;
      }
      const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || void 0);
      response.#error = { message: message2, error };
      return response;
    }
    /**
     *  If called within a [request.processFunc](FetchRequest-processFunc)
     *  call, causes the request to retry as if throttled for %%stall%%
     *  milliseconds.
     */
    throwThrottleError(message2, stall) {
      if (stall == null) {
        stall = -1;
      } else {
        (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
      }
      const error = new Error(message2 || "throttling requests");
      (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
      throw error;
    }
    /**
     *  Get the header value for %%key%%, ignoring case.
     */
    getHeader(key) {
      return this.headers[key.toLowerCase()];
    }
    /**
     *  Returns true if the response has a body.
     */
    hasBody() {
      return this.#body != null;
    }
    /**
     *  The request made for this response.
     */
    get request() {
      return this.#request;
    }
    /**
     *  Returns true if this response was a success statusCode.
     */
    ok() {
      return this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300;
    }
    /**
     *  Throws a ``SERVER_ERROR`` if this response is not ok.
     */
    assertOk() {
      if (this.ok()) {
        return;
      }
      let { message: message2, error } = this.#error;
      if (message2 === "") {
        message2 = `server response ${this.statusCode} ${this.statusMessage}`;
      }
      let requestUrl = null;
      if (this.request) {
        requestUrl = this.request.url;
      }
      let responseBody = null;
      try {
        if (this.#body) {
          responseBody = (0, utf8_js_1.toUtf8String)(this.#body);
        }
      } catch (e) {
      }
      (0, errors_js_1.assert)(false, message2, "SERVER_ERROR", {
        request: this.request || "unknown request",
        response: this,
        error,
        info: {
          requestUrl,
          responseBody,
          responseStatus: `${this.statusCode} ${this.statusMessage}`
        }
      });
    }
  }
  fetch$1.FetchResponse = FetchResponse;
  function getTime() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  function unpercent(value) {
    return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all3, code) => {
      return String.fromCharCode(parseInt(code, 16));
    }));
  }
  function wait(delay) {
    return new Promise((resolve) => setTimeout(resolve, delay));
  }
  return fetch$1;
}
var fixednumber = {};
var hasRequiredFixednumber;
function requireFixednumber() {
  if (hasRequiredFixednumber) return fixednumber;
  hasRequiredFixednumber = 1;
  Object.defineProperty(fixednumber, "__esModule", { value: true });
  fixednumber.FixedNumber = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const maths_js_1 = /* @__PURE__ */ requireMaths();
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  const BN_N1 = BigInt(-1);
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_5 = BigInt(5);
  const _guard = {};
  let Zeros = "0000";
  while (Zeros.length < 80) {
    Zeros += Zeros;
  }
  function getTens(decimals) {
    let result = Zeros;
    while (result.length < decimals) {
      result += result;
    }
    return BigInt("1" + result.substring(0, decimals));
  }
  function checkValue(val, format2, safeOp) {
    const width = BigInt(format2.width);
    if (format2.signed) {
      const limit = BN_1 << width - BN_1;
      (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      if (val > BN_0) {
        val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
      } else {
        val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
      }
    } else {
      const limit = BN_1 << width;
      (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
        operation: safeOp,
        fault: "overflow",
        value: val
      });
      val = (val % limit + limit) % limit & limit - BN_1;
    }
    return val;
  }
  function getFormat(value) {
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") ;
      else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const v = value;
      const check = (key, type2, defaultValue) => {
        if (v[key] == null) {
          return defaultValue;
        }
        (0, errors_js_1.assertArgument)(typeof v[key] === type2, "invalid fixed format (" + key + " not " + type2 + ")", "format." + key, v[key]);
        return v[key];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    (0, errors_js_1.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
    (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
    const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    return { signed, width, decimals, name };
  }
  function toString3(val, decimals) {
    let negative = "";
    if (val < BN_0) {
      negative = "-";
      val *= BN_N1;
    }
    let str = val.toString();
    if (decimals === 0) {
      return negative + str;
    }
    while (str.length <= decimals) {
      str = Zeros + str;
    }
    const index = str.length - decimals;
    str = str.substring(0, index) + "." + str.substring(index);
    while (str[0] === "0" && str[1] !== ".") {
      str = str.substring(1);
    }
    while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
      str = str.substring(0, str.length - 1);
    }
    return negative + str;
  }
  class FixedNumber2 {
    /**
     *  The specific fixed-point arithmetic field for this value.
     */
    format;
    #format;
    // The actual value (accounting for decimals)
    #val;
    // A base-10 value to multiple values by to maintain the magnitude
    #tens;
    /**
     *  This is a property so console.log shows a human-meaningful value.
     *
     *  @private
     */
    _value;
    // Use this when changing this file to get some typing info,
    // but then switch to any to mask the internal type
    //constructor(guard: any, value: bigint, format: _FixedFormat) {
    /**
     *  @private
     */
    constructor(guard, value, format2) {
      (0, errors_js_1.assertPrivate)(guard, _guard, "FixedNumber");
      this.#val = value;
      this.#format = format2;
      const _value = toString3(value, format2.decimals);
      (0, properties_js_1.defineProperties)(this, { format: format2.name, _value });
      this.#tens = getTens(format2.decimals);
    }
    /**
     *  If true, negative values are permitted, otherwise only
     *  positive values and zero are allowed.
     */
    get signed() {
      return this.#format.signed;
    }
    /**
     *  The number of bits available to store the value.
     */
    get width() {
      return this.#format.width;
    }
    /**
     *  The number of decimal places in the fixed-point arithment field.
     */
    get decimals() {
      return this.#format.decimals;
    }
    /**
     *  The value as an integer, based on the smallest unit the
     *  [[decimals]] allow.
     */
    get value() {
      return this.#val;
    }
    #checkFormat(other) {
      (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
    }
    #checkValue(val, safeOp) {
      val = checkValue(val, this.#format, safeOp);
      return new FixedNumber2(_guard, val, this.#format);
    }
    #add(o, safeOp) {
      this.#checkFormat(o);
      return this.#checkValue(this.#val + o.#val, safeOp);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% added
     *  to %%other%%, ignoring overflow.
     */
    addUnsafe(other) {
      return this.#add(other);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% added
     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
     *  occurs.
     */
    add(other) {
      return this.#add(other, "add");
    }
    #sub(o, safeOp) {
      this.#checkFormat(o);
      return this.#checkValue(this.#val - o.#val, safeOp);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
     *  from %%this%%, ignoring overflow.
     */
    subUnsafe(other) {
      return this.#sub(other);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
     *  occurs.
     */
    sub(other) {
      return this.#sub(other, "sub");
    }
    #mul(o, safeOp) {
      this.#checkFormat(o);
      return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
     *  by %%other%%, ignoring overflow and underflow (precision loss).
     */
    mulUnsafe(other) {
      return this.#mul(other);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
     *  occurs.
     */
    mul(other) {
      return this.#mul(other, "mul");
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
     *  occurs or if underflow (precision loss) occurs.
     */
    mulSignal(other) {
      this.#checkFormat(other);
      const value = this.#val * other.#val;
      (0, errors_js_1.assert)(value % this.#tens === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
        operation: "mulSignal",
        fault: "underflow",
        value: this
      });
      return this.#checkValue(value / this.#tens, "mulSignal");
    }
    #div(o, safeOp) {
      (0, errors_js_1.assert)(o.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      this.#checkFormat(o);
      return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
     *  by %%other%%, ignoring underflow (precision loss). A
     *  [[NumericFaultError]] is thrown if overflow occurs.
     */
    divUnsafe(other) {
      return this.#div(other);
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
     *  by %%other%%, ignoring underflow (precision loss). A
     *  [[NumericFaultError]] is thrown if overflow occurs.
     */
    div(other) {
      return this.#div(other, "div");
    }
    /**
     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
     *  (precision loss) occurs.
     */
    divSignal(other) {
      (0, errors_js_1.assert)(other.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      this.#checkFormat(other);
      const value = this.#val * this.#tens;
      (0, errors_js_1.assert)(value % other.#val === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
        operation: "divSignal",
        fault: "underflow",
        value: this
      });
      return this.#checkValue(value / other.#val, "divSignal");
    }
    /**
     *  Returns a comparison result between %%this%% and %%other%%.
     *
     *  This is suitable for use in sorting, where ``-1`` implies %%this%%
     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
     *  both are equal.
     */
    cmp(other) {
      let a = this.value, b = other.value;
      const delta = this.decimals - other.decimals;
      if (delta > 0) {
        b *= getTens(delta);
      } else if (delta < 0) {
        a *= getTens(-delta);
      }
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    /**
     *  Returns true if %%other%% is equal to %%this%%.
     */
    eq(other) {
      return this.cmp(other) === 0;
    }
    /**
     *  Returns true if %%other%% is less than to %%this%%.
     */
    lt(other) {
      return this.cmp(other) < 0;
    }
    /**
     *  Returns true if %%other%% is less than or equal to %%this%%.
     */
    lte(other) {
      return this.cmp(other) <= 0;
    }
    /**
     *  Returns true if %%other%% is greater than to %%this%%.
     */
    gt(other) {
      return this.cmp(other) > 0;
    }
    /**
     *  Returns true if %%other%% is greater than or equal to %%this%%.
     */
    gte(other) {
      return this.cmp(other) >= 0;
    }
    /**
     *  Returns a new [[FixedNumber]] which is the largest **integer**
     *  that is less than or equal to %%this%%.
     *
     *  The decimal component of the result will always be ``0``.
     */
    floor() {
      let val = this.#val;
      if (this.#val < BN_0) {
        val -= this.#tens - BN_1;
      }
      val = this.#val / this.#tens * this.#tens;
      return this.#checkValue(val, "floor");
    }
    /**
     *  Returns a new [[FixedNumber]] which is the smallest **integer**
     *  that is greater than or equal to %%this%%.
     *
     *  The decimal component of the result will always be ``0``.
     */
    ceiling() {
      let val = this.#val;
      if (this.#val > BN_0) {
        val += this.#tens - BN_1;
      }
      val = this.#val / this.#tens * this.#tens;
      return this.#checkValue(val, "ceiling");
    }
    /**
     *  Returns a new [[FixedNumber]] with the decimal component
     *  rounded up on ties at %%decimals%% places.
     */
    round(decimals) {
      if (decimals == null) {
        decimals = 0;
      }
      if (decimals >= this.decimals) {
        return this;
      }
      const delta = this.decimals - decimals;
      const bump = BN_5 * getTens(delta - 1);
      let value = this.value + bump;
      const tens = getTens(delta);
      value = value / tens * tens;
      checkValue(value, this.#format, "round");
      return new FixedNumber2(_guard, value, this.#format);
    }
    /**
     *  Returns true if %%this%% is equal to ``0``.
     */
    isZero() {
      return this.#val === BN_0;
    }
    /**
     *  Returns true if %%this%% is less than ``0``.
     */
    isNegative() {
      return this.#val < BN_0;
    }
    /**
     *  Returns the string representation of %%this%%.
     */
    toString() {
      return this._value;
    }
    /**
     *  Returns a float approximation.
     *
     *  Due to IEEE 754 precission (or lack thereof), this function
     *  can only return an approximation and most values will contain
     *  rounding errors.
     */
    toUnsafeFloat() {
      return parseFloat(this.toString());
    }
    /**
     *  Return a new [[FixedNumber]] with the same value but has had
     *  its field set to %%format%%.
     *
     *  This will throw if the value cannot fit into %%format%%.
     */
    toFormat(format2) {
      return FixedNumber2.fromString(this.toString(), format2);
    }
    /**
     *  Creates a new [[FixedNumber]] for %%value%% divided by
     *  %%decimal%% places with %%format%%.
     *
     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
     *  or underflow (precision loss).
     */
    static fromValue(_value, _decimals, _format) {
      const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);
      const format2 = getFormat(_format);
      let value = (0, maths_js_1.getBigInt)(_value, "value");
      const delta = decimals - format2.decimals;
      if (delta > 0) {
        const tens = getTens(delta);
        (0, errors_js_1.assert)(value % tens === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
          operation: "fromValue",
          fault: "underflow",
          value: _value
        });
        value /= tens;
      } else if (delta < 0) {
        value *= getTens(-delta);
      }
      checkValue(value, format2, "fromValue");
      return new FixedNumber2(_guard, value, format2);
    }
    /**
     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
     *
     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
     *  in %%format%%, either due to overflow or underflow (precision loss).
     */
    static fromString(_value, _format) {
      const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
      (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
      const format2 = getFormat(_format);
      let whole = match[2] || "0", decimal = match[3] || "";
      while (decimal.length < format2.decimals) {
        decimal += Zeros;
      }
      (0, errors_js_1.assert)(decimal.substring(format2.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
        operation: "fromString",
        fault: "underflow",
        value: _value
      });
      decimal = decimal.substring(0, format2.decimals);
      const value = BigInt(match[1] + whole + decimal);
      checkValue(value, format2, "fromString");
      return new FixedNumber2(_guard, value, format2);
    }
    /**
     *  Creates a new [[FixedNumber]] with the big-endian representation
     *  %%value%% with %%format%%.
     *
     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
     *  in %%format%% due to overflow.
     */
    static fromBytes(_value, _format) {
      let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
      const format2 = getFormat(_format);
      if (format2.signed) {
        value = (0, maths_js_1.fromTwos)(value, format2.width);
      }
      checkValue(value, format2, "fromBytes");
      return new FixedNumber2(_guard, value, format2);
    }
  }
  fixednumber.FixedNumber = FixedNumber2;
  return fixednumber;
}
var rlpDecode = {};
var hasRequiredRlpDecode;
function requireRlpDecode() {
  if (hasRequiredRlpDecode) return rlpDecode;
  hasRequiredRlpDecode = 1;
  Object.defineProperty(rlpDecode, "__esModule", { value: true });
  rlpDecode.decodeRlp = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const data_js_2 = /* @__PURE__ */ requireData();
  function hexlifyByte(value) {
    let result = value.toString(16);
    while (result.length < 2) {
      result = "0" + result;
    }
    return "0x" + result;
  }
  function unarrayifyInteger(data2, offset, length) {
    let result = 0;
    for (let i = 0; i < length; i++) {
      result = result * 256 + data2[offset + i];
    }
    return result;
  }
  function _decodeChildren(data2, offset, childOffset, length) {
    const result = [];
    while (childOffset < offset + 1 + length) {
      const decoded = _decode(data2, childOffset);
      result.push(decoded.result);
      childOffset += decoded.consumed;
      (0, errors_js_1.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
        buffer: data2,
        length,
        offset
      });
    }
    return { consumed: 1 + length, result };
  }
  function _decode(data2, offset) {
    (0, errors_js_1.assert)(data2.length !== 0, "data too short", "BUFFER_OVERRUN", {
      buffer: data2,
      length: 0,
      offset: 1
    });
    const checkOffset = (offset2) => {
      (0, errors_js_1.assert)(offset2 <= data2.length, "data short segment too short", "BUFFER_OVERRUN", {
        buffer: data2,
        length: data2.length,
        offset: offset2
      });
    };
    if (data2[offset] >= 248) {
      const lengthLength = data2[offset] - 247;
      checkOffset(offset + 1 + lengthLength);
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      checkOffset(offset + 1 + lengthLength + length);
      return _decodeChildren(data2, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data2[offset] >= 192) {
      const length = data2[offset] - 192;
      checkOffset(offset + 1 + length);
      return _decodeChildren(data2, offset, offset + 1, length);
    } else if (data2[offset] >= 184) {
      const lengthLength = data2[offset] - 183;
      checkOffset(offset + 1 + lengthLength);
      const length = unarrayifyInteger(data2, offset + 1, lengthLength);
      checkOffset(offset + 1 + lengthLength + length);
      const result = (0, data_js_1.hexlify)(data2.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
      return { consumed: 1 + lengthLength + length, result };
    } else if (data2[offset] >= 128) {
      const length = data2[offset] - 128;
      checkOffset(offset + 1 + length);
      const result = (0, data_js_1.hexlify)(data2.slice(offset + 1, offset + 1 + length));
      return { consumed: 1 + length, result };
    }
    return { consumed: 1, result: hexlifyByte(data2[offset]) };
  }
  function decodeRlp(_data) {
    const data2 = (0, data_js_2.getBytes)(_data, "data");
    const decoded = _decode(data2, 0);
    (0, errors_js_1.assertArgument)(decoded.consumed === data2.length, "unexpected junk after rlp payload", "data", _data);
    return decoded.result;
  }
  rlpDecode.decodeRlp = decodeRlp;
  return rlpDecode;
}
var rlpEncode = {};
var hasRequiredRlpEncode;
function requireRlpEncode() {
  if (hasRequiredRlpEncode) return rlpEncode;
  hasRequiredRlpEncode = 1;
  Object.defineProperty(rlpEncode, "__esModule", { value: true });
  rlpEncode.encodeRlp = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  function arrayifyInteger(value) {
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value >>= 8;
    }
    return result;
  }
  function _encode(object) {
    if (Array.isArray(object)) {
      let payload = [];
      object.forEach(function(child) {
        payload = payload.concat(_encode(child));
      });
      if (payload.length <= 55) {
        payload.unshift(192 + payload.length);
        return payload;
      }
      const length2 = arrayifyInteger(payload.length);
      length2.unshift(247 + length2.length);
      return length2.concat(payload);
    }
    const data2 = Array.prototype.slice.call((0, data_js_1.getBytes)(object, "object"));
    if (data2.length === 1 && data2[0] <= 127) {
      return data2;
    } else if (data2.length <= 55) {
      data2.unshift(128 + data2.length);
      return data2;
    }
    const length = arrayifyInteger(data2.length);
    length.unshift(183 + length.length);
    return length.concat(data2);
  }
  const nibbles = "0123456789abcdef";
  function encodeRlp(object) {
    let result = "0x";
    for (const v of _encode(object)) {
      result += nibbles[v >> 4];
      result += nibbles[v & 15];
    }
    return result;
  }
  rlpEncode.encodeRlp = encodeRlp;
  return rlpEncode;
}
var units = {};
var hasRequiredUnits;
function requireUnits() {
  if (hasRequiredUnits) return units;
  hasRequiredUnits = 1;
  Object.defineProperty(units, "__esModule", { value: true });
  units.parseEther = units.formatEther = units.parseUnits = units.formatUnits = void 0;
  const errors_js_1 = /* @__PURE__ */ requireErrors();
  const fixednumber_js_1 = /* @__PURE__ */ requireFixednumber();
  const maths_js_1 = /* @__PURE__ */ requireMaths();
  const names2 = [
    "wei",
    "kwei",
    "mwei",
    "gwei",
    "szabo",
    "finney",
    "ether"
  ];
  function formatUnits2(value, unit) {
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names2.indexOf(unit);
      (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = (0, maths_js_1.getNumber)(unit, "unit");
    }
    return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
  }
  units.formatUnits = formatUnits2;
  function parseUnits(value, unit) {
    (0, errors_js_1.assertArgument)(typeof value === "string", "value must be a string", "value", value);
    let decimals = 18;
    if (typeof unit === "string") {
      const index = names2.indexOf(unit);
      (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
      decimals = 3 * index;
    } else if (unit != null) {
      decimals = (0, maths_js_1.getNumber)(unit, "unit");
    }
    return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
  }
  units.parseUnits = parseUnits;
  function formatEther(wei) {
    return formatUnits2(wei, 18);
  }
  units.formatEther = formatEther;
  function parseEther(ether) {
    return parseUnits(ether, 18);
  }
  units.parseEther = parseEther;
  return units;
}
var uuid = {};
var hasRequiredUuid;
function requireUuid() {
  if (hasRequiredUuid) return uuid;
  hasRequiredUuid = 1;
  Object.defineProperty(uuid, "__esModule", { value: true });
  uuid.uuidV4 = void 0;
  const data_js_1 = /* @__PURE__ */ requireData();
  function uuidV4(randomBytes2) {
    const bytes2 = (0, data_js_1.getBytes)(randomBytes2, "randomBytes");
    bytes2[6] = bytes2[6] & 15 | 64;
    bytes2[8] = bytes2[8] & 63 | 128;
    const value = (0, data_js_1.hexlify)(bytes2);
    return [
      value.substring(2, 10),
      value.substring(10, 14),
      value.substring(14, 18),
      value.substring(18, 22),
      value.substring(22, 34)
    ].join("-");
  }
  uuid.uuidV4 = uuidV4;
  return uuid;
}
var hasRequiredUtils$3;
function requireUtils$3() {
  if (hasRequiredUtils$3) return utils$5;
  hasRequiredUtils$3 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.encodeRlp = exports.decodeRlp = exports.defineProperties = exports.resolveProperties = exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.toBigInt = exports.getUint = exports.getNumber = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.makeError = exports.assertNormalize = exports.assertPrivate = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.isError = exports.isCallException = exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = void 0;
    exports.uuidV4 = exports.Utf8ErrorFuncs = void 0;
    var base58_js_1 = /* @__PURE__ */ requireBase58();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return base58_js_1.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return base58_js_1.encodeBase58;
    } });
    var base64_js_1 = /* @__PURE__ */ requireBase64();
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return base64_js_1.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return base64_js_1.encodeBase64;
    } });
    var data_js_1 = /* @__PURE__ */ requireData();
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return data_js_1.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return data_js_1.getBytesCopy;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return data_js_1.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return data_js_1.isBytesLike;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return data_js_1.hexlify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return data_js_1.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return data_js_1.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return data_js_1.dataSlice;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return data_js_1.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return data_js_1.zeroPadValue;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return data_js_1.zeroPadBytes;
    } });
    var errors_js_1 = /* @__PURE__ */ requireErrors();
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return errors_js_1.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return errors_js_1.isError;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return errors_js_1.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return errors_js_1.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return errors_js_1.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return errors_js_1.assertPrivate;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return errors_js_1.assertNormalize;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return errors_js_1.makeError;
    } });
    var events_js_1 = /* @__PURE__ */ requireEvents();
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return events_js_1.EventPayload;
    } });
    var fetch_js_1 = /* @__PURE__ */ requireFetch();
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return fetch_js_1.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return fetch_js_1.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return fetch_js_1.FetchCancelSignal;
    } });
    var fixednumber_js_1 = /* @__PURE__ */ requireFixednumber();
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_js_1.FixedNumber;
    } });
    var maths_js_1 = /* @__PURE__ */ requireMaths();
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return maths_js_1.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return maths_js_1.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return maths_js_1.mask;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return maths_js_1.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return maths_js_1.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return maths_js_1.getUint;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return maths_js_1.toBigInt;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return maths_js_1.toNumber;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return maths_js_1.toBeHex;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return maths_js_1.toBeArray;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return maths_js_1.toQuantity;
    } });
    var properties_js_1 = /* @__PURE__ */ requireProperties();
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return properties_js_1.resolveProperties;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return properties_js_1.defineProperties;
    } });
    var rlp_decode_js_1 = /* @__PURE__ */ requireRlpDecode();
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return rlp_decode_js_1.decodeRlp;
    } });
    var rlp_encode_js_1 = /* @__PURE__ */ requireRlpEncode();
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return rlp_encode_js_1.encodeRlp;
    } });
    var units_js_1 = /* @__PURE__ */ requireUnits();
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return units_js_1.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return units_js_1.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return units_js_1.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return units_js_1.parseUnits;
    } });
    var utf8_js_1 = /* @__PURE__ */ requireUtf8();
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_js_1.Utf8ErrorFuncs;
    } });
    var uuid_js_1 = /* @__PURE__ */ requireUuid();
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return uuid_js_1.uuidV4;
    } });
  })(utils$5);
  return utils$5;
}
var abstractCoder = {};
var hasRequiredAbstractCoder;
function requireAbstractCoder() {
  if (hasRequiredAbstractCoder) return abstractCoder;
  hasRequiredAbstractCoder = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;
    const index_js_1 = /* @__PURE__ */ requireUtils$3();
    exports.WordSize = 32;
    const Padding = new Uint8Array(exports.WordSize);
    const passProperties = ["then"];
    const _guard = {};
    const resultNames = /* @__PURE__ */ new WeakMap();
    function getNames(result) {
      return resultNames.get(result);
    }
    function setNames(result, names2) {
      resultNames.set(result, names2);
    }
    function throwError(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
    }
    function toObject(names2, items, deep) {
      if (names2.indexOf(null) >= 0) {
        return items.map((item, index) => {
          if (item instanceof Result) {
            return toObject(getNames(item), item, deep);
          }
          return item;
        });
      }
      return names2.reduce((accum, name, index) => {
        let item = items.getValue(name);
        if (!(name in accum)) {
          if (deep && item instanceof Result) {
            item = toObject(getNames(item), item, deep);
          }
          accum[name] = item;
        }
        return accum;
      }, {});
    }
    class Result extends Array {
      // No longer used; but cannot be removed as it will remove the
      // #private field from the .d.ts which may break backwards
      // compatibility
      #names;
      /**
       *  @private
       */
      constructor(...args) {
        const guard = args[0];
        let items = args[1];
        let names2 = (args[2] || []).slice();
        let wrap = true;
        if (guard !== _guard) {
          items = args;
          names2 = [];
          wrap = false;
        }
        super(items.length);
        items.forEach((item, index) => {
          this[index] = item;
        });
        const nameCounts = names2.reduce((accum, name) => {
          if (typeof name === "string") {
            accum.set(name, (accum.get(name) || 0) + 1);
          }
          return accum;
        }, /* @__PURE__ */ new Map());
        setNames(this, Object.freeze(items.map((item, index) => {
          const name = names2[index];
          if (name != null && nameCounts.get(name) === 1) {
            return name;
          }
          return null;
        })));
        this.#names = [];
        if (this.#names == null) {
          void this.#names;
        }
        if (!wrap) {
          return;
        }
        Object.freeze(this);
        const proxy = new Proxy(this, {
          get: (target, prop, receiver) => {
            if (typeof prop === "string") {
              if (prop.match(/^[0-9]+$/)) {
                const index = (0, index_js_1.getNumber)(prop, "%index");
                if (index < 0 || index >= this.length) {
                  throw new RangeError("out of result range");
                }
                const item = target[index];
                if (item instanceof Error) {
                  throwError(`index ${index}`, item);
                }
                return item;
              }
              if (passProperties.indexOf(prop) >= 0) {
                return Reflect.get(target, prop, receiver);
              }
              const value = target[prop];
              if (value instanceof Function) {
                return function(...args2) {
                  return value.apply(this === receiver ? target : this, args2);
                };
              } else if (!(prop in target)) {
                return target.getValue.apply(this === receiver ? target : this, [prop]);
              }
            }
            return Reflect.get(target, prop, receiver);
          }
        });
        setNames(proxy, getNames(this));
        return proxy;
      }
      /**
       *  Returns the Result as a normal Array. If %%deep%%, any children
       *  which are Result objects are also converted to a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */
      toArray(deep) {
        const result = [];
        this.forEach((item, index) => {
          if (item instanceof Error) {
            throwError(`index ${index}`, item);
          }
          if (deep && item instanceof Result) {
            item = item.toArray(deep);
          }
          result.push(item);
        });
        return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair. If
       *  %%deep%%, any children which are Result objects are also
       *  converted to an Object.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */
      toObject(deep) {
        const names2 = getNames(this);
        return names2.reduce((accum, name, index) => {
          (0, index_js_1.assert)(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
            operation: "toObject()"
          });
          return toObject(names2, this, deep);
        }, {});
      }
      /**
       *  @_ignore
       */
      slice(start, end) {
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start += this.length;
          if (start < 0) {
            start = 0;
          }
        }
        if (end == null) {
          end = this.length;
        }
        if (end < 0) {
          end += this.length;
          if (end < 0) {
            end = 0;
          }
        }
        if (end > this.length) {
          end = this.length;
        }
        const _names = getNames(this);
        const result = [], names2 = [];
        for (let i = start; i < end; i++) {
          result.push(this[i]);
          names2.push(_names[i]);
        }
        return new Result(_guard, result, names2);
      }
      /**
       *  @_ignore
       */
      filter(callback, thisArg) {
        const _names = getNames(this);
        const result = [], names2 = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          if (callback.call(thisArg, item, i, this)) {
            result.push(item);
            names2.push(_names[i]);
          }
        }
        return new Result(_guard, result, names2);
      }
      /**
       *  @_ignore
       */
      map(callback, thisArg) {
        const result = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          result.push(callback.call(thisArg, item, i, this));
        }
        return result;
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */
      getValue(name) {
        const index = getNames(this).indexOf(name);
        if (index === -1) {
          return void 0;
        }
        const value = this[index];
        if (value instanceof Error) {
          throwError(`property ${JSON.stringify(name)}`, value.error);
        }
        return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */
      static fromItems(items, keys) {
        return new Result(_guard, items, keys);
      }
    }
    exports.Result = Result;
    function checkResultErrors(result) {
      const errors2 = [];
      const checkErrors = function(path, object) {
        if (!Array.isArray(object)) {
          return;
        }
        for (let key in object) {
          const childPath = path.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object[key]);
          } catch (error) {
            errors2.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors2;
    }
    exports.checkResultErrors = checkResultErrors;
    function getValue(value) {
      let bytes2 = (0, index_js_1.toBeArray)(value);
      (0, index_js_1.assert)(bytes2.length <= exports.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes2, length: exports.WordSize, offset: bytes2.length });
      if (bytes2.length !== exports.WordSize) {
        bytes2 = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes2.length % exports.WordSize), bytes2]));
      }
      return bytes2;
    }
    class Coder {
      // The coder name:
      //   - address, uint256, tuple, array, etc.
      name;
      // The fully expanded type, including composite types:
      //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
      type;
      // The localName bound in the signature, in this example it is "baz":
      //   - tuple(address foo, uint bar) baz
      localName;
      // Whether this type is dynamic:
      //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
      //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
      dynamic;
      constructor(name, type2, localName, dynamic) {
        (0, index_js_1.defineProperties)(this, { name, type: type2, localName, dynamic }, {
          name: "string",
          type: "string",
          localName: "string",
          dynamic: "boolean"
        });
      }
      _throwError(message2, value) {
        (0, index_js_1.assertArgument)(false, message2, this.localName, value);
      }
    }
    exports.Coder = Coder;
    class Writer {
      // An array of WordSize lengthed objects to concatenation
      #data;
      #dataLength;
      constructor() {
        this.#data = [];
        this.#dataLength = 0;
      }
      get data() {
        return (0, index_js_1.concat)(this.#data);
      }
      get length() {
        return this.#dataLength;
      }
      #writeData(data2) {
        this.#data.push(data2);
        this.#dataLength += data2.length;
        return data2.length;
      }
      appendWriter(writer) {
        return this.#writeData((0, index_js_1.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
        let bytes2 = (0, index_js_1.getBytesCopy)(value);
        const paddingOffset = bytes2.length % exports.WordSize;
        if (paddingOffset) {
          bytes2 = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes2, Padding.slice(paddingOffset)]));
        }
        return this.#writeData(bytes2);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
        return this.#writeData(getValue(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
        const offset = this.#data.length;
        this.#data.push(Padding);
        this.#dataLength += exports.WordSize;
        return (value) => {
          this.#data[offset] = getValue(value);
        };
      }
    }
    exports.Writer = Writer;
    class Reader {
      // Allows incomplete unpadded data to be read; otherwise an error
      // is raised if attempting to overrun the buffer. This is required
      // to deal with an old Solidity bug, in which event data for
      // external (not public thoguh) was tightly packed.
      allowLoose;
      #data;
      #offset;
      #bytesRead;
      #parent;
      #maxInflation;
      constructor(data2, allowLoose, maxInflation) {
        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
        this.#data = (0, index_js_1.getBytesCopy)(data2);
        this.#bytesRead = 0;
        this.#parent = null;
        this.#maxInflation = maxInflation != null ? maxInflation : 1024;
        this.#offset = 0;
      }
      get data() {
        return (0, index_js_1.hexlify)(this.#data);
      }
      get dataLength() {
        return this.#data.length;
      }
      get consumed() {
        return this.#offset;
      }
      get bytes() {
        return new Uint8Array(this.#data);
      }
      #incrementBytesRead(count) {
        if (this.#parent) {
          return this.#parent.#incrementBytesRead(count);
        }
        this.#bytesRead += count;
        (0, index_js_1.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
          buffer: (0, index_js_1.getBytesCopy)(this.#data),
          offset: this.#offset,
          length: count,
          info: {
            bytesRead: this.#bytesRead,
            dataLength: this.dataLength
          }
        });
      }
      #peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;
        if (this.#offset + alignedLength > this.#data.length) {
          if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
            alignedLength = length;
          } else {
            (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
              buffer: (0, index_js_1.getBytesCopy)(this.#data),
              length: this.#data.length,
              offset: this.#offset + alignedLength
            });
          }
        }
        return this.#data.slice(this.#offset, this.#offset + alignedLength);
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset) {
        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
        reader.#parent = this;
        return reader;
      }
      // Read bytes
      readBytes(length, loose) {
        let bytes2 = this.#peekBytes(0, length, !!loose);
        this.#incrementBytesRead(length);
        this.#offset += bytes2.length;
        return bytes2.slice(0, length);
      }
      // Read a numeric values
      readValue() {
        return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));
      }
      readIndex() {
        return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));
      }
    }
    exports.Reader = Reader;
  })(abstractCoder);
  return abstractCoder;
}
var address$3 = {};
var address$2 = {};
var address$1 = {};
var crypto$3 = {};
var hmac$1 = {};
var crypto$2 = {};
const webcrypto$1 = new Proxy(globalThis.crypto, { get(_, key) {
  if (key === "CryptoKey") {
    return globalThis.CryptoKey;
  }
  if (typeof globalThis.crypto[key] === "function") {
    return globalThis.crypto[key].bind(globalThis.crypto);
  }
  return globalThis.crypto[key];
} });
const createCipher = /* @__PURE__ */ notImplemented("crypto.createCipher");
const createDecipher = /* @__PURE__ */ notImplemented("crypto.createDecipher");
const pseudoRandomBytes = /* @__PURE__ */ notImplemented("crypto.pseudoRandomBytes");
const Cipher = /* @__PURE__ */ notImplementedClass("crypto.Cipher");
const Decipher = /* @__PURE__ */ notImplementedClass("crypto.Decipher");
const workerdCrypto = process.getBuiltinModule("node:crypto");
const {
  Certificate,
  checkPrime,
  checkPrimeSync,
  constants: constants$2,
  // @ts-expect-error  Node types do not match unenv
  Cipheriv,
  createCipheriv,
  createDecipheriv,
  createDiffieHellman,
  createDiffieHellmanGroup,
  createECDH,
  createHash,
  createHmac,
  createPrivateKey,
  createPublicKey,
  createSecretKey,
  createSign,
  createVerify,
  // @ts-expect-error  Node types do not match unenv
  Decipheriv,
  diffieHellman,
  DiffieHellman,
  DiffieHellmanGroup,
  ECDH,
  fips,
  generateKey,
  generateKeyPair,
  generateKeyPairSync,
  generateKeySync,
  generatePrime,
  generatePrimeSync,
  getCipherInfo,
  getCiphers,
  getCurves,
  getDiffieHellman,
  getFips,
  getHashes,
  getRandomValues,
  hash: hash$1,
  Hash,
  hkdf,
  hkdfSync,
  Hmac,
  KeyObject,
  pbkdf2: pbkdf2$2,
  pbkdf2Sync,
  privateDecrypt,
  privateEncrypt,
  publicDecrypt,
  publicEncrypt,
  randomBytes,
  randomFill,
  randomFillSync,
  randomInt,
  randomUUID,
  scrypt: scrypt$2,
  scryptSync,
  secureHeapUsed,
  setEngine,
  setFips,
  sign: sign$1,
  Sign,
  subtle,
  timingSafeEqual,
  verify,
  Verify,
  X509Certificate
} = workerdCrypto;
const webcrypto = {
  // @ts-expect-error Node types do not match unenv
  CryptoKey: webcrypto$1.CryptoKey,
  getRandomValues,
  randomUUID,
  subtle
};
const crypto = {
  /**
   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
   */
  Certificate,
  Cipher,
  Cipheriv,
  Decipher,
  Decipheriv,
  ECDH,
  Sign,
  Verify,
  X509Certificate,
  constants: constants$2,
  createCipheriv,
  createDecipheriv,
  createECDH,
  createSign,
  createVerify,
  diffieHellman,
  getCipherInfo,
  hash: hash$1,
  privateDecrypt,
  privateEncrypt,
  publicDecrypt,
  publicEncrypt,
  scrypt: scrypt$2,
  scryptSync,
  sign: sign$1,
  verify,
  // default-only export from unenv
  // @ts-expect-error unenv has unknown type
  createCipher,
  // @ts-expect-error unenv has unknown type
  createDecipher,
  // @ts-expect-error unenv has unknown type
  pseudoRandomBytes,
  /**
   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
   */
  DiffieHellman,
  DiffieHellmanGroup,
  Hash,
  Hmac,
  KeyObject,
  checkPrime,
  checkPrimeSync,
  createDiffieHellman,
  createDiffieHellmanGroup,
  createHash,
  createHmac,
  createPrivateKey,
  createPublicKey,
  createSecretKey,
  generateKey,
  generateKeyPair,
  generateKeyPairSync,
  generateKeySync,
  generatePrime,
  generatePrimeSync,
  getCiphers,
  getCurves,
  getDiffieHellman,
  getFips,
  getHashes,
  getRandomValues,
  hkdf,
  hkdfSync,
  pbkdf2: pbkdf2$2,
  pbkdf2Sync,
  randomBytes,
  randomFill,
  randomFillSync,
  randomInt,
  randomUUID,
  secureHeapUsed,
  setEngine,
  setFips,
  subtle,
  timingSafeEqual,
  // default-only export from workerd
  fips,
  // special-cased deep merged symbols
  webcrypto
};
const crypto$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Certificate,
  Cipher,
  Cipheriv,
  Decipher,
  Decipheriv,
  DiffieHellman,
  DiffieHellmanGroup,
  ECDH,
  Hash,
  Hmac,
  KeyObject,
  Sign,
  Verify,
  X509Certificate,
  checkPrime,
  checkPrimeSync,
  constants: constants$2,
  createCipheriv,
  createDecipheriv,
  createDiffieHellman,
  createDiffieHellmanGroup,
  createECDH,
  createHash,
  createHmac,
  createPrivateKey,
  createPublicKey,
  createSecretKey,
  createSign,
  createVerify,
  default: crypto,
  diffieHellman,
  fips,
  generateKey,
  generateKeyPair,
  generateKeyPairSync,
  generateKeySync,
  generatePrime,
  generatePrimeSync,
  getCipherInfo,
  getCiphers,
  getCurves,
  getDiffieHellman,
  getFips,
  getHashes,
  getRandomValues,
  hash: hash$1,
  hkdf,
  hkdfSync,
  pbkdf2: pbkdf2$2,
  pbkdf2Sync,
  privateDecrypt,
  privateEncrypt,
  publicDecrypt,
  publicEncrypt,
  randomBytes,
  randomFill,
  randomFillSync,
  randomInt,
  randomUUID,
  scrypt: scrypt$2,
  scryptSync,
  secureHeapUsed,
  setEngine,
  setFips,
  sign: sign$1,
  subtle,
  timingSafeEqual,
  verify,
  webcrypto
}, Symbol.toStringTag, { value: "Module" }));
const require$$8 = /* @__PURE__ */ getAugmentedNamespace(crypto$1);
var hasRequiredCrypto$1;
function requireCrypto$1() {
  if (hasRequiredCrypto$1) return crypto$2;
  hasRequiredCrypto$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;
    var crypto_1 = require$$8;
    Object.defineProperty(exports, "createHash", { enumerable: true, get: function() {
      return crypto_1.createHash;
    } });
    Object.defineProperty(exports, "createHmac", { enumerable: true, get: function() {
      return crypto_1.createHmac;
    } });
    Object.defineProperty(exports, "pbkdf2Sync", { enumerable: true, get: function() {
      return crypto_1.pbkdf2Sync;
    } });
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return crypto_1.randomBytes;
    } });
  })(crypto$2);
  return crypto$2;
}
var hasRequiredHmac$1;
function requireHmac$1() {
  if (hasRequiredHmac$1) return hmac$1;
  hasRequiredHmac$1 = 1;
  Object.defineProperty(hmac$1, "__esModule", { value: true });
  hmac$1.computeHmac = void 0;
  const crypto_js_1 = /* @__PURE__ */ requireCrypto$1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  let locked = false;
  const _computeHmac = function(algorithm, key, data2) {
    return (0, crypto_js_1.createHmac)(algorithm, key).update(data2).digest();
  };
  let __computeHmac = _computeHmac;
  function computeHmac(algorithm, _key, _data) {
    const key = (0, index_js_1.getBytes)(_key, "key");
    const data2 = (0, index_js_1.getBytes)(_data, "data");
    return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data2));
  }
  hmac$1.computeHmac = computeHmac;
  computeHmac._ = _computeHmac;
  computeHmac.lock = function() {
    locked = true;
  };
  computeHmac.register = function(func) {
    if (locked) {
      throw new Error("computeHmac is locked");
    }
    __computeHmac = func;
  };
  Object.freeze(computeHmac);
  return hmac$1;
}
var keccak = {};
var hasRequiredKeccak;
function requireKeccak() {
  if (hasRequiredKeccak) return keccak;
  hasRequiredKeccak = 1;
  Object.defineProperty(keccak, "__esModule", { value: true });
  keccak.keccak256 = void 0;
  const sha3_1 = /* @__PURE__ */ requireSha3();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  let locked = false;
  const _keccak256 = function(data2) {
    return (0, sha3_1.keccak_256)(data2);
  };
  let __keccak256 = _keccak256;
  function keccak256(_data) {
    const data2 = (0, index_js_1.getBytes)(_data, "data");
    return (0, index_js_1.hexlify)(__keccak256(data2));
  }
  keccak.keccak256 = keccak256;
  keccak256._ = _keccak256;
  keccak256.lock = function() {
    locked = true;
  };
  keccak256.register = function(func) {
    if (locked) {
      throw new TypeError("keccak256 is locked");
    }
    __keccak256 = func;
  };
  Object.freeze(keccak256);
  return keccak;
}
var ripemd160$1 = {};
var ripemd160 = {};
var _sha2 = {};
var hasRequired_sha2;
function require_sha2() {
  if (hasRequired_sha2) return _sha2;
  hasRequired_sha2 = 1;
  Object.defineProperty(_sha2, "__esModule", { value: true });
  _sha2.SHA2 = void 0;
  const _assert_js_1 = /* @__PURE__ */ require_assert();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
  }
  class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data2) {
      (0, _assert_js_1.exists)(this);
      const { view, buffer, blockLen } = this;
      data2 = (0, utils_js_1.toBytes)(data2);
      const len = data2.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = (0, utils_js_1.createView)(data2);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data2.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data2.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      (0, _assert_js_1.exists)(this);
      (0, _assert_js_1.output)(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer[i] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
      this.process(view, 0);
      const oview = (0, utils_js_1.createView)(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer);
      return to;
    }
  }
  _sha2.SHA2 = SHA2;
  return _sha2;
}
var hasRequiredRipemd160$1;
function requireRipemd160$1() {
  if (hasRequiredRipemd160$1) return ripemd160;
  hasRequiredRipemd160$1 = 1;
  Object.defineProperty(ripemd160, "__esModule", { value: true });
  ripemd160.ripemd160 = ripemd160.RIPEMD160 = void 0;
  const _sha2_js_1 = /* @__PURE__ */ require_sha2();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  const Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
  const Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
  const Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
  let idxL = [Id];
  let idxR = [Pi];
  for (let i = 0; i < 4; i++)
    for (let j of [idxL, idxR])
      j.push(j[i].map((k) => Rho[k]));
  const shifts = /* @__PURE__ */ [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
  ].map((i) => new Uint8Array(i));
  const shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
  const shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
  const Kl = /* @__PURE__ */ new Uint32Array([
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
  ]);
  const Kr = /* @__PURE__ */ new Uint32Array([
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
  ]);
  const rotl = (word, shift) => word << shift | word >>> 32 - shift;
  function f(group, x, y, z) {
    if (group === 0)
      return x ^ y ^ z;
    else if (group === 1)
      return x & y | ~x & z;
    else if (group === 2)
      return (x | ~y) ^ z;
    else if (group === 3)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  const BUF = /* @__PURE__ */ new Uint32Array(16);
  class RIPEMD160 extends _sha2_js_1.SHA2 {
    constructor() {
      super(64, 20, 8, true);
      this.h0 = 1732584193 | 0;
      this.h1 = 4023233417 | 0;
      this.h2 = 2562383102 | 0;
      this.h3 = 271733878 | 0;
      this.h4 = 3285377520 | 0;
    }
    get() {
      const { h0, h1, h2, h3, h4 } = this;
      return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
      this.h0 = h0 | 0;
      this.h1 = h1 | 0;
      this.h2 = h2 | 0;
      this.h3 = h3 | 0;
      this.h4 = h4 | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        BUF[i] = view.getUint32(offset, true);
      let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
      for (let group = 0; group < 5; group++) {
        const rGroup = 4 - group;
        const hbl = Kl[group], hbr = Kr[group];
        const rl = idxL[group], rr = idxR[group];
        const sl = shiftsL[group], sr = shiftsR[group];
        for (let i = 0; i < 16; i++) {
          const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
          al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
        }
        for (let i = 0; i < 16; i++) {
          const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
          ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
        }
      }
      this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
      BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0);
    }
  }
  ripemd160.RIPEMD160 = RIPEMD160;
  ripemd160.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  return ripemd160;
}
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160) return ripemd160$1;
  hasRequiredRipemd160 = 1;
  Object.defineProperty(ripemd160$1, "__esModule", { value: true });
  ripemd160$1.ripemd160 = void 0;
  const ripemd160_1 = /* @__PURE__ */ requireRipemd160$1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  let locked = false;
  const _ripemd160 = function(data2) {
    return (0, ripemd160_1.ripemd160)(data2);
  };
  let __ripemd160 = _ripemd160;
  function ripemd1602(_data) {
    const data2 = (0, index_js_1.getBytes)(_data, "data");
    return (0, index_js_1.hexlify)(__ripemd160(data2));
  }
  ripemd160$1.ripemd160 = ripemd1602;
  ripemd1602._ = _ripemd160;
  ripemd1602.lock = function() {
    locked = true;
  };
  ripemd1602.register = function(func) {
    if (locked) {
      throw new TypeError("ripemd160 is locked");
    }
    __ripemd160 = func;
  };
  Object.freeze(ripemd1602);
  return ripemd160$1;
}
var pbkdf2$1 = {};
var hasRequiredPbkdf2$1;
function requirePbkdf2$1() {
  if (hasRequiredPbkdf2$1) return pbkdf2$1;
  hasRequiredPbkdf2$1 = 1;
  Object.defineProperty(pbkdf2$1, "__esModule", { value: true });
  pbkdf2$1.pbkdf2 = void 0;
  const crypto_js_1 = /* @__PURE__ */ requireCrypto$1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  let locked = false;
  const _pbkdf2 = function(password, salt, iterations, keylen, algo) {
    return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
  };
  let __pbkdf2 = _pbkdf2;
  function pbkdf22(_password, _salt, iterations, keylen, algo) {
    const password = (0, index_js_1.getBytes)(_password, "password");
    const salt = (0, index_js_1.getBytes)(_salt, "salt");
    return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
  }
  pbkdf2$1.pbkdf2 = pbkdf22;
  pbkdf22._ = _pbkdf2;
  pbkdf22.lock = function() {
    locked = true;
  };
  pbkdf22.register = function(func) {
    if (locked) {
      throw new Error("pbkdf2 is locked");
    }
    __pbkdf2 = func;
  };
  Object.freeze(pbkdf22);
  return pbkdf2$1;
}
var random$1 = {};
var hasRequiredRandom$1;
function requireRandom$1() {
  if (hasRequiredRandom$1) return random$1;
  hasRequiredRandom$1 = 1;
  Object.defineProperty(random$1, "__esModule", { value: true });
  random$1.randomBytes = void 0;
  const crypto_js_1 = /* @__PURE__ */ requireCrypto$1();
  let locked = false;
  const _randomBytes = function(length) {
    return new Uint8Array((0, crypto_js_1.randomBytes)(length));
  };
  let __randomBytes = _randomBytes;
  function randomBytes2(length) {
    return __randomBytes(length);
  }
  random$1.randomBytes = randomBytes2;
  randomBytes2._ = _randomBytes;
  randomBytes2.lock = function() {
    locked = true;
  };
  randomBytes2.register = function(func) {
    if (locked) {
      throw new Error("randomBytes is locked");
    }
    __randomBytes = func;
  };
  Object.freeze(randomBytes2);
  return random$1;
}
var scrypt$1 = {};
var scrypt = {};
var sha256 = {};
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256) return sha256;
  hasRequiredSha256 = 1;
  Object.defineProperty(sha256, "__esModule", { value: true });
  sha256.sha224 = sha256.sha256 = void 0;
  const _sha2_js_1 = /* @__PURE__ */ require_sha2();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  const Chi = (a, b, c) => a & b ^ ~a & c;
  const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  const SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  const IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  class SHA256 extends _sha2_js_1.SHA2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = IV[0] | 0;
      this.B = IV[1] | 0;
      this.C = IV[2] | 0;
      this.D = IV[3] | 0;
      this.E = IV[4] | 0;
      this.F = IV[5] | 0;
      this.G = IV[6] | 0;
      this.H = IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA256_W[i] = view.getUint32(offset, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
        const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  }
  class SHA224 extends SHA256 {
    constructor() {
      super();
      this.A = 3238371032 | 0;
      this.B = 914150663 | 0;
      this.C = 812702999 | 0;
      this.D = 4144912697 | 0;
      this.E = 4290775857 | 0;
      this.F = 1750603025 | 0;
      this.G = 1694076839 | 0;
      this.H = 3204075428 | 0;
      this.outputLen = 28;
    }
  }
  sha256.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
  sha256.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  return sha256;
}
var pbkdf2 = {};
var hmac = {};
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac) return hmac;
  hasRequiredHmac = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    const _assert_js_1 = /* @__PURE__ */ require_assert();
    const utils_js_1 = /* @__PURE__ */ requireUtils$5();
    class HMAC extends utils_js_1.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash2);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }
    exports.HMAC = HMAC;
    const hmac2 = (hash2, key, message2) => new HMAC(hash2, key).update(message2).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash2, key) => new HMAC(hash2, key);
  })(hmac);
  return hmac;
}
var hasRequiredPbkdf2;
function requirePbkdf2() {
  if (hasRequiredPbkdf2) return pbkdf2;
  hasRequiredPbkdf2 = 1;
  Object.defineProperty(pbkdf2, "__esModule", { value: true });
  pbkdf2.pbkdf2Async = pbkdf2.pbkdf2 = void 0;
  const _assert_js_1 = /* @__PURE__ */ require_assert();
  const hmac_js_1 = /* @__PURE__ */ requireHmac();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  function pbkdf2Init(hash2, _password, _salt, _opts) {
    (0, _assert_js_1.hash)(hash2);
    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    (0, _assert_js_1.number)(c);
    (0, _assert_js_1.number)(dkLen);
    (0, _assert_js_1.number)(asyncTick);
    if (c < 1)
      throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = (0, utils_js_1.toBytes)(_password);
    const salt = (0, utils_js_1.toBytes)(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac_js_1.hmac.create(hash2, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    u.fill(0);
    return DK;
  }
  function pbkdf2$12(hash2, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      for (let ui = 1; ui < c; ui++) {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  pbkdf2.pbkdf2 = pbkdf2$12;
  async function pbkdf2Async(hash2, password, salt, opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }
  pbkdf2.pbkdf2Async = pbkdf2Async;
  return pbkdf2;
}
var hasRequiredScrypt$1;
function requireScrypt$1() {
  if (hasRequiredScrypt$1) return scrypt;
  hasRequiredScrypt$1 = 1;
  Object.defineProperty(scrypt, "__esModule", { value: true });
  scrypt.scryptAsync = scrypt.scrypt = void 0;
  const _assert_js_1 = /* @__PURE__ */ require_assert();
  const sha256_js_1 = /* @__PURE__ */ requireSha256();
  const pbkdf2_js_1 = /* @__PURE__ */ requirePbkdf2();
  const utils_js_1 = /* @__PURE__ */ requireUtils$5();
  const rotl = (a, b) => a << b | a >>> 32 - b;
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i = 0; i < 8; i += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
      out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = (0, utils_js_1.checkOpts)({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    (0, _assert_js_1.number)(N);
    (0, _assert_js_1.number)(r);
    (0, _assert_js_1.number)(p);
    (0, _assert_js_1.number)(dkLen);
    (0, _assert_js_1.number)(asyncTick);
    (0, _assert_js_1.number)(maxmem);
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb should be function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
      throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    }
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
      throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
      throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    }
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) {
      throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = (0, utils_js_1.u32)(B);
    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N * p;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
  }
  function scrypt$12(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
      const Pi = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi + i];
      for (let i = 0, pos = 0; i < N - 1; i++) {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      }
      BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
      blockMixCb();
      for (let i = 0; i < N; i++) {
        const j = B32[Pi + blockSize32 - 16] % N;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi, r);
        blockMixCb();
      }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  scrypt.scrypt = scrypt$12;
  async function scryptAsync(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
      const Pi = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi + i];
      let pos = 0;
      await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      });
      BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
      blockMixCb();
      await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
        const j = B32[Pi + blockSize32 - 16] % N;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi, r);
        blockMixCb();
      });
    }
    return scryptOutput(password, dkLen, B, V, tmp);
  }
  scrypt.scryptAsync = scryptAsync;
  return scrypt;
}
var hasRequiredScrypt;
function requireScrypt() {
  if (hasRequiredScrypt) return scrypt$1;
  hasRequiredScrypt = 1;
  Object.defineProperty(scrypt$1, "__esModule", { value: true });
  scrypt$1.scryptSync = scrypt$1.scrypt = void 0;
  const scrypt_1 = /* @__PURE__ */ requireScrypt$1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  let lockedSync = false, lockedAsync = false;
  const _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
    return await (0, scrypt_1.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });
  };
  const _scryptSync = function(passwd, salt, N, r, p, dkLen) {
    return (0, scrypt_1.scrypt)(passwd, salt, { N, r, p, dkLen });
  };
  let __scryptAsync = _scryptAsync;
  let __scryptSync = _scryptSync;
  async function scrypt2(_passwd, _salt, N, r, p, dkLen, progress) {
    const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
    const salt = (0, index_js_1.getBytes)(_salt, "salt");
    return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
  }
  scrypt$1.scrypt = scrypt2;
  scrypt2._ = _scryptAsync;
  scrypt2.lock = function() {
    lockedAsync = true;
  };
  scrypt2.register = function(func) {
    if (lockedAsync) {
      throw new Error("scrypt is locked");
    }
    __scryptAsync = func;
  };
  Object.freeze(scrypt2);
  function scryptSync2(_passwd, _salt, N, r, p, dkLen) {
    const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
    const salt = (0, index_js_1.getBytes)(_salt, "salt");
    return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
  }
  scrypt$1.scryptSync = scryptSync2;
  scryptSync2._ = _scryptSync;
  scryptSync2.lock = function() {
    lockedSync = true;
  };
  scryptSync2.register = function(func) {
    if (lockedSync) {
      throw new Error("scryptSync is locked");
    }
    __scryptSync = func;
  };
  Object.freeze(scryptSync2);
  return scrypt$1;
}
var sha2 = {};
var hasRequiredSha2;
function requireSha2() {
  if (hasRequiredSha2) return sha2;
  hasRequiredSha2 = 1;
  Object.defineProperty(sha2, "__esModule", { value: true });
  sha2.sha512 = sha2.sha256 = void 0;
  const crypto_js_1 = /* @__PURE__ */ requireCrypto$1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const _sha256 = function(data2) {
    return (0, crypto_js_1.createHash)("sha256").update(data2).digest();
  };
  const _sha512 = function(data2) {
    return (0, crypto_js_1.createHash)("sha512").update(data2).digest();
  };
  let __sha256 = _sha256;
  let __sha512 = _sha512;
  let locked256 = false, locked512 = false;
  function sha2562(_data) {
    const data2 = (0, index_js_1.getBytes)(_data, "data");
    return (0, index_js_1.hexlify)(__sha256(data2));
  }
  sha2.sha256 = sha2562;
  sha2562._ = _sha256;
  sha2562.lock = function() {
    locked256 = true;
  };
  sha2562.register = function(func) {
    if (locked256) {
      throw new Error("sha256 is locked");
    }
    __sha256 = func;
  };
  Object.freeze(sha2562);
  function sha512(_data) {
    const data2 = (0, index_js_1.getBytes)(_data, "data");
    return (0, index_js_1.hexlify)(__sha512(data2));
  }
  sha2.sha512 = sha512;
  sha512._ = _sha512;
  sha512.lock = function() {
    locked512 = true;
  };
  sha512.register = function(func) {
    if (locked512) {
      throw new Error("sha512 is locked");
    }
    __sha512 = func;
  };
  Object.freeze(sha2562);
  return sha2;
}
var signingKey = {};
var secp256k1 = {};
var modular = {};
var utils$4 = {};
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2) return utils$4;
  hasRequiredUtils$2 = 1;
  Object.defineProperty(utils$4, "__esModule", { value: true });
  utils$4.validateObject = utils$4.createHmacDrbg = utils$4.bitMask = utils$4.bitSet = utils$4.bitGet = utils$4.bitLen = utils$4.utf8ToBytes = utils$4.equalBytes = utils$4.concatBytes = utils$4.ensureBytes = utils$4.numberToVarBytesBE = utils$4.numberToBytesLE = utils$4.numberToBytesBE = utils$4.bytesToNumberLE = utils$4.bytesToNumberBE = utils$4.hexToBytes = utils$4.hexToNumber = utils$4.numberToHexUnpadded = utils$4.bytesToHex = void 0;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const u8a = (a) => a instanceof Uint8Array;
  const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes2) {
    if (!u8a(bytes2))
      throw new Error("Uint8Array expected");
    let hex = "";
    for (let i = 0; i < bytes2.length; i++) {
      hex += hexes[bytes2[i]];
    }
    return hex;
  }
  utils$4.bytesToHex = bytesToHex;
  function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  utils$4.numberToHexUnpadded = numberToHexUnpadded;
  function hexToNumber(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    return BigInt(hex === "" ? "0" : `0x${hex}`);
  }
  utils$4.hexToNumber = hexToNumber;
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array2 = new Uint8Array(len / 2);
    for (let i = 0; i < array2.length; i++) {
      const j = i * 2;
      const hexByte = hex.slice(j, j + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array2[i] = byte;
    }
    return array2;
  }
  utils$4.hexToBytes = hexToBytes;
  function bytesToNumberBE(bytes2) {
    return hexToNumber(bytesToHex(bytes2));
  }
  utils$4.bytesToNumberBE = bytesToNumberBE;
  function bytesToNumberLE(bytes2) {
    if (!u8a(bytes2))
      throw new Error("Uint8Array expected");
    return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
  }
  utils$4.bytesToNumberLE = bytesToNumberLE;
  function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
  }
  utils$4.numberToBytesBE = numberToBytesBE;
  function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
  }
  utils$4.numberToBytesLE = numberToBytesLE;
  function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
  }
  utils$4.numberToVarBytesBE = numberToVarBytesBE;
  function ensureBytes(title2, hex, expectedLength) {
    let res;
    if (typeof hex === "string") {
      try {
        res = hexToBytes(hex);
      } catch (e) {
        throw new Error(`${title2} must be valid hex string, got "${hex}". Cause: ${e}`);
      }
    } else if (u8a(hex)) {
      res = Uint8Array.from(hex);
    } else {
      throw new Error(`${title2} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title2} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  utils$4.ensureBytes = ensureBytes;
  function concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
    let pad = 0;
    arrays.forEach((a) => {
      if (!u8a(a))
        throw new Error("Uint8Array expected");
      r.set(a, pad);
      pad += a.length;
    });
    return r;
  }
  utils$4.concatBytes = concatBytes;
  function equalBytes(b1, b2) {
    if (b1.length !== b2.length)
      return false;
    for (let i = 0; i < b1.length; i++)
      if (b1[i] !== b2[i])
        return false;
    return true;
  }
  utils$4.equalBytes = equalBytes;
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  utils$4.utf8ToBytes = utf8ToBytes;
  function bitLen(n) {
    let len;
    for (len = 0; n > _0n; n >>= _1n, len += 1)
      ;
    return len;
  }
  utils$4.bitLen = bitLen;
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n;
  }
  utils$4.bitGet = bitGet;
  const bitSet = (n, pos, value) => {
    return n | (value ? _1n : _0n) << BigInt(pos);
  };
  utils$4.bitSet = bitSet;
  const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
  utils$4.bitMask = bitMask;
  const u8n = (data2) => new Uint8Array(data2);
  const u8fr = (arr) => Uint8Array.from(arr);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  utils$4.createHmacDrbg = createHmacDrbg;
  const validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators2, optValidators = {}) {
    const checkField = (fieldName, type2, isOptional) => {
      const checkVal = validatorFns[type2];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type2}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type2}`);
      }
    };
    for (const [fieldName, type2] of Object.entries(validators2))
      checkField(fieldName, type2, false);
    for (const [fieldName, type2] of Object.entries(optValidators))
      checkField(fieldName, type2, true);
    return object;
  }
  utils$4.validateObject = validateObject;
  return utils$4;
}
var hasRequiredModular;
function requireModular() {
  if (hasRequiredModular) return modular;
  hasRequiredModular = 1;
  Object.defineProperty(modular, "__esModule", { value: true });
  modular.mapHashToField = modular.getMinHashLength = modular.getFieldBytesLength = modular.hashToPrivateScalar = modular.FpSqrtEven = modular.FpSqrtOdd = modular.Field = modular.nLength = modular.FpIsSquare = modular.FpDiv = modular.FpInvertBatch = modular.FpPow = modular.validateField = modular.isNegativeLE = modular.FpSqrt = modular.tonelliShanks = modular.invert = modular.pow2 = modular.pow = modular.mod = void 0;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const utils_js_1 = /* @__PURE__ */ requireUtils$2();
  const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
  const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
  BigInt(9);
  BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n ? result : b + result;
  }
  modular.mod = mod;
  function pow2(num, power, modulo) {
    if (modulo <= _0n || power < _0n)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n)
      return _0n;
    let res = _1n;
    while (power > _0n) {
      if (power & _1n)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n;
    }
    return res;
  }
  modular.pow = pow2;
  function pow22(x, power, modulo) {
    let res = x;
    while (power-- > _0n) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  modular.pow2 = pow22;
  function invert(number2, modulo) {
    if (number2 === _0n || modulo <= _0n) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n, u = _1n;
    while (a !== _0n) {
      const q = b / a;
      const r = b % a;
      const m = x - u * q;
      b = a, a = r, x = u, u = m;
    }
    const gcd = b;
    if (gcd !== _1n)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  modular.invert = invert;
  function tonelliShanks(P) {
    const legendreC = (P - _1n) / _2n;
    let Q, S, Z;
    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
      ;
    for (Z = _2n; Z < P && pow2(Z, legendreC, P) !== P - _1n; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n) / _4n;
      return function tonelliFast(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n) / _2n;
    return function tonelliSlow(Fp, n) {
      if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
        throw new Error("Cannot find square root");
      let r = S;
      let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
      let x = Fp.pow(n, Q1div2);
      let b = Fp.pow(n, Q);
      while (!Fp.eql(b, Fp.ONE)) {
        if (Fp.eql(b, Fp.ZERO))
          return Fp.ZERO;
        let m = 1;
        for (let t2 = Fp.sqr(b); m < r; m++) {
          if (Fp.eql(t2, Fp.ONE))
            break;
          t2 = Fp.sqr(t2);
        }
        const ge = Fp.pow(g, _1n << BigInt(r - m - 1));
        g = Fp.sqr(ge);
        x = Fp.mul(x, ge);
        b = Fp.mul(b, g);
        r = m;
      }
      return x;
    };
  }
  modular.tonelliShanks = tonelliShanks;
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n) / _4n;
      return function sqrt3mod4(Fp, n) {
        const root = Fp.pow(n, p1div4);
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp, n) {
        const n2 = Fp.mul(n, _2n);
        const v = Fp.pow(n2, c1);
        const nv = Fp.mul(n, v);
        const i = Fp.mul(Fp.mul(nv, _2n), v);
        const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
        if (!Fp.eql(Fp.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    return tonelliShanks(P);
  }
  modular.FpSqrt = FpSqrt;
  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
  modular.isNegativeLE = isNegativeLE;
  const FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return (0, utils_js_1.validateObject)(field, opts);
  }
  modular.validateField = validateField;
  function FpPow(f, num, power) {
    if (power < _0n)
      throw new Error("Expected power > 0");
    if (power === _0n)
      return f.ONE;
    if (power === _1n)
      return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n) {
      if (power & _1n)
        p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n;
    }
    return p;
  }
  modular.FpPow = FpPow;
  function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i) => {
      if (f.is0(num))
        return acc;
      tmp[i] = acc;
      return f.mul(acc, num);
    }, f.ONE);
    const inverted = f.inv(lastMultiplied);
    nums.reduceRight((acc, num, i) => {
      if (f.is0(num))
        return acc;
      tmp[i] = f.mul(acc, tmp[i]);
      return f.mul(acc, num);
    }, inverted);
    return tmp;
  }
  modular.FpInvertBatch = FpInvertBatch;
  function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
  }
  modular.FpDiv = FpDiv;
  function FpIsSquare(f) {
    const legendreConst = (f.ORDER - _1n) / _2n;
    return (x) => {
      const p = f.pow(x, legendreConst);
      return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
  }
  modular.FpIsSquare = FpIsSquare;
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  modular.nLength = nLength;
  function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: (0, utils_js_1.bitMask)(BITS),
      ZERO: _0n,
      ONE: _1n,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n <= num && num < ORDER;
      },
      is0: (num) => num === _0n,
      isOdd: (num) => (num & _1n) === _1n,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
      invertBatch: (lst) => FpInvertBatch(f, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes2) : (0, utils_js_1.bytesToNumberBE)(bytes2);
      }
    });
    return Object.freeze(f);
  }
  modular.Field = Field;
  function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
  }
  modular.FpSqrtOdd = FpSqrtOdd;
  function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
      throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
  }
  modular.FpSqrtEven = FpSqrtEven;
  function hashToPrivateScalar(hash2, groupOrder, isLE = false) {
    hash2 = (0, utils_js_1.ensureBytes)("privateHash", hash2);
    const hashLen = hash2.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
      throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash2) : (0, utils_js_1.bytesToNumberBE)(hash2);
    return mod(num, groupOrder - _1n) + _1n;
  }
  modular.hashToPrivateScalar = hashToPrivateScalar;
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  modular.getFieldBytesLength = getFieldBytesLength;
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  modular.getMinHashLength = getMinHashLength;
  function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len < 16 || len < minLen || len > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
    const reduced = mod(num, fieldOrder - _1n) + _1n;
    return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
  }
  modular.mapHashToField = mapHashToField;
  return modular;
}
var weierstrass = {};
var curve = {};
var hasRequiredCurve;
function requireCurve() {
  if (hasRequiredCurve) return curve;
  hasRequiredCurve = 1;
  Object.defineProperty(curve, "__esModule", { value: true });
  curve.validateBasic = curve.wNAF = void 0;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const modular_js_1 = /* @__PURE__ */ requireModular();
  const utils_js_1 = /* @__PURE__ */ requireUtils$2();
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const opts = (W) => {
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n) {
          if (n & _1n)
            p = p.add(d);
          d = d.double();
          n >>= _1n;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base = p;
          points.push(base);
          for (let i = 1; i < windowSize; i++) {
            base = base.add(p);
            points.push(base);
          }
          p = base.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f = c.BASE;
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f };
      },
      wNAFCached(P, precomputesMap, n, transform) {
        const W = P._WINDOW_SIZE || 1;
        let comp = precomputesMap.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1) {
            precomputesMap.set(P, transform(comp));
          }
        }
        return this.wNAF(W, comp, n);
      }
    };
  }
  curve.wNAF = wNAF;
  function validateBasic(curve2) {
    (0, modular_js_1.validateField)(curve2.Fp);
    (0, utils_js_1.validateObject)(curve2, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...(0, modular_js_1.nLength)(curve2.n, curve2.nBitLength),
      ...curve2,
      ...{ p: curve2.Fp.ORDER }
    });
  }
  curve.validateBasic = validateBasic;
  return curve;
}
var hasRequiredWeierstrass;
function requireWeierstrass() {
  if (hasRequiredWeierstrass) return weierstrass;
  hasRequiredWeierstrass = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const mod = /* @__PURE__ */ requireModular();
    const ut = /* @__PURE__ */ requireUtils$2();
    const utils_js_1 = /* @__PURE__ */ requireUtils$2();
    const curve_js_1 = /* @__PURE__ */ requireCurve();
    function validatePointOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data2) {
        const { Err: E } = exports.DER;
        if (data2.length < 2 || data2[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data2[1];
        const res = data2.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data2.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports.DER;
        const data2 = typeof hex === "string" ? h2b(hex) : hex;
        if (!(data2 instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data2.length;
        if (l < 2 || data2[0] != 48)
          throw new E("Invalid signature tag");
        if (data2[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports.DER._parseInt(data2.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes2) => {
        const tail = bytes2.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point.ZERO;
          if (n === _0n)
            return I;
          assertGE(n);
          if (n === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point.BASE;
          const mul = (P, a2) => a2 === _0n || a2 === _1n || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    exports.weierstrassPoints = weierstrassPoints;
    function validateOpts(curve2) {
      const opts = (0, curve_js_1.validateBasic)(curve2);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes2) {
          const len = bytes2.length;
          const head = bytes2[0];
          const tail = bytes2.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y = Fp.sqrt(y2);
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils2 = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes2) {
        const num = ut.bytesToNumberBE(bytes2);
        const delta = bytes2.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
        return modN(bits2int(bytes2));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes2(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point.BASE.multiply(k).toAffine();
          const r = modN(q.x);
          if (r === _0n)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify2(signature2, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature2;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign: sign2,
        verify: verify2,
        ProjectivePoint: Point,
        Signature,
        utils: utils2
      };
    }
    exports.weierstrass = weierstrass2;
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n;
      for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
  })(weierstrass);
  return weierstrass;
}
var hashToCurve = {};
var hasRequiredHashToCurve;
function requireHashToCurve() {
  if (hasRequiredHashToCurve) return hashToCurve;
  hasRequiredHashToCurve = 1;
  Object.defineProperty(hashToCurve, "__esModule", { value: true });
  hashToCurve.createHasher = hashToCurve.isogenyMap = hashToCurve.hash_to_field = hashToCurve.expand_message_xof = hashToCurve.expand_message_xmd = void 0;
  const modular_js_1 = /* @__PURE__ */ requireModular();
  const utils_js_1 = /* @__PURE__ */ requireUtils$2();
  function validateDST(dst) {
    if (dst instanceof Uint8Array)
      return dst;
    if (typeof dst === "string")
      return (0, utils_js_1.utf8ToBytes)(dst);
    throw new Error("DST must be Uint8Array or string");
  }
  const os2ip = utils_js_1.bytesToNumberBE;
  function i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i = length - 1; i >= 0; i--) {
      res[i] = value & 255;
      value >>>= 8;
    }
    return new Uint8Array(res);
  }
  function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      arr[i] = a[i] ^ b[i];
    }
    return arr;
  }
  function isBytes2(item) {
    if (!(item instanceof Uint8Array))
      throw new Error("Uint8Array expected");
  }
  function isNum(item) {
    if (!Number.isSafeInteger(item))
      throw new Error("number expected");
  }
  function expand_message_xmd(msg, DST, lenInBytes, H) {
    isBytes2(msg);
    isBytes2(DST);
    isNum(lenInBytes);
    if (DST.length > 255)
      DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255)
      throw new Error("Invalid xmd length");
    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2);
    const b = new Array(ell);
    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for (let i = 1; i <= ell; i++) {
      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
      b[i] = H((0, utils_js_1.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  }
  hashToCurve.expand_message_xmd = expand_message_xmd;
  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    isBytes2(msg);
    isBytes2(DST);
    isNum(lenInBytes);
    if (DST.length > 255) {
      const dkLen = Math.ceil(2 * k / 8);
      DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
      throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
  }
  hashToCurve.expand_message_xof = expand_message_xof;
  function hash_to_field(msg, count, options) {
    (0, utils_js_1.validateObject)(options, {
      DST: "stringOrUint8Array",
      p: "bigint",
      m: "isSafeInteger",
      k: "isSafeInteger",
      hash: "hash"
    });
    const { p, k, m, hash: hash2, expand, DST: _DST } = options;
    isBytes2(msg);
    isNum(count);
    const DST = validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8);
    const len_in_bytes = count * m * L;
    let prb;
    if (expand === "xmd") {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
    } else if (expand === "xof") {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
    } else if (expand === "_internal_pass") {
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i = 0; i < count; i++) {
      const e = new Array(m);
      for (let j = 0; j < m; j++) {
        const elm_offset = L * (j + i * m);
        const tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
      }
      u[i] = e;
    }
    return u;
  }
  hashToCurve.hash_to_field = hash_to_field;
  function isogenyMap(field, map) {
    const COEFF = map.map((i) => Array.from(i).reverse());
    return (x, y) => {
      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
      x = field.div(xNum, xDen);
      y = field.mul(y, field.div(yNum, yDen));
      return { x, y };
    };
  }
  hashToCurve.isogenyMap = isogenyMap;
  function createHasher(Point, mapToCurve, def) {
    if (typeof mapToCurve !== "function")
      throw new Error("mapToCurve() must be defined");
    return {
      // Encodes byte string to elliptic curve.
      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      hashToCurve(msg, options) {
        const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
        const u0 = Point.fromAffine(mapToCurve(u[0]));
        const u1 = Point.fromAffine(mapToCurve(u[1]));
        const P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Encodes byte string to elliptic curve.
      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      encodeToCurve(msg, options) {
        const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
        const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }
  hashToCurve.createHasher = createHasher;
  return hashToCurve;
}
var _shortw_utils = {};
var hasRequired_shortw_utils;
function require_shortw_utils() {
  if (hasRequired_shortw_utils) return _shortw_utils;
  hasRequired_shortw_utils = 1;
  Object.defineProperty(_shortw_utils, "__esModule", { value: true });
  _shortw_utils.createCurve = _shortw_utils.getHash = void 0;
  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const hmac_1 = /* @__PURE__ */ requireHmac();
  const utils_1 = /* @__PURE__ */ requireUtils$5();
  const weierstrass_js_1 = /* @__PURE__ */ requireWeierstrass();
  function getHash(hash2) {
    return {
      hash: hash2,
      hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash2, key, (0, utils_1.concatBytes)(...msgs)),
      randomBytes: utils_1.randomBytes
    };
  }
  _shortw_utils.getHash = getHash;
  function createCurve(curveDef, defHash) {
    const create = (hash2) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash2) });
    return Object.freeze({ ...create(defHash), create });
  }
  _shortw_utils.createCurve = createCurve;
  return _shortw_utils;
}
var hasRequiredSecp256k1;
function requireSecp256k1() {
  if (hasRequiredSecp256k1) return secp256k1;
  hasRequiredSecp256k1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const sha256_1 = /* @__PURE__ */ requireSha256();
    const utils_1 = /* @__PURE__ */ requireUtils$5();
    const modular_js_1 = /* @__PURE__ */ requireModular();
    const weierstrass_js_1 = /* @__PURE__ */ requireWeierstrass();
    const utils_js_1 = /* @__PURE__ */ requireUtils$2();
    const hash_to_curve_js_1 = /* @__PURE__ */ requireHashToCurve();
    const _shortw_utils_js_1 = /* @__PURE__ */ require_shortw_utils();
    const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const _1n = BigInt(1);
    const _2n = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    const Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp,
      n: secp256k1N,
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    const _0n = BigInt(0);
    const fe = (x) => typeof x === "bigint" && _0n < x && x < secp256k1P;
    const ge = (x) => typeof x === "bigint" && _0n < x && x < secp256k1N;
    const TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    const pointToBytes = (point) => point.toRawBytes(true).slice(1);
    const numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    const modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    const modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    const Point = exports.secp256k1.ProjectivePoint;
    const GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point(x, y, _1n);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message2, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message2);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature2, message2, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature2, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message2);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P), m);
        const R = GmulAdd(P, s, modN(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    const isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    const mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    const htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  })(secp256k1);
  return secp256k1;
}
var signature = {};
var constants$1 = {};
var addresses = {};
var hasRequiredAddresses;
function requireAddresses() {
  if (hasRequiredAddresses) return addresses;
  hasRequiredAddresses = 1;
  Object.defineProperty(addresses, "__esModule", { value: true });
  addresses.ZeroAddress = void 0;
  addresses.ZeroAddress = "0x0000000000000000000000000000000000000000";
  return addresses;
}
var hashes = {};
var hasRequiredHashes;
function requireHashes() {
  if (hasRequiredHashes) return hashes;
  hasRequiredHashes = 1;
  Object.defineProperty(hashes, "__esModule", { value: true });
  hashes.ZeroHash = void 0;
  hashes.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  return hashes;
}
var numbers = {};
var hasRequiredNumbers;
function requireNumbers() {
  if (hasRequiredNumbers) return numbers;
  hasRequiredNumbers = 1;
  Object.defineProperty(numbers, "__esModule", { value: true });
  numbers.MaxInt256 = numbers.MinInt256 = numbers.MaxUint256 = numbers.WeiPerEther = numbers.N = void 0;
  numbers.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  numbers.WeiPerEther = BigInt("1000000000000000000");
  numbers.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  numbers.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
  numbers.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  return numbers;
}
var strings = {};
var hasRequiredStrings;
function requireStrings() {
  if (hasRequiredStrings) return strings;
  hasRequiredStrings = 1;
  Object.defineProperty(strings, "__esModule", { value: true });
  strings.MessagePrefix = strings.EtherSymbol = void 0;
  strings.EtherSymbol = "Ξ";
  strings.MessagePrefix = "Ethereum Signed Message:\n";
  return strings;
}
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants) return constants$1;
  hasRequiredConstants = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessagePrefix = exports.EtherSymbol = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = exports.ZeroHash = exports.ZeroAddress = void 0;
    var addresses_js_1 = /* @__PURE__ */ requireAddresses();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return addresses_js_1.ZeroAddress;
    } });
    var hashes_js_1 = /* @__PURE__ */ requireHashes();
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return hashes_js_1.ZeroHash;
    } });
    var numbers_js_1 = /* @__PURE__ */ requireNumbers();
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return numbers_js_1.N;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return numbers_js_1.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return numbers_js_1.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return numbers_js_1.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return numbers_js_1.MaxInt256;
    } });
    var strings_js_1 = /* @__PURE__ */ requireStrings();
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return strings_js_1.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.MessagePrefix;
    } });
  })(constants$1);
  return constants$1;
}
var hasRequiredSignature;
function requireSignature() {
  if (hasRequiredSignature) return signature;
  hasRequiredSignature = 1;
  Object.defineProperty(signature, "__esModule", { value: true });
  signature.Signature = void 0;
  const index_js_1 = /* @__PURE__ */ requireConstants();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_2 = BigInt(2);
  const BN_27 = BigInt(27);
  const BN_28 = BigInt(28);
  const BN_35 = BigInt(35);
  const _guard = {};
  function toUint256(value) {
    return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
  }
  class Signature {
    #r;
    #s;
    #v;
    #networkV;
    /**
     *  The ``r`` value for a signature.
     *
     *  This represents the ``x`` coordinate of a "reference" or
     *  challenge point, from which the ``y`` can be computed.
     */
    get r() {
      return this.#r;
    }
    set r(value) {
      (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
      this.#r = (0, index_js_2.hexlify)(value);
    }
    /**
     *  The ``s`` value for a signature.
     */
    get s() {
      (0, index_js_2.assertArgument)(parseInt(this.#s.substring(0, 3)) < 8, "non-canonical s; use ._s", "s", this.#s);
      return this.#s;
    }
    set s(_value) {
      (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
      this.#s = (0, index_js_2.hexlify)(_value);
    }
    /**
     *  Return the s value, unchecked for EIP-2 compliance.
     *
     *  This should generally not be used and is for situations where
     *  a non-canonical S value might be relevant, such as Frontier blocks
     *  that were mined prior to EIP-2 or invalid Authorization List
     *  signatures.
     */
    get _s() {
      return this.#s;
    }
    /**
     *  Returns true if the Signature is valid for [[link-eip-2]] signatures.
     */
    isValid() {
      return parseInt(this.#s.substring(0, 3)) < 8;
    }
    /**
     *  The ``v`` value for a signature.
     *
     *  Since a given ``x`` value for ``r`` has two possible values for
     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
     *  values to use.
     *
     *  It is normalized to the values ``27`` or ``28`` for legacy
     *  purposes.
     */
    get v() {
      return this.#v;
    }
    set v(value) {
      const v = (0, index_js_2.getNumber)(value, "value");
      (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
      this.#v = v;
    }
    /**
     *  The EIP-155 ``v`` for legacy transactions. For non-legacy
     *  transactions, this value is ``null``.
     */
    get networkV() {
      return this.#networkV;
    }
    /**
     *  The chain ID for EIP-155 legacy transactions. For non-legacy
     *  transactions, this value is ``null``.
     */
    get legacyChainId() {
      const v = this.networkV;
      if (v == null) {
        return null;
      }
      return Signature.getChainId(v);
    }
    /**
     *  The ``yParity`` for the signature.
     *
     *  See ``v`` for more details on how this value is used.
     */
    get yParity() {
      return this.v === 27 ? 0 : 1;
    }
    /**
     *  The [[link-eip-2098]] compact representation of the ``yParity``
     *  and ``s`` compacted into a single ``bytes32``.
     */
    get yParityAndS() {
      const yParityAndS = (0, index_js_2.getBytes)(this.s);
      if (this.yParity) {
        yParityAndS[0] |= 128;
      }
      return (0, index_js_2.hexlify)(yParityAndS);
    }
    /**
     *  The [[link-eip-2098]] compact representation.
     */
    get compactSerialized() {
      return (0, index_js_2.concat)([this.r, this.yParityAndS]);
    }
    /**
     *  The serialized representation.
     */
    get serialized() {
      return (0, index_js_2.concat)([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
    }
    /**
     *  @private
     */
    constructor(guard, r, s, v) {
      (0, index_js_2.assertPrivate)(guard, _guard, "Signature");
      this.#r = r;
      this.#s = s;
      this.#v = v;
      this.#networkV = null;
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return `Signature { r: "${this.r}", s: "${this._s}"${this.isValid() ? "" : ', valid: "false"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;
    }
    /**
     *  Returns a new identical [[Signature]].
     */
    clone() {
      const clone = new Signature(_guard, this.r, this._s, this.v);
      if (this.networkV) {
        clone.#networkV = this.networkV;
      }
      return clone;
    }
    /**
     *  Returns a representation that is compatible with ``JSON.stringify``.
     */
    toJSON() {
      const networkV = this.networkV;
      return {
        _type: "signature",
        networkV: networkV != null ? networkV.toString() : null,
        r: this.r,
        s: this._s,
        v: this.v
      };
    }
    /**
     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
     *
     *  @example:
     *    Signature.getChainId(45)
     *    //_result:
     *
     *    Signature.getChainId(46)
     *    //_result:
     */
    static getChainId(v) {
      const bv = (0, index_js_2.getBigInt)(v, "v");
      if (bv == BN_27 || bv == BN_28) {
        return BN_0;
      }
      (0, index_js_2.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
      return (bv - BN_35) / BN_2;
    }
    /**
     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
     *
     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
     *  property to include the chain ID.
     *
     *  @example:
     *    Signature.getChainIdV(5, 27)
     *    //_result:
     *
     *    Signature.getChainIdV(5, 28)
     *    //_result:
     *
     */
    static getChainIdV(chainId, v) {
      return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);
    }
    /**
     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
     *
     *  @example:
     *    // The values 0 and 1 imply v is actually yParity
     *    Signature.getNormalizedV(0)
     *    //_result:
     *
     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
     *    Signature.getNormalizedV(27)
     *    //_result:
     *
     *    // Legacy EIP-155 transaction (i.e. >= 35)
     *    Signature.getNormalizedV(46)
     *    //_result:
     *
     *    // Invalid values throw
     *    Signature.getNormalizedV(5)
     *    //_error:
     */
    static getNormalizedV(v) {
      const bv = (0, index_js_2.getBigInt)(v);
      if (bv === BN_0 || bv === BN_27) {
        return 27;
      }
      if (bv === BN_1 || bv === BN_28) {
        return 28;
      }
      (0, index_js_2.assertArgument)(bv >= BN_35, "invalid v", "v", v);
      return bv & BN_1 ? 27 : 28;
    }
    /**
     *  Creates a new [[Signature]].
     *
     *  If no %%sig%% is provided, a new [[Signature]] is created
     *  with default values.
     *
     *  If %%sig%% is a string, it is parsed.
     */
    static from(sig) {
      function assertError(check, message2) {
        (0, index_js_2.assertArgument)(check, message2, "signature", sig);
      }
      if (sig == null) {
        return new Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
      }
      if (typeof sig === "string") {
        const bytes2 = (0, index_js_2.getBytes)(sig, "signature");
        if (bytes2.length === 64) {
          const r2 = (0, index_js_2.hexlify)(bytes2.slice(0, 32));
          const s2 = bytes2.slice(32, 64);
          const v2 = s2[0] & 128 ? 28 : 27;
          s2[0] &= 127;
          return new Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
        }
        if (bytes2.length === 65) {
          const r2 = (0, index_js_2.hexlify)(bytes2.slice(0, 32));
          const s2 = (0, index_js_2.hexlify)(bytes2.slice(32, 64));
          const v2 = Signature.getNormalizedV(bytes2[64]);
          return new Signature(_guard, r2, s2, v2);
        }
        assertError(false, "invalid raw signature length");
      }
      if (sig instanceof Signature) {
        return sig.clone();
      }
      const _r = sig.r;
      assertError(_r != null, "missing r");
      const r = toUint256(_r);
      const s = function(s2, yParityAndS) {
        if (s2 != null) {
          return toUint256(s2);
        }
        if (yParityAndS != null) {
          assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
          const bytes2 = (0, index_js_2.getBytes)(yParityAndS);
          bytes2[0] &= 127;
          return (0, index_js_2.hexlify)(bytes2);
        }
        assertError(false, "missing s");
      }(sig.s, sig.yParityAndS);
      const { networkV, v } = function(_v, yParityAndS, yParity) {
        if (_v != null) {
          const v2 = (0, index_js_2.getBigInt)(_v);
          return {
            networkV: v2 >= BN_35 ? v2 : void 0,
            v: Signature.getNormalizedV(v2)
          };
        }
        if (yParityAndS != null) {
          assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
          return { v: (0, index_js_2.getBytes)(yParityAndS)[0] & 128 ? 28 : 27 };
        }
        if (yParity != null) {
          switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
            case 0:
              return { v: 27 };
            case 1:
              return { v: 28 };
          }
          assertError(false, "invalid yParity");
        }
        assertError(false, "missing v");
      }(sig.v, sig.yParityAndS, sig.yParity);
      const result = new Signature(_guard, r, s, v);
      if (networkV) {
        result.#networkV = networkV;
      }
      assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
      assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
      return result;
    }
  }
  signature.Signature = Signature;
  return signature;
}
var hasRequiredSigningKey;
function requireSigningKey() {
  if (hasRequiredSigningKey) return signingKey;
  hasRequiredSigningKey = 1;
  Object.defineProperty(signingKey, "__esModule", { value: true });
  signingKey.SigningKey = void 0;
  const secp256k1_1 = /* @__PURE__ */ requireSecp256k1();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const signature_js_1 = /* @__PURE__ */ requireSignature();
  class SigningKey {
    #privateKey;
    /**
     *  Creates a new **SigningKey** for %%privateKey%%.
     */
    constructor(privateKey) {
      (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
      this.#privateKey = (0, index_js_1.hexlify)(privateKey);
    }
    /**
     *  The private key.
     */
    get privateKey() {
      return this.#privateKey;
    }
    /**
     *  The uncompressed public key.
     *
     * This will always begin with the prefix ``0x04`` and be 132
     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
     */
    get publicKey() {
      return SigningKey.computePublicKey(this.#privateKey);
    }
    /**
     *  The compressed public key.
     *
     *  This will always begin with either the prefix ``0x02`` or ``0x03``
     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
     *  nibbles)
     */
    get compressedPublicKey() {
      return SigningKey.computePublicKey(this.#privateKey, true);
    }
    /**
     *  Return the signature of the signed %%digest%%.
     */
    sign(digest) {
      (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
      const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {
        lowS: true
      });
      return signature_js_1.Signature.from({
        r: (0, index_js_1.toBeHex)(sig.r, 32),
        s: (0, index_js_1.toBeHex)(sig.s, 32),
        v: sig.recovery ? 28 : 27
      });
    }
    /**
     *  Returns the [[link-wiki-ecdh]] shared secret between this
     *  private key and the %%other%% key.
     *
     *  The %%other%% key may be any type of key, a raw public key,
     *  a compressed/uncompressed pubic key or aprivate key.
     *
     *  Best practice is usually to use a cryptographic hash on the
     *  returned value before using it as a symetric secret.
     *
     *  @example:
     *    sign1 = new SigningKey(id("some-secret-1"))
     *    sign2 = new SigningKey(id("some-secret-2"))
     *
     *    // Notice that privA.computeSharedSecret(pubB)...
     *    sign1.computeSharedSecret(sign2.publicKey)
     *    //_result:
     *
     *    // ...is equal to privB.computeSharedSecret(pubA).
     *    sign2.computeSharedSecret(sign1.publicKey)
     *    //_result:
     */
    computeSharedSecret(other) {
      const pubKey = SigningKey.computePublicKey(other);
      return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey), false));
    }
    /**
     *  Compute the public key for %%key%%, optionally %%compressed%%.
     *
     *  The %%key%% may be any type of key, a raw public key, a
     *  compressed/uncompressed public key or private key.
     *
     *  @example:
     *    sign = new SigningKey(id("some-secret"));
     *
     *    // Compute the uncompressed public key for a private key
     *    SigningKey.computePublicKey(sign.privateKey)
     *    //_result:
     *
     *    // Compute the compressed public key for a private key
     *    SigningKey.computePublicKey(sign.privateKey, true)
     *    //_result:
     *
     *    // Compute the uncompressed public key
     *    SigningKey.computePublicKey(sign.publicKey, false);
     *    //_result:
     *
     *    // Compute the Compressed a public key
     *    SigningKey.computePublicKey(sign.publicKey, true);
     *    //_result:
     */
    static computePublicKey(key, compressed) {
      let bytes2 = (0, index_js_1.getBytes)(key, "key");
      if (bytes2.length === 32) {
        const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes2, !!compressed);
        return (0, index_js_1.hexlify)(pubKey);
      }
      if (bytes2.length === 64) {
        const pub = new Uint8Array(65);
        pub[0] = 4;
        pub.set(bytes2, 1);
        bytes2 = pub;
      }
      const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes2);
      return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
    }
    /**
     *  Returns the public key for the private key which produced the
     *  %%signature%% for the given %%digest%%.
     *
     *  @example:
     *    key = new SigningKey(id("some-secret"))
     *    digest = id("hello world")
     *    sig = key.sign(digest)
     *
     *    // Notice the signer public key...
     *    key.publicKey
     *    //_result:
     *
     *    // ...is equal to the recovered public key
     *    SigningKey.recoverPublicKey(digest, sig)
     *    //_result:
     *
     */
    static recoverPublicKey(digest, signature2) {
      (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
      const sig = signature_js_1.Signature.from(signature2);
      let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
      secpSig = secpSig.addRecoveryBit(sig.yParity);
      const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
      (0, index_js_1.assertArgument)(pubKey != null, "invalid signature for digest", "signature", signature2);
      return "0x" + pubKey.toHex(false);
    }
    /**
     *  Returns the point resulting from adding the ellipic curve points
     *  %%p0%% and %%p1%%.
     *
     *  This is not a common function most developers should require, but
     *  can be useful for certain privacy-specific techniques.
     *
     *  For example, it is used by [[HDNodeWallet]] to compute child
     *  addresses from parent public keys and chain codes.
     */
    static addPoints(p0, p1, compressed) {
      const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));
      const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));
      return "0x" + pub0.add(pub1).toHex(!!compressed);
    }
  }
  signingKey.SigningKey = SigningKey;
  return signingKey;
}
var hasRequiredCrypto;
function requireCrypto() {
  if (hasRequiredCrypto) return crypto$3;
  hasRequiredCrypto = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lock = exports.Signature = exports.SigningKey = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = void 0;
    const hmac_js_1 = /* @__PURE__ */ requireHmac$1();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return hmac_js_1.computeHmac;
    } });
    const keccak_js_1 = /* @__PURE__ */ requireKeccak();
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return keccak_js_1.keccak256;
    } });
    const ripemd160_js_1 = /* @__PURE__ */ requireRipemd160();
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    const pbkdf2_js_1 = /* @__PURE__ */ requirePbkdf2$1();
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_js_1.pbkdf2;
    } });
    const random_js_1 = /* @__PURE__ */ requireRandom$1();
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_js_1.randomBytes;
    } });
    const scrypt_js_1 = /* @__PURE__ */ requireScrypt();
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return scrypt_js_1.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return scrypt_js_1.scryptSync;
    } });
    const sha2_js_1 = /* @__PURE__ */ requireSha2();
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_js_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_js_1.sha512;
    } });
    var signing_key_js_1 = /* @__PURE__ */ requireSigningKey();
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return signing_key_js_1.SigningKey;
    } });
    var signature_js_1 = /* @__PURE__ */ requireSignature();
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return signature_js_1.Signature;
    } });
    function lock() {
      hmac_js_1.computeHmac.lock();
      keccak_js_1.keccak256.lock();
      pbkdf2_js_1.pbkdf2.lock();
      random_js_1.randomBytes.lock();
      ripemd160_js_1.ripemd160.lock();
      scrypt_js_1.scrypt.lock();
      scrypt_js_1.scryptSync.lock();
      sha2_js_1.sha256.lock();
      sha2_js_1.sha512.lock();
      random_js_1.randomBytes.lock();
    }
    exports.lock = lock;
  })(crypto$3);
  return crypto$3;
}
var hasRequiredAddress$3;
function requireAddress$3() {
  if (hasRequiredAddress$3) return address$1;
  hasRequiredAddress$3 = 1;
  Object.defineProperty(address$1, "__esModule", { value: true });
  address$1.getIcapAddress = address$1.getAddress = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const BN_0 = BigInt(0);
  const BN_36 = BigInt(36);
  function getChecksumAddress(address2) {
    address2 = address2.toLowerCase();
    const chars = address2.substring(2).split("");
    const expanded = new Uint8Array(40);
    for (let i = 0; i < 40; i++) {
      expanded[i] = chars[i].charCodeAt(0);
    }
    const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
    for (let i = 0; i < 40; i += 2) {
      if (hashed[i >> 1] >> 4 >= 8) {
        chars[i] = chars[i].toUpperCase();
      }
      if ((hashed[i >> 1] & 15) >= 8) {
        chars[i + 1] = chars[i + 1].toUpperCase();
      }
    }
    return "0x" + chars.join("");
  }
  const ibanLookup = {};
  for (let i = 0; i < 10; i++) {
    ibanLookup[String(i)] = String(i);
  }
  for (let i = 0; i < 26; i++) {
    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
  }
  const safeDigits = 15;
  function ibanChecksum(address2) {
    address2 = address2.toUpperCase();
    address2 = address2.substring(4) + address2.substring(0, 2) + "00";
    let expanded = address2.split("").map((c) => {
      return ibanLookup[c];
    }).join("");
    while (expanded.length >= safeDigits) {
      let block = expanded.substring(0, safeDigits);
      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while (checksum.length < 2) {
      checksum = "0" + checksum;
    }
    return checksum;
  }
  const Base36 = function() {
    const result = {};
    for (let i = 0; i < 36; i++) {
      const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
      result[key] = BigInt(i);
    }
    return result;
  }();
  function fromBase36(value) {
    value = value.toLowerCase();
    let result = BN_0;
    for (let i = 0; i < value.length; i++) {
      result = result * BN_36 + Base36[value[i]];
    }
    return result;
  }
  function getAddress(address2) {
    (0, index_js_2.assertArgument)(typeof address2 === "string", "invalid address", "address", address2);
    if (address2.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
      if (!address2.startsWith("0x")) {
        address2 = "0x" + address2;
      }
      const result = getChecksumAddress(address2);
      (0, index_js_2.assertArgument)(!address2.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address2, "bad address checksum", "address", address2);
      return result;
    }
    if (address2.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
      (0, index_js_2.assertArgument)(address2.substring(2, 4) === ibanChecksum(address2), "bad icap checksum", "address", address2);
      let result = fromBase36(address2.substring(4)).toString(16);
      while (result.length < 40) {
        result = "0" + result;
      }
      return getChecksumAddress("0x" + result);
    }
    (0, index_js_2.assertArgument)(false, "invalid address", "address", address2);
  }
  address$1.getAddress = getAddress;
  function getIcapAddress(address2) {
    let base36 = BigInt(getAddress(address2)).toString(36).toUpperCase();
    while (base36.length < 30) {
      base36 = "0" + base36;
    }
    return "XE" + ibanChecksum("XE00" + base36) + base36;
  }
  address$1.getIcapAddress = getIcapAddress;
  return address$1;
}
var contractAddress = {};
var hasRequiredContractAddress;
function requireContractAddress() {
  if (hasRequiredContractAddress) return contractAddress;
  hasRequiredContractAddress = 1;
  Object.defineProperty(contractAddress, "__esModule", { value: true });
  contractAddress.getCreate2Address = contractAddress.getCreateAddress = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const address_js_1 = /* @__PURE__ */ requireAddress$3();
  function getCreateAddress(tx) {
    const from = (0, address_js_1.getAddress)(tx.from);
    const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
    let nonceHex = nonce.toString(16);
    if (nonceHex === "0") {
      nonceHex = "0x";
    } else if (nonceHex.length % 2) {
      nonceHex = "0x0" + nonceHex;
    } else {
      nonceHex = "0x" + nonceHex;
    }
    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
  }
  contractAddress.getCreateAddress = getCreateAddress;
  function getCreate2Address(_from, _salt, _initCodeHash) {
    const from = (0, address_js_1.getAddress)(_from);
    const salt = (0, index_js_2.getBytes)(_salt, "salt");
    const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
    (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
    (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
  }
  contractAddress.getCreate2Address = getCreate2Address;
  return contractAddress;
}
var checks = {};
var hasRequiredChecks;
function requireChecks() {
  if (hasRequiredChecks) return checks;
  hasRequiredChecks = 1;
  Object.defineProperty(checks, "__esModule", { value: true });
  checks.resolveAddress = checks.isAddress = checks.isAddressable = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const address_js_1 = /* @__PURE__ */ requireAddress$3();
  function isAddressable(value) {
    return value && typeof value.getAddress === "function";
  }
  checks.isAddressable = isAddressable;
  function isAddress(value) {
    try {
      (0, address_js_1.getAddress)(value);
      return true;
    } catch (error) {
    }
    return false;
  }
  checks.isAddress = isAddress;
  async function checkAddress(target, promise) {
    const result = await promise;
    if (result == null || result === "0x0000000000000000000000000000000000000000") {
      (0, index_js_1.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
      (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
    }
    return (0, address_js_1.getAddress)(result);
  }
  function resolveAddress(target, resolver) {
    if (typeof target === "string") {
      if (target.match(/^0x[0-9a-f]{40}$/i)) {
        return (0, address_js_1.getAddress)(target);
      }
      (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
      return checkAddress(target, resolver.resolveName(target));
    } else if (isAddressable(target)) {
      return checkAddress(target, target.getAddress());
    } else if (target && typeof target.then === "function") {
      return checkAddress(target, target);
    }
    (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
  }
  checks.resolveAddress = resolveAddress;
  return checks;
}
var hasRequiredAddress$2;
function requireAddress$2() {
  if (hasRequiredAddress$2) return address$2;
  hasRequiredAddress$2 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = void 0;
    var address_js_1 = /* @__PURE__ */ requireAddress$3();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return address_js_1.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return address_js_1.getIcapAddress;
    } });
    var contract_address_js_1 = /* @__PURE__ */ requireContractAddress();
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return contract_address_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return contract_address_js_1.getCreate2Address;
    } });
    var checks_js_1 = /* @__PURE__ */ requireChecks();
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return checks_js_1.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return checks_js_1.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return checks_js_1.resolveAddress;
    } });
  })(address$2);
  return address$2;
}
var typed = {};
var hasRequiredTyped;
function requireTyped() {
  if (hasRequiredTyped) return typed;
  hasRequiredTyped = 1;
  Object.defineProperty(typed, "__esModule", { value: true });
  typed.Typed = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const _gaurd = {};
  function n(value, width) {
    let signed = false;
    if (width < 0) {
      signed = true;
      width *= -1;
    }
    return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
  }
  function b(value, size) {
    return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
  }
  const _typedSymbol = Symbol.for("_ethers_typed");
  class Typed {
    /**
     *  The type, as a Solidity-compatible type.
     */
    type;
    /**
     *  The actual value.
     */
    value;
    #options;
    /**
     *  @_ignore:
     */
    _typedSymbol;
    /**
     *  @_ignore:
     */
    constructor(gaurd, type2, value, options) {
      if (options == null) {
        options = null;
      }
      (0, index_js_1.assertPrivate)(_gaurd, gaurd, "Typed");
      (0, index_js_1.defineProperties)(this, { _typedSymbol, type: type2, value });
      this.#options = options;
      this.format();
    }
    /**
     *  Format the type as a Human-Readable type.
     */
    format() {
      if (this.type === "array") {
        throw new Error("");
      } else if (this.type === "dynamicArray") {
        throw new Error("");
      } else if (this.type === "tuple") {
        return `tuple(${this.value.map((v) => v.format()).join(",")})`;
      }
      return this.type;
    }
    /**
     *  The default value returned by this type.
     */
    defaultValue() {
      return 0;
    }
    /**
     *  The minimum value for numeric types.
     */
    minValue() {
      return 0;
    }
    /**
     *  The maximum value for numeric types.
     */
    maxValue() {
      return 0;
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
     */
    isBigInt() {
      return !!this.type.match(/^u?int[0-9]+$/);
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
     */
    isData() {
      return this.type.startsWith("bytes");
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
     */
    isString() {
      return this.type === "string";
    }
    /**
     *  Returns the tuple name, if this is a tuple. Throws otherwise.
     */
    get tupleName() {
      if (this.type !== "tuple") {
        throw TypeError("not a tuple");
      }
      return this.#options;
    }
    // Returns the length of this type as an array
    // - `null` indicates the length is unforced, it could be dynamic
    // - `-1` indicates the length is dynamic
    // - any other value indicates it is a static array and is its length
    /**
     *  Returns the length of the array type or ``-1`` if it is dynamic.
     *
     *  Throws if the type is not an array.
     */
    get arrayLength() {
      if (this.type !== "array") {
        throw TypeError("not an array");
      }
      if (this.#options === true) {
        return -1;
      }
      if (this.#options === false) {
        return this.value.length;
      }
      return null;
    }
    /**
     *  Returns a new **Typed** of %%type%% with the %%value%%.
     */
    static from(type2, value) {
      return new Typed(_gaurd, type2, value);
    }
    /**
     *  Return a new ``uint8`` type for %%v%%.
     */
    static uint8(v) {
      return n(v, 8);
    }
    /**
     *  Return a new ``uint16`` type for %%v%%.
     */
    static uint16(v) {
      return n(v, 16);
    }
    /**
     *  Return a new ``uint24`` type for %%v%%.
     */
    static uint24(v) {
      return n(v, 24);
    }
    /**
     *  Return a new ``uint32`` type for %%v%%.
     */
    static uint32(v) {
      return n(v, 32);
    }
    /**
     *  Return a new ``uint40`` type for %%v%%.
     */
    static uint40(v) {
      return n(v, 40);
    }
    /**
     *  Return a new ``uint48`` type for %%v%%.
     */
    static uint48(v) {
      return n(v, 48);
    }
    /**
     *  Return a new ``uint56`` type for %%v%%.
     */
    static uint56(v) {
      return n(v, 56);
    }
    /**
     *  Return a new ``uint64`` type for %%v%%.
     */
    static uint64(v) {
      return n(v, 64);
    }
    /**
     *  Return a new ``uint72`` type for %%v%%.
     */
    static uint72(v) {
      return n(v, 72);
    }
    /**
     *  Return a new ``uint80`` type for %%v%%.
     */
    static uint80(v) {
      return n(v, 80);
    }
    /**
     *  Return a new ``uint88`` type for %%v%%.
     */
    static uint88(v) {
      return n(v, 88);
    }
    /**
     *  Return a new ``uint96`` type for %%v%%.
     */
    static uint96(v) {
      return n(v, 96);
    }
    /**
     *  Return a new ``uint104`` type for %%v%%.
     */
    static uint104(v) {
      return n(v, 104);
    }
    /**
     *  Return a new ``uint112`` type for %%v%%.
     */
    static uint112(v) {
      return n(v, 112);
    }
    /**
     *  Return a new ``uint120`` type for %%v%%.
     */
    static uint120(v) {
      return n(v, 120);
    }
    /**
     *  Return a new ``uint128`` type for %%v%%.
     */
    static uint128(v) {
      return n(v, 128);
    }
    /**
     *  Return a new ``uint136`` type for %%v%%.
     */
    static uint136(v) {
      return n(v, 136);
    }
    /**
     *  Return a new ``uint144`` type for %%v%%.
     */
    static uint144(v) {
      return n(v, 144);
    }
    /**
     *  Return a new ``uint152`` type for %%v%%.
     */
    static uint152(v) {
      return n(v, 152);
    }
    /**
     *  Return a new ``uint160`` type for %%v%%.
     */
    static uint160(v) {
      return n(v, 160);
    }
    /**
     *  Return a new ``uint168`` type for %%v%%.
     */
    static uint168(v) {
      return n(v, 168);
    }
    /**
     *  Return a new ``uint176`` type for %%v%%.
     */
    static uint176(v) {
      return n(v, 176);
    }
    /**
     *  Return a new ``uint184`` type for %%v%%.
     */
    static uint184(v) {
      return n(v, 184);
    }
    /**
     *  Return a new ``uint192`` type for %%v%%.
     */
    static uint192(v) {
      return n(v, 192);
    }
    /**
     *  Return a new ``uint200`` type for %%v%%.
     */
    static uint200(v) {
      return n(v, 200);
    }
    /**
     *  Return a new ``uint208`` type for %%v%%.
     */
    static uint208(v) {
      return n(v, 208);
    }
    /**
     *  Return a new ``uint216`` type for %%v%%.
     */
    static uint216(v) {
      return n(v, 216);
    }
    /**
     *  Return a new ``uint224`` type for %%v%%.
     */
    static uint224(v) {
      return n(v, 224);
    }
    /**
     *  Return a new ``uint232`` type for %%v%%.
     */
    static uint232(v) {
      return n(v, 232);
    }
    /**
     *  Return a new ``uint240`` type for %%v%%.
     */
    static uint240(v) {
      return n(v, 240);
    }
    /**
     *  Return a new ``uint248`` type for %%v%%.
     */
    static uint248(v) {
      return n(v, 248);
    }
    /**
     *  Return a new ``uint256`` type for %%v%%.
     */
    static uint256(v) {
      return n(v, 256);
    }
    /**
     *  Return a new ``uint256`` type for %%v%%.
     */
    static uint(v) {
      return n(v, 256);
    }
    /**
     *  Return a new ``int8`` type for %%v%%.
     */
    static int8(v) {
      return n(v, -8);
    }
    /**
     *  Return a new ``int16`` type for %%v%%.
     */
    static int16(v) {
      return n(v, -16);
    }
    /**
     *  Return a new ``int24`` type for %%v%%.
     */
    static int24(v) {
      return n(v, -24);
    }
    /**
     *  Return a new ``int32`` type for %%v%%.
     */
    static int32(v) {
      return n(v, -32);
    }
    /**
     *  Return a new ``int40`` type for %%v%%.
     */
    static int40(v) {
      return n(v, -40);
    }
    /**
     *  Return a new ``int48`` type for %%v%%.
     */
    static int48(v) {
      return n(v, -48);
    }
    /**
     *  Return a new ``int56`` type for %%v%%.
     */
    static int56(v) {
      return n(v, -56);
    }
    /**
     *  Return a new ``int64`` type for %%v%%.
     */
    static int64(v) {
      return n(v, -64);
    }
    /**
     *  Return a new ``int72`` type for %%v%%.
     */
    static int72(v) {
      return n(v, -72);
    }
    /**
     *  Return a new ``int80`` type for %%v%%.
     */
    static int80(v) {
      return n(v, -80);
    }
    /**
     *  Return a new ``int88`` type for %%v%%.
     */
    static int88(v) {
      return n(v, -88);
    }
    /**
     *  Return a new ``int96`` type for %%v%%.
     */
    static int96(v) {
      return n(v, -96);
    }
    /**
     *  Return a new ``int104`` type for %%v%%.
     */
    static int104(v) {
      return n(v, -104);
    }
    /**
     *  Return a new ``int112`` type for %%v%%.
     */
    static int112(v) {
      return n(v, -112);
    }
    /**
     *  Return a new ``int120`` type for %%v%%.
     */
    static int120(v) {
      return n(v, -120);
    }
    /**
     *  Return a new ``int128`` type for %%v%%.
     */
    static int128(v) {
      return n(v, -128);
    }
    /**
     *  Return a new ``int136`` type for %%v%%.
     */
    static int136(v) {
      return n(v, -136);
    }
    /**
     *  Return a new ``int144`` type for %%v%%.
     */
    static int144(v) {
      return n(v, -144);
    }
    /**
     *  Return a new ``int52`` type for %%v%%.
     */
    static int152(v) {
      return n(v, -152);
    }
    /**
     *  Return a new ``int160`` type for %%v%%.
     */
    static int160(v) {
      return n(v, -160);
    }
    /**
     *  Return a new ``int168`` type for %%v%%.
     */
    static int168(v) {
      return n(v, -168);
    }
    /**
     *  Return a new ``int176`` type for %%v%%.
     */
    static int176(v) {
      return n(v, -176);
    }
    /**
     *  Return a new ``int184`` type for %%v%%.
     */
    static int184(v) {
      return n(v, -184);
    }
    /**
     *  Return a new ``int92`` type for %%v%%.
     */
    static int192(v) {
      return n(v, -192);
    }
    /**
     *  Return a new ``int200`` type for %%v%%.
     */
    static int200(v) {
      return n(v, -200);
    }
    /**
     *  Return a new ``int208`` type for %%v%%.
     */
    static int208(v) {
      return n(v, -208);
    }
    /**
     *  Return a new ``int216`` type for %%v%%.
     */
    static int216(v) {
      return n(v, -216);
    }
    /**
     *  Return a new ``int224`` type for %%v%%.
     */
    static int224(v) {
      return n(v, -224);
    }
    /**
     *  Return a new ``int232`` type for %%v%%.
     */
    static int232(v) {
      return n(v, -232);
    }
    /**
     *  Return a new ``int240`` type for %%v%%.
     */
    static int240(v) {
      return n(v, -240);
    }
    /**
     *  Return a new ``int248`` type for %%v%%.
     */
    static int248(v) {
      return n(v, -248);
    }
    /**
     *  Return a new ``int256`` type for %%v%%.
     */
    static int256(v) {
      return n(v, -256);
    }
    /**
     *  Return a new ``int256`` type for %%v%%.
     */
    static int(v) {
      return n(v, -256);
    }
    /**
     *  Return a new ``bytes1`` type for %%v%%.
     */
    static bytes1(v) {
      return b(v, 1);
    }
    /**
     *  Return a new ``bytes2`` type for %%v%%.
     */
    static bytes2(v) {
      return b(v, 2);
    }
    /**
     *  Return a new ``bytes3`` type for %%v%%.
     */
    static bytes3(v) {
      return b(v, 3);
    }
    /**
     *  Return a new ``bytes4`` type for %%v%%.
     */
    static bytes4(v) {
      return b(v, 4);
    }
    /**
     *  Return a new ``bytes5`` type for %%v%%.
     */
    static bytes5(v) {
      return b(v, 5);
    }
    /**
     *  Return a new ``bytes6`` type for %%v%%.
     */
    static bytes6(v) {
      return b(v, 6);
    }
    /**
     *  Return a new ``bytes7`` type for %%v%%.
     */
    static bytes7(v) {
      return b(v, 7);
    }
    /**
     *  Return a new ``bytes8`` type for %%v%%.
     */
    static bytes8(v) {
      return b(v, 8);
    }
    /**
     *  Return a new ``bytes9`` type for %%v%%.
     */
    static bytes9(v) {
      return b(v, 9);
    }
    /**
     *  Return a new ``bytes10`` type for %%v%%.
     */
    static bytes10(v) {
      return b(v, 10);
    }
    /**
     *  Return a new ``bytes11`` type for %%v%%.
     */
    static bytes11(v) {
      return b(v, 11);
    }
    /**
     *  Return a new ``bytes12`` type for %%v%%.
     */
    static bytes12(v) {
      return b(v, 12);
    }
    /**
     *  Return a new ``bytes13`` type for %%v%%.
     */
    static bytes13(v) {
      return b(v, 13);
    }
    /**
     *  Return a new ``bytes14`` type for %%v%%.
     */
    static bytes14(v) {
      return b(v, 14);
    }
    /**
     *  Return a new ``bytes15`` type for %%v%%.
     */
    static bytes15(v) {
      return b(v, 15);
    }
    /**
     *  Return a new ``bytes16`` type for %%v%%.
     */
    static bytes16(v) {
      return b(v, 16);
    }
    /**
     *  Return a new ``bytes17`` type for %%v%%.
     */
    static bytes17(v) {
      return b(v, 17);
    }
    /**
     *  Return a new ``bytes18`` type for %%v%%.
     */
    static bytes18(v) {
      return b(v, 18);
    }
    /**
     *  Return a new ``bytes19`` type for %%v%%.
     */
    static bytes19(v) {
      return b(v, 19);
    }
    /**
     *  Return a new ``bytes20`` type for %%v%%.
     */
    static bytes20(v) {
      return b(v, 20);
    }
    /**
     *  Return a new ``bytes21`` type for %%v%%.
     */
    static bytes21(v) {
      return b(v, 21);
    }
    /**
     *  Return a new ``bytes22`` type for %%v%%.
     */
    static bytes22(v) {
      return b(v, 22);
    }
    /**
     *  Return a new ``bytes23`` type for %%v%%.
     */
    static bytes23(v) {
      return b(v, 23);
    }
    /**
     *  Return a new ``bytes24`` type for %%v%%.
     */
    static bytes24(v) {
      return b(v, 24);
    }
    /**
     *  Return a new ``bytes25`` type for %%v%%.
     */
    static bytes25(v) {
      return b(v, 25);
    }
    /**
     *  Return a new ``bytes26`` type for %%v%%.
     */
    static bytes26(v) {
      return b(v, 26);
    }
    /**
     *  Return a new ``bytes27`` type for %%v%%.
     */
    static bytes27(v) {
      return b(v, 27);
    }
    /**
     *  Return a new ``bytes28`` type for %%v%%.
     */
    static bytes28(v) {
      return b(v, 28);
    }
    /**
     *  Return a new ``bytes29`` type for %%v%%.
     */
    static bytes29(v) {
      return b(v, 29);
    }
    /**
     *  Return a new ``bytes30`` type for %%v%%.
     */
    static bytes30(v) {
      return b(v, 30);
    }
    /**
     *  Return a new ``bytes31`` type for %%v%%.
     */
    static bytes31(v) {
      return b(v, 31);
    }
    /**
     *  Return a new ``bytes32`` type for %%v%%.
     */
    static bytes32(v) {
      return b(v, 32);
    }
    /**
     *  Return a new ``address`` type for %%v%%.
     */
    static address(v) {
      return new Typed(_gaurd, "address", v);
    }
    /**
     *  Return a new ``bool`` type for %%v%%.
     */
    static bool(v) {
      return new Typed(_gaurd, "bool", !!v);
    }
    /**
     *  Return a new ``bytes`` type for %%v%%.
     */
    static bytes(v) {
      return new Typed(_gaurd, "bytes", v);
    }
    /**
     *  Return a new ``string`` type for %%v%%.
     */
    static string(v) {
      return new Typed(_gaurd, "string", v);
    }
    /**
     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
     */
    static array(v, dynamic) {
      throw new Error("not implemented yet");
    }
    /**
     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
     */
    static tuple(v, name) {
      throw new Error("not implemented yet");
    }
    /**
     *  Return a new ``uint8`` type for %%v%%.
     */
    static overrides(v) {
      return new Typed(_gaurd, "overrides", Object.assign({}, v));
    }
    /**
     *  Returns true only if %%value%% is a [[Typed]] instance.
     */
    static isTyped(value) {
      return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
    }
    /**
     *  If the value is a [[Typed]] instance, validates the underlying value
     *  and returns it, otherwise returns value directly.
     *
     *  This is useful for functions that with to accept either a [[Typed]]
     *  object or values.
     */
    static dereference(value, type2) {
      if (Typed.isTyped(value)) {
        if (value.type !== type2) {
          throw new Error(`invalid type: expecetd ${type2}, got ${value.type}`);
        }
        return value.value;
      }
      return value;
    }
  }
  typed.Typed = Typed;
  return typed;
}
var hasRequiredAddress$1;
function requireAddress$1() {
  if (hasRequiredAddress$1) return address$3;
  hasRequiredAddress$1 = 1;
  Object.defineProperty(address$3, "__esModule", { value: true });
  address$3.AddressCoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const maths_js_1 = /* @__PURE__ */ requireMaths();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  class AddressCoder extends abstract_coder_js_1.Coder {
    constructor(localName) {
      super("address", "address", localName, false);
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, _value) {
      let value = typed_js_1.Typed.dereference(_value, "string");
      try {
        value = (0, index_js_1.getAddress)(value);
      } catch (error) {
        return this._throwError(error.message, _value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
    }
  }
  address$3.AddressCoder = AddressCoder;
  return address$3;
}
var array = {};
var anonymous = {};
var hasRequiredAnonymous;
function requireAnonymous() {
  if (hasRequiredAnonymous) return anonymous;
  hasRequiredAnonymous = 1;
  Object.defineProperty(anonymous, "__esModule", { value: true });
  anonymous.AnonymousCoder = void 0;
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  class AnonymousCoder extends abstract_coder_js_1.Coder {
    coder;
    constructor(coder) {
      super(coder.name, coder.type, "_", coder.dynamic);
      this.coder = coder;
    }
    defaultValue() {
      return this.coder.defaultValue();
    }
    encode(writer, value) {
      return this.coder.encode(writer, value);
    }
    decode(reader) {
      return this.coder.decode(reader);
    }
  }
  anonymous.AnonymousCoder = AnonymousCoder;
  return anonymous;
}
var hasRequiredArray;
function requireArray() {
  if (hasRequiredArray) return array;
  hasRequiredArray = 1;
  Object.defineProperty(array, "__esModule", { value: true });
  array.ArrayCoder = array.unpack = array.pack = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  const anonymous_js_1 = /* @__PURE__ */ requireAnonymous();
  function pack(writer, coders, values) {
    let arrayValues = [];
    if (Array.isArray(values)) {
      arrayValues = values;
    } else if (values && typeof values === "object") {
      let unique = {};
      arrayValues = coders.map((coder) => {
        const name = coder.localName;
        (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
        unique[name] = true;
        return values[name];
      });
    } else {
      (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
    }
    (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
    let staticWriter = new abstract_coder_js_1.Writer();
    let dynamicWriter = new abstract_coder_js_1.Writer();
    let updateFuncs = [];
    coders.forEach((coder, index) => {
      let value = arrayValues[index];
      if (coder.dynamic) {
        let dynamicOffset = dynamicWriter.length;
        coder.encode(dynamicWriter, value);
        let updateFunc = staticWriter.writeUpdatableValue();
        updateFuncs.push((baseOffset) => {
          updateFunc(baseOffset + dynamicOffset);
        });
      } else {
        coder.encode(staticWriter, value);
      }
    });
    updateFuncs.forEach((func) => {
      func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
  }
  array.pack = pack;
  function unpack(reader, coders) {
    let values = [];
    let keys = [];
    let baseReader = reader.subReader(0);
    coders.forEach((coder) => {
      let value = null;
      if (coder.dynamic) {
        let offset = reader.readIndex();
        let offsetReader = baseReader.subReader(offset);
        try {
          value = coder.decode(offsetReader);
        } catch (error) {
          if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      } else {
        try {
          value = coder.decode(reader);
        } catch (error) {
          if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
            throw error;
          }
          value = error;
          value.baseType = coder.name;
          value.name = coder.localName;
          value.type = coder.type;
        }
      }
      if (value == void 0) {
        throw new Error("investigate");
      }
      values.push(value);
      keys.push(coder.localName || null);
    });
    return abstract_coder_js_1.Result.fromItems(values, keys);
  }
  array.unpack = unpack;
  class ArrayCoder extends abstract_coder_js_1.Coder {
    coder;
    length;
    constructor(coder, length, localName) {
      const type2 = coder.type + "[" + (length >= 0 ? length : "") + "]";
      const dynamic = length === -1 || coder.dynamic;
      super("array", type2, localName, dynamic);
      (0, index_js_1.defineProperties)(this, { coder, length });
    }
    defaultValue() {
      const defaultChild = this.coder.defaultValue();
      const result = [];
      for (let i = 0; i < this.length; i++) {
        result.push(defaultChild);
      }
      return result;
    }
    encode(writer, _value) {
      const value = typed_js_1.Typed.dereference(_value, "array");
      if (!Array.isArray(value)) {
        this._throwError("expected array value", value);
      }
      let count = this.length;
      if (count === -1) {
        count = value.length;
        writer.writeValue(value.length);
      }
      (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
      let coders = [];
      for (let i = 0; i < value.length; i++) {
        coders.push(this.coder);
      }
      return pack(writer, coders, value);
    }
    decode(reader) {
      let count = this.length;
      if (count === -1) {
        count = reader.readIndex();
        (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
      }
      let coders = [];
      for (let i = 0; i < count; i++) {
        coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
      }
      return unpack(reader, coders);
    }
  }
  array.ArrayCoder = ArrayCoder;
  return array;
}
var boolean = {};
var hasRequiredBoolean;
function requireBoolean() {
  if (hasRequiredBoolean) return boolean;
  hasRequiredBoolean = 1;
  Object.defineProperty(boolean, "__esModule", { value: true });
  boolean.BooleanCoder = void 0;
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  class BooleanCoder extends abstract_coder_js_1.Coder {
    constructor(localName) {
      super("bool", "bool", localName, false);
    }
    defaultValue() {
      return false;
    }
    encode(writer, _value) {
      const value = typed_js_1.Typed.dereference(_value, "bool");
      return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
      return !!reader.readValue();
    }
  }
  boolean.BooleanCoder = BooleanCoder;
  return boolean;
}
var bytes = {};
var hasRequiredBytes;
function requireBytes() {
  if (hasRequiredBytes) return bytes;
  hasRequiredBytes = 1;
  Object.defineProperty(bytes, "__esModule", { value: true });
  bytes.BytesCoder = bytes.DynamicBytesCoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  class DynamicBytesCoder extends abstract_coder_js_1.Coder {
    constructor(type2, localName) {
      super(type2, type2, localName, true);
    }
    defaultValue() {
      return "0x";
    }
    encode(writer, value) {
      value = (0, index_js_1.getBytesCopy)(value);
      let length = writer.writeValue(value.length);
      length += writer.writeBytes(value);
      return length;
    }
    decode(reader) {
      return reader.readBytes(reader.readIndex(), true);
    }
  }
  bytes.DynamicBytesCoder = DynamicBytesCoder;
  class BytesCoder extends DynamicBytesCoder {
    constructor(localName) {
      super("bytes", localName);
    }
    decode(reader) {
      return (0, index_js_1.hexlify)(super.decode(reader));
    }
  }
  bytes.BytesCoder = BytesCoder;
  return bytes;
}
var fixedBytes = {};
var hasRequiredFixedBytes;
function requireFixedBytes() {
  if (hasRequiredFixedBytes) return fixedBytes;
  hasRequiredFixedBytes = 1;
  Object.defineProperty(fixedBytes, "__esModule", { value: true });
  fixedBytes.FixedBytesCoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  class FixedBytesCoder extends abstract_coder_js_1.Coder {
    size;
    constructor(size, localName) {
      let name = "bytes" + String(size);
      super(name, name, localName, false);
      (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
    }
    defaultValue() {
      return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, _value) {
      let data2 = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
      if (data2.length !== this.size) {
        this._throwError("incorrect data length", _value);
      }
      return writer.writeBytes(data2);
    }
    decode(reader) {
      return (0, index_js_1.hexlify)(reader.readBytes(this.size));
    }
  }
  fixedBytes.FixedBytesCoder = FixedBytesCoder;
  return fixedBytes;
}
var _null = {};
var hasRequired_null;
function require_null() {
  if (hasRequired_null) return _null;
  hasRequired_null = 1;
  Object.defineProperty(_null, "__esModule", { value: true });
  _null.NullCoder = void 0;
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  const Empty = new Uint8Array([]);
  class NullCoder extends abstract_coder_js_1.Coder {
    constructor(localName) {
      super("null", "", localName, false);
    }
    defaultValue() {
      return null;
    }
    encode(writer, value) {
      if (value != null) {
        this._throwError("not null", value);
      }
      return writer.writeBytes(Empty);
    }
    decode(reader) {
      reader.readBytes(0);
      return null;
    }
  }
  _null.NullCoder = NullCoder;
  return _null;
}
var number = {};
var hasRequiredNumber;
function requireNumber() {
  if (hasRequiredNumber) return number;
  hasRequiredNumber = 1;
  Object.defineProperty(number, "__esModule", { value: true });
  number.NumberCoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  class NumberCoder extends abstract_coder_js_1.Coder {
    size;
    signed;
    constructor(size, signed, localName) {
      const name = (signed ? "int" : "uint") + size * 8;
      super(name, name, localName, false);
      (0, index_js_1.defineProperties)(this, { size, signed }, { size: "number", signed: "boolean" });
    }
    defaultValue() {
      return 0;
    }
    encode(writer, _value) {
      let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
      let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);
      if (this.signed) {
        let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);
        if (value > bounds || value < -(bounds + BN_1)) {
          this._throwError("value out-of-bounds", _value);
        }
        value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
      } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
        this._throwError("value out-of-bounds", _value);
      }
      return writer.writeValue(value);
    }
    decode(reader) {
      let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
      if (this.signed) {
        value = (0, index_js_1.fromTwos)(value, this.size * 8);
      }
      return value;
    }
  }
  number.NumberCoder = NumberCoder;
  return number;
}
var string = {};
var hasRequiredString;
function requireString() {
  if (hasRequiredString) return string;
  hasRequiredString = 1;
  Object.defineProperty(string, "__esModule", { value: true });
  string.StringCoder = void 0;
  const utf8_js_1 = /* @__PURE__ */ requireUtf8();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const bytes_js_1 = /* @__PURE__ */ requireBytes();
  class StringCoder extends bytes_js_1.DynamicBytesCoder {
    constructor(localName) {
      super("string", localName);
    }
    defaultValue() {
      return "";
    }
    encode(writer, _value) {
      return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
    }
    decode(reader) {
      return (0, utf8_js_1.toUtf8String)(super.decode(reader));
    }
  }
  string.StringCoder = StringCoder;
  return string;
}
var tuple = {};
var hasRequiredTuple;
function requireTuple() {
  if (hasRequiredTuple) return tuple;
  hasRequiredTuple = 1;
  Object.defineProperty(tuple, "__esModule", { value: true });
  tuple.TupleCoder = void 0;
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  const typed_js_1 = /* @__PURE__ */ requireTyped();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  const array_js_1 = /* @__PURE__ */ requireArray();
  class TupleCoder extends abstract_coder_js_1.Coder {
    coders;
    constructor(coders, localName) {
      let dynamic = false;
      const types2 = [];
      coders.forEach((coder) => {
        if (coder.dynamic) {
          dynamic = true;
        }
        types2.push(coder.type);
      });
      const type2 = "tuple(" + types2.join(",") + ")";
      super("tuple", type2, localName, dynamic);
      (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
    }
    defaultValue() {
      const values = [];
      this.coders.forEach((coder) => {
        values.push(coder.defaultValue());
      });
      const uniqueNames = this.coders.reduce((accum, coder) => {
        const name = coder.localName;
        if (name) {
          if (!accum[name]) {
            accum[name] = 0;
          }
          accum[name]++;
        }
        return accum;
      }, {});
      this.coders.forEach((coder, index) => {
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) {
          return;
        }
        if (name === "length") {
          name = "_length";
        }
        if (values[name] != null) {
          return;
        }
        values[name] = values[index];
      });
      return Object.freeze(values);
    }
    encode(writer, _value) {
      const value = typed_js_1.Typed.dereference(_value, "tuple");
      return (0, array_js_1.pack)(writer, this.coders, value);
    }
    decode(reader) {
      return (0, array_js_1.unpack)(reader, this.coders);
    }
  }
  tuple.TupleCoder = TupleCoder;
  return tuple;
}
var fragments = {};
var hash = {};
var authorization$1 = {};
var transaction$1 = {};
var accesslist = {};
var hasRequiredAccesslist;
function requireAccesslist() {
  if (hasRequiredAccesslist) return accesslist;
  hasRequiredAccesslist = 1;
  Object.defineProperty(accesslist, "__esModule", { value: true });
  accesslist.accessListify = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  function accessSetify(addr, storageKeys) {
    return {
      address: (0, index_js_1.getAddress)(addr),
      storageKeys: storageKeys.map((storageKey, index) => {
        (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
        return storageKey.toLowerCase();
      })
    };
  }
  function accessListify(value) {
    if (Array.isArray(value)) {
      return value.map((set, index) => {
        if (Array.isArray(set)) {
          (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
          return accessSetify(set[0], set[1]);
        }
        (0, index_js_2.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
        return accessSetify(set.address, set.storageKeys);
      });
    }
    (0, index_js_2.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
    const result = Object.keys(value).map((addr) => {
      const storageKeys = value[addr].reduce((accum, storageKey) => {
        accum[storageKey] = true;
        return accum;
      }, {});
      return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b) => a.address.localeCompare(b.address));
    return result;
  }
  accesslist.accessListify = accessListify;
  return accesslist;
}
var authorization = {};
var hasRequiredAuthorization$1;
function requireAuthorization$1() {
  if (hasRequiredAuthorization$1) return authorization;
  hasRequiredAuthorization$1 = 1;
  Object.defineProperty(authorization, "__esModule", { value: true });
  authorization.authorizationify = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  function authorizationify(auth) {
    return {
      address: (0, index_js_1.getAddress)(auth.address),
      nonce: (0, index_js_3.getBigInt)(auth.nonce != null ? auth.nonce : 0),
      chainId: (0, index_js_3.getBigInt)(auth.chainId != null ? auth.chainId : 0),
      signature: index_js_2.Signature.from(auth.signature)
    };
  }
  authorization.authorizationify = authorizationify;
  return authorization;
}
var address = {};
var hasRequiredAddress;
function requireAddress() {
  if (hasRequiredAddress) return address;
  hasRequiredAddress = 1;
  Object.defineProperty(address, "__esModule", { value: true });
  address.recoverAddress = address.computeAddress = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  function computeAddress(key) {
    let pubkey;
    if (typeof key === "string") {
      pubkey = index_js_2.SigningKey.computePublicKey(key, false);
    } else {
      pubkey = key.publicKey;
    }
    return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
  }
  address.computeAddress = computeAddress;
  function recoverAddress(digest, signature2) {
    return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature2));
  }
  address.recoverAddress = recoverAddress;
  return address;
}
var transaction = {};
var hasRequiredTransaction$1;
function requireTransaction$1() {
  if (hasRequiredTransaction$1) return transaction;
  hasRequiredTransaction$1 = 1;
  Object.defineProperty(transaction, "__esModule", { value: true });
  transaction.Transaction = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const addresses_js_1 = /* @__PURE__ */ requireAddresses();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const accesslist_js_1 = /* @__PURE__ */ requireAccesslist();
  const authorization_js_1 = /* @__PURE__ */ requireAuthorization$1();
  const address_js_1 = /* @__PURE__ */ requireAddress();
  const BN_0 = BigInt(0);
  const BN_2 = BigInt(2);
  const BN_27 = BigInt(27);
  const BN_28 = BigInt(28);
  const BN_35 = BigInt(35);
  const BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  const BLOB_SIZE = 4096 * 32;
  function getKzgLibrary(kzg) {
    const blobToKzgCommitment = (blob) => {
      if ("computeBlobProof" in kzg) {
        if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
          return (0, index_js_3.getBytes)(kzg.blobToKzgCommitment((0, index_js_3.hexlify)(blob)));
        }
      } else if ("blobToKzgCommitment" in kzg && typeof kzg.blobToKzgCommitment === "function") {
        return (0, index_js_3.getBytes)(kzg.blobToKzgCommitment(blob));
      }
      if ("blobToKZGCommitment" in kzg && typeof kzg.blobToKZGCommitment === "function") {
        return (0, index_js_3.getBytes)(kzg.blobToKZGCommitment((0, index_js_3.hexlify)(blob)));
      }
      (0, index_js_3.assertArgument)(false, "unsupported KZG library", "kzg", kzg);
    };
    const computeBlobKzgProof = (blob, commitment) => {
      if ("computeBlobProof" in kzg && typeof kzg.computeBlobProof === "function") {
        return (0, index_js_3.getBytes)(kzg.computeBlobProof((0, index_js_3.hexlify)(blob), (0, index_js_3.hexlify)(commitment)));
      }
      if ("computeBlobKzgProof" in kzg && typeof kzg.computeBlobKzgProof === "function") {
        return kzg.computeBlobKzgProof(blob, commitment);
      }
      if ("computeBlobKZGProof" in kzg && typeof kzg.computeBlobKZGProof === "function") {
        return (0, index_js_3.getBytes)(kzg.computeBlobKZGProof((0, index_js_3.hexlify)(blob), (0, index_js_3.hexlify)(commitment)));
      }
      (0, index_js_3.assertArgument)(false, "unsupported KZG library", "kzg", kzg);
    };
    return { blobToKzgCommitment, computeBlobKzgProof };
  }
  function getVersionedHash(version2, hash2) {
    let versioned = version2.toString(16);
    while (versioned.length < 2) {
      versioned = "0" + versioned;
    }
    versioned += (0, index_js_2.sha256)(hash2).substring(4);
    return "0x" + versioned;
  }
  function handleAddress(value) {
    if (value === "0x") {
      return null;
    }
    return (0, index_js_1.getAddress)(value);
  }
  function handleAccessList(value, param) {
    try {
      return (0, accesslist_js_1.accessListify)(value);
    } catch (error) {
      (0, index_js_3.assertArgument)(false, error.message, param, value);
    }
  }
  function handleAuthorizationList(value, param) {
    try {
      if (!Array.isArray(value)) {
        throw new Error("authorizationList: invalid array");
      }
      const result = [];
      for (let i = 0; i < value.length; i++) {
        const auth = value[i];
        if (!Array.isArray(auth)) {
          throw new Error(`authorization[${i}]: invalid array`);
        }
        if (auth.length !== 6) {
          throw new Error(`authorization[${i}]: wrong length`);
        }
        if (!auth[1]) {
          throw new Error(`authorization[${i}]: null address`);
        }
        result.push({
          address: handleAddress(auth[1]),
          nonce: handleUint(auth[2], "nonce"),
          chainId: handleUint(auth[0], "chainId"),
          signature: index_js_2.Signature.from({
            yParity: handleNumber(auth[3], "yParity"),
            r: (0, index_js_3.zeroPadValue)(auth[4], 32),
            s: (0, index_js_3.zeroPadValue)(auth[5], 32)
          })
        });
      }
      return result;
    } catch (error) {
      (0, index_js_3.assertArgument)(false, error.message, param, value);
    }
  }
  function handleNumber(_value, param) {
    if (_value === "0x") {
      return 0;
    }
    return (0, index_js_3.getNumber)(_value, param);
  }
  function handleUint(_value, param) {
    if (_value === "0x") {
      return BN_0;
    }
    const value = (0, index_js_3.getBigInt)(_value, param);
    (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
    return value;
  }
  function formatNumber(_value, name) {
    const value = (0, index_js_3.getBigInt)(_value, "value");
    const result = (0, index_js_3.toBeArray)(value);
    (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
    return result;
  }
  function formatAccessList(value) {
    return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
  }
  function formatAuthorizationList(value) {
    return value.map((a) => {
      return [
        formatNumber(a.chainId, "chainId"),
        a.address,
        formatNumber(a.nonce, "nonce"),
        formatNumber(a.signature.yParity, "yParity"),
        (0, index_js_3.toBeArray)(a.signature.r),
        (0, index_js_3.toBeArray)(a.signature.s)
      ];
    });
  }
  function formatHashes(value, param) {
    (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
    for (let i = 0; i < value.length; i++) {
      (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
    }
    return value;
  }
  function _parseLegacy(data2) {
    const fields = (0, index_js_3.decodeRlp)(data2);
    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data2);
    const tx = {
      type: 0,
      nonce: handleNumber(fields[0], "nonce"),
      gasPrice: handleUint(fields[1], "gasPrice"),
      gasLimit: handleUint(fields[2], "gasLimit"),
      to: handleAddress(fields[3]),
      value: handleUint(fields[4], "value"),
      data: (0, index_js_3.hexlify)(fields[5]),
      chainId: BN_0
    };
    if (fields.length === 6) {
      return tx;
    }
    const v = handleUint(fields[6], "v");
    const r = handleUint(fields[7], "r");
    const s = handleUint(fields[8], "s");
    if (r === BN_0 && s === BN_0) {
      tx.chainId = v;
    } else {
      let chainId = (v - BN_35) / BN_2;
      if (chainId < BN_0) {
        chainId = BN_0;
      }
      tx.chainId = chainId;
      (0, index_js_3.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
      tx.signature = index_js_2.Signature.from({
        r: (0, index_js_3.zeroPadValue)(fields[7], 32),
        s: (0, index_js_3.zeroPadValue)(fields[8], 32),
        v
      });
    }
    return tx;
  }
  function _serializeLegacy(tx, sig) {
    const fields = [
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data
    ];
    let chainId = BN_0;
    if (tx.chainId != BN_0) {
      chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
      (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
    } else if (tx.signature) {
      const legacy = tx.signature.legacyChainId;
      if (legacy != null) {
        chainId = legacy;
      }
    }
    if (!sig) {
      if (chainId !== BN_0) {
        fields.push((0, index_js_3.toBeArray)(chainId));
        fields.push("0x");
        fields.push("0x");
      }
      return (0, index_js_3.encodeRlp)(fields);
    }
    let v = BigInt(27 + sig.yParity);
    if (chainId !== BN_0) {
      v = index_js_2.Signature.getChainIdV(chainId, sig.v);
    } else if (BigInt(sig.v) !== v) {
      (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
    }
    fields.push((0, index_js_3.toBeArray)(v));
    fields.push((0, index_js_3.toBeArray)(sig.r));
    fields.push((0, index_js_3.toBeArray)(sig.s));
    return (0, index_js_3.encodeRlp)(fields);
  }
  function _parseEipSignature(tx, fields) {
    let yParity;
    try {
      yParity = handleNumber(fields[0], "yParity");
      if (yParity !== 0 && yParity !== 1) {
        throw new Error("bad yParity");
      }
    } catch (error) {
      (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
    }
    const r = (0, index_js_3.zeroPadValue)(fields[1], 32);
    const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
    const signature2 = index_js_2.Signature.from({ r, s, yParity });
    tx.signature = signature2;
  }
  function _parseEip1559(data2) {
    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data2).slice(1));
    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data2));
    const tx = {
      type: 2,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: (0, index_js_3.hexlify)(fields[7]),
      accessList: handleAccessList(fields[8], "accessList")
    };
    if (fields.length === 9) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(9));
    return tx;
  }
  function _serializeEip1559(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
    }
    return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
  }
  function _parseEip2930(data2) {
    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data2).slice(1));
    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data2));
    const tx = {
      type: 1,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      gasPrice: handleUint(fields[2], "gasPrice"),
      gasLimit: handleUint(fields[3], "gasLimit"),
      to: handleAddress(fields[4]),
      value: handleUint(fields[5], "value"),
      data: (0, index_js_3.hexlify)(fields[6]),
      accessList: handleAccessList(fields[7], "accessList")
    };
    if (fields.length === 8) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(8));
    return tx;
  }
  function _serializeEip2930(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.gasPrice || 0, "gasPrice"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "recoveryParam"));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
    }
    return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
  }
  function _parseEip4844(data2) {
    let fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data2).slice(1));
    let typeName = "3";
    let blobs = null;
    if (fields.length === 4 && Array.isArray(fields[0])) {
      typeName = "3 (network format)";
      const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
      (0, index_js_3.assertArgument)(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
      (0, index_js_3.assertArgument)(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
      (0, index_js_3.assertArgument)(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
      (0, index_js_3.assertArgument)(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
      (0, index_js_3.assertArgument)(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
      blobs = [];
      for (let i = 0; i < fields[1].length; i++) {
        blobs.push({
          data: fBlobs[i],
          commitment: fCommits[i],
          proof: fProofs[i]
        });
      }
      fields = fields[0];
    }
    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", (0, index_js_3.hexlify)(data2));
    const tx = {
      type: 3,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: (0, index_js_3.hexlify)(fields[7]),
      accessList: handleAccessList(fields[8], "accessList"),
      maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
      blobVersionedHashes: fields[10]
    };
    if (blobs) {
      tx.blobs = blobs;
    }
    (0, index_js_3.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data2);
    (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data2);
    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
      (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data2);
    }
    if (fields.length === 11) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(11));
    return tx;
  }
  function _serializeEip4844(tx, sig, blobs) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || addresses_js_1.ZeroAddress,
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || []),
      formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
      formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
      if (blobs) {
        return (0, index_js_3.concat)([
          "0x03",
          (0, index_js_3.encodeRlp)([
            fields,
            blobs.map((b) => b.data),
            blobs.map((b) => b.commitment),
            blobs.map((b) => b.proof)
          ])
        ]);
      }
    }
    return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
  }
  function _parseEip7702(data2) {
    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data2).slice(1));
    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 10 || fields.length === 13), "invalid field count for transaction type: 4", "data", (0, index_js_3.hexlify)(data2));
    const tx = {
      type: 4,
      chainId: handleUint(fields[0], "chainId"),
      nonce: handleNumber(fields[1], "nonce"),
      maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
      maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
      gasPrice: null,
      gasLimit: handleUint(fields[4], "gasLimit"),
      to: handleAddress(fields[5]),
      value: handleUint(fields[6], "value"),
      data: (0, index_js_3.hexlify)(fields[7]),
      accessList: handleAccessList(fields[8], "accessList"),
      authorizationList: handleAuthorizationList(fields[9], "authorizationList")
    };
    if (fields.length === 10) {
      return tx;
    }
    _parseEipSignature(tx, fields.slice(10));
    return tx;
  }
  function _serializeEip7702(tx, sig) {
    const fields = [
      formatNumber(tx.chainId, "chainId"),
      formatNumber(tx.nonce, "nonce"),
      formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
      formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
      formatNumber(tx.gasLimit, "gasLimit"),
      tx.to || "0x",
      formatNumber(tx.value, "value"),
      tx.data,
      formatAccessList(tx.accessList || []),
      formatAuthorizationList(tx.authorizationList || [])
    ];
    if (sig) {
      fields.push(formatNumber(sig.yParity, "yParity"));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
    }
    return (0, index_js_3.concat)(["0x04", (0, index_js_3.encodeRlp)(fields)]);
  }
  class Transaction {
    #type;
    #to;
    #data;
    #nonce;
    #gasLimit;
    #gasPrice;
    #maxPriorityFeePerGas;
    #maxFeePerGas;
    #value;
    #chainId;
    #sig;
    #accessList;
    #maxFeePerBlobGas;
    #blobVersionedHashes;
    #kzg;
    #blobs;
    #auths;
    /**
     *  The transaction type.
     *
     *  If null, the type will be automatically inferred based on
     *  explicit properties.
     */
    get type() {
      return this.#type;
    }
    set type(value) {
      switch (value) {
        case null:
          this.#type = null;
          break;
        case 0:
        case "legacy":
          this.#type = 0;
          break;
        case 1:
        case "berlin":
        case "eip-2930":
          this.#type = 1;
          break;
        case 2:
        case "london":
        case "eip-1559":
          this.#type = 2;
          break;
        case 3:
        case "cancun":
        case "eip-4844":
          this.#type = 3;
          break;
        case 4:
        case "pectra":
        case "eip-7702":
          this.#type = 4;
          break;
        default:
          (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
      }
    }
    /**
     *  The name of the transaction type.
     */
    get typeName() {
      switch (this.type) {
        case 0:
          return "legacy";
        case 1:
          return "eip-2930";
        case 2:
          return "eip-1559";
        case 3:
          return "eip-4844";
        case 4:
          return "eip-7702";
      }
      return null;
    }
    /**
     *  The ``to`` address for the transaction or ``null`` if the
     *  transaction is an ``init`` transaction.
     */
    get to() {
      const value = this.#to;
      if (value == null && this.type === 3) {
        return addresses_js_1.ZeroAddress;
      }
      return value;
    }
    set to(value) {
      this.#to = value == null ? null : (0, index_js_1.getAddress)(value);
    }
    /**
     *  The transaction nonce.
     */
    get nonce() {
      return this.#nonce;
    }
    set nonce(value) {
      this.#nonce = (0, index_js_3.getNumber)(value, "value");
    }
    /**
     *  The gas limit.
     */
    get gasLimit() {
      return this.#gasLimit;
    }
    set gasLimit(value) {
      this.#gasLimit = (0, index_js_3.getBigInt)(value);
    }
    /**
     *  The gas price.
     *
     *  On legacy networks this defines the fee that will be paid. On
     *  EIP-1559 networks, this should be ``null``.
     */
    get gasPrice() {
      const value = this.#gasPrice;
      if (value == null && (this.type === 0 || this.type === 1)) {
        return BN_0;
      }
      return value;
    }
    set gasPrice(value) {
      this.#gasPrice = value == null ? null : (0, index_js_3.getBigInt)(value, "gasPrice");
    }
    /**
     *  The maximum priority fee per unit of gas to pay. On legacy
     *  networks this should be ``null``.
     */
    get maxPriorityFeePerGas() {
      const value = this.#maxPriorityFeePerGas;
      if (value == null) {
        if (this.type === 2 || this.type === 3) {
          return BN_0;
        }
        return null;
      }
      return value;
    }
    set maxPriorityFeePerGas(value) {
      this.#maxPriorityFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas");
    }
    /**
     *  The maximum total fee per unit of gas to pay. On legacy
     *  networks this should be ``null``.
     */
    get maxFeePerGas() {
      const value = this.#maxFeePerGas;
      if (value == null) {
        if (this.type === 2 || this.type === 3) {
          return BN_0;
        }
        return null;
      }
      return value;
    }
    set maxFeePerGas(value) {
      this.#maxFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas");
    }
    /**
     *  The transaction data. For ``init`` transactions this is the
     *  deployment code.
     */
    get data() {
      return this.#data;
    }
    set data(value) {
      this.#data = (0, index_js_3.hexlify)(value);
    }
    /**
     *  The amount of ether (in wei) to send in this transactions.
     */
    get value() {
      return this.#value;
    }
    set value(value) {
      this.#value = (0, index_js_3.getBigInt)(value, "value");
    }
    /**
     *  The chain ID this transaction is valid on.
     */
    get chainId() {
      return this.#chainId;
    }
    set chainId(value) {
      this.#chainId = (0, index_js_3.getBigInt)(value);
    }
    /**
     *  If signed, the signature for this transaction.
     */
    get signature() {
      return this.#sig || null;
    }
    set signature(value) {
      this.#sig = value == null ? null : index_js_2.Signature.from(value);
    }
    /**
     *  The access list.
     *
     *  An access list permits discounted (but pre-paid) access to
     *  bytecode and state variable access within contract execution.
     */
    get accessList() {
      const value = this.#accessList || null;
      if (value == null) {
        if (this.type === 1 || this.type === 2 || this.type === 3) {
          return [];
        }
        return null;
      }
      return value;
    }
    set accessList(value) {
      this.#accessList = value == null ? null : (0, accesslist_js_1.accessListify)(value);
    }
    get authorizationList() {
      const value = this.#auths || null;
      if (value == null) {
        if (this.type === 4) {
          return [];
        }
      }
      return value;
    }
    set authorizationList(auths) {
      this.#auths = auths == null ? null : auths.map((a) => (0, authorization_js_1.authorizationify)(a));
    }
    /**
     *  The max fee per blob gas for Cancun transactions.
     */
    get maxFeePerBlobGas() {
      const value = this.#maxFeePerBlobGas;
      if (value == null && this.type === 3) {
        return BN_0;
      }
      return value;
    }
    set maxFeePerBlobGas(value) {
      this.#maxFeePerBlobGas = value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas");
    }
    /**
     *  The BLOb versioned hashes for Cancun transactions.
     */
    get blobVersionedHashes() {
      let value = this.#blobVersionedHashes;
      if (value == null && this.type === 3) {
        return [];
      }
      return value;
    }
    set blobVersionedHashes(value) {
      if (value != null) {
        (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
        value = value.slice();
        for (let i = 0; i < value.length; i++) {
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
        }
      }
      this.#blobVersionedHashes = value;
    }
    /**
     *  The BLObs for the Transaction, if any.
     *
     *  If ``blobs`` is non-``null``, then the [[seriailized]]
     *  will return the network formatted sidecar, otherwise it
     *  will return the standard [[link-eip-2718]] payload. The
     *  [[unsignedSerialized]] is unaffected regardless.
     *
     *  When setting ``blobs``, either fully valid [[Blob]] objects
     *  may be specified (i.e. correctly padded, with correct
     *  committments and proofs) or a raw [[BytesLike]] may
     *  be provided.
     *
     *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
     *  be already set. The blob will be correctly padded and the
     *  [[KzgLibrary]] will be used to compute the committment and
     *  proof for the blob.
     *
     *  A BLOb is a sequence of field elements, each of which must
     *  be within the BLS field modulo, so some additional processing
     *  may be required to encode arbitrary data to ensure each 32 byte
     *  field is within the valid range.
     *
     *  Setting this automatically populates [[blobVersionedHashes]],
     *  overwriting any existing values. Setting this to ``null``
     *  does **not** remove the [[blobVersionedHashes]], leaving them
     *  present.
     */
    get blobs() {
      if (this.#blobs == null) {
        return null;
      }
      return this.#blobs.map((b) => Object.assign({}, b));
    }
    set blobs(_blobs) {
      if (_blobs == null) {
        this.#blobs = null;
        return;
      }
      const blobs = [];
      const versionedHashes = [];
      for (let i = 0; i < _blobs.length; i++) {
        const blob = _blobs[i];
        if ((0, index_js_3.isBytesLike)(blob)) {
          (0, index_js_3.assert)(this.#kzg, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
            operation: "set blobs()"
          });
          let data2 = (0, index_js_3.getBytes)(blob);
          (0, index_js_3.assertArgument)(data2.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
          if (data2.length !== BLOB_SIZE) {
            const padded = new Uint8Array(BLOB_SIZE);
            padded.set(data2);
            data2 = padded;
          }
          const commit = this.#kzg.blobToKzgCommitment(data2);
          const proof = (0, index_js_3.hexlify)(this.#kzg.computeBlobKzgProof(data2, commit));
          blobs.push({
            data: (0, index_js_3.hexlify)(data2),
            commitment: (0, index_js_3.hexlify)(commit),
            proof
          });
          versionedHashes.push(getVersionedHash(1, commit));
        } else {
          const commit = (0, index_js_3.hexlify)(blob.commitment);
          blobs.push({
            data: (0, index_js_3.hexlify)(blob.data),
            commitment: commit,
            proof: (0, index_js_3.hexlify)(blob.proof)
          });
          versionedHashes.push(getVersionedHash(1, commit));
        }
      }
      this.#blobs = blobs;
      this.#blobVersionedHashes = versionedHashes;
    }
    get kzg() {
      return this.#kzg;
    }
    set kzg(kzg) {
      if (kzg == null) {
        this.#kzg = null;
      } else {
        this.#kzg = getKzgLibrary(kzg);
      }
    }
    /**
     *  Creates a new Transaction with default values.
     */
    constructor() {
      this.#type = null;
      this.#to = null;
      this.#nonce = 0;
      this.#gasLimit = BN_0;
      this.#gasPrice = null;
      this.#maxPriorityFeePerGas = null;
      this.#maxFeePerGas = null;
      this.#data = "0x";
      this.#value = BN_0;
      this.#chainId = BN_0;
      this.#sig = null;
      this.#accessList = null;
      this.#maxFeePerBlobGas = null;
      this.#blobVersionedHashes = null;
      this.#kzg = null;
      this.#blobs = null;
      this.#auths = null;
    }
    /**
     *  The transaction hash, if signed. Otherwise, ``null``.
     */
    get hash() {
      if (this.signature == null) {
        return null;
      }
      return (0, index_js_2.keccak256)(this.#getSerialized(true, false));
    }
    /**
     *  The pre-image hash of this transaction.
     *
     *  This is the digest that a [[Signer]] must sign to authorize
     *  this transaction.
     */
    get unsignedHash() {
      return (0, index_js_2.keccak256)(this.unsignedSerialized);
    }
    /**
     *  The sending address, if signed. Otherwise, ``null``.
     */
    get from() {
      if (this.signature == null) {
        return null;
      }
      return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
    }
    /**
     *  The public key of the sender, if signed. Otherwise, ``null``.
     */
    get fromPublicKey() {
      if (this.signature == null) {
        return null;
      }
      return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
    }
    /**
     *  Returns true if signed.
     *
     *  This provides a Type Guard that properties requiring a signed
     *  transaction are non-null.
     */
    isSigned() {
      return this.signature != null;
    }
    #getSerialized(signed, sidecar) {
      (0, index_js_3.assert)(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      const sig = signed ? this.signature : null;
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this, sig);
        case 1:
          return _serializeEip2930(this, sig);
        case 2:
          return _serializeEip1559(this, sig);
        case 3:
          return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
        case 4:
          return _serializeEip7702(this, sig);
      }
      (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    }
    /**
     *  The serialized transaction.
     *
     *  This throws if the transaction is unsigned. For the pre-image,
     *  use [[unsignedSerialized]].
     */
    get serialized() {
      return this.#getSerialized(true, true);
    }
    /**
     *  The transaction pre-image.
     *
     *  The hash of this is the digest which needs to be signed to
     *  authorize this transaction.
     */
    get unsignedSerialized() {
      return this.#getSerialized(false, false);
    }
    /**
     *  Return the most "likely" type; currently the highest
     *  supported transaction type.
     */
    inferType() {
      const types2 = this.inferTypes();
      if (types2.indexOf(2) >= 0) {
        return 2;
      }
      return types2.pop();
    }
    /**
     *  Validates the explicit properties and returns a list of compatible
     *  transaction types.
     */
    inferTypes() {
      const hasGasPrice = this.gasPrice != null;
      const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
      const hasAccessList = this.accessList != null;
      const hasBlob = this.#maxFeePerBlobGas != null || this.#blobVersionedHashes;
      if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
        (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
      }
      (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
      (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
      const types2 = [];
      if (this.type != null) {
        types2.push(this.type);
      } else {
        if (this.authorizationList && this.authorizationList.length) {
          types2.push(4);
        } else if (hasFee) {
          types2.push(2);
        } else if (hasGasPrice) {
          types2.push(1);
          if (!hasAccessList) {
            types2.push(0);
          }
        } else if (hasAccessList) {
          types2.push(1);
          types2.push(2);
        } else if (hasBlob && this.to) {
          types2.push(3);
        } else {
          types2.push(0);
          types2.push(1);
          types2.push(2);
          types2.push(3);
        }
      }
      types2.sort();
      return types2;
    }
    /**
     *  Returns true if this transaction is a legacy transaction (i.e.
     *  ``type === 0``).
     *
     *  This provides a Type Guard that the related properties are
     *  non-null.
     */
    isLegacy() {
      return this.type === 0;
    }
    /**
     *  Returns true if this transaction is berlin hardform transaction (i.e.
     *  ``type === 1``).
     *
     *  This provides a Type Guard that the related properties are
     *  non-null.
     */
    isBerlin() {
      return this.type === 1;
    }
    /**
     *  Returns true if this transaction is london hardform transaction (i.e.
     *  ``type === 2``).
     *
     *  This provides a Type Guard that the related properties are
     *  non-null.
     */
    isLondon() {
      return this.type === 2;
    }
    /**
     *  Returns true if this transaction is an [[link-eip-4844]] BLOB
     *  transaction.
     *
     *  This provides a Type Guard that the related properties are
     *  non-null.
     */
    isCancun() {
      return this.type === 3;
    }
    /**
     *  Create a copy of this transaciton.
     */
    clone() {
      return Transaction.from(this);
    }
    /**
     *  Return a JSON-friendly object.
     */
    toJSON() {
      const s = (v) => {
        if (v == null) {
          return null;
        }
        return v.toString();
      };
      return {
        type: this.type,
        to: this.to,
        //            from: this.from,
        data: this.data,
        nonce: this.nonce,
        gasLimit: s(this.gasLimit),
        gasPrice: s(this.gasPrice),
        maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
        maxFeePerGas: s(this.maxFeePerGas),
        value: s(this.value),
        chainId: s(this.chainId),
        sig: this.signature ? this.signature.toJSON() : null,
        accessList: this.accessList
      };
    }
    /**
     *  Create a **Transaction** from a serialized transaction or a
     *  Transaction-like object.
     */
    static from(tx) {
      if (tx == null) {
        return new Transaction();
      }
      if (typeof tx === "string") {
        const payload = (0, index_js_3.getBytes)(tx);
        if (payload[0] >= 127) {
          return Transaction.from(_parseLegacy(payload));
        }
        switch (payload[0]) {
          case 1:
            return Transaction.from(_parseEip2930(payload));
          case 2:
            return Transaction.from(_parseEip1559(payload));
          case 3:
            return Transaction.from(_parseEip4844(payload));
          case 4:
            return Transaction.from(_parseEip7702(payload));
        }
        (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
      }
      const result = new Transaction();
      if (tx.type != null) {
        result.type = tx.type;
      }
      if (tx.to != null) {
        result.to = tx.to;
      }
      if (tx.nonce != null) {
        result.nonce = tx.nonce;
      }
      if (tx.gasLimit != null) {
        result.gasLimit = tx.gasLimit;
      }
      if (tx.gasPrice != null) {
        result.gasPrice = tx.gasPrice;
      }
      if (tx.maxPriorityFeePerGas != null) {
        result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
      }
      if (tx.maxFeePerGas != null) {
        result.maxFeePerGas = tx.maxFeePerGas;
      }
      if (tx.maxFeePerBlobGas != null) {
        result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
      }
      if (tx.data != null) {
        result.data = tx.data;
      }
      if (tx.value != null) {
        result.value = tx.value;
      }
      if (tx.chainId != null) {
        result.chainId = tx.chainId;
      }
      if (tx.signature != null) {
        result.signature = index_js_2.Signature.from(tx.signature);
      }
      if (tx.accessList != null) {
        result.accessList = tx.accessList;
      }
      if (tx.authorizationList != null) {
        result.authorizationList = tx.authorizationList;
      }
      if (tx.blobVersionedHashes != null) {
        result.blobVersionedHashes = tx.blobVersionedHashes;
      }
      if (tx.kzg != null) {
        result.kzg = tx.kzg;
      }
      if (tx.blobs != null) {
        result.blobs = tx.blobs;
      }
      if (tx.hash != null) {
        (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
        (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
      }
      if (tx.from != null) {
        (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
        (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
      }
      return result;
    }
  }
  transaction.Transaction = Transaction;
  return transaction;
}
var hasRequiredTransaction;
function requireTransaction() {
  if (hasRequiredTransaction) return transaction$1;
  hasRequiredTransaction = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.authorizationify = exports.accessListify = void 0;
    var accesslist_js_1 = /* @__PURE__ */ requireAccesslist();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return accesslist_js_1.accessListify;
    } });
    var authorization_js_1 = /* @__PURE__ */ requireAuthorization$1();
    Object.defineProperty(exports, "authorizationify", { enumerable: true, get: function() {
      return authorization_js_1.authorizationify;
    } });
    var address_js_1 = /* @__PURE__ */ requireAddress();
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return address_js_1.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return address_js_1.recoverAddress;
    } });
    var transaction_js_1 = /* @__PURE__ */ requireTransaction$1();
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return transaction_js_1.Transaction;
    } });
  })(transaction$1);
  return transaction$1;
}
var hasRequiredAuthorization;
function requireAuthorization() {
  if (hasRequiredAuthorization) return authorization$1;
  hasRequiredAuthorization = 1;
  Object.defineProperty(authorization$1, "__esModule", { value: true });
  authorization$1.verifyAuthorization = authorization$1.hashAuthorization = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  function hashAuthorization(auth) {
    (0, index_js_4.assertArgument)(typeof auth.address === "string", "invalid address for hashAuthorization", "auth.address", auth);
    return (0, index_js_2.keccak256)((0, index_js_4.concat)([
      "0x05",
      (0, index_js_4.encodeRlp)([
        auth.chainId != null ? (0, index_js_4.toBeArray)(auth.chainId) : "0x",
        (0, index_js_1.getAddress)(auth.address),
        auth.nonce != null ? (0, index_js_4.toBeArray)(auth.nonce) : "0x"
      ])
    ]));
  }
  authorization$1.hashAuthorization = hashAuthorization;
  function verifyAuthorization(auth, sig) {
    return (0, index_js_3.recoverAddress)(hashAuthorization(auth), sig);
  }
  authorization$1.verifyAuthorization = verifyAuthorization;
  return authorization$1;
}
var id = {};
var hasRequiredId;
function requireId() {
  if (hasRequiredId) return id;
  hasRequiredId = 1;
  Object.defineProperty(id, "__esModule", { value: true });
  id.id = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  function id$1(value) {
    return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
  }
  id.id = id$1;
  return id;
}
var namehash = {};
var dist = {};
var hasRequiredDist;
function requireDist() {
  if (hasRequiredDist) return dist;
  hasRequiredDist = 1;
  var COMPRESSED$1 = "";
  const FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
  const NSM_MAX = 4;
  function decode_arithmetic(bytes2) {
    let pos = 0;
    function u16() {
      return bytes2[pos++] << 8 | bytes2[pos++];
    }
    let symbol_count = u16();
    let total = 1;
    let acc = [0, 1];
    for (let i = 1; i < symbol_count; i++) {
      acc.push(total += u16());
    }
    let skip = u16();
    let pos_payload = pos;
    pos += skip;
    let read_width = 0;
    let read_buffer = 0;
    function read_bit() {
      if (read_width == 0) {
        read_buffer = read_buffer << 8 | bytes2[pos++];
        read_width = 8;
      }
      return read_buffer >> --read_width & 1;
    }
    const N = 31;
    const FULL = 2 ** N;
    const HALF = FULL >>> 1;
    const QRTR = HALF >> 1;
    const MASK = FULL - 1;
    let register = 0;
    for (let i = 0; i < N; i++) register = register << 1 | read_bit();
    let symbols = [];
    let low = 0;
    let range2 = FULL;
    while (true) {
      let value = Math.floor(((register - low + 1) * total - 1) / range2);
      let start = 0;
      let end = symbol_count;
      while (end - start > 1) {
        let mid = start + end >>> 1;
        if (value < acc[mid]) {
          end = mid;
        } else {
          start = mid;
        }
      }
      if (start == 0) break;
      symbols.push(start);
      let a = low + Math.floor(range2 * acc[start] / total);
      let b = low + Math.floor(range2 * acc[start + 1] / total) - 1;
      while (((a ^ b) & HALF) == 0) {
        register = register << 1 & MASK | read_bit();
        a = a << 1 & MASK;
        b = b << 1 & MASK | 1;
      }
      while (a & ~b & QRTR) {
        register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
        a = a << 1 ^ HALF;
        b = (b ^ HALF) << 1 | HALF | 1;
      }
      low = a;
      range2 = 1 + b - a;
    }
    let offset = symbol_count - 4;
    return symbols.map((x) => {
      switch (x - offset) {
        case 3:
          return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 2:
          return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
        case 1:
          return offset + bytes2[pos_payload++];
        default:
          return x - 1;
      }
    });
  }
  function read_payload(v) {
    let pos = 0;
    return () => v[pos++];
  }
  function read_compressed_payload(s) {
    return read_payload(decode_arithmetic(unsafe_atob(s)));
  }
  function unsafe_atob(s) {
    let lookup = [];
    [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
    let n = s.length;
    let ret = new Uint8Array(6 * n >> 3);
    for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
      carry = carry << 6 | lookup[s.charCodeAt(i)];
      width += 6;
      if (width >= 8) {
        ret[pos++] = carry >> (width -= 8);
      }
    }
    return ret;
  }
  function signed(i) {
    return i & 1 ? ~i >> 1 : i >> 1;
  }
  function read_deltas(n, next) {
    let v = Array(n);
    for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
    return v;
  }
  function read_sorted(next, prev = 0) {
    let ret = [];
    while (true) {
      let x = next();
      let n = next();
      if (!n) break;
      prev += x;
      for (let i = 0; i < n; i++) {
        ret.push(prev + i);
      }
      prev += n + 1;
    }
    return ret;
  }
  function read_sorted_arrays(next) {
    return read_array_while(() => {
      let v = read_sorted(next);
      if (v.length) return v;
    });
  }
  function read_mapped(next) {
    let ret = [];
    while (true) {
      let w = next();
      if (w == 0) break;
      ret.push(read_linear_table(w, next));
    }
    while (true) {
      let w = next() - 1;
      if (w < 0) break;
      ret.push(read_replacement_table(w, next));
    }
    return ret.flat();
  }
  function read_array_while(next) {
    let v = [];
    while (true) {
      let x = next(v.length);
      if (!x) break;
      v.push(x);
    }
    return v;
  }
  function read_transposed(n, w, next) {
    let m = Array(n).fill().map(() => []);
    for (let i = 0; i < w; i++) {
      read_deltas(n, next).forEach((x, j) => m[j].push(x));
    }
    return m;
  }
  function read_linear_table(w, next) {
    let dx = 1 + next();
    let dy = next();
    let vN = read_array_while(next);
    let m = read_transposed(vN.length, 1 + w, next);
    return m.flatMap((v, i) => {
      let [x, ...ys] = v;
      return Array(vN[i]).fill().map((_, j) => {
        let j_dy = j * dy;
        return [x + j * dx, ys.map((y) => y + j_dy)];
      });
    });
  }
  function read_replacement_table(w, next) {
    let n = 1 + next();
    let m = read_transposed(n, 1 + w, next);
    return m.map((v) => [v[0], v.slice(1)]);
  }
  function read_trie(next) {
    let ret = [];
    let sorted = read_sorted(next);
    expand(decode([]), []);
    return ret;
    function decode(Q) {
      let S = next();
      let B = read_array_while(() => {
        let cps = read_sorted(next).map((i) => sorted[i]);
        if (cps.length) return decode(cps);
      });
      return { S, B, Q };
    }
    function expand({ S, B }, cps, saved) {
      if (S & 4 && saved === cps[cps.length - 1]) return;
      if (S & 2) saved = cps[cps.length - 1];
      if (S & 1) ret.push(cps);
      for (let br of B) {
        for (let cp2 of br.Q) {
          expand(br, [...cps, cp2], saved);
        }
      }
    }
  }
  function hex_cp(cp2) {
    return cp2.toString(16).toUpperCase().padStart(2, "0");
  }
  function quote_cp(cp2) {
    return `{${hex_cp(cp2)}}`;
  }
  function explode_cp(s) {
    let cps = [];
    for (let pos = 0, len = s.length; pos < len; ) {
      let cp2 = s.codePointAt(pos);
      pos += cp2 < 65536 ? 1 : 2;
      cps.push(cp2);
    }
    return cps;
  }
  function str_from_cps(cps) {
    const chunk = 4096;
    let len = cps.length;
    if (len < chunk) return String.fromCodePoint(...cps);
    let buf = [];
    for (let i = 0; i < len; ) {
      buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
    }
    return buf.join("");
  }
  function compare_arrays(a, b) {
    let n = a.length;
    let c = n - b.length;
    for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
    return c;
  }
  var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
  const S0 = 44032;
  const L0 = 4352;
  const V0 = 4449;
  const T0 = 4519;
  const L_COUNT = 19;
  const V_COUNT = 21;
  const T_COUNT = 28;
  const N_COUNT = V_COUNT * T_COUNT;
  const S_COUNT = L_COUNT * N_COUNT;
  const S1 = S0 + S_COUNT;
  const L1 = L0 + L_COUNT;
  const V1 = V0 + V_COUNT;
  const T1 = T0 + T_COUNT;
  function unpack_cc(packed) {
    return packed >> 24 & 255;
  }
  function unpack_cp(packed) {
    return packed & 16777215;
  }
  let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;
  function init$1() {
    let r = read_compressed_payload(COMPRESSED);
    SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
    EXCLUSIONS = new Set(read_sorted(r));
    DECOMP = /* @__PURE__ */ new Map();
    RECOMP = /* @__PURE__ */ new Map();
    for (let [cp2, cps] of read_mapped(r)) {
      if (!EXCLUSIONS.has(cp2) && cps.length == 2) {
        let [a, b] = cps;
        let bucket = RECOMP.get(a);
        if (!bucket) {
          bucket = /* @__PURE__ */ new Map();
          RECOMP.set(a, bucket);
        }
        bucket.set(b, cp2);
      }
      DECOMP.set(cp2, cps.reverse());
    }
  }
  function is_hangul(cp2) {
    return cp2 >= S0 && cp2 < S1;
  }
  function compose_pair(a, b) {
    if (a >= L0 && a < L1 && b >= V0 && b < V1) {
      return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
    } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
      return a + (b - T0);
    } else {
      let recomp = RECOMP.get(a);
      if (recomp) {
        recomp = recomp.get(b);
        if (recomp) {
          return recomp;
        }
      }
      return -1;
    }
  }
  function decomposed(cps) {
    if (!SHIFTED_RANK) init$1();
    let ret = [];
    let buf = [];
    let check_order = false;
    function add(cp2) {
      let cc = SHIFTED_RANK.get(cp2);
      if (cc) {
        check_order = true;
        cp2 |= cc;
      }
      ret.push(cp2);
    }
    for (let cp2 of cps) {
      while (true) {
        if (cp2 < 128) {
          ret.push(cp2);
        } else if (is_hangul(cp2)) {
          let s_index = cp2 - S0;
          let l_index = s_index / N_COUNT | 0;
          let v_index = s_index % N_COUNT / T_COUNT | 0;
          let t_index = s_index % T_COUNT;
          add(L0 + l_index);
          add(V0 + v_index);
          if (t_index > 0) add(T0 + t_index);
        } else {
          let mapped = DECOMP.get(cp2);
          if (mapped) {
            buf.push(...mapped);
          } else {
            add(cp2);
          }
        }
        if (!buf.length) break;
        cp2 = buf.pop();
      }
    }
    if (check_order && ret.length > 1) {
      let prev_cc = unpack_cc(ret[0]);
      for (let i = 1; i < ret.length; i++) {
        let cc = unpack_cc(ret[i]);
        if (cc == 0 || prev_cc <= cc) {
          prev_cc = cc;
          continue;
        }
        let j = i - 1;
        while (true) {
          let tmp = ret[j + 1];
          ret[j + 1] = ret[j];
          ret[j] = tmp;
          if (!j) break;
          prev_cc = unpack_cc(ret[--j]);
          if (prev_cc <= cc) break;
        }
        prev_cc = unpack_cc(ret[i]);
      }
    }
    return ret;
  }
  function composed_from_decomposed(v) {
    let ret = [];
    let stack = [];
    let prev_cp = -1;
    let prev_cc = 0;
    for (let packed of v) {
      let cc = unpack_cc(packed);
      let cp2 = unpack_cp(packed);
      if (prev_cp == -1) {
        if (cc == 0) {
          prev_cp = cp2;
        } else {
          ret.push(cp2);
        }
      } else if (prev_cc > 0 && prev_cc >= cc) {
        if (cc == 0) {
          ret.push(prev_cp, ...stack);
          stack.length = 0;
          prev_cp = cp2;
        } else {
          stack.push(cp2);
        }
        prev_cc = cc;
      } else {
        let composed = compose_pair(prev_cp, cp2);
        if (composed >= 0) {
          prev_cp = composed;
        } else if (prev_cc == 0 && cc == 0) {
          ret.push(prev_cp);
          prev_cp = cp2;
        } else {
          stack.push(cp2);
          prev_cc = cc;
        }
      }
    }
    if (prev_cp >= 0) {
      ret.push(prev_cp, ...stack);
    }
    return ret;
  }
  function nfd(cps) {
    return decomposed(cps).map(unpack_cp);
  }
  function nfc(cps) {
    return composed_from_decomposed(decomposed(cps));
  }
  const HYPHEN = 45;
  const STOP = 46;
  const STOP_CH = ".";
  const FE0F = 65039;
  const UNIQUE_PH = 1;
  const Array_from = (x) => Array.from(x);
  function group_has_cp(g, cp2) {
    return g.P.has(cp2) || g.Q.has(cp2);
  }
  class Emoji extends Array {
    get is_emoji() {
      return true;
    }
    // free tagging system
  }
  let MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
  function init() {
    if (MAPPED) return;
    let r = read_compressed_payload(COMPRESSED$1);
    const read_sorted_array = () => read_sorted(r);
    const read_sorted_set = () => new Set(read_sorted_array());
    const set_add_many = (set, v) => v.forEach((x) => set.add(x));
    MAPPED = new Map(read_mapped(r));
    IGNORED = read_sorted_set();
    CM = read_sorted_array();
    NSM = new Set(read_sorted_array().map((i) => CM[i]));
    CM = new Set(CM);
    ESCAPE = read_sorted_set();
    NFC_CHECK = read_sorted_set();
    let chunks = read_sorted_arrays(r);
    let unrestricted = r();
    const read_chunked = () => {
      let set = /* @__PURE__ */ new Set();
      read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
      set_add_many(set, read_sorted_array());
      return set;
    };
    GROUPS = read_array_while((i) => {
      let N = read_array_while(r).map((x) => x + 96);
      if (N.length) {
        let R = i >= unrestricted;
        N[0] -= 32;
        N = str_from_cps(N);
        if (R) N = `Restricted[${N}]`;
        let P = read_chunked();
        let Q = read_chunked();
        let M = !r();
        return { N, P, Q, M, R };
      }
    });
    WHOLE_VALID = read_sorted_set();
    WHOLE_MAP = /* @__PURE__ */ new Map();
    let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
    wholes.forEach((cp2, i) => {
      let d = r();
      let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
      w.V.push(cp2);
      if (!WHOLE_VALID.has(cp2)) {
        WHOLE_MAP.set(cp2, w);
      }
    });
    for (let { V, M } of new Set(WHOLE_MAP.values())) {
      let recs = [];
      for (let cp2 of V) {
        let gs = GROUPS.filter((g) => group_has_cp(g, cp2));
        let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
        if (!rec) {
          rec = { G: /* @__PURE__ */ new Set(), V: [] };
          recs.push(rec);
        }
        rec.V.push(cp2);
        set_add_many(rec.G, gs);
      }
      let union = recs.flatMap((x) => Array_from(x.G));
      for (let { G, V: V2 } of recs) {
        let complement = new Set(union.filter((g) => !G.has(g)));
        for (let cp2 of V2) {
          M.set(cp2, complement);
        }
      }
    }
    VALID = /* @__PURE__ */ new Set();
    let multi = /* @__PURE__ */ new Set();
    const add_to_union = (cp2) => VALID.has(cp2) ? multi.add(cp2) : VALID.add(cp2);
    for (let g of GROUPS) {
      for (let cp2 of g.P) add_to_union(cp2);
      for (let cp2 of g.Q) add_to_union(cp2);
    }
    for (let cp2 of VALID) {
      if (!WHOLE_MAP.has(cp2) && !multi.has(cp2)) {
        WHOLE_MAP.set(cp2, UNIQUE_PH);
      }
    }
    set_add_many(VALID, nfd(VALID));
    EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
    EMOJI_ROOT = /* @__PURE__ */ new Map();
    for (let cps of EMOJI_LIST) {
      let prev = [EMOJI_ROOT];
      for (let cp2 of cps) {
        let next = prev.map((node2) => {
          let child = node2.get(cp2);
          if (!child) {
            child = /* @__PURE__ */ new Map();
            node2.set(cp2, child);
          }
          return child;
        });
        if (cp2 === FE0F) {
          prev.push(...next);
        } else {
          prev = next;
        }
      }
      for (let x of prev) {
        x.V = cps;
      }
    }
  }
  function quoted_cp(cp2) {
    return (should_escape(cp2) ? "" : `${bidi_qq(safe_str_from_cps([cp2]))} `) + quote_cp(cp2);
  }
  function bidi_qq(s) {
    return `"${s}"‎`;
  }
  function check_label_extension(cps) {
    if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
      throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
    }
  }
  function check_leading_underscore(cps) {
    const UNDERSCORE = 95;
    for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
      if (cps[--i] !== UNDERSCORE) {
        throw new Error("underscore allowed only at start");
      }
    }
  }
  function check_fenced(cps) {
    let cp2 = cps[0];
    let prev = FENCED.get(cp2);
    if (prev) throw error_placement(`leading ${prev}`);
    let n = cps.length;
    let last = -1;
    for (let i = 1; i < n; i++) {
      cp2 = cps[i];
      let match = FENCED.get(cp2);
      if (match) {
        if (last == i) throw error_placement(`${prev} + ${match}`);
        last = i + 1;
        prev = match;
      }
    }
    if (last == n) throw error_placement(`trailing ${prev}`);
  }
  function safe_str_from_cps(cps, max2 = Infinity, quoter = quote_cp) {
    let buf = [];
    if (is_combining_mark(cps[0])) buf.push("◌");
    if (cps.length > max2) {
      max2 >>= 1;
      cps = [...cps.slice(0, max2), 8230, ...cps.slice(-max2)];
    }
    let prev = 0;
    let n = cps.length;
    for (let i = 0; i < n; i++) {
      let cp2 = cps[i];
      if (should_escape(cp2)) {
        buf.push(str_from_cps(cps.slice(prev, i)));
        buf.push(quoter(cp2));
        prev = i + 1;
      }
    }
    buf.push(str_from_cps(cps.slice(prev, n)));
    return buf.join("");
  }
  function is_combining_mark(cp2) {
    init();
    return CM.has(cp2);
  }
  function should_escape(cp2) {
    init();
    return ESCAPE.has(cp2);
  }
  function ens_emoji() {
    init();
    return EMOJI_LIST.map((x) => x.slice());
  }
  function ens_normalize_fragment(frag, decompose) {
    init();
    let nf = decompose ? nfd : nfc;
    return frag.split(STOP_CH).map((label) => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
  }
  function ens_normalize(name) {
    return flatten(split(name, nfc, filter_fe0f));
  }
  function ens_beautify(name) {
    let labels = split(name, nfc, (x) => x);
    for (let { type: type2, output, error } of labels) {
      if (error) break;
      if (type2 !== "Greek") array_replace(output, 958, 926);
    }
    return flatten(labels);
  }
  function array_replace(v, a, b) {
    let prev = 0;
    while (true) {
      let next = v.indexOf(a, prev);
      if (next < 0) break;
      v[next] = b;
      prev = next + 1;
    }
  }
  function ens_split(name, preserve_emoji) {
    return split(name, nfc, preserve_emoji ? (x) => x.slice() : filter_fe0f);
  }
  function split(name, nf, ef) {
    if (!name) return [];
    init();
    let offset = 0;
    return name.split(STOP_CH).map((label) => {
      let input = explode_cp(label);
      let info = {
        input,
        offset
        // codepoint, not substring!
      };
      offset += input.length + 1;
      try {
        let tokens = info.tokens = tokens_from_str(input, nf, ef);
        let token_count = tokens.length;
        let type2;
        if (!token_count) {
          throw new Error(`empty label`);
        }
        let norm = info.output = tokens.flat();
        check_leading_underscore(norm);
        let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
        if (!emoji && norm.every((cp2) => cp2 < 128)) {
          check_label_extension(norm);
          type2 = "ASCII";
        } else {
          let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
          if (!chars.length) {
            type2 = "Emoji";
          } else {
            if (CM.has(norm[0])) throw error_placement("leading combining mark");
            for (let i = 1; i < token_count; i++) {
              let cps = tokens[i];
              if (!cps.is_emoji && CM.has(cps[0])) {
                throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
              }
            }
            check_fenced(norm);
            let unique = Array_from(new Set(chars));
            let [g] = determine_group(unique);
            check_group(g, chars);
            check_whole(g, unique);
            type2 = g.N;
          }
        }
        info.type = type2;
      } catch (err) {
        info.error = err;
      }
      return info;
    });
  }
  function check_whole(group, unique) {
    let maker;
    let shared = [];
    for (let cp2 of unique) {
      let whole = WHOLE_MAP.get(cp2);
      if (whole === UNIQUE_PH) return;
      if (whole) {
        let set = whole.M.get(cp2);
        maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
        if (!maker.length) return;
      } else {
        shared.push(cp2);
      }
    }
    if (maker) {
      for (let g of maker) {
        if (shared.every((cp2) => group_has_cp(g, cp2))) {
          throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
        }
      }
    }
  }
  function determine_group(unique) {
    let groups = GROUPS;
    for (let cp2 of unique) {
      let gs = groups.filter((g) => group_has_cp(g, cp2));
      if (!gs.length) {
        if (!GROUPS.some((g) => group_has_cp(g, cp2))) {
          throw error_disallowed(cp2);
        } else {
          throw error_group_member(groups[0], cp2);
        }
      }
      groups = gs;
      if (gs.length == 1) break;
    }
    return groups;
  }
  function flatten(split2) {
    return split2.map(({ input, error, output }) => {
      if (error) {
        let msg = error.message;
        throw new Error(split2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
      }
      return str_from_cps(output);
    }).join(STOP_CH);
  }
  function error_disallowed(cp2) {
    return new Error(`disallowed character: ${quoted_cp(cp2)}`);
  }
  function error_group_member(g, cp2) {
    let quoted = quoted_cp(cp2);
    let gg = GROUPS.find((g2) => g2.P.has(cp2));
    if (gg) {
      quoted = `${gg.N} ${quoted}`;
    }
    return new Error(`illegal mixture: ${g.N} + ${quoted}`);
  }
  function error_placement(where) {
    return new Error(`illegal placement: ${where}`);
  }
  function check_group(g, cps) {
    for (let cp2 of cps) {
      if (!group_has_cp(g, cp2)) {
        throw error_group_member(g, cp2);
      }
    }
    if (g.M) {
      let decomposed2 = nfd(cps);
      for (let i = 1, e = decomposed2.length; i < e; i++) {
        if (NSM.has(decomposed2[i])) {
          let j = i + 1;
          for (let cp2; j < e && NSM.has(cp2 = decomposed2[j]); j++) {
            for (let k = i; k < j; k++) {
              if (decomposed2[k] == cp2) {
                throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp2)}`);
              }
            }
          }
          if (j - i > NSM_MAX) {
            throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
          }
          i = j;
        }
      }
    }
  }
  function tokens_from_str(input, nf, ef) {
    let ret = [];
    let chars = [];
    input = input.slice().reverse();
    while (input.length) {
      let emoji = consume_emoji_reversed(input);
      if (emoji) {
        if (chars.length) {
          ret.push(nf(chars));
          chars = [];
        }
        ret.push(ef(emoji));
      } else {
        let cp2 = input.pop();
        if (VALID.has(cp2)) {
          chars.push(cp2);
        } else {
          let cps = MAPPED.get(cp2);
          if (cps) {
            chars.push(...cps);
          } else if (!IGNORED.has(cp2)) {
            throw error_disallowed(cp2);
          }
        }
      }
    }
    if (chars.length) {
      ret.push(nf(chars));
    }
    return ret;
  }
  function filter_fe0f(cps) {
    return cps.filter((cp2) => cp2 != FE0F);
  }
  function consume_emoji_reversed(cps, eaten) {
    let node2 = EMOJI_ROOT;
    let emoji;
    let pos = cps.length;
    while (pos) {
      node2 = node2.get(cps[--pos]);
      if (!node2) break;
      let { V } = node2;
      if (V) {
        emoji = V;
        if (eaten) eaten.push(...cps.slice(pos).reverse());
        cps.length = pos;
      }
    }
    return emoji;
  }
  const TY_VALID = "valid";
  const TY_MAPPED = "mapped";
  const TY_IGNORED = "ignored";
  const TY_DISALLOWED = "disallowed";
  const TY_EMOJI = "emoji";
  const TY_NFC = "nfc";
  const TY_STOP = "stop";
  function ens_tokenize(name, {
    nf = true
    // collapse unnormalized runs into a single token
  } = {}) {
    init();
    let input = explode_cp(name).reverse();
    let eaten = [];
    let tokens = [];
    while (input.length) {
      let emoji = consume_emoji_reversed(input, eaten);
      if (emoji) {
        tokens.push({
          type: TY_EMOJI,
          emoji: emoji.slice(),
          // copy emoji
          input: eaten,
          cps: filter_fe0f(emoji)
        });
        eaten = [];
      } else {
        let cp2 = input.pop();
        if (cp2 == STOP) {
          tokens.push({ type: TY_STOP, cp: cp2 });
        } else if (VALID.has(cp2)) {
          tokens.push({ type: TY_VALID, cps: [cp2] });
        } else if (IGNORED.has(cp2)) {
          tokens.push({ type: TY_IGNORED, cp: cp2 });
        } else {
          let cps = MAPPED.get(cp2);
          if (cps) {
            tokens.push({ type: TY_MAPPED, cp: cp2, cps: cps.slice() });
          } else {
            tokens.push({ type: TY_DISALLOWED, cp: cp2 });
          }
        }
      }
    }
    if (nf) {
      for (let i = 0, start = -1; i < tokens.length; i++) {
        let token = tokens[i];
        if (is_valid_or_mapped(token.type)) {
          if (requires_check(token.cps)) {
            let end = i + 1;
            for (let pos = end; pos < tokens.length; pos++) {
              let { type: type2, cps: cps2 } = tokens[pos];
              if (is_valid_or_mapped(type2)) {
                if (!requires_check(cps2)) break;
                end = pos + 1;
              } else if (type2 !== TY_IGNORED) {
                break;
              }
            }
            if (start < 0) start = i;
            let slice = tokens.slice(start, end);
            let cps0 = slice.flatMap((x) => is_valid_or_mapped(x.type) ? x.cps : []);
            let cps = nfc(cps0);
            if (compare_arrays(cps, cps0)) {
              tokens.splice(start, end - start, {
                type: TY_NFC,
                input: cps0,
                // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
                cps,
                tokens0: collapse_valid_tokens(slice),
                tokens: ens_tokenize(str_from_cps(cps), { nf: false })
              });
              i = start;
            } else {
              i = end - 1;
            }
            start = -1;
          } else {
            start = i;
          }
        } else if (token.type !== TY_IGNORED) {
          start = -1;
        }
      }
    }
    return collapse_valid_tokens(tokens);
  }
  function is_valid_or_mapped(type2) {
    return type2 == TY_VALID || type2 == TY_MAPPED;
  }
  function requires_check(cps) {
    return cps.some((cp2) => NFC_CHECK.has(cp2));
  }
  function collapse_valid_tokens(tokens) {
    for (let i = 0; i < tokens.length; i++) {
      if (tokens[i].type == TY_VALID) {
        let j = i + 1;
        while (j < tokens.length && tokens[j].type == TY_VALID) j++;
        tokens.splice(i, j - i, { type: TY_VALID, cps: tokens.slice(i, j).flatMap((x) => x.cps) });
      }
    }
    return tokens;
  }
  dist.ens_beautify = ens_beautify;
  dist.ens_emoji = ens_emoji;
  dist.ens_normalize = ens_normalize;
  dist.ens_normalize_fragment = ens_normalize_fragment;
  dist.ens_split = ens_split;
  dist.ens_tokenize = ens_tokenize;
  dist.is_combining_mark = is_combining_mark;
  dist.nfc = nfc;
  dist.nfd = nfd;
  dist.safe_str_from_cps = safe_str_from_cps;
  dist.should_escape = should_escape;
  return dist;
}
var hasRequiredNamehash;
function requireNamehash() {
  if (hasRequiredNamehash) return namehash;
  hasRequiredNamehash = 1;
  Object.defineProperty(namehash, "__esModule", { value: true });
  namehash.dnsEncode = namehash.namehash = namehash.isValidName = namehash.ensNormalize = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const ens_normalize_1 = requireDist();
  const Zeros = new Uint8Array(32);
  Zeros.fill(0);
  function checkComponent(comp) {
    (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
    return comp;
  }
  function ensNameSplit(name) {
    const bytes2 = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));
    const comps = [];
    if (name.length === 0) {
      return comps;
    }
    let last = 0;
    for (let i = 0; i < bytes2.length; i++) {
      const d = bytes2[i];
      if (d === 46) {
        comps.push(checkComponent(bytes2.slice(last, i)));
        last = i + 1;
      }
    }
    (0, index_js_2.assertArgument)(last < bytes2.length, "invalid ENS name; empty component", "name", name);
    comps.push(checkComponent(bytes2.slice(last)));
    return comps;
  }
  function ensNormalize(name) {
    try {
      if (name.length === 0) {
        throw new Error("empty label");
      }
      return (0, ens_normalize_1.ens_normalize)(name);
    } catch (error) {
      (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
    }
  }
  namehash.ensNormalize = ensNormalize;
  function isValidName(name) {
    try {
      return ensNameSplit(name).length !== 0;
    } catch (error) {
    }
    return false;
  }
  namehash.isValidName = isValidName;
  function namehash$1(name) {
    (0, index_js_2.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
    (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
    let result = Zeros;
    const comps = ensNameSplit(name);
    while (comps.length) {
      result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));
    }
    return (0, index_js_2.hexlify)(result);
  }
  namehash.namehash = namehash$1;
  function dnsEncode(name, _maxLength) {
    const length = _maxLength != null ? _maxLength : 63;
    (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
    return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
      (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
      const bytes2 = new Uint8Array(comp.length + 1);
      bytes2.set(comp, 1);
      bytes2[0] = bytes2.length - 1;
      return bytes2;
    }))) + "00";
  }
  namehash.dnsEncode = dnsEncode;
  return namehash;
}
var message = {};
var hasRequiredMessage;
function requireMessage() {
  if (hasRequiredMessage) return message;
  hasRequiredMessage = 1;
  Object.defineProperty(message, "__esModule", { value: true });
  message.verifyMessage = message.hashMessage = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireConstants();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  function hashMessage(message2) {
    if (typeof message2 === "string") {
      message2 = (0, index_js_4.toUtf8Bytes)(message2);
    }
    return (0, index_js_1.keccak256)((0, index_js_4.concat)([
      (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
      (0, index_js_4.toUtf8Bytes)(String(message2.length)),
      message2
    ]));
  }
  message.hashMessage = hashMessage;
  function verifyMessage(message2, sig) {
    const digest = hashMessage(message2);
    return (0, index_js_3.recoverAddress)(digest, sig);
  }
  message.verifyMessage = verifyMessage;
  return message;
}
var solidity = {};
var hasRequiredSolidity;
function requireSolidity() {
  if (hasRequiredSolidity) return solidity;
  hasRequiredSolidity = 1;
  Object.defineProperty(solidity, "__esModule", { value: true });
  solidity.solidityPackedSha256 = solidity.solidityPackedKeccak256 = solidity.solidityPacked = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const regexBytes = new RegExp("^bytes([0-9]+)$");
  const regexNumber = new RegExp("^(u?int)([0-9]*)$");
  const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
  function _pack(type2, value, isArray2) {
    switch (type2) {
      case "address":
        if (isArray2) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
        }
        return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
      case "string":
        return (0, index_js_3.toUtf8Bytes)(value);
      case "bytes":
        return (0, index_js_3.getBytes)(value);
      case "bool":
        value = !!value ? "0x01" : "0x00";
        if (isArray2) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
        }
        return (0, index_js_3.getBytes)(value);
    }
    let match = type2.match(regexNumber);
    if (match) {
      let signed = match[1] === "int";
      let size = parseInt(match[2] || "256");
      (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type2);
      if (isArray2) {
        size = 256;
      }
      if (signed) {
        value = (0, index_js_3.toTwos)(value, size);
      }
      return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
    }
    match = type2.match(regexBytes);
    if (match) {
      const size = parseInt(match[1]);
      (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type2);
      (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type2}`, "value", value);
      if (isArray2) {
        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
      }
      return value;
    }
    match = type2.match(regexArray);
    if (match && Array.isArray(value)) {
      const baseType = match[1];
      const count = parseInt(match[2] || String(value.length));
      (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type2}`, "value", value);
      const result = [];
      value.forEach(function(value2) {
        result.push(_pack(baseType, value2, true));
      });
      return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
    }
    (0, index_js_3.assertArgument)(false, "invalid type", "type", type2);
  }
  function solidityPacked(types2, values) {
    (0, index_js_3.assertArgument)(types2.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
    const tight = [];
    types2.forEach(function(type2, index) {
      tight.push(_pack(type2, values[index]));
    });
    return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
  }
  solidity.solidityPacked = solidityPacked;
  function solidityPackedKeccak256(types2, values) {
    return (0, index_js_2.keccak256)(solidityPacked(types2, values));
  }
  solidity.solidityPackedKeccak256 = solidityPackedKeccak256;
  function solidityPackedSha256(types2, values) {
    return (0, index_js_2.sha256)(solidityPacked(types2, values));
  }
  solidity.solidityPackedSha256 = solidityPackedSha256;
  return solidity;
}
var typedData = {};
var hasRequiredTypedData;
function requireTypedData() {
  if (hasRequiredTypedData) return typedData;
  hasRequiredTypedData = 1;
  Object.defineProperty(typedData, "__esModule", { value: true });
  typedData.verifyTypedData = typedData.TypedDataEncoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  const id_js_1 = /* @__PURE__ */ requireId();
  const padding2 = new Uint8Array(32);
  padding2.fill(0);
  const BN__1 = BigInt(-1);
  const BN_0 = BigInt(0);
  const BN_1 = BigInt(1);
  const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  function hexPadRight(value) {
    const bytes2 = (0, index_js_4.getBytes)(value);
    const padOffset = bytes2.length % 32;
    if (padOffset) {
      return (0, index_js_4.concat)([bytes2, padding2.slice(padOffset)]);
    }
    return (0, index_js_4.hexlify)(bytes2);
  }
  const hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);
  const hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);
  const domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
  };
  const domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
  ];
  function checkString(key) {
    return function(value) {
      (0, index_js_4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
      return value;
    };
  }
  const domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function(_value) {
      const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
      (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
      if (Number.isSafeInteger(value)) {
        return Number(value);
      }
      return (0, index_js_4.toQuantity)(value);
    },
    verifyingContract: function(value) {
      try {
        return (0, index_js_1.getAddress)(value).toLowerCase();
      } catch (error) {
      }
      (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
      const bytes2 = (0, index_js_4.getBytes)(value, "domain.salt");
      (0, index_js_4.assertArgument)(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
      return (0, index_js_4.hexlify)(bytes2);
    }
  };
  function getBaseEncoder(type2) {
    {
      const match = type2.match(/^(u?)int(\d+)$/);
      if (match) {
        const signed = match[1] === "";
        const width = parseInt(match[2]);
        (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type2);
        const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? width - 1 : width);
        const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;
        return function(_value) {
          const value = (0, index_js_4.getBigInt)(_value, "value");
          (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type2}`, "value", value);
          return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);
        };
      }
    }
    {
      const match = type2.match(/^bytes(\d+)$/);
      if (match) {
        const width = parseInt(match[1]);
        (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type2);
        return function(value) {
          const bytes2 = (0, index_js_4.getBytes)(value);
          (0, index_js_4.assertArgument)(bytes2.length === width, `invalid length for ${type2}`, "value", value);
          return hexPadRight(value);
        };
      }
    }
    switch (type2) {
      case "address":
        return function(value) {
          return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
        };
      case "bool":
        return function(value) {
          return !value ? hexFalse : hexTrue;
        };
      case "bytes":
        return function(value) {
          return (0, index_js_2.keccak256)(value);
        };
      case "string":
        return function(value) {
          return (0, id_js_1.id)(value);
        };
    }
    return null;
  }
  function encodeType(name, fields) {
    return `${name}(${fields.map(({ name: name2, type: type2 }) => type2 + " " + name2).join(",")})`;
  }
  function splitArray(type2) {
    const match = type2.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
    if (match) {
      return {
        base: match[1],
        index: match[2] + match[4],
        array: {
          base: match[1],
          prefix: match[1] + match[2],
          count: match[5] ? parseInt(match[5]) : -1
        }
      };
    }
    return { base: type2 };
  }
  class TypedDataEncoder {
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */
    primaryType;
    #types;
    /**
     *  The types.
     */
    get types() {
      return JSON.parse(this.#types);
    }
    #fullTypes;
    #encoderCache;
    /**
     *  Create a new **TypedDataEncoder** for %%types%%.
     *
     *  This performs all necessary checking that types are valid and
     *  do not violate the [[link-eip-712]] structural constraints as
     *  well as computes the [[primaryType]].
     */
    constructor(_types) {
      this.#fullTypes = /* @__PURE__ */ new Map();
      this.#encoderCache = /* @__PURE__ */ new Map();
      const links = /* @__PURE__ */ new Map();
      const parents = /* @__PURE__ */ new Map();
      const subtypes = /* @__PURE__ */ new Map();
      const types2 = {};
      Object.keys(_types).forEach((type2) => {
        types2[type2] = _types[type2].map(({ name, type: type3 }) => {
          let { base, index } = splitArray(type3);
          if (base === "int" && !_types["int"]) {
            base = "int256";
          }
          if (base === "uint" && !_types["uint"]) {
            base = "uint256";
          }
          return { name, type: base + (index || "") };
        });
        links.set(type2, /* @__PURE__ */ new Set());
        parents.set(type2, []);
        subtypes.set(type2, /* @__PURE__ */ new Set());
      });
      this.#types = JSON.stringify(types2);
      for (const name in types2) {
        const uniqueNames = /* @__PURE__ */ new Set();
        for (const field of types2[name]) {
          (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
          uniqueNames.add(field.name);
          const baseType = splitArray(field.type).base;
          (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
          const encoder = getBaseEncoder(baseType);
          if (encoder) {
            continue;
          }
          (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
          parents.get(baseType).push(name);
          links.get(name).add(baseType);
        }
      }
      const primaryTypes = Array.from(parents.keys()).filter((n) => parents.get(n).length === 0);
      (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types);
      (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types);
      (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
      function checkCircular(type2, found) {
        (0, index_js_4.assertArgument)(!found.has(type2), `circular type reference to ${JSON.stringify(type2)}`, "types", _types);
        found.add(type2);
        for (const child of links.get(type2)) {
          if (!parents.has(child)) {
            continue;
          }
          checkCircular(child, found);
          for (const subtype of found) {
            subtypes.get(subtype).add(child);
          }
        }
        found.delete(type2);
      }
      checkCircular(this.primaryType, /* @__PURE__ */ new Set());
      for (const [name, set] of subtypes) {
        const st = Array.from(set);
        st.sort();
        this.#fullTypes.set(name, encodeType(name, types2[name]) + st.map((t) => encodeType(t, types2[t])).join(""));
      }
    }
    /**
     *  Returnthe encoder for the specific %%type%%.
     */
    getEncoder(type2) {
      let encoder = this.#encoderCache.get(type2);
      if (!encoder) {
        encoder = this.#getEncoder(type2);
        this.#encoderCache.set(type2, encoder);
      }
      return encoder;
    }
    #getEncoder(type2) {
      {
        const encoder = getBaseEncoder(type2);
        if (encoder) {
          return encoder;
        }
      }
      const array2 = splitArray(type2).array;
      if (array2) {
        const subtype = array2.prefix;
        const subEncoder = this.getEncoder(subtype);
        return (value) => {
          (0, index_js_4.assertArgument)(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
          let result = value.map(subEncoder);
          if (this.#fullTypes.has(subtype)) {
            result = result.map(index_js_2.keccak256);
          }
          return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
        };
      }
      const fields = this.types[type2];
      if (fields) {
        const encodedType = (0, id_js_1.id)(this.#fullTypes.get(type2));
        return (value) => {
          const values = fields.map(({ name, type: type3 }) => {
            const result = this.getEncoder(type3)(value[name]);
            if (this.#fullTypes.has(type3)) {
              return (0, index_js_2.keccak256)(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return (0, index_js_4.concat)(values);
        };
      }
      (0, index_js_4.assertArgument)(false, `unknown type: ${type2}`, "type", type2);
    }
    /**
     *  Return the full type for %%name%%.
     */
    encodeType(name) {
      const result = this.#fullTypes.get(name);
      (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
      return result;
    }
    /**
     *  Return the encoded %%value%% for the %%type%%.
     */
    encodeData(type2, value) {
      return this.getEncoder(type2)(value);
    }
    /**
     *  Returns the hash of %%value%% for the type of %%name%%.
     */
    hashStruct(name, value) {
      return (0, index_js_2.keccak256)(this.encodeData(name, value));
    }
    /**
     *  Return the fulled encoded %%value%% for the [[types]].
     */
    encode(value) {
      return this.encodeData(this.primaryType, value);
    }
    /**
     *  Return the hash of the fully encoded %%value%% for the [[types]].
     */
    hash(value) {
      return this.hashStruct(this.primaryType, value);
    }
    /**
     *  @_ignore:
     */
    _visit(type2, value, callback) {
      {
        const encoder = getBaseEncoder(type2);
        if (encoder) {
          return callback(type2, value);
        }
      }
      const array2 = splitArray(type2).array;
      if (array2) {
        (0, index_js_4.assertArgument)(array2.count === -1 || array2.count === value.length, `array length mismatch; expected length ${array2.count}`, "value", value);
        return value.map((v) => this._visit(array2.prefix, v, callback));
      }
      const fields = this.types[type2];
      if (fields) {
        return fields.reduce((accum, { name, type: type3 }) => {
          accum[name] = this._visit(type3, value[name], callback);
          return accum;
        }, {});
      }
      (0, index_js_4.assertArgument)(false, `unknown type: ${type2}`, "type", type2);
    }
    /**
     *  Call %%calback%% for each value in %%value%%, passing the type and
     *  component within %%value%%.
     *
     *  This is useful for replacing addresses or other transformation that
     *  may be desired on each component, based on its type.
     */
    visit(value, callback) {
      return this._visit(this.primaryType, value, callback);
    }
    /**
     *  Create a new **TypedDataEncoder** for %%types%%.
     */
    static from(types2) {
      return new TypedDataEncoder(types2);
    }
    /**
     *  Return the primary type for %%types%%.
     */
    static getPrimaryType(types2) {
      return TypedDataEncoder.from(types2).primaryType;
    }
    /**
     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
     */
    static hashStruct(name, types2, value) {
      return TypedDataEncoder.from(types2).hashStruct(name, value);
    }
    /**
     *  Return the domain hash for %%domain%%.
     */
    static hashDomain(domain2) {
      const domainFields = [];
      for (const name in domain2) {
        if (domain2[name] == null) {
          continue;
        }
        const type2 = domainFieldTypes[name];
        (0, index_js_4.assertArgument)(type2, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain2);
        domainFields.push({ name, type: type2 });
      }
      domainFields.sort((a, b) => {
        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
      });
      return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain2);
    }
    /**
     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
     */
    static encode(domain2, types2, value) {
      return (0, index_js_4.concat)([
        "0x1901",
        TypedDataEncoder.hashDomain(domain2),
        TypedDataEncoder.from(types2).hash(value)
      ]);
    }
    /**
     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
     */
    static hash(domain2, types2, value) {
      return (0, index_js_2.keccak256)(TypedDataEncoder.encode(domain2, types2, value));
    }
    // Replaces all address types with ENS names with their looked up address
    /**
     * Resolves to the value from resolving all addresses in %%value%% for
     * %%types%% and the %%domain%%.
     */
    static async resolveNames(domain2, types2, value, resolveName) {
      domain2 = Object.assign({}, domain2);
      for (const key in domain2) {
        if (domain2[key] == null) {
          delete domain2[key];
        }
      }
      const ensCache = {};
      if (domain2.verifyingContract && !(0, index_js_4.isHexString)(domain2.verifyingContract, 20)) {
        ensCache[domain2.verifyingContract] = "0x";
      }
      const encoder = TypedDataEncoder.from(types2);
      encoder.visit(value, (type2, value2) => {
        if (type2 === "address" && !(0, index_js_4.isHexString)(value2, 20)) {
          ensCache[value2] = "0x";
        }
        return value2;
      });
      for (const name in ensCache) {
        ensCache[name] = await resolveName(name);
      }
      if (domain2.verifyingContract && ensCache[domain2.verifyingContract]) {
        domain2.verifyingContract = ensCache[domain2.verifyingContract];
      }
      value = encoder.visit(value, (type2, value2) => {
        if (type2 === "address" && ensCache[value2]) {
          return ensCache[value2];
        }
        return value2;
      });
      return { domain: domain2, value };
    }
    /**
     *  Returns the JSON-encoded payload expected by nodes which implement
     *  the JSON-RPC [[link-eip-712]] method.
     */
    static getPayload(domain2, types2, value) {
      TypedDataEncoder.hashDomain(domain2);
      const domainValues = {};
      const domainTypes = [];
      domainFieldNames.forEach((name) => {
        const value2 = domain2[name];
        if (value2 == null) {
          return;
        }
        domainValues[name] = domainChecks[name](value2);
        domainTypes.push({ name, type: domainFieldTypes[name] });
      });
      const encoder = TypedDataEncoder.from(types2);
      types2 = encoder.types;
      const typesWithDomain = Object.assign({}, types2);
      (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types2);
      typesWithDomain.EIP712Domain = domainTypes;
      encoder.encode(value);
      return {
        types: typesWithDomain,
        domain: domainValues,
        primaryType: encoder.primaryType,
        message: encoder.visit(value, (type2, value2) => {
          if (type2.match(/^bytes(\d*)/)) {
            return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value2));
          }
          if (type2.match(/^u?int/)) {
            return (0, index_js_4.getBigInt)(value2).toString();
          }
          switch (type2) {
            case "address":
              return value2.toLowerCase();
            case "bool":
              return !!value2;
            case "string":
              (0, index_js_4.assertArgument)(typeof value2 === "string", "invalid string", "value", value2);
              return value2;
          }
          (0, index_js_4.assertArgument)(false, "unsupported type", "type", type2);
        })
      };
    }
  }
  typedData.TypedDataEncoder = TypedDataEncoder;
  function verifyTypedData(domain2, types2, value, signature2) {
    return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain2, types2, value), signature2);
  }
  typedData.verifyTypedData = verifyTypedData;
  return typedData;
}
var hasRequiredHash;
function requireHash() {
  if (hasRequiredHash) return hash;
  hasRequiredHash = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.verifyAuthorization = exports.hashAuthorization = void 0;
    var authorization_js_1 = /* @__PURE__ */ requireAuthorization();
    Object.defineProperty(exports, "hashAuthorization", { enumerable: true, get: function() {
      return authorization_js_1.hashAuthorization;
    } });
    Object.defineProperty(exports, "verifyAuthorization", { enumerable: true, get: function() {
      return authorization_js_1.verifyAuthorization;
    } });
    var id_js_1 = /* @__PURE__ */ requireId();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_js_1.id;
    } });
    var namehash_js_1 = /* @__PURE__ */ requireNamehash();
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return namehash_js_1.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return namehash_js_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return namehash_js_1.dnsEncode;
    } });
    var message_js_1 = /* @__PURE__ */ requireMessage();
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return message_js_1.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return message_js_1.verifyMessage;
    } });
    var solidity_js_1 = /* @__PURE__ */ requireSolidity();
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return solidity_js_1.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedSha256;
    } });
    var typed_data_js_1 = /* @__PURE__ */ requireTypedData();
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_js_1.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return typed_data_js_1.verifyTypedData;
    } });
  })(hash);
  return hash;
}
var hasRequiredFragments;
function requireFragments() {
  if (hasRequiredFragments) return fragments;
  hasRequiredFragments = 1;
  Object.defineProperty(fragments, "__esModule", { value: true });
  fragments.StructFragment = fragments.FunctionFragment = fragments.FallbackFragment = fragments.ConstructorFragment = fragments.EventFragment = fragments.ErrorFragment = fragments.NamedFragment = fragments.Fragment = fragments.ParamType = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const index_js_2 = /* @__PURE__ */ requireHash();
  function setify(items) {
    const result = /* @__PURE__ */ new Set();
    items.forEach((k) => result.add(k));
    return Object.freeze(result);
  }
  const _kwVisibDeploy = "external public payable override";
  const KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
  const _kwVisib = "constant external internal payable private public pure view override";
  const KwVisib = setify(_kwVisib.split(" "));
  const _kwTypes = "constructor error event fallback function receive struct";
  const KwTypes = setify(_kwTypes.split(" "));
  const _kwModifiers = "calldata memory storage payable indexed";
  const KwModifiers = setify(_kwModifiers.split(" "));
  const _kwOther = "tuple returns";
  const _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
  const Keywords = setify(_keywords.split(" "));
  const SimpleTokens = {
    "(": "OPEN_PAREN",
    ")": "CLOSE_PAREN",
    "[": "OPEN_BRACKET",
    "]": "CLOSE_BRACKET",
    ",": "COMMA",
    "@": "AT"
  };
  const regexWhitespacePrefix = new RegExp("^(\\s*)");
  const regexNumberPrefix = new RegExp("^([0-9]+)");
  const regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
  const regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
  const regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
  class TokenString {
    #offset;
    #tokens;
    get offset() {
      return this.#offset;
    }
    get length() {
      return this.#tokens.length - this.#offset;
    }
    constructor(tokens) {
      this.#offset = 0;
      this.#tokens = tokens.slice();
    }
    clone() {
      return new TokenString(this.#tokens);
    }
    reset() {
      this.#offset = 0;
    }
    #subTokenString(from = 0, to = 0) {
      return new TokenString(this.#tokens.slice(from, to).map((t) => {
        return Object.freeze(Object.assign({}, t, {
          match: t.match - from,
          linkBack: t.linkBack - from,
          linkNext: t.linkNext - from
        }));
      }));
    }
    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
    popKeyword(allowed) {
      const top = this.peek();
      if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
        throw new Error(`expected keyword ${top.text}`);
      }
      return this.pop().text;
    }
    // Pops and returns the value of the next token if it is `type`; throws if out of tokens
    popType(type2) {
      if (this.peek().type !== type2) {
        const top = this.peek();
        throw new Error(`expected ${type2}; got ${top.type} ${JSON.stringify(top.text)}`);
      }
      return this.pop().text;
    }
    // Pops and returns a "(" TOKENS ")"
    popParen() {
      const top = this.peek();
      if (top.type !== "OPEN_PAREN") {
        throw new Error("bad start");
      }
      const result = this.#subTokenString(this.#offset + 1, top.match + 1);
      this.#offset = top.match + 1;
      return result;
    }
    // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
    popParams() {
      const top = this.peek();
      if (top.type !== "OPEN_PAREN") {
        throw new Error("bad start");
      }
      const result = [];
      while (this.#offset < top.match - 1) {
        const link2 = this.peek().linkNext;
        result.push(this.#subTokenString(this.#offset + 1, link2));
        this.#offset = link2;
      }
      this.#offset = top.match + 1;
      return result;
    }
    // Returns the top Token, throwing if out of tokens
    peek() {
      if (this.#offset >= this.#tokens.length) {
        throw new Error("out-of-bounds");
      }
      return this.#tokens[this.#offset];
    }
    // Returns the next value, if it is a keyword in `allowed`
    peekKeyword(allowed) {
      const top = this.peekType("KEYWORD");
      return top != null && allowed.has(top) ? top : null;
    }
    // Returns the value of the next token if it is `type`
    peekType(type2) {
      if (this.length === 0) {
        return null;
      }
      const top = this.peek();
      return top.type === type2 ? top.text : null;
    }
    // Returns the next token; throws if out of tokens
    pop() {
      const result = this.peek();
      this.#offset++;
      return result;
    }
    toString() {
      const tokens = [];
      for (let i = this.#offset; i < this.#tokens.length; i++) {
        const token = this.#tokens[i];
        tokens.push(`${token.type}:${token.text}`);
      }
      return `<TokenString ${tokens.join(" ")}>`;
    }
  }
  function lex(text) {
    const tokens = [];
    const throwError = (message2) => {
      const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
      throw new Error(`invalid token ${token} at ${offset}: ${message2}`);
    };
    let brackets = [];
    let commas = [];
    let offset = 0;
    while (offset < text.length) {
      let cur = text.substring(offset);
      let match = cur.match(regexWhitespacePrefix);
      if (match) {
        offset += match[1].length;
        cur = text.substring(offset);
      }
      const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
      tokens.push(token);
      let type2 = SimpleTokens[cur[0]] || "";
      if (type2) {
        token.type = type2;
        token.text = cur[0];
        offset++;
        if (type2 === "OPEN_PAREN") {
          brackets.push(tokens.length - 1);
          commas.push(tokens.length - 1);
        } else if (type2 == "CLOSE_PAREN") {
          if (brackets.length === 0) {
            throwError("no matching open bracket");
          }
          token.match = brackets.pop();
          tokens[token.match].match = tokens.length - 1;
          token.depth--;
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
        } else if (type2 === "COMMA") {
          token.linkBack = commas.pop();
          tokens[token.linkBack].linkNext = tokens.length - 1;
          commas.push(tokens.length - 1);
        } else if (type2 === "OPEN_BRACKET") {
          token.type = "BRACKET";
        } else if (type2 === "CLOSE_BRACKET") {
          let suffix = tokens.pop().text;
          if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
            const value = tokens.pop().text;
            suffix = value + suffix;
            tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);
          }
          if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
            throw new Error("missing opening bracket");
          }
          tokens[tokens.length - 1].text += suffix;
        }
        continue;
      }
      match = cur.match(regexIdPrefix);
      if (match) {
        token.text = match[1];
        offset += token.text.length;
        if (Keywords.has(token.text)) {
          token.type = "KEYWORD";
          continue;
        }
        if (token.text.match(regexType)) {
          token.type = "TYPE";
          continue;
        }
        token.type = "ID";
        continue;
      }
      match = cur.match(regexNumberPrefix);
      if (match) {
        token.text = match[1];
        token.type = "NUMBER";
        offset += token.text.length;
        continue;
      }
      throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
    }
    return new TokenString(tokens.map((t) => Object.freeze(t)));
  }
  function allowSingle(set, allowed) {
    let included = [];
    for (const key in allowed.keys()) {
      if (set.has(key)) {
        included.push(key);
      }
    }
    if (included.length > 1) {
      throw new Error(`conflicting types: ${included.join(", ")}`);
    }
  }
  function consumeName(type2, tokens) {
    if (tokens.peekKeyword(KwTypes)) {
      const keyword = tokens.pop().text;
      if (keyword !== type2) {
        throw new Error(`expected ${type2}, got ${keyword}`);
      }
    }
    return tokens.popType("ID");
  }
  function consumeKeywords(tokens, allowed) {
    const keywords = /* @__PURE__ */ new Set();
    while (true) {
      const keyword = tokens.peekType("KEYWORD");
      if (keyword == null || allowed && !allowed.has(keyword)) {
        break;
      }
      tokens.pop();
      if (keywords.has(keyword)) {
        throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
      }
      keywords.add(keyword);
    }
    return Object.freeze(keywords);
  }
  function consumeMutability(tokens) {
    let modifiers = consumeKeywords(tokens, KwVisib);
    allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
    allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
    if (modifiers.has("view")) {
      return "view";
    }
    if (modifiers.has("pure")) {
      return "pure";
    }
    if (modifiers.has("payable")) {
      return "payable";
    }
    if (modifiers.has("nonpayable")) {
      return "nonpayable";
    }
    if (modifiers.has("constant")) {
      return "view";
    }
    return "nonpayable";
  }
  function consumeParams(tokens, allowIndexed) {
    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
  }
  function consumeGas(tokens) {
    if (tokens.peekType("AT")) {
      tokens.pop();
      if (tokens.peekType("NUMBER")) {
        return (0, index_js_1.getBigInt)(tokens.pop().text);
      }
      throw new Error("invalid gas");
    }
    return null;
  }
  function consumeEoi(tokens) {
    if (tokens.length) {
      throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
    }
  }
  const regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
  function verifyBasicType(type2) {
    const match = type2.match(regexType);
    (0, index_js_1.assertArgument)(match, "invalid type", "type", type2);
    if (type2 === "uint") {
      return "uint256";
    }
    if (type2 === "int") {
      return "int256";
    }
    if (match[2]) {
      const length = parseInt(match[2]);
      (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type2);
    } else if (match[3]) {
      const size = parseInt(match[3]);
      (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type2);
    }
    return type2;
  }
  const _guard = {};
  const internal = Symbol.for("_ethers_internal");
  const ParamTypeInternal = "_ParamTypeInternal";
  const ErrorFragmentInternal = "_ErrorInternal";
  const EventFragmentInternal = "_EventInternal";
  const ConstructorFragmentInternal = "_ConstructorInternal";
  const FallbackFragmentInternal = "_FallbackInternal";
  const FunctionFragmentInternal = "_FunctionInternal";
  const StructFragmentInternal = "_StructInternal";
  class ParamType {
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    name;
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    type;
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    baseType;
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    indexed;
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    components;
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    arrayLength;
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    arrayChildren;
    /**
     *  @private
     */
    constructor(guard, name, type2, baseType, indexed, components, arrayLength, arrayChildren) {
      (0, index_js_1.assertPrivate)(guard, _guard, "ParamType");
      Object.defineProperty(this, internal, { value: ParamTypeInternal });
      if (components) {
        components = Object.freeze(components.slice());
      }
      if (baseType === "array") {
        if (arrayLength == null || arrayChildren == null) {
          throw new Error("");
        }
      } else if (arrayLength != null || arrayChildren != null) {
        throw new Error("");
      }
      if (baseType === "tuple") {
        if (components == null) {
          throw new Error("");
        }
      } else if (components != null) {
        throw new Error("");
      }
      (0, index_js_1.defineProperties)(this, {
        name,
        type: type2,
        baseType,
        indexed,
        components,
        arrayLength,
        arrayChildren
      });
    }
    /**
     *  Return a string representation of this type.
     *
     *  For example,
     *
     *  ``sighash" => "(uint256,address)"``
     *
     *  ``"minimal" => "tuple(uint256,address) indexed"``
     *
     *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
     */
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        const name = this.name || "";
        if (this.isArray()) {
          const result3 = JSON.parse(this.arrayChildren.format("json"));
          result3.name = name;
          result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
          return JSON.stringify(result3);
        }
        const result2 = {
          type: this.baseType === "tuple" ? "tuple" : this.type,
          name
        };
        if (typeof this.indexed === "boolean") {
          result2.indexed = this.indexed;
        }
        if (this.isTuple()) {
          result2.components = this.components.map((c) => JSON.parse(c.format(format2)));
        }
        return JSON.stringify(result2);
      }
      let result = "";
      if (this.isArray()) {
        result += this.arrayChildren.format(format2);
        result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
      } else {
        if (this.isTuple()) {
          result += "(" + this.components.map((comp) => comp.format(format2)).join(format2 === "full" ? ", " : ",") + ")";
        } else {
          result += this.type;
        }
      }
      if (format2 !== "sighash") {
        if (this.indexed === true) {
          result += " indexed";
        }
        if (format2 === "full" && this.name) {
          result += " " + this.name;
        }
      }
      return result;
    }
    /**
     *  Returns true if %%this%% is an Array type.
     *
     *  This provides a type gaurd ensuring that [[arrayChildren]]
     *  and [[arrayLength]] are non-null.
     */
    isArray() {
      return this.baseType === "array";
    }
    /**
     *  Returns true if %%this%% is a Tuple type.
     *
     *  This provides a type gaurd ensuring that [[components]]
     *  is non-null.
     */
    isTuple() {
      return this.baseType === "tuple";
    }
    /**
     *  Returns true if %%this%% is an Indexable type.
     *
     *  This provides a type gaurd ensuring that [[indexed]]
     *  is non-null.
     */
    isIndexable() {
      return this.indexed != null;
    }
    /**
     *  Walks the **ParamType** with %%value%%, calling %%process%%
     *  on each type, destructing the %%value%% recursively.
     */
    walk(value, process2) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const _this = this;
        return value.map((v) => _this.arrayChildren.walk(v, process2));
      }
      if (this.isTuple()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid tuple value");
        }
        if (value.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        const _this = this;
        return value.map((v, i) => _this.components[i].walk(v, process2));
      }
      return process2(this.type, value);
    }
    #walkAsync(promises2, value, process2, setValue) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const childType = this.arrayChildren;
        const result2 = value.slice();
        result2.forEach((value2, index) => {
          childType.#walkAsync(promises2, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      if (this.isTuple()) {
        const components = this.components;
        let result2;
        if (Array.isArray(value)) {
          result2 = value.slice();
        } else {
          if (value == null || typeof value !== "object") {
            throw new Error("invalid tuple value");
          }
          result2 = components.map((param) => {
            if (!param.name) {
              throw new Error("cannot use object value with unnamed components");
            }
            if (!(param.name in value)) {
              throw new Error(`missing value for component ${param.name}`);
            }
            return value[param.name];
          });
        }
        if (result2.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        result2.forEach((value2, index) => {
          components[index].#walkAsync(promises2, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      const result = process2(this.type, value);
      if (result.then) {
        promises2.push(async function() {
          setValue(await result);
        }());
      } else {
        setValue(result);
      }
    }
    /**
     *  Walks the **ParamType** with %%value%%, asynchronously calling
     *  %%process%% on each type, destructing the %%value%% recursively.
     *
     *  This can be used to resolve ENS names by walking and resolving each
     *  ``"address"`` type.
     */
    async walkAsync(value, process2) {
      const promises2 = [];
      const result = [value];
      this.#walkAsync(promises2, value, process2, (value2) => {
        result[0] = value2;
      });
      if (promises2.length) {
        await Promise.all(promises2);
      }
      return result[0];
    }
    /**
     *  Creates a new **ParamType** for %%obj%%.
     *
     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
     *  otherwise the ``indexed`` keyword will throw an error.
     */
    static from(obj, allowIndexed) {
      if (ParamType.isParamType(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return ParamType.from(lex(obj), allowIndexed);
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        let type3 = "", baseType = "";
        let comps = null;
        if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
          baseType = "tuple";
          comps = obj.popParams().map((t) => ParamType.from(t));
          type3 = `tuple(${comps.map((c) => c.format()).join(",")})`;
        } else {
          type3 = verifyBasicType(obj.popType("TYPE"));
          baseType = type3;
        }
        let arrayChildren = null;
        let arrayLength = null;
        while (obj.length && obj.peekType("BRACKET")) {
          const bracket = obj.pop();
          arrayChildren = new ParamType(_guard, "", type3, baseType, null, comps, arrayLength, arrayChildren);
          arrayLength = bracket.value;
          type3 += bracket.text;
          baseType = "array";
          comps = null;
        }
        let indexed2 = null;
        const keywords = consumeKeywords(obj, KwModifiers);
        if (keywords.has("indexed")) {
          if (!allowIndexed) {
            throw new Error("");
          }
          indexed2 = true;
        }
        const name2 = obj.peekType("ID") ? obj.pop().text : "";
        if (obj.length) {
          throw new Error("leftover tokens");
        }
        return new ParamType(_guard, name2, type3, baseType, indexed2, comps, arrayLength, arrayChildren);
      }
      const name = obj.name;
      (0, index_js_1.assertArgument)(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
      let indexed = obj.indexed;
      if (indexed != null) {
        (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
        indexed = !!indexed;
      }
      let type2 = obj.type;
      let arrayMatch = type2.match(regexArrayType);
      if (arrayMatch) {
        const arrayLength = parseInt(arrayMatch[2] || "-1");
        const arrayChildren = ParamType.from({
          type: arrayMatch[1],
          components: obj.components
        });
        return new ParamType(_guard, name || "", type2, "array", indexed, null, arrayLength, arrayChildren);
      }
      if (type2 === "tuple" || type2.startsWith(
        "tuple("
        /* fix: ) */
      ) || type2.startsWith(
        "("
        /* fix: ) */
      )) {
        const comps = obj.components != null ? obj.components.map((c) => ParamType.from(c)) : null;
        const tuple2 = new ParamType(_guard, name || "", type2, "tuple", indexed, comps, null, null);
        return tuple2;
      }
      type2 = verifyBasicType(obj.type);
      return new ParamType(_guard, name || "", type2, type2, indexed, null, null, null);
    }
    /**
     *  Returns true if %%value%% is a **ParamType**.
     */
    static isParamType(value) {
      return value && value[internal] === ParamTypeInternal;
    }
  }
  fragments.ParamType = ParamType;
  class Fragment {
    /**
     *  The type of the fragment.
     */
    type;
    /**
     *  The inputs for the fragment.
     */
    inputs;
    /**
     *  @private
     */
    constructor(guard, type2, inputs) {
      (0, index_js_1.assertPrivate)(guard, _guard, "Fragment");
      inputs = Object.freeze(inputs.slice());
      (0, index_js_1.defineProperties)(this, { type: type2, inputs });
    }
    /**
     *  Creates a new **Fragment** for %%obj%%, wich can be any supported
     *  ABI frgament type.
     */
    static from(obj) {
      if (typeof obj === "string") {
        try {
          Fragment.from(JSON.parse(obj));
        } catch (e) {
        }
        return Fragment.from(lex(obj));
      }
      if (obj instanceof TokenString) {
        const type2 = obj.peekKeyword(KwTypes);
        switch (type2) {
          case "constructor":
            return ConstructorFragment.from(obj);
          case "error":
            return ErrorFragment.from(obj);
          case "event":
            return EventFragment.from(obj);
          case "fallback":
          case "receive":
            return FallbackFragment.from(obj);
          case "function":
            return FunctionFragment.from(obj);
          case "struct":
            return StructFragment.from(obj);
        }
      } else if (typeof obj === "object") {
        switch (obj.type) {
          case "constructor":
            return ConstructorFragment.from(obj);
          case "error":
            return ErrorFragment.from(obj);
          case "event":
            return EventFragment.from(obj);
          case "fallback":
          case "receive":
            return FallbackFragment.from(obj);
          case "function":
            return FunctionFragment.from(obj);
          case "struct":
            return StructFragment.from(obj);
        }
        (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
          operation: "Fragment.from"
        });
      }
      (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
    }
    /**
     *  Returns true if %%value%% is a [[ConstructorFragment]].
     */
    static isConstructor(value) {
      return ConstructorFragment.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is an [[ErrorFragment]].
     */
    static isError(value) {
      return ErrorFragment.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is an [[EventFragment]].
     */
    static isEvent(value) {
      return EventFragment.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is a [[FunctionFragment]].
     */
    static isFunction(value) {
      return FunctionFragment.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is a [[StructFragment]].
     */
    static isStruct(value) {
      return StructFragment.isFragment(value);
    }
  }
  fragments.Fragment = Fragment;
  class NamedFragment extends Fragment {
    /**
     *  The name of the fragment.
     */
    name;
    /**
     *  @private
     */
    constructor(guard, type2, name, inputs) {
      super(guard, type2, inputs);
      (0, index_js_1.assertArgument)(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
      inputs = Object.freeze(inputs.slice());
      (0, index_js_1.defineProperties)(this, { name });
    }
  }
  fragments.NamedFragment = NamedFragment;
  function joinParams(format2, params) {
    return "(" + params.map((p) => p.format(format2)).join(format2 === "full" ? ", " : ",") + ")";
  }
  class ErrorFragment extends NamedFragment {
    /**
     *  @private
     */
    constructor(guard, name, inputs) {
      super(guard, "error", name, inputs);
      Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
    }
    /**
     *  The Custom Error selector.
     */
    get selector() {
      return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
    }
    /**
     *  Returns a string representation of this fragment as %%format%%.
     */
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "error",
          name: this.name,
          inputs: this.inputs.map((input) => JSON.parse(input.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("error");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      return result.join(" ");
    }
    /**
     *  Returns a new **ErrorFragment** for %%obj%%.
     */
    static from(obj) {
      if (ErrorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        return ErrorFragment.from(lex(obj));
      } else if (obj instanceof TokenString) {
        const name = consumeName("error", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new ErrorFragment(_guard, name, inputs);
      }
      return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is an
     *  **ErrorFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === ErrorFragmentInternal;
    }
  }
  fragments.ErrorFragment = ErrorFragment;
  class EventFragment extends NamedFragment {
    /**
     *  Whether this event is anonymous.
     */
    anonymous;
    /**
     *  @private
     */
    constructor(guard, name, inputs, anonymous2) {
      super(guard, "event", name, inputs);
      Object.defineProperty(this, internal, { value: EventFragmentInternal });
      (0, index_js_1.defineProperties)(this, { anonymous: anonymous2 });
    }
    /**
     *  The Event topic hash.
     */
    get topicHash() {
      return (0, index_js_2.id)(this.format("sighash"));
    }
    /**
     *  Returns a string representation of this event as %%format%%.
     */
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "event",
          anonymous: this.anonymous,
          name: this.name,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("event");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      if (format2 !== "sighash" && this.anonymous) {
        result.push("anonymous");
      }
      return result.join(" ");
    }
    /**
     *  Return the topic hash for an event with %%name%% and %%params%%.
     */
    static getTopicHash(name, params) {
      params = (params || []).map((p) => ParamType.from(p));
      const fragment = new EventFragment(_guard, name, params, false);
      return fragment.topicHash;
    }
    /**
     *  Returns a new **EventFragment** for %%obj%%.
     */
    static from(obj) {
      if (EventFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return EventFragment.from(lex(obj));
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("event", obj);
        const inputs = consumeParams(obj, true);
        const anonymous2 = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
        consumeEoi(obj);
        return new EventFragment(_guard, name, inputs, anonymous2);
      }
      return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is an
     *  **EventFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === EventFragmentInternal;
    }
  }
  fragments.EventFragment = EventFragment;
  class ConstructorFragment extends Fragment {
    /**
     *  Whether the constructor can receive an endowment.
     */
    payable;
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    gas;
    /**
     *  @private
     */
    constructor(guard, type2, inputs, payable, gas) {
      super(guard, type2, inputs);
      Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
      (0, index_js_1.defineProperties)(this, { payable, gas });
    }
    /**
     *  Returns a string representation of this constructor as %%format%%.
     */
    format(format2) {
      (0, index_js_1.assert)(format2 != null && format2 !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
      if (format2 === "json") {
        return JSON.stringify({
          type: "constructor",
          stateMutability: this.payable ? "payable" : "undefined",
          payable: this.payable,
          gas: this.gas != null ? this.gas : void 0,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format2)))
        });
      }
      const result = [`constructor${joinParams(format2, this.inputs)}`];
      if (this.payable) {
        result.push("payable");
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
      return result.join(" ");
    }
    /**
     *  Returns a new **ConstructorFragment** for %%obj%%.
     */
    static from(obj) {
      if (ConstructorFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return ConstructorFragment.from(lex(obj));
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        consumeKeywords(obj, setify(["constructor"]));
        const inputs = consumeParams(obj);
        const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new ConstructorFragment(_guard, "constructor", inputs, payable, gas);
      }
      return new ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **ConstructorFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === ConstructorFragmentInternal;
    }
  }
  fragments.ConstructorFragment = ConstructorFragment;
  class FallbackFragment extends Fragment {
    /**
     *  If the function can be sent value during invocation.
     */
    payable;
    constructor(guard, inputs, payable) {
      super(guard, "fallback", inputs);
      Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
      (0, index_js_1.defineProperties)(this, { payable });
    }
    /**
     *  Returns a string representation of this fallback as %%format%%.
     */
    format(format2) {
      const type2 = this.inputs.length === 0 ? "receive" : "fallback";
      if (format2 === "json") {
        const stateMutability = this.payable ? "payable" : "nonpayable";
        return JSON.stringify({ type: type2, stateMutability });
      }
      return `${type2}()${this.payable ? " payable" : ""}`;
    }
    /**
     *  Returns a new **FallbackFragment** for %%obj%%.
     */
    static from(obj) {
      if (FallbackFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return FallbackFragment.from(lex(obj));
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const errorObj = obj.toString();
        const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
        (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
        const type2 = obj.popKeyword(setify(["fallback", "receive"]));
        if (type2 === "receive") {
          const inputs2 = consumeParams(obj);
          (0, index_js_1.assertArgument)(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
          consumeKeywords(obj, setify(["payable"]));
          consumeEoi(obj);
          return new FallbackFragment(_guard, [], true);
        }
        let inputs = consumeParams(obj);
        if (inputs.length) {
          (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
        } else {
          inputs = [ParamType.from("bytes")];
        }
        const mutability = consumeMutability(obj);
        (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          const outputs = consumeParams(obj);
          (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
        }
        consumeEoi(obj);
        return new FallbackFragment(_guard, inputs, mutability === "payable");
      }
      if (obj.type === "receive") {
        return new FallbackFragment(_guard, [], true);
      }
      if (obj.type === "fallback") {
        const inputs = [ParamType.from("bytes")];
        const payable = obj.stateMutability === "payable";
        return new FallbackFragment(_guard, inputs, payable);
      }
      (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **FallbackFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === FallbackFragmentInternal;
    }
  }
  fragments.FallbackFragment = FallbackFragment;
  class FunctionFragment extends NamedFragment {
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    constant;
    /**
     *  The returned types for the result of calling this function.
     */
    outputs;
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    stateMutability;
    /**
     *  If the function can be sent value during invocation.
     */
    payable;
    /**
     *  The recommended gas limit to send when calling this function.
     */
    gas;
    /**
     *  @private
     */
    constructor(guard, name, stateMutability, inputs, outputs, gas) {
      super(guard, "function", name, inputs);
      Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
      outputs = Object.freeze(outputs.slice());
      const constant = stateMutability === "view" || stateMutability === "pure";
      const payable = stateMutability === "payable";
      (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
    }
    /**
     *  The Function selector.
     */
    get selector() {
      return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
    }
    /**
     *  Returns a string representation of this function as %%format%%.
     */
    format(format2) {
      if (format2 == null) {
        format2 = "sighash";
      }
      if (format2 === "json") {
        return JSON.stringify({
          type: "function",
          name: this.name,
          constant: this.constant,
          stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
          payable: this.payable,
          gas: this.gas != null ? this.gas : void 0,
          inputs: this.inputs.map((i) => JSON.parse(i.format(format2))),
          outputs: this.outputs.map((o) => JSON.parse(o.format(format2)))
        });
      }
      const result = [];
      if (format2 !== "sighash") {
        result.push("function");
      }
      result.push(this.name + joinParams(format2, this.inputs));
      if (format2 !== "sighash") {
        if (this.stateMutability !== "nonpayable") {
          result.push(this.stateMutability);
        }
        if (this.outputs && this.outputs.length) {
          result.push("returns");
          result.push(joinParams(format2, this.outputs));
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
      }
      return result.join(" ");
    }
    /**
     *  Return the selector for a function with %%name%% and %%params%%.
     */
    static getSelector(name, params) {
      params = (params || []).map((p) => ParamType.from(p));
      const fragment = new FunctionFragment(_guard, name, "view", params, [], null);
      return fragment.selector;
    }
    /**
     *  Returns a new **FunctionFragment** for %%obj%%.
     */
    static from(obj) {
      if (FunctionFragment.isFragment(obj)) {
        return obj;
      }
      if (typeof obj === "string") {
        try {
          return FunctionFragment.from(lex(obj));
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("function", obj);
        const inputs = consumeParams(obj);
        const mutability = consumeMutability(obj);
        let outputs = [];
        if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
          outputs = consumeParams(obj);
        }
        const gas = consumeGas(obj);
        consumeEoi(obj);
        return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
      }
      let stateMutability = obj.stateMutability;
      if (stateMutability == null) {
        stateMutability = "payable";
        if (typeof obj.constant === "boolean") {
          stateMutability = "view";
          if (!obj.constant) {
            stateMutability = "payable";
            if (typeof obj.payable === "boolean" && !obj.payable) {
              stateMutability = "nonpayable";
            }
          }
        } else if (typeof obj.payable === "boolean" && !obj.payable) {
          stateMutability = "nonpayable";
        }
      }
      return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **FunctionFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === FunctionFragmentInternal;
    }
  }
  fragments.FunctionFragment = FunctionFragment;
  class StructFragment extends NamedFragment {
    /**
     *  @private
     */
    constructor(guard, name, inputs) {
      super(guard, "struct", name, inputs);
      Object.defineProperty(this, internal, { value: StructFragmentInternal });
    }
    /**
     *  Returns a string representation of this struct as %%format%%.
     */
    format() {
      throw new Error("@TODO");
    }
    /**
     *  Returns a new **StructFragment** for %%obj%%.
     */
    static from(obj) {
      if (typeof obj === "string") {
        try {
          return StructFragment.from(lex(obj));
        } catch (error) {
          (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
        }
      } else if (obj instanceof TokenString) {
        const name = consumeName("struct", obj);
        const inputs = consumeParams(obj);
        consumeEoi(obj);
        return new StructFragment(_guard, name, inputs);
      }
      return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
    }
    // @TODO: fix this return type
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **StructFragment**.
     */
    static isFragment(value) {
      return value && value[internal] === StructFragmentInternal;
    }
  }
  fragments.StructFragment = StructFragment;
  return fragments;
}
var hasRequiredAbiCoder;
function requireAbiCoder() {
  if (hasRequiredAbiCoder) return abiCoder;
  hasRequiredAbiCoder = 1;
  Object.defineProperty(abiCoder, "__esModule", { value: true });
  abiCoder.AbiCoder = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
  const address_js_1 = /* @__PURE__ */ requireAddress$1();
  const array_js_1 = /* @__PURE__ */ requireArray();
  const boolean_js_1 = /* @__PURE__ */ requireBoolean();
  const bytes_js_1 = /* @__PURE__ */ requireBytes();
  const fixed_bytes_js_1 = /* @__PURE__ */ requireFixedBytes();
  const null_js_1 = /* @__PURE__ */ require_null();
  const number_js_1 = /* @__PURE__ */ requireNumber();
  const string_js_1 = /* @__PURE__ */ requireString();
  const tuple_js_1 = /* @__PURE__ */ requireTuple();
  const fragments_js_1 = /* @__PURE__ */ requireFragments();
  const index_js_2 = /* @__PURE__ */ requireAddress$2();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const PanicReasons = /* @__PURE__ */ new Map();
  PanicReasons.set(0, "GENERIC_PANIC");
  PanicReasons.set(1, "ASSERT_FALSE");
  PanicReasons.set(17, "OVERFLOW");
  PanicReasons.set(18, "DIVIDE_BY_ZERO");
  PanicReasons.set(33, "ENUM_RANGE_ERROR");
  PanicReasons.set(34, "BAD_STORAGE_DATA");
  PanicReasons.set(49, "STACK_UNDERFLOW");
  PanicReasons.set(50, "ARRAY_RANGE_ERROR");
  PanicReasons.set(65, "OUT_OF_MEMORY");
  PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
  const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
  const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
  let defaultCoder = null;
  let defaultMaxInflation = 1024;
  function getBuiltinCallException(action, tx, data2, abiCoder2) {
    let message2 = "missing revert data";
    let reason = null;
    const invocation = null;
    let revert = null;
    if (data2) {
      message2 = "execution reverted";
      const bytes2 = (0, index_js_3.getBytes)(data2);
      data2 = (0, index_js_3.hexlify)(data2);
      if (bytes2.length === 0) {
        message2 += " (no data present; likely require(false) occurred";
        reason = "require(false)";
      } else if (bytes2.length % 32 !== 4) {
        message2 += " (could not decode reason; invalid data length)";
      } else if ((0, index_js_3.hexlify)(bytes2.slice(0, 4)) === "0x08c379a0") {
        try {
          reason = abiCoder2.decode(["string"], bytes2.slice(4))[0];
          revert = {
            signature: "Error(string)",
            name: "Error",
            args: [reason]
          };
          message2 += `: ${JSON.stringify(reason)}`;
        } catch (error) {
          message2 += " (could not decode reason; invalid string data)";
        }
      } else if ((0, index_js_3.hexlify)(bytes2.slice(0, 4)) === "0x4e487b71") {
        try {
          const code = Number(abiCoder2.decode(["uint256"], bytes2.slice(4))[0]);
          revert = {
            signature: "Panic(uint256)",
            name: "Panic",
            args: [code]
          };
          reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
          message2 += `: ${reason}`;
        } catch (error) {
          message2 += " (could not decode panic code)";
        }
      } else {
        message2 += " (unknown custom error)";
      }
    }
    const transaction2 = {
      to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
      data: tx.data || "0x"
    };
    if (tx.from) {
      transaction2.from = (0, index_js_2.getAddress)(tx.from);
    }
    return (0, index_js_3.makeError)(message2, "CALL_EXCEPTION", {
      action,
      data: data2,
      reason,
      transaction: transaction2,
      invocation,
      revert
    });
  }
  class AbiCoder {
    #getCoder(param) {
      if (param.isArray()) {
        return new array_js_1.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
      }
      if (param.isTuple()) {
        return new tuple_js_1.TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
      }
      switch (param.baseType) {
        case "address":
          return new address_js_1.AddressCoder(param.name);
        case "bool":
          return new boolean_js_1.BooleanCoder(param.name);
        case "string":
          return new string_js_1.StringCoder(param.name);
        case "bytes":
          return new bytes_js_1.BytesCoder(param.name);
        case "":
          return new null_js_1.NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size = parseInt(match[2] || "256");
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
        return new number_js_1.NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size = parseInt(match[1]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
        return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
      }
      (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
    }
    /**
     *  Get the default values for the given %%types%%.
     *
     *  For example, a ``uint`` is by default ``0`` and ``bool``
     *  is by default ``false``.
     */
    getDefaultValue(types2) {
      const coders = types2.map((type2) => this.#getCoder(fragments_js_1.ParamType.from(type2)));
      const coder = new tuple_js_1.TupleCoder(coders, "_");
      return coder.defaultValue();
    }
    /**
     *  Encode the %%values%% as the %%types%% into ABI data.
     *
     *  @returns DataHexstring
     */
    encode(types2, values) {
      (0, index_js_1.assertArgumentCount)(values.length, types2.length, "types/values length mismatch");
      const coders = types2.map((type2) => this.#getCoder(fragments_js_1.ParamType.from(type2)));
      const coder = new tuple_js_1.TupleCoder(coders, "_");
      const writer = new abstract_coder_js_1.Writer();
      coder.encode(writer, values);
      return writer.data;
    }
    /**
     *  Decode the ABI %%data%% as the %%types%% into values.
     *
     *  If %%loose%% decoding is enabled, then strict padding is
     *  not enforced. Some older versions of Solidity incorrectly
     *  padded event data emitted from ``external`` functions.
     */
    decode(types2, data2, loose) {
      const coders = types2.map((type2) => this.#getCoder(fragments_js_1.ParamType.from(type2)));
      const coder = new tuple_js_1.TupleCoder(coders, "_");
      return coder.decode(new abstract_coder_js_1.Reader(data2, loose, defaultMaxInflation));
    }
    static _setDefaultMaxInflation(value) {
      (0, index_js_1.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
      defaultMaxInflation = value;
    }
    /**
     *  Returns the shared singleton instance of a default [[AbiCoder]].
     *
     *  On the first call, the instance is created internally.
     */
    static defaultAbiCoder() {
      if (defaultCoder == null) {
        defaultCoder = new AbiCoder();
      }
      return defaultCoder;
    }
    /**
     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
     *  result %%data%% for the [[CallExceptionAction]] %%action%% against
     *  the Transaction %%tx%%.
     */
    static getBuiltinCallException(action, tx, data2) {
      return getBuiltinCallException(action, tx, data2, AbiCoder.defaultAbiCoder());
    }
  }
  abiCoder.AbiCoder = AbiCoder;
  return abiCoder;
}
var bytes32 = {};
var hasRequiredBytes32;
function requireBytes32() {
  if (hasRequiredBytes32) return bytes32;
  hasRequiredBytes32 = 1;
  Object.defineProperty(bytes32, "__esModule", { value: true });
  bytes32.decodeBytes32String = bytes32.encodeBytes32String = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  function encodeBytes32String(text) {
    const bytes2 = (0, index_js_1.toUtf8Bytes)(text);
    if (bytes2.length > 31) {
      throw new Error("bytes32 string must be less than 32 bytes");
    }
    return (0, index_js_1.zeroPadBytes)(bytes2, 32);
  }
  bytes32.encodeBytes32String = encodeBytes32String;
  function decodeBytes32String(_bytes) {
    const data2 = (0, index_js_1.getBytes)(_bytes, "bytes");
    if (data2.length !== 32) {
      throw new Error("invalid bytes32 - not 32 bytes long");
    }
    if (data2[31] !== 0) {
      throw new Error("invalid bytes32 string - no null terminator");
    }
    let length = 31;
    while (data2[length - 1] === 0) {
      length--;
    }
    return (0, index_js_1.toUtf8String)(data2.slice(0, length));
  }
  bytes32.decodeBytes32String = decodeBytes32String;
  return bytes32;
}
var _interface = {};
var hasRequired_interface;
function require_interface() {
  if (hasRequired_interface) return _interface;
  hasRequired_interface = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;
    const index_js_1 = /* @__PURE__ */ requireCrypto();
    const index_js_2 = /* @__PURE__ */ requireHash();
    const index_js_3 = /* @__PURE__ */ requireUtils$3();
    const abi_coder_js_1 = /* @__PURE__ */ requireAbiCoder();
    const abstract_coder_js_1 = /* @__PURE__ */ requireAbstractCoder();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return abstract_coder_js_1.Result;
    } });
    const fragments_js_1 = /* @__PURE__ */ requireFragments();
    const typed_js_1 = /* @__PURE__ */ requireTyped();
    class LogDescription {
      /**
       *  The matching fragment for the ``topic0``.
       */
      fragment;
      /**
       *  The name of the Event.
       */
      name;
      /**
       *  The full Event signature.
       */
      signature;
      /**
       *  The topic hash for the Event.
       */
      topic;
      /**
       *  The arguments passed into the Event with ``emit``.
       */
      args;
      /**
       *  @_ignore:
       */
      constructor(fragment, topic, args) {
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          signature: signature2,
          topic,
          args
        });
      }
    }
    exports.LogDescription = LogDescription;
    class TransactionDescription {
      /**
       *  The matching fragment from the transaction ``data``.
       */
      fragment;
      /**
       *  The name of the Function from the transaction ``data``.
       */
      name;
      /**
       *  The arguments passed to the Function from the transaction ``data``.
       */
      args;
      /**
       *  The full Function signature from the transaction ``data``.
       */
      signature;
      /**
       *  The selector for the Function from the transaction ``data``.
       */
      selector;
      /**
       *  The ``value`` (in wei) from the transaction.
       */
      value;
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args, value) {
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature: signature2,
          selector,
          value
        });
      }
    }
    exports.TransactionDescription = TransactionDescription;
    class ErrorDescription {
      /**
       *  The matching fragment.
       */
      fragment;
      /**
       *  The name of the Error.
       */
      name;
      /**
       *  The arguments passed to the Error with ``revert``.
       */
      args;
      /**
       *  The full Error signature.
       */
      signature;
      /**
       *  The selector for the Error.
       */
      selector;
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args) {
        const name = fragment.name, signature2 = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature: signature2,
          selector
        });
      }
    }
    exports.ErrorDescription = ErrorDescription;
    class Indexed {
      /**
       *  The ``keccak256`` of the value logged.
       */
      hash;
      /**
       *  @_ignore:
       */
      _isIndexed;
      /**
       *  Returns ``true`` if %%value%% is an **Indexed**.
       *
       *  This provides a Type Guard for property access.
       */
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
      /**
       *  @_ignore:
       */
      constructor(hash2) {
        (0, index_js_3.defineProperties)(this, { hash: hash2, _isIndexed: true });
      }
    }
    exports.Indexed = Indexed;
    const PanicReasons = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
    };
    const BuiltinErrors = {
      "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: ["string"],
        reason: (message2) => {
          return `reverted with reason string ${JSON.stringify(message2)}`;
        }
      },
      "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: ["uint256"],
        reason: (code) => {
          let reason = "unknown panic code";
          if (code >= 0 && code <= 255 && PanicReasons[code.toString()]) {
            reason = PanicReasons[code.toString()];
          }
          return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
      }
    };
    class Interface {
      /**
       *  All the Contract ABI members (i.e. methods, events, errors, etc).
       */
      fragments;
      /**
       *  The Contract constructor.
       */
      deploy;
      /**
       *  The Fallback method, if any.
       */
      fallback;
      /**
       *  If receiving ether is supported.
       */
      receive;
      #errors;
      #events;
      #functions;
      //    #structs: Map<string, StructFragment>;
      #abiCoder;
      /**
       *  Create a new Interface for the %%fragments%%.
       */
      constructor(fragments2) {
        let abi2 = [];
        if (typeof fragments2 === "string") {
          abi2 = JSON.parse(fragments2);
        } else {
          abi2 = fragments2;
        }
        this.#functions = /* @__PURE__ */ new Map();
        this.#errors = /* @__PURE__ */ new Map();
        this.#events = /* @__PURE__ */ new Map();
        const frags = [];
        for (const a of abi2) {
          try {
            frags.push(fragments_js_1.Fragment.from(a));
          } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
          }
        }
        (0, index_js_3.defineProperties)(this, {
          fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        this.#abiCoder = this.getAbiCoder();
        this.fragments.forEach((fragment, index) => {
          let bucket;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                console.log("duplicate definition - constructor");
                return;
              }
              (0, index_js_3.defineProperties)(this, { deploy: fragment });
              return;
            case "fallback":
              if (fragment.inputs.length === 0) {
                receive = true;
              } else {
                (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                fallback = fragment;
                receive = fallback.payable;
              }
              return;
            case "function":
              bucket = this.#functions;
              break;
            case "event":
              bucket = this.#events;
              break;
            case "error":
              bucket = this.#errors;
              break;
            default:
              return;
          }
          const signature2 = fragment.format();
          if (bucket.has(signature2)) {
            return;
          }
          bucket.set(signature2, fragment);
        });
        if (!this.deploy) {
          (0, index_js_3.defineProperties)(this, {
            deploy: fragments_js_1.ConstructorFragment.from("constructor()")
          });
        }
        (0, index_js_3.defineProperties)(this, { fallback, receive });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */
      format(minimal) {
        const format2 = minimal ? "minimal" : "full";
        const abi2 = this.fragments.map((f) => f.format(format2));
        return abi2;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */
      formatJson() {
        const abi2 = this.fragments.map((f) => f.format("json"));
        return JSON.stringify(abi2.map((j) => JSON.parse(j)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */
      getAbiCoder() {
        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      #getFunction(key, values, forceUnique) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          for (const fragment of this.#functions.values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#functions) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            const lastValue = values.length > 0 ? values[values.length - 1] : null;
            let valueLength = values.length;
            let allowOptions = true;
            if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
              allowOptions = false;
              valueLength--;
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs.length;
              if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!typed_js_1.Typed.isTyped(values[j])) {
                  continue;
                }
                if (j >= inputs.length) {
                  if (values[j].type === "overrides") {
                    continue;
                  }
                  matching.splice(i, 1);
                  break;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
            const lastArg = values[values.length - 1];
            if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
              matching.splice(0, 1);
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = this.#functions.get(fragments_js_1.FunctionFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */
      getFunctionName(key) {
        const fragment = this.#getFunction(key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */
      hasFunction(key) {
        return !!this.#getFunction(key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */
      getFunction(key, values) {
        return this.#getFunction(key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */
      forEachFunction(callback) {
        const names2 = Array.from(this.#functions.keys());
        names2.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names2.length; i++) {
          const name = names2[i];
          callback(this.#functions.get(name), i);
        }
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      #getEvent(key, values, forceUnique) {
        if ((0, index_js_3.isHexString)(key)) {
          const eventTopic = key.toLowerCase();
          for (const fragment of this.#events.values()) {
            if (eventTopic === fragment.topicHash) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#events) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (values) {
            for (let i = matching.length - 1; i >= 0; i--) {
              if (matching[i].inputs.length < values.length) {
                matching.splice(i, 1);
              }
            }
            for (let i = matching.length - 1; i >= 0; i--) {
              const inputs = matching[i].inputs;
              for (let j = 0; j < values.length; j++) {
                if (!typed_js_1.Typed.isTyped(values[j])) {
                  continue;
                }
                if (values[j].type !== inputs[j].baseType) {
                  matching.splice(i, 1);
                  break;
                }
              }
            }
          }
          if (matching.length === 0) {
            return null;
          }
          if (matching.length > 1 && forceUnique) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
          }
          return matching[0];
        }
        const result = this.#events.get(fragments_js_1.EventFragment.from(key).format());
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */
      getEventName(key) {
        const fragment = this.#getEvent(key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */
      hasEvent(key) {
        return !!this.#getEvent(key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */
      getEvent(key, values) {
        return this.#getEvent(key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */
      forEachEvent(callback) {
        const names2 = Array.from(this.#events.keys());
        names2.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names2.length; i++) {
          const name = names2[i];
          callback(this.#events.get(name), i);
        }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */
      getError(key, values) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          if (BuiltinErrors[selector]) {
            return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);
          }
          for (const fragment of this.#errors.values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of this.#errors) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (matching.length === 0) {
            if (key === "Error") {
              return fragments_js_1.ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic") {
              return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
            }
            return null;
          } else if (matching.length > 1) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
          }
          return matching[0];
        }
        key = fragments_js_1.ErrorFragment.from(key).format();
        if (key === "Error(string)") {
          return fragments_js_1.ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic(uint256)") {
          return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
        }
        const result = this.#errors.get(key);
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */
      forEachError(callback) {
        const names2 = Array.from(this.#errors.keys());
        names2.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names2.length; i++) {
          const name = names2[i];
          callback(this.#errors.get(name), i);
        }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
      		getSelector(fragment: ErrorFragment | FunctionFragment): string {
      		    if (typeof(fragment) === "string") {
      		        const matches: Array<Fragment> = [ ];
      
      		        try { matches.push(this.getFunction(fragment)); } catch (error) { }
      		        try { matches.push(this.getError(<string>fragment)); } catch (_) { }
      
      		        if (matches.length === 0) {
      		            logger.throwArgumentError("unknown fragment", "key", fragment);
      		        } else if (matches.length > 1) {
      		            logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
      		        }
      
      		        fragment = matches[0];
      		    }
      
      		    return dataSlice(id(fragment.format()), 0, 4);
      		}
      		    */
      // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */
      _decodeParams(params, data2) {
        return this.#abiCoder.decode(params, data2);
      }
      _encodeParams(params, values) {
        return this.#abiCoder.encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeErrorResult(fragment, data2) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data2, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data2);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data2, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */
      decodeFunctionData(fragment, data2) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data2, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data2);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data2, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */
      encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeFunctionResult(fragment, data2) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        let message2 = "invalid length for result data";
        const bytes2 = (0, index_js_3.getBytesCopy)(data2);
        if (bytes2.length % 32 === 0) {
          try {
            return this.#abiCoder.decode(fragment.outputs, bytes2);
          } catch (error) {
            message2 = "could not decode result data";
          }
        }
        (0, index_js_3.assert)(false, message2, "BAD_DATA", {
          value: (0, index_js_3.hexlify)(bytes2),
          info: { method: fragment.name, signature: fragment.format() }
        });
      }
      makeError(_data, tx) {
        const data2 = (0, index_js_3.getBytes)(_data, "data");
        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data2);
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
          const selector = (0, index_js_3.hexlify)(data2.slice(0, 4));
          const ef = this.getError(selector);
          if (ef) {
            try {
              const args = this.#abiCoder.decode(ef.inputs, data2.slice(4));
              error.revert = {
                name: ef.name,
                signature: ef.format(),
                args
              };
              error.reason = error.revert.signature;
              error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
              error.message = `execution reverted (coult not decode custom error)`;
            }
          }
        }
        const parsed = this.parseTransaction(tx);
        if (parsed) {
          error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
          };
        }
        return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
        const topics = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return (0, index_js_2.id)(value);
          } else if (param.type === "bytes") {
            return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          } else if (param.type.match(/^u?int/)) {
            value = (0, index_js_3.toBeHex)(value);
          } else if (param.type.match(/^bytes/)) {
            value = (0, index_js_3.zeroPadBytes)(value, 32);
          } else if (param.type === "address") {
            this.#abiCoder.encode(["address"], [value]);
          }
          return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
        };
        values.forEach((value, index) => {
          const param = fragment.inputs[index];
          if (!param.indexed) {
            (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push((0, index_js_2.id)(value));
            } else if (param.type === "bytes") {
              topics.push((0, index_js_1.keccak256)(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this.#abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this.#abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data2, topics) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        if (topics != null && !fragment.anonymous) {
          const eventTopic = fragment.topicHash;
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
          topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, index_js_3.concat)(topics)) : null;
        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data2, true);
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index) => {
          let value = null;
          if (param.indexed) {
            if (resultIndexed == null) {
              value = new Indexed(null);
            } else if (dynamic[index]) {
              value = new Indexed(resultIndexed[indexedIndex++]);
            } else {
              try {
                value = resultIndexed[indexedIndex++];
              } catch (error) {
                value = error;
              }
            }
          } else {
            try {
              value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              value = error;
            }
          }
          values.push(value);
          keys.push(param.name || null);
        });
        return abstract_coder_js_1.Result.fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */
      parseTransaction(tx) {
        const data2 = (0, index_js_3.getBytes)(tx.data, "tx.data");
        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, index_js_3.hexlify)(data2.slice(0, 4)));
        if (!fragment) {
          return null;
        }
        const args = this.#abiCoder.decode(fragment.inputs, data2.slice(4));
        return new TransactionDescription(fragment, fragment.selector, args, value);
      }
      parseCallResult(data2) {
        throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */
      parseLog(log2) {
        const fragment = this.getEvent(log2.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log2.data, log2.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching error cannot be found, returns null.
       */
      parseError(data2) {
        const hexData = (0, index_js_3.hexlify)(data2);
        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
        if (!fragment) {
          return null;
        }
        const args = this.#abiCoder.decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
        return new ErrorDescription(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */
      static from(value) {
        if (value instanceof Interface) {
          return value;
        }
        if (typeof value === "string") {
          return new Interface(JSON.parse(value));
        }
        if (typeof value.formatJson === "function") {
          return new Interface(value.formatJson());
        }
        if (typeof value.format === "function") {
          return new Interface(value.format("json"));
        }
        return new Interface(value);
      }
    }
    exports.Interface = Interface;
  })(_interface);
  return _interface;
}
var hasRequiredAbi;
function requireAbi() {
  if (hasRequiredAbi) return abi;
  hasRequiredAbi = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typed = exports.Result = exports.TransactionDescription = exports.LogDescription = exports.ErrorDescription = exports.Interface = exports.Indexed = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.Fragment = exports.FallbackFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.encodeBytes32String = exports.decodeBytes32String = exports.AbiCoder = void 0;
    var abi_coder_js_1 = /* @__PURE__ */ requireAbiCoder();
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_js_1.AbiCoder;
    } });
    var bytes32_js_1 = /* @__PURE__ */ requireBytes32();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.encodeBytes32String;
    } });
    var fragments_js_1 = /* @__PURE__ */ requireFragments();
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return fragments_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return fragments_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return fragments_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return fragments_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return fragments_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return fragments_js_1.StructFragment;
    } });
    var interface_js_1 = /* @__PURE__ */ require_interface();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return interface_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return interface_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return interface_js_1.Interface;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return interface_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return interface_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return interface_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return interface_js_1.Result;
    } });
    var typed_js_1 = /* @__PURE__ */ requireTyped();
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return typed_js_1.Typed;
    } });
  })(abi);
  return abi;
}
var contract$1 = {};
var contract = {};
var provider = {};
var hasRequiredProvider;
function requireProvider() {
  if (hasRequiredProvider) return provider;
  hasRequiredProvider = 1;
  Object.defineProperty(provider, "__esModule", { value: true });
  provider.TransactionResponse = provider.TransactionReceipt = provider.Log = provider.Block = provider.copyRequest = provider.FeeData = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const index_js_2 = /* @__PURE__ */ requireTransaction();
  const BN_0 = BigInt(0);
  function getValue(value) {
    if (value == null) {
      return null;
    }
    return value;
  }
  function toJson(value) {
    if (value == null) {
      return null;
    }
    return value.toString();
  }
  class FeeData {
    /**
     *  The gas price for legacy networks.
     */
    gasPrice;
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    maxFeePerGas;
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    maxPriorityFeePerGas;
    /**
     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
     *  %%maxPriorityFeePerGas%%.
     */
    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
      (0, index_js_1.defineProperties)(this, {
        gasPrice: getValue(gasPrice),
        maxFeePerGas: getValue(maxFeePerGas),
        maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
      });
    }
    /**
     *  Returns a JSON-friendly value.
     */
    toJSON() {
      const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
      return {
        _type: "FeeData",
        gasPrice: toJson(gasPrice),
        maxFeePerGas: toJson(maxFeePerGas),
        maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
      };
    }
  }
  provider.FeeData = FeeData;
  function copyRequest(req) {
    const result = {};
    if (req.to) {
      result.to = req.to;
    }
    if (req.from) {
      result.from = req.from;
    }
    if (req.data) {
      result.data = (0, index_js_1.hexlify)(req.data);
    }
    const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
    for (const key of bigIntKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
    }
    const numberKeys = "type,nonce".split(/,/);
    for (const key of numberKeys) {
      if (!(key in req) || req[key] == null) {
        continue;
      }
      result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
    }
    if (req.accessList) {
      result.accessList = (0, index_js_2.accessListify)(req.accessList);
    }
    if (req.authorizationList) {
      result.authorizationList = req.authorizationList.slice();
    }
    if ("blockTag" in req) {
      result.blockTag = req.blockTag;
    }
    if ("enableCcipRead" in req) {
      result.enableCcipRead = !!req.enableCcipRead;
    }
    if ("customData" in req) {
      result.customData = req.customData;
    }
    if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
      result.blobVersionedHashes = req.blobVersionedHashes.slice();
    }
    if ("kzg" in req) {
      result.kzg = req.kzg;
    }
    if ("blobs" in req && req.blobs) {
      result.blobs = req.blobs.map((b) => {
        if ((0, index_js_1.isBytesLike)(b)) {
          return (0, index_js_1.hexlify)(b);
        }
        return Object.assign({}, b);
      });
    }
    return result;
  }
  provider.copyRequest = copyRequest;
  class Block {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */
    provider;
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */
    number;
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */
    hash;
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */
    timestamp;
    /**
     *  The block hash of the parent block.
     */
    parentHash;
    /**
     *  The hash tree root of the parent beacon block for the given
     *  execution block. See [[link-eip-4788]].
     */
    parentBeaconBlockRoot;
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */
    nonce;
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */
    difficulty;
    /**
     *  The total gas limit for this block.
     */
    gasLimit;
    /**
     *  The total gas used in this block.
     */
    gasUsed;
    /**
     *  The root hash for the global state after applying changes
     *  in this block.
     */
    stateRoot;
    /**
     *  The hash of the transaction receipts trie.
     */
    receiptsRoot;
    /**
     *  The total amount of blob gas consumed by the transactions
     *  within the block. See [[link-eip-4844]].
     */
    blobGasUsed;
    /**
     *  The running total of blob gas consumed in excess of the
     *  target, prior to the block. See [[link-eip-4844]].
     */
    excessBlobGas;
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */
    miner;
    /**
     *  The latest RANDAO mix of the post beacon state of
     *  the previous block.
     */
    prevRandao;
    /**
     *  Any extra data the validator wished to include.
     */
    extraData;
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */
    baseFeePerGas;
    #transactions;
    /**
     *  Create a new **Block** object.
     *
     *  This should generally not be necessary as the unless implementing a
     *  low-level library.
     */
    constructor(block, provider2) {
      this.#transactions = block.transactions.map((tx) => {
        if (typeof tx !== "string") {
          return new TransactionResponse(tx, provider2);
        }
        return tx;
      });
      (0, index_js_1.defineProperties)(this, {
        provider: provider2,
        hash: getValue(block.hash),
        number: block.number,
        timestamp: block.timestamp,
        parentHash: block.parentHash,
        parentBeaconBlockRoot: block.parentBeaconBlockRoot,
        nonce: block.nonce,
        difficulty: block.difficulty,
        gasLimit: block.gasLimit,
        gasUsed: block.gasUsed,
        blobGasUsed: block.blobGasUsed,
        excessBlobGas: block.excessBlobGas,
        miner: block.miner,
        prevRandao: getValue(block.prevRandao),
        extraData: block.extraData,
        baseFeePerGas: getValue(block.baseFeePerGas),
        stateRoot: block.stateRoot,
        receiptsRoot: block.receiptsRoot
      });
    }
    /**
     *  Returns the list of transaction hashes, in the order
     *  they were executed within the block.
     */
    get transactions() {
      return this.#transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return tx.hash;
      });
    }
    /**
     *  Returns the complete transactions, in the order they
     *  were executed within the block.
     *
     *  This is only available for blocks which prefetched
     *  transactions, by passing ``true`` to %%prefetchTxs%%
     *  into [[Provider-getBlock]].
     */
    get prefetchedTransactions() {
      const txs = this.#transactions.slice();
      if (txs.length === 0) {
        return [];
      }
      (0, index_js_1.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
        operation: "transactionResponses()"
      });
      return txs;
    }
    /**
     *  Returns a JSON-friendly value.
     */
    toJSON() {
      const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
      return {
        _type: "Block",
        baseFeePerGas: toJson(baseFeePerGas),
        difficulty: toJson(difficulty),
        extraData,
        gasLimit: toJson(gasLimit),
        gasUsed: toJson(gasUsed),
        blobGasUsed: toJson(this.blobGasUsed),
        excessBlobGas: toJson(this.excessBlobGas),
        hash: hash2,
        miner,
        prevRandao,
        nonce,
        number: number2,
        parentHash,
        timestamp,
        parentBeaconBlockRoot,
        stateRoot,
        receiptsRoot,
        transactions
      };
    }
    [Symbol.iterator]() {
      let index = 0;
      const txs = this.transactions;
      return {
        next: () => {
          if (index < this.length) {
            return {
              value: txs[index++],
              done: false
            };
          }
          return { value: void 0, done: true };
        }
      };
    }
    /**
     *  The number of transactions in this block.
     */
    get length() {
      return this.#transactions.length;
    }
    /**
     *  The [[link-js-date]] this block was included at.
     */
    get date() {
      if (this.timestamp == null) {
        return null;
      }
      return new Date(this.timestamp * 1e3);
    }
    /**
     *  Get the transaction at %%indexe%% within this block.
     */
    async getTransaction(indexOrHash) {
      let tx = void 0;
      if (typeof indexOrHash === "number") {
        tx = this.#transactions[indexOrHash];
      } else {
        const hash2 = indexOrHash.toLowerCase();
        for (const v of this.#transactions) {
          if (typeof v === "string") {
            if (v !== hash2) {
              continue;
            }
            tx = v;
            break;
          } else {
            if (v.hash !== hash2) {
              continue;
            }
            tx = v;
            break;
          }
        }
      }
      if (tx == null) {
        throw new Error("no such tx");
      }
      if (typeof tx === "string") {
        return await this.provider.getTransaction(tx);
      } else {
        return tx;
      }
    }
    /**
     *  If a **Block** was fetched with a request to include the transactions
     *  this will allow synchronous access to those transactions.
     *
     *  If the transactions were not prefetched, this will throw.
     */
    getPrefetchedTransaction(indexOrHash) {
      const txs = this.prefetchedTransactions;
      if (typeof indexOrHash === "number") {
        return txs[indexOrHash];
      }
      indexOrHash = indexOrHash.toLowerCase();
      for (const tx of txs) {
        if (tx.hash === indexOrHash) {
          return tx;
        }
      }
      (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
    }
    /**
     *  Returns true if this block been mined. This provides a type guard
     *  for all properties on a [[MinedBlock]].
     */
    isMined() {
      return !!this.hash;
    }
    /**
     *  Returns true if this block is an [[link-eip-2930]] block.
     */
    isLondon() {
      return !!this.baseFeePerGas;
    }
    /**
     *  @_ignore:
     */
    orphanedEvent() {
      if (!this.isMined()) {
        throw new Error("");
      }
      return createOrphanedBlockFilter(this);
    }
  }
  provider.Block = Block;
  class Log {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    provider;
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    transactionHash;
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    blockHash;
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    blockNumber;
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    removed;
    /**
     *  The address of the contract that emitted this log.
     */
    address;
    /**
     *  The data included in this log when it was emitted.
     */
    data;
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    topics;
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    index;
    /**
     *  The index within the transaction of this log.
     */
    transactionIndex;
    /**
     *  @_ignore:
     */
    constructor(log2, provider2) {
      this.provider = provider2;
      const topics = Object.freeze(log2.topics.slice());
      (0, index_js_1.defineProperties)(this, {
        transactionHash: log2.transactionHash,
        blockHash: log2.blockHash,
        blockNumber: log2.blockNumber,
        removed: log2.removed,
        address: log2.address,
        data: log2.data,
        topics,
        index: log2.index,
        transactionIndex: log2.transactionIndex
      });
    }
    /**
     *  Returns a JSON-compatible object.
     */
    toJSON() {
      const { address: address2, blockHash, blockNumber, data: data2, index, removed, topics, transactionHash, transactionIndex } = this;
      return {
        _type: "log",
        address: address2,
        blockHash,
        blockNumber,
        data: data2,
        index,
        removed,
        topics,
        transactionHash,
        transactionIndex
      };
    }
    /**
     *  Returns the block that this log occurred in.
     */
    async getBlock() {
      const block = await this.provider.getBlock(this.blockHash);
      (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
      return block;
    }
    /**
     *  Returns the transaction that this log occurred in.
     */
    async getTransaction() {
      const tx = await this.provider.getTransaction(this.transactionHash);
      (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
      return tx;
    }
    /**
     *  Returns the transaction receipt fot the transaction that this
     *  log occurred in.
     */
    async getTransactionReceipt() {
      const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
      (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
      return receipt;
    }
    /**
     *  @_ignore:
     */
    removedEvent() {
      return createRemovedLogFilter(this);
    }
  }
  provider.Log = Log;
  class TransactionReceipt {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    provider;
    /**
     *  The address the transaction was sent to.
     */
    to;
    /**
     *  The sender of the transaction.
     */
    from;
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    contractAddress;
    /**
     *  The transaction hash.
     */
    hash;
    /**
     *  The index of this transaction within the block transactions.
     */
    index;
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    blockHash;
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    blockNumber;
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    logsBloom;
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    gasUsed;
    /**
     *  The gas used for BLObs. See [[link-eip-4844]].
     */
    blobGasUsed;
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    cumulativeGasUsed;
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    gasPrice;
    /**
     *  The price paid per BLOB in gas. See [[link-eip-4844]].
     */
    blobGasPrice;
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    type;
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    status;
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    root;
    #logs;
    /**
     *  @_ignore:
     */
    constructor(tx, provider2) {
      this.#logs = Object.freeze(tx.logs.map((log2) => {
        return new Log(log2, provider2);
      }));
      let gasPrice = BN_0;
      if (tx.effectiveGasPrice != null) {
        gasPrice = tx.effectiveGasPrice;
      } else if (tx.gasPrice != null) {
        gasPrice = tx.gasPrice;
      }
      (0, index_js_1.defineProperties)(this, {
        provider: provider2,
        to: tx.to,
        from: tx.from,
        contractAddress: tx.contractAddress,
        hash: tx.hash,
        index: tx.index,
        blockHash: tx.blockHash,
        blockNumber: tx.blockNumber,
        logsBloom: tx.logsBloom,
        gasUsed: tx.gasUsed,
        cumulativeGasUsed: tx.cumulativeGasUsed,
        blobGasUsed: tx.blobGasUsed,
        gasPrice,
        blobGasPrice: tx.blobGasPrice,
        type: tx.type,
        //byzantium: tx.byzantium,
        status: tx.status,
        root: tx.root
      });
    }
    /**
     *  The logs for this transaction.
     */
    get logs() {
      return this.#logs;
    }
    /**
     *  Returns a JSON-compatible representation.
     */
    toJSON() {
      const {
        to,
        from,
        contractAddress: contractAddress2,
        hash: hash2,
        index,
        blockHash,
        blockNumber,
        logsBloom,
        logs,
        //byzantium, 
        status,
        root
      } = this;
      return {
        _type: "TransactionReceipt",
        blockHash,
        blockNumber,
        //byzantium, 
        contractAddress: contractAddress2,
        cumulativeGasUsed: toJson(this.cumulativeGasUsed),
        from,
        gasPrice: toJson(this.gasPrice),
        blobGasUsed: toJson(this.blobGasUsed),
        blobGasPrice: toJson(this.blobGasPrice),
        gasUsed: toJson(this.gasUsed),
        hash: hash2,
        index,
        logs,
        logsBloom,
        root,
        status,
        to
      };
    }
    /**
     *  @_ignore:
     */
    get length() {
      return this.logs.length;
    }
    [Symbol.iterator]() {
      let index = 0;
      return {
        next: () => {
          if (index < this.length) {
            return { value: this.logs[index++], done: false };
          }
          return { value: void 0, done: true };
        }
      };
    }
    /**
     *  The total fee for this transaction, in wei.
     */
    get fee() {
      return this.gasUsed * this.gasPrice;
    }
    /**
     *  Resolves to the block this transaction occurred in.
     */
    async getBlock() {
      const block = await this.provider.getBlock(this.blockHash);
      if (block == null) {
        throw new Error("TODO");
      }
      return block;
    }
    /**
     *  Resolves to the transaction this transaction occurred in.
     */
    async getTransaction() {
      const tx = await this.provider.getTransaction(this.hash);
      if (tx == null) {
        throw new Error("TODO");
      }
      return tx;
    }
    /**
     *  Resolves to the return value of the execution of this transaction.
     *
     *  Support for this feature is limited, as it requires an archive node
     *  with the ``debug_`` or ``trace_`` API enabled.
     */
    async getResult() {
      return await this.provider.getTransactionResult(this.hash);
    }
    /**
     *  Resolves to the number of confirmations this transaction has.
     */
    async confirmations() {
      return await this.provider.getBlockNumber() - this.blockNumber + 1;
    }
    /**
     *  @_ignore:
     */
    removedEvent() {
      return createRemovedTransactionFilter(this);
    }
    /**
     *  @_ignore:
     */
    reorderedEvent(other) {
      (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
      return createReorderedTransactionFilter(this, other);
    }
  }
  provider.TransactionReceipt = TransactionReceipt;
  class TransactionResponse {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    provider;
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    blockNumber;
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    blockHash;
    /**
     *  The index within the block that this transaction resides at.
     */
    index;
    /**
     *  The transaction hash.
     */
    hash;
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    type;
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    to;
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    from;
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    nonce;
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    gasLimit;
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    gasPrice;
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    maxPriorityFeePerGas;
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    maxFeePerGas;
    /**
     *  The [[link-eip-4844]] max fee per BLOb gas.
     */
    maxFeePerBlobGas;
    /**
     *  The data.
     */
    data;
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    value;
    /**
     *  The chain ID.
     */
    chainId;
    /**
     *  The signature.
     */
    signature;
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    accessList;
    /**
     *  The [[link-eip-4844]] BLOb versioned hashes.
     */
    blobVersionedHashes;
    /**
     *  The [[link-eip-7702]] authorizations (if any).
     */
    authorizationList;
    #startBlock;
    /**
     *  @_ignore:
     */
    constructor(tx, provider2) {
      this.provider = provider2;
      this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
      this.blockHash = tx.blockHash != null ? tx.blockHash : null;
      this.hash = tx.hash;
      this.index = tx.index;
      this.type = tx.type;
      this.from = tx.from;
      this.to = tx.to || null;
      this.gasLimit = tx.gasLimit;
      this.nonce = tx.nonce;
      this.data = tx.data;
      this.value = tx.value;
      this.gasPrice = tx.gasPrice;
      this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
      this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
      this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
      this.chainId = tx.chainId;
      this.signature = tx.signature;
      this.accessList = tx.accessList != null ? tx.accessList : null;
      this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
      this.authorizationList = tx.authorizationList != null ? tx.authorizationList : null;
      this.#startBlock = -1;
    }
    /**
     *  Returns a JSON-compatible representation of this transaction.
     */
    toJSON() {
      const { blockNumber, blockHash, index, hash: hash2, type: type2, to, from, nonce, data: data2, signature: signature2, accessList, blobVersionedHashes } = this;
      return {
        _type: "TransactionResponse",
        accessList,
        blockNumber,
        blockHash,
        blobVersionedHashes,
        chainId: toJson(this.chainId),
        data: data2,
        from,
        gasLimit: toJson(this.gasLimit),
        gasPrice: toJson(this.gasPrice),
        hash: hash2,
        maxFeePerGas: toJson(this.maxFeePerGas),
        maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
        maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
        nonce,
        signature: signature2,
        to,
        index,
        type: type2,
        value: toJson(this.value)
      };
    }
    /**
     *  Resolves to the Block that this transaction was included in.
     *
     *  This will return null if the transaction has not been included yet.
     */
    async getBlock() {
      let blockNumber = this.blockNumber;
      if (blockNumber == null) {
        const tx = await this.getTransaction();
        if (tx) {
          blockNumber = tx.blockNumber;
        }
      }
      if (blockNumber == null) {
        return null;
      }
      const block = this.provider.getBlock(blockNumber);
      if (block == null) {
        throw new Error("TODO");
      }
      return block;
    }
    /**
     *  Resolves to this transaction being re-requested from the
     *  provider. This can be used if you have an unmined transaction
     *  and wish to get an up-to-date populated instance.
     */
    async getTransaction() {
      return this.provider.getTransaction(this.hash);
    }
    /**
     *  Resolve to the number of confirmations this transaction has.
     */
    async confirmations() {
      if (this.blockNumber == null) {
        const { tx, blockNumber: blockNumber2 } = await (0, index_js_1.resolveProperties)({
          tx: this.getTransaction(),
          blockNumber: this.provider.getBlockNumber()
        });
        if (tx == null || tx.blockNumber == null) {
          return 0;
        }
        return blockNumber2 - tx.blockNumber + 1;
      }
      const blockNumber = await this.provider.getBlockNumber();
      return blockNumber - this.blockNumber + 1;
    }
    /**
     *  Resolves once this transaction has been mined and has
     *  %%confirms%% blocks including it (default: ``1``) with an
     *  optional %%timeout%%.
     *
     *  This can resolve to ``null`` only if %%confirms%% is ``0``
     *  and the transaction has not been mined, otherwise this will
     *  wait until enough confirmations have completed.
     */
    async wait(_confirms, _timeout) {
      const confirms = _confirms == null ? 1 : _confirms;
      const timeout = _timeout == null ? 0 : _timeout;
      let startBlock = this.#startBlock;
      let nextScan = -1;
      let stopScanning = startBlock === -1 ? true : false;
      const checkReplacement = async () => {
        if (stopScanning) {
          return null;
        }
        const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
          blockNumber: this.provider.getBlockNumber(),
          nonce: this.provider.getTransactionCount(this.from)
        });
        if (nonce < this.nonce) {
          startBlock = blockNumber;
          return;
        }
        if (stopScanning) {
          return null;
        }
        const mined = await this.getTransaction();
        if (mined && mined.blockNumber != null) {
          return;
        }
        if (nextScan === -1) {
          nextScan = startBlock - 3;
          if (nextScan < this.#startBlock) {
            nextScan = this.#startBlock;
          }
        }
        while (nextScan <= blockNumber) {
          if (stopScanning) {
            return null;
          }
          const block = await this.provider.getBlock(nextScan, true);
          if (block == null) {
            return;
          }
          for (const hash2 of block) {
            if (hash2 === this.hash) {
              return;
            }
          }
          for (let i = 0; i < block.length; i++) {
            const tx = await block.getTransaction(i);
            if (tx.from === this.from && tx.nonce === this.nonce) {
              if (stopScanning) {
                return null;
              }
              const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
              if (receipt2 == null) {
                return;
              }
              if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                return;
              }
              let reason = "replaced";
              if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                reason = "repriced";
              } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) {
                reason = "cancelled";
              }
              (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: reason === "replaced" || reason === "cancelled",
                reason,
                replacement: tx.replaceableTransaction(startBlock),
                hash: tx.hash,
                receipt: receipt2
              });
            }
          }
          nextScan++;
        }
        return;
      };
      const checkReceipt = (receipt2) => {
        if (receipt2 == null || receipt2.status !== 0) {
          return receipt2;
        }
        (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
          action: "sendTransaction",
          data: null,
          reason: null,
          invocation: null,
          revert: null,
          transaction: {
            to: receipt2.to,
            from: receipt2.from,
            data: ""
            // @TODO: in v7, split out sendTransaction properties
          },
          receipt: receipt2
        });
      };
      const receipt = await this.provider.getTransactionReceipt(this.hash);
      if (confirms === 0) {
        return checkReceipt(receipt);
      }
      if (receipt) {
        if (confirms === 1 || await receipt.confirmations() >= confirms) {
          return checkReceipt(receipt);
        }
      } else {
        await checkReplacement();
        if (confirms === 0) {
          return null;
        }
      }
      const waiter = new Promise((resolve, reject) => {
        const cancellers = [];
        const cancel = () => {
          cancellers.forEach((c) => c());
        };
        cancellers.push(() => {
          stopScanning = true;
        });
        if (timeout > 0) {
          const timer = setTimeout(() => {
            cancel();
            reject((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
          }, timeout);
          cancellers.push(() => {
            clearTimeout(timer);
          });
        }
        const txListener = async (receipt2) => {
          if (await receipt2.confirmations() >= confirms) {
            cancel();
            try {
              resolve(checkReceipt(receipt2));
            } catch (error) {
              reject(error);
            }
          }
        };
        cancellers.push(() => {
          this.provider.off(this.hash, txListener);
        });
        this.provider.on(this.hash, txListener);
        if (startBlock >= 0) {
          const replaceListener = async () => {
            try {
              await checkReplacement();
            } catch (error) {
              if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
                cancel();
                reject(error);
                return;
              }
            }
            if (!stopScanning) {
              this.provider.once("block", replaceListener);
            }
          };
          cancellers.push(() => {
            this.provider.off("block", replaceListener);
          });
          this.provider.once("block", replaceListener);
        }
      });
      return await waiter;
    }
    /**
     *  Returns ``true`` if this transaction has been included.
     *
     *  This is effective only as of the time the TransactionResponse
     *  was instantiated. To get up-to-date information, use
     *  [[getTransaction]].
     *
     *  This provides a Type Guard that this transaction will have
     *  non-null property values for properties that are null for
     *  unmined transactions.
     */
    isMined() {
      return this.blockHash != null;
    }
    /**
     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
     *  transaction.
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */
    isLegacy() {
      return this.type === 0;
    }
    /**
     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
     *  transaction. See [[link-eip-2070]].
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */
    isBerlin() {
      return this.type === 1;
    }
    /**
     *  Returns true if the transaction is a London (i.e. ``type == 2``)
     *  transaction. See [[link-eip-1559]].
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */
    isLondon() {
      return this.type === 2;
    }
    /**
     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
     *  transaction. See [[link-eip-4844]].
     */
    isCancun() {
      return this.type === 3;
    }
    /**
     *  Returns a filter which can be used to listen for orphan events
     *  that evict this transaction.
     */
    removedEvent() {
      (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      return createRemovedTransactionFilter(this);
    }
    /**
     *  Returns a filter which can be used to listen for orphan events
     *  that re-order this event against %%other%%.
     */
    reorderedEvent(other) {
      (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
      return createReorderedTransactionFilter(this, other);
    }
    /**
     *  Returns a new TransactionResponse instance which has the ability to
     *  detect (and throw an error) if the transaction is replaced, which
     *  will begin scanning at %%startBlock%%.
     *
     *  This should generally not be used by developers and is intended
     *  primarily for internal use. Setting an incorrect %%startBlock%% can
     *  have devastating performance consequences if used incorrectly.
     */
    replaceableTransaction(startBlock) {
      (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
      const tx = new TransactionResponse(this, this.provider);
      tx.#startBlock = startBlock;
      return tx;
    }
  }
  provider.TransactionResponse = TransactionResponse;
  function createOrphanedBlockFilter(block) {
    return { orphan: "drop-block", hash: block.hash, number: block.number };
  }
  function createReorderedTransactionFilter(tx, other) {
    return { orphan: "reorder-transaction", tx, other };
  }
  function createRemovedTransactionFilter(tx) {
    return { orphan: "drop-transaction", tx };
  }
  function createRemovedLogFilter(log2) {
    return { orphan: "drop-log", log: {
      transactionHash: log2.transactionHash,
      blockHash: log2.blockHash,
      blockNumber: log2.blockNumber,
      address: log2.address,
      data: log2.data,
      topics: Object.freeze(log2.topics.slice()),
      index: log2.index
    } };
  }
  return provider;
}
var wrappers = {};
var hasRequiredWrappers;
function requireWrappers() {
  if (hasRequiredWrappers) return wrappers;
  hasRequiredWrappers = 1;
  Object.defineProperty(wrappers, "__esModule", { value: true });
  wrappers.ContractEventPayload = wrappers.ContractUnknownEventPayload = wrappers.ContractTransactionResponse = wrappers.ContractTransactionReceipt = wrappers.UndecodedEventLog = wrappers.EventLog = void 0;
  const provider_js_1 = /* @__PURE__ */ requireProvider();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  class EventLog extends provider_js_1.Log {
    /**
     *  The Contract Interface.
     */
    interface;
    /**
     *  The matching event.
     */
    fragment;
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    args;
    /**
     * @_ignore:
     */
    constructor(log2, iface, fragment) {
      super(log2, log2.provider);
      const args = iface.decodeEventLog(fragment, log2.data, log2.topics);
      (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
    }
    /**
     *  The name of the event.
     */
    get eventName() {
      return this.fragment.name;
    }
    /**
     *  The signature of the event.
     */
    get eventSignature() {
      return this.fragment.format();
    }
  }
  wrappers.EventLog = EventLog;
  class UndecodedEventLog extends provider_js_1.Log {
    /**
     *  The error encounted when trying to decode the log.
     */
    error;
    /**
     * @_ignore:
     */
    constructor(log2, error) {
      super(log2, log2.provider);
      (0, index_js_1.defineProperties)(this, { error });
    }
  }
  wrappers.UndecodedEventLog = UndecodedEventLog;
  class ContractTransactionReceipt extends provider_js_1.TransactionReceipt {
    #iface;
    /**
     *  @_ignore:
     */
    constructor(iface, provider2, tx) {
      super(tx, provider2);
      this.#iface = iface;
    }
    /**
     *  The parsed logs for any [[Log]] which has a matching event in the
     *  Contract ABI.
     */
    get logs() {
      return super.logs.map((log2) => {
        const fragment = log2.topics.length ? this.#iface.getEvent(log2.topics[0]) : null;
        if (fragment) {
          try {
            return new EventLog(log2, this.#iface, fragment);
          } catch (error) {
            return new UndecodedEventLog(log2, error);
          }
        }
        return log2;
      });
    }
  }
  wrappers.ContractTransactionReceipt = ContractTransactionReceipt;
  class ContractTransactionResponse extends provider_js_1.TransactionResponse {
    #iface;
    /**
     *  @_ignore:
     */
    constructor(iface, provider2, tx) {
      super(tx, provider2);
      this.#iface = iface;
    }
    /**
     *  Resolves once this transaction has been mined and has
     *  %%confirms%% blocks including it (default: ``1``) with an
     *  optional %%timeout%%.
     *
     *  This can resolve to ``null`` only if %%confirms%% is ``0``
     *  and the transaction has not been mined, otherwise this will
     *  wait until enough confirmations have completed.
     */
    async wait(confirms, timeout) {
      const receipt = await super.wait(confirms, timeout);
      if (receipt == null) {
        return null;
      }
      return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
    }
  }
  wrappers.ContractTransactionResponse = ContractTransactionResponse;
  class ContractUnknownEventPayload extends index_js_1.EventPayload {
    /**
     *  The log with no matching events.
     */
    log;
    /**
     *  @_event:
     */
    constructor(contract2, listener, filter2, log2) {
      super(contract2, listener, filter2);
      (0, index_js_1.defineProperties)(this, { log: log2 });
    }
    /**
     *  Resolves to the block the event occured in.
     */
    async getBlock() {
      return await this.log.getBlock();
    }
    /**
     *  Resolves to the transaction the event occured in.
     */
    async getTransaction() {
      return await this.log.getTransaction();
    }
    /**
     *  Resolves to the transaction receipt the event occured in.
     */
    async getTransactionReceipt() {
      return await this.log.getTransactionReceipt();
    }
  }
  wrappers.ContractUnknownEventPayload = ContractUnknownEventPayload;
  class ContractEventPayload extends ContractUnknownEventPayload {
    /**
     *  @_ignore:
     */
    constructor(contract2, listener, filter2, fragment, _log) {
      super(contract2, listener, filter2, new EventLog(_log, contract2.interface, fragment));
      const args = contract2.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
      (0, index_js_1.defineProperties)(this, { args, fragment });
    }
    /**
     *  The event name.
     */
    get eventName() {
      return this.fragment.name;
    }
    /**
     *  The event signature.
     */
    get eventSignature() {
      return this.fragment.format();
    }
  }
  wrappers.ContractEventPayload = ContractEventPayload;
  return wrappers;
}
var hasRequiredContract$1;
function requireContract$1() {
  if (hasRequiredContract$1) return contract;
  hasRequiredContract$1 = 1;
  Object.defineProperty(contract, "__esModule", { value: true });
  contract.Contract = contract.BaseContract = contract.resolveArgs = contract.copyOverrides = void 0;
  const index_js_1 = /* @__PURE__ */ requireAbi();
  const index_js_2 = /* @__PURE__ */ requireAddress$2();
  const provider_js_1 = /* @__PURE__ */ requireProvider();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const wrappers_js_1 = /* @__PURE__ */ requireWrappers();
  const BN_0 = BigInt(0);
  function canCall(value) {
    return value && typeof value.call === "function";
  }
  function canEstimate(value) {
    return value && typeof value.estimateGas === "function";
  }
  function canResolve(value) {
    return value && typeof value.resolveName === "function";
  }
  function canSend(value) {
    return value && typeof value.sendTransaction === "function";
  }
  function getResolver(value) {
    if (value != null) {
      if (canResolve(value)) {
        return value;
      }
      if (value.provider) {
        return value.provider;
      }
    }
    return void 0;
  }
  class PreparedTopicFilter {
    #filter;
    fragment;
    constructor(contract2, fragment, args) {
      (0, index_js_3.defineProperties)(this, { fragment });
      if (fragment.inputs.length < args.length) {
        throw new Error("too many arguments");
      }
      const runner = getRunner(contract2.runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      this.#filter = async function() {
        const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
          const arg = args[index];
          if (arg == null) {
            return null;
          }
          return param.walkAsync(args[index], (type2, value) => {
            if (type2 === "address") {
              if (Array.isArray(value)) {
                return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
              }
              return (0, index_js_2.resolveAddress)(value, resolver);
            }
            return value;
          });
        }));
        return contract2.interface.encodeFilterTopics(fragment, resolvedArgs);
      }();
    }
    getTopicFilter() {
      return this.#filter;
    }
  }
  function getRunner(value, feature) {
    if (value == null) {
      return null;
    }
    if (typeof value[feature] === "function") {
      return value;
    }
    if (value.provider && typeof value.provider[feature] === "function") {
      return value.provider;
    }
    return null;
  }
  function getProvider(value) {
    if (value == null) {
      return null;
    }
    return value.provider || null;
  }
  async function copyOverrides(arg, allowed) {
    const _overrides = index_js_1.Typed.dereference(arg, "overrides");
    (0, index_js_3.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
    const overrides = (0, provider_js_1.copyRequest)(_overrides);
    (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
    (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
    if (overrides.from) {
      overrides.from = overrides.from;
    }
    return overrides;
  }
  contract.copyOverrides = copyOverrides;
  async function resolveArgs(_runner, inputs, args) {
    const runner = getRunner(_runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    return await Promise.all(inputs.map((param, index) => {
      return param.walkAsync(args[index], (type2, value) => {
        value = index_js_1.Typed.dereference(value, type2);
        if (type2 === "address") {
          return (0, index_js_2.resolveAddress)(value, resolver);
        }
        return value;
      });
    }));
  }
  contract.resolveArgs = resolveArgs;
  function buildWrappedFallback(contract2) {
    const populateTransaction = async function(overrides) {
      const tx = await copyOverrides(overrides, ["data"]);
      tx.to = await contract2.getAddress();
      if (tx.from) {
        tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract2.runner));
      }
      const iface = contract2.interface;
      const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, "overrides.value") === BN_0;
      const noData = (tx.data || "0x") === "0x";
      if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
        (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
      }
      (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
      const payable = iface.receive || iface.fallback && iface.fallback.payable;
      (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
      (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
      return tx;
    };
    const staticCall = async function(overrides) {
      const runner = getRunner(contract2.runner, "call");
      (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await populateTransaction(overrides);
      try {
        return await runner.call(tx);
      } catch (error) {
        if ((0, index_js_3.isCallException)(error) && error.data) {
          throw contract2.interface.makeError(error.data, tx);
        }
        throw error;
      }
    };
    const send2 = async function(overrides) {
      const runner = contract2.runner;
      (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await populateTransaction(overrides));
      const provider2 = getProvider(contract2.runner);
      return new wrappers_js_1.ContractTransactionResponse(contract2.interface, provider2, tx);
    };
    const estimateGas = async function(overrides) {
      const runner = getRunner(contract2.runner, "estimateGas");
      (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await populateTransaction(overrides));
    };
    const method = async (overrides) => {
      return await send2(overrides);
    };
    (0, index_js_3.defineProperties)(method, {
      _contract: contract2,
      estimateGas,
      populateTransaction,
      send: send2,
      staticCall
    });
    return method;
  }
  function buildWrappedMethod(contract2, key) {
    const getFragment = function(...args) {
      const fragment = contract2.interface.getFunction(key, args);
      (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key, args }
      });
      return fragment;
    };
    const populateTransaction = async function(...args) {
      const fragment = getFragment(...args);
      let overrides = {};
      if (fragment.inputs.length + 1 === args.length) {
        overrides = await copyOverrides(args.pop());
        if (overrides.from) {
          overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract2.runner));
        }
      }
      if (fragment.inputs.length !== args.length) {
        throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
      }
      const resolvedArgs = await resolveArgs(contract2.runner, fragment.inputs, args);
      return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
        to: contract2.getAddress(),
        data: contract2.interface.encodeFunctionData(fragment, resolvedArgs)
      }));
    };
    const staticCall = async function(...args) {
      const result = await staticCallResult(...args);
      if (result.length === 1) {
        return result[0];
      }
      return result;
    };
    const send2 = async function(...args) {
      const runner = contract2.runner;
      (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
      const tx = await runner.sendTransaction(await populateTransaction(...args));
      const provider2 = getProvider(contract2.runner);
      return new wrappers_js_1.ContractTransactionResponse(contract2.interface, provider2, tx);
    };
    const estimateGas = async function(...args) {
      const runner = getRunner(contract2.runner, "estimateGas");
      (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
      return await runner.estimateGas(await populateTransaction(...args));
    };
    const staticCallResult = async function(...args) {
      const runner = getRunner(contract2.runner, "call");
      (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
      const tx = await populateTransaction(...args);
      let result = "0x";
      try {
        result = await runner.call(tx);
      } catch (error) {
        if ((0, index_js_3.isCallException)(error) && error.data) {
          throw contract2.interface.makeError(error.data, tx);
        }
        throw error;
      }
      const fragment = getFragment(...args);
      return contract2.interface.decodeFunctionResult(fragment, result);
    };
    const method = async (...args) => {
      const fragment = getFragment(...args);
      if (fragment.constant) {
        return await staticCall(...args);
      }
      return await send2(...args);
    };
    (0, index_js_3.defineProperties)(method, {
      name: contract2.interface.getFunctionName(key),
      _contract: contract2,
      _key: key,
      getFragment,
      estimateGas,
      populateTransaction,
      send: send2,
      staticCall,
      staticCallResult
    });
    Object.defineProperty(method, "fragment", {
      configurable: false,
      enumerable: true,
      get: () => {
        const fragment = contract2.interface.getFunction(key);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key }
        });
        return fragment;
      }
    });
    return method;
  }
  function buildWrappedEvent(contract2, key) {
    const getFragment = function(...args) {
      const fragment = contract2.interface.getEvent(key, args);
      (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key, args }
      });
      return fragment;
    };
    const method = function(...args) {
      return new PreparedTopicFilter(contract2, getFragment(...args), args);
    };
    (0, index_js_3.defineProperties)(method, {
      name: contract2.interface.getEventName(key),
      _contract: contract2,
      _key: key,
      getFragment
    });
    Object.defineProperty(method, "fragment", {
      configurable: false,
      enumerable: true,
      get: () => {
        const fragment = contract2.interface.getEvent(key);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key }
        });
        return fragment;
      }
    });
    return method;
  }
  const internal = Symbol.for("_ethersInternal_contract");
  const internalValues = /* @__PURE__ */ new WeakMap();
  function setInternal(contract2, values) {
    internalValues.set(contract2[internal], values);
  }
  function getInternal(contract2) {
    return internalValues.get(contract2[internal]);
  }
  function isDeferred(value) {
    return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
  }
  async function getSubInfo(contract2, event) {
    let topics;
    let fragment = null;
    if (Array.isArray(event)) {
      const topicHashify = function(name) {
        if ((0, index_js_3.isHexString)(name, 32)) {
          return name;
        }
        const fragment2 = contract2.interface.getEvent(name);
        (0, index_js_3.assertArgument)(fragment2, "unknown fragment", "name", name);
        return fragment2.topicHash;
      };
      topics = event.map((e) => {
        if (e == null) {
          return null;
        }
        if (Array.isArray(e)) {
          return e.map(topicHashify);
        }
        return topicHashify(e);
      });
    } else if (event === "*") {
      topics = [null];
    } else if (typeof event === "string") {
      if ((0, index_js_3.isHexString)(event, 32)) {
        topics = [event];
      } else {
        fragment = contract2.interface.getEvent(event);
        (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
        topics = [fragment.topicHash];
      }
    } else if (isDeferred(event)) {
      topics = await event.getTopicFilter();
    } else if ("fragment" in event) {
      fragment = event.fragment;
      topics = [fragment.topicHash];
    } else {
      (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
    }
    topics = topics.map((t) => {
      if (t == null) {
        return null;
      }
      if (Array.isArray(t)) {
        const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
        if (items.length === 1) {
          return items[0];
        }
        items.sort();
        return items;
      }
      return t.toLowerCase();
    });
    const tag = topics.map((t) => {
      if (t == null) {
        return "null";
      }
      if (Array.isArray(t)) {
        return t.join("|");
      }
      return t;
    }).join("&");
    return { fragment, tag, topics };
  }
  async function hasSub(contract2, event) {
    const { subs } = getInternal(contract2);
    return subs.get((await getSubInfo(contract2, event)).tag) || null;
  }
  async function getSub(contract2, operation, event) {
    const provider2 = getProvider(contract2.runner);
    (0, index_js_3.assert)(provider2, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
    const { fragment, tag, topics } = await getSubInfo(contract2, event);
    const { addr, subs } = getInternal(contract2);
    let sub = subs.get(tag);
    if (!sub) {
      const address2 = addr ? addr : contract2;
      const filter2 = { address: address2, topics };
      const listener = (log2) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = contract2.interface.getEvent(log2.topics[0]);
          } catch (error) {
          }
        }
        if (foundFragment) {
          const _foundFragment = foundFragment;
          const args = fragment ? contract2.interface.decodeEventLog(fragment, log2.data, log2.topics) : [];
          emit2(contract2, event, args, (listener2) => {
            return new wrappers_js_1.ContractEventPayload(contract2, listener2, event, _foundFragment, log2);
          });
        } else {
          emit2(contract2, event, [], (listener2) => {
            return new wrappers_js_1.ContractUnknownEventPayload(contract2, listener2, event, log2);
          });
        }
      };
      let starting = [];
      const start = () => {
        if (starting.length) {
          return;
        }
        starting.push(provider2.on(filter2, listener));
      };
      const stop = async () => {
        if (starting.length == 0) {
          return;
        }
        let started = starting;
        starting = [];
        await Promise.all(started);
        provider2.off(filter2, listener);
      };
      sub = { tag, listeners: [], start, stop };
      subs.set(tag, sub);
    }
    return sub;
  }
  let lastEmit = Promise.resolve();
  async function _emit(contract2, event, args, payloadFunc) {
    await lastEmit;
    const sub = await hasSub(contract2, event);
    if (!sub) {
      return false;
    }
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once: once2 }) => {
      const passArgs = Array.from(args);
      if (payloadFunc) {
        passArgs.push(payloadFunc(once2 ? null : listener));
      }
      try {
        listener.call(contract2, ...passArgs);
      } catch (error) {
      }
      return !once2;
    });
    if (sub.listeners.length === 0) {
      sub.stop();
      getInternal(contract2).subs.delete(sub.tag);
    }
    return count > 0;
  }
  async function emit2(contract2, event, args, payloadFunc) {
    try {
      await lastEmit;
    } catch (error) {
    }
    const resultPromise = _emit(contract2, event, args, payloadFunc);
    lastEmit = resultPromise;
    return await resultPromise;
  }
  const passProperties = ["then"];
  class BaseContract {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    target;
    /**
     *  The contract Interface.
     */
    interface;
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    runner;
    /**
     *  All the Events available on this contract.
     */
    filters;
    /**
     *  @_ignore:
     */
    [internal];
    /**
     *  The fallback or receive function if any.
     */
    fallback;
    /**
     *  Creates a new contract connected to %%target%% with the %%abi%% and
     *  optionally connected to a %%runner%% to perform operations on behalf
     *  of.
     */
    constructor(target, abi2, runner, _deployTx) {
      (0, index_js_3.assertArgument)(typeof target === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
      if (runner == null) {
        runner = null;
      }
      const iface = index_js_1.Interface.from(abi2);
      (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
      Object.defineProperty(this, internal, { value: {} });
      let addrPromise;
      let addr = null;
      let deployTx = null;
      if (_deployTx) {
        const provider2 = getProvider(runner);
        deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider2, _deployTx);
      }
      let subs = /* @__PURE__ */ new Map();
      if (typeof target === "string") {
        if ((0, index_js_3.isHexString)(target)) {
          addr = target;
          addrPromise = Promise.resolve(target);
        } else {
          const resolver = getRunner(runner, "resolveName");
          if (!canResolve(resolver)) {
            throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
              operation: "resolveName"
            });
          }
          addrPromise = resolver.resolveName(target).then((addr2) => {
            if (addr2 == null) {
              throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                value: target
              });
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
      } else {
        addrPromise = target.getAddress().then((addr2) => {
          if (addr2 == null) {
            throw new Error("TODO");
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
      setInternal(this, { addrPromise, addr, deployTx, subs });
      const filters = new Proxy({}, {
        get: (target2, prop, receiver) => {
          if (typeof prop === "symbol" || passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target2, prop, receiver);
          }
          try {
            return this.getEvent(prop);
          } catch (error) {
            if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
              throw error;
            }
          }
          return void 0;
        },
        has: (target2, prop) => {
          if (passProperties.indexOf(prop) >= 0) {
            return Reflect.has(target2, prop);
          }
          return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
        }
      });
      (0, index_js_3.defineProperties)(this, { filters });
      (0, index_js_3.defineProperties)(this, {
        fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
      });
      return new Proxy(this, {
        get: (target2, prop, receiver) => {
          if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target2, prop, receiver);
          }
          try {
            return target2.getFunction(prop);
          } catch (error) {
            if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
              throw error;
            }
          }
          return void 0;
        },
        has: (target2, prop) => {
          if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
            return Reflect.has(target2, prop);
          }
          return target2.interface.hasFunction(prop);
        }
      });
    }
    /**
     *  Return a new Contract instance with the same target and ABI, but
     *  a different %%runner%%.
     */
    connect(runner) {
      return new BaseContract(this.target, this.interface, runner);
    }
    /**
     *  Return a new Contract instance with the same ABI and runner, but
     *  a different %%target%%.
     */
    attach(target) {
      return new BaseContract(target, this.interface, this.runner);
    }
    /**
     *  Return the resolved address of this Contract.
     */
    async getAddress() {
      return await getInternal(this).addrPromise;
    }
    /**
     *  Return the deployed bytecode or null if no bytecode is found.
     */
    async getDeployedCode() {
      const provider2 = getProvider(this.runner);
      (0, index_js_3.assert)(provider2, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
      const code = await provider2.getCode(await this.getAddress());
      if (code === "0x") {
        return null;
      }
      return code;
    }
    /**
     *  Resolve to this Contract once the bytecode has been deployed, or
     *  resolve immediately if already deployed.
     */
    async waitForDeployment() {
      const deployTx = this.deploymentTransaction();
      if (deployTx) {
        await deployTx.wait();
        return this;
      }
      const code = await this.getDeployedCode();
      if (code != null) {
        return this;
      }
      const provider2 = getProvider(this.runner);
      (0, index_js_3.assert)(provider2 != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
      return new Promise((resolve, reject) => {
        const checkCode = async () => {
          try {
            const code2 = await this.getDeployedCode();
            if (code2 != null) {
              return resolve(this);
            }
            provider2.once("block", checkCode);
          } catch (error) {
            reject(error);
          }
        };
        checkCode();
      });
    }
    /**
     *  Return the transaction used to deploy this contract.
     *
     *  This is only available if this instance was returned from a
     *  [[ContractFactory]].
     */
    deploymentTransaction() {
      return getInternal(this).deployTx;
    }
    /**
     *  Return the function for a given name. This is useful when a contract
     *  method name conflicts with a JavaScript name such as ``prototype`` or
     *  when using a Contract programatically.
     */
    getFunction(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      const func = buildWrappedMethod(this, key);
      return func;
    }
    /**
     *  Return the event for a given name. This is useful when a contract
     *  event name conflicts with a JavaScript name such as ``prototype`` or
     *  when using a Contract programatically.
     */
    getEvent(key) {
      if (typeof key !== "string") {
        key = key.format();
      }
      return buildWrappedEvent(this, key);
    }
    /**
     *  @_ignore:
     */
    async queryTransaction(hash2) {
      throw new Error("@TODO");
    }
    /*
    	    // @TODO: this is a non-backwards compatible change, but will be added
    	    //        in v7 and in a potential SmartContract class in an upcoming
    	    //        v6 release
    	    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
    	        const provider = getProvider(this.runner);
    	        assert(provider, "contract runner does not have a provider",
    	            "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
    
    	        const receipt = await provider.getTransactionReceipt(hash);
    	        if (receipt == null) { return null; }
    
    	        return new ContractTransactionReceipt(this.interface, provider, receipt);
    	    }
    	    */
    /**
     *  Provide historic access to event data for %%event%% in the range
     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
     *  inclusive.
     */
    async queryFilter(event, fromBlock, toBlock) {
      if (fromBlock == null) {
        fromBlock = 0;
      }
      if (toBlock == null) {
        toBlock = "latest";
      }
      const { addr, addrPromise } = getInternal(this);
      const address2 = addr ? addr : await addrPromise;
      const { fragment, topics } = await getSubInfo(this, event);
      const filter2 = { address: address2, topics, fromBlock, toBlock };
      const provider2 = getProvider(this.runner);
      (0, index_js_3.assert)(provider2, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
      return (await provider2.getLogs(filter2)).map((log2) => {
        let foundFragment = fragment;
        if (foundFragment == null) {
          try {
            foundFragment = this.interface.getEvent(log2.topics[0]);
          } catch (error) {
          }
        }
        if (foundFragment) {
          try {
            return new wrappers_js_1.EventLog(log2, this.interface, foundFragment);
          } catch (error) {
            return new wrappers_js_1.UndecodedEventLog(log2, error);
          }
        }
        return new provider_js_1.Log(log2, provider2);
      });
    }
    /**
     *  Add an event %%listener%% for the %%event%%.
     */
    async on(event, listener) {
      const sub = await getSub(this, "on", event);
      sub.listeners.push({ listener, once: false });
      sub.start();
      return this;
    }
    /**
     *  Add an event %%listener%% for the %%event%%, but remove the listener
     *  after it is fired once.
     */
    async once(event, listener) {
      const sub = await getSub(this, "once", event);
      sub.listeners.push({ listener, once: true });
      sub.start();
      return this;
    }
    /**
     *  Emit an %%event%% calling all listeners with %%args%%.
     *
     *  Resolves to ``true`` if any listeners were called.
     */
    async emit(event, ...args) {
      return await emit2(this, event, args, null);
    }
    /**
     *  Resolves to the number of listeners of %%event%% or the total number
     *  of listeners if unspecified.
     */
    async listenerCount(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return 0;
        }
        return sub.listeners.length;
      }
      const { subs } = getInternal(this);
      let total = 0;
      for (const { listeners: listeners2 } of subs.values()) {
        total += listeners2.length;
      }
      return total;
    }
    /**
     *  Resolves to the listeners subscribed to %%event%% or all listeners
     *  if unspecified.
     */
    async listeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return [];
        }
        return sub.listeners.map(({ listener }) => listener);
      }
      const { subs } = getInternal(this);
      let result = [];
      for (const { listeners: listeners2 } of subs.values()) {
        result = result.concat(listeners2.map(({ listener }) => listener));
      }
      return result;
    }
    /**
     *  Remove the %%listener%% from the listeners for %%event%% or remove
     *  all listeners if unspecified.
     */
    async off(event, listener) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      if (listener) {
        const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
        if (index >= 0) {
          sub.listeners.splice(index, 1);
        }
      }
      if (listener == null || sub.listeners.length === 0) {
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      }
      return this;
    }
    /**
     *  Remove all the listeners for %%event%% or remove all listeners if
     *  unspecified.
     */
    async removeAllListeners(event) {
      if (event) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        sub.stop();
        getInternal(this).subs.delete(sub.tag);
      } else {
        const { subs } = getInternal(this);
        for (const { tag, stop } of subs.values()) {
          stop();
          subs.delete(tag);
        }
      }
      return this;
    }
    /**
     *  Alias for [on].
     */
    async addListener(event, listener) {
      return await this.on(event, listener);
    }
    /**
     *  Alias for [off].
     */
    async removeListener(event, listener) {
      return await this.off(event, listener);
    }
    /**
     *  Create a new Class for the %%abi%%.
     */
    static buildClass(abi2) {
      class CustomContract extends BaseContract {
        constructor(address2, runner = null) {
          super(address2, abi2, runner);
        }
      }
      return CustomContract;
    }
    /**
     *  Create a new BaseContract with a specified Interface.
     */
    static from(target, abi2, runner) {
      if (runner == null) {
        runner = null;
      }
      const contract2 = new this(target, abi2, runner);
      return contract2;
    }
  }
  contract.BaseContract = BaseContract;
  function _ContractBase() {
    return BaseContract;
  }
  class Contract extends _ContractBase() {
  }
  contract.Contract = Contract;
  return contract;
}
var factory = {};
var hasRequiredFactory;
function requireFactory() {
  if (hasRequiredFactory) return factory;
  hasRequiredFactory = 1;
  Object.defineProperty(factory, "__esModule", { value: true });
  factory.ContractFactory = void 0;
  const index_js_1 = /* @__PURE__ */ requireAbi();
  const index_js_2 = /* @__PURE__ */ requireAddress$2();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const contract_js_1 = /* @__PURE__ */ requireContract$1();
  class ContractFactory {
    /**
     *  The Contract Interface.
     */
    interface;
    /**
     *  The Contract deployment bytecode. Often called the initcode.
     */
    bytecode;
    /**
     *  The ContractRunner to deploy the Contract as.
     */
    runner;
    /**
     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
     *  optionally connected to %%runner%%.
     *
     *  The %%bytecode%% may be the ``bytecode`` property within the
     *  standard Solidity JSON output.
     */
    constructor(abi2, bytecode, runner) {
      const iface = index_js_1.Interface.from(abi2);
      if (bytecode instanceof Uint8Array) {
        bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
      } else {
        if (typeof bytecode === "object") {
          bytecode = bytecode.object;
        }
        if (!bytecode.startsWith("0x")) {
          bytecode = "0x" + bytecode;
        }
        bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
      }
      (0, index_js_3.defineProperties)(this, {
        bytecode,
        interface: iface,
        runner: runner || null
      });
    }
    attach(target) {
      return new contract_js_1.BaseContract(target, this.interface, this.runner);
    }
    /**
     *  Resolves to the transaction to deploy the contract, passing %%args%%
     *  into the constructor.
     */
    async getDeployTransaction(...args) {
      let overrides = {};
      const fragment = this.interface.deploy;
      if (fragment.inputs.length + 1 === args.length) {
        overrides = await (0, contract_js_1.copyOverrides)(args.pop());
      }
      if (fragment.inputs.length !== args.length) {
        throw new Error("incorrect number of arguments to constructor");
      }
      const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
      const data2 = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
      return Object.assign({}, overrides, { data: data2 });
    }
    /**
     *  Resolves to the Contract deployed by passing %%args%% into the
     *  constructor.
     *
     *  This will resolve to the Contract before it has been deployed to the
     *  network, so the [[BaseContract-waitForDeployment]] should be used before
     *  sending any transactions to it.
     */
    async deploy(...args) {
      const tx = await this.getDeployTransaction(...args);
      (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
        operation: "sendTransaction"
      });
      const sentTx = await this.runner.sendTransaction(tx);
      const address2 = (0, index_js_2.getCreateAddress)(sentTx);
      return new contract_js_1.BaseContract(address2, this.interface, this.runner, sentTx);
    }
    /**
     *  Return a new **ContractFactory** with the same ABI and bytecode,
     *  but connected to %%runner%%.
     */
    connect(runner) {
      return new ContractFactory(this.interface, this.bytecode, runner);
    }
    /**
     *  Create a new **ContractFactory** from the standard Solidity JSON output.
     */
    static fromSolidity(output, runner) {
      (0, index_js_3.assertArgument)(output != null, "bad compiler output", "output", output);
      if (typeof output === "string") {
        output = JSON.parse(output);
      }
      const abi2 = output.abi;
      let bytecode = "";
      if (output.bytecode) {
        bytecode = output.bytecode;
      } else if (output.evm && output.evm.bytecode) {
        bytecode = output.evm.bytecode;
      }
      return new this(abi2, bytecode, runner);
    }
  }
  factory.ContractFactory = ContractFactory;
  return factory;
}
var hasRequiredContract;
function requireContract() {
  if (hasRequiredContract) return contract$1;
  hasRequiredContract = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UndecodedEventLog = exports.EventLog = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractUnknownEventPayload = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
    var contract_js_1 = /* @__PURE__ */ requireContract$1();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return contract_js_1.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_js_1.Contract;
    } });
    var factory_js_1 = /* @__PURE__ */ requireFactory();
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return factory_js_1.ContractFactory;
    } });
    var wrappers_js_1 = /* @__PURE__ */ requireWrappers();
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return wrappers_js_1.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return wrappers_js_1.UndecodedEventLog;
    } });
  })(contract$1);
  return contract$1;
}
var providers = {};
var abstractProvider = {};
var ensResolver = {};
var hasRequiredEnsResolver;
function requireEnsResolver() {
  if (hasRequiredEnsResolver) return ensResolver;
  hasRequiredEnsResolver = 1;
  Object.defineProperty(ensResolver, "__esModule", { value: true });
  ensResolver.EnsResolver = ensResolver.BasicMulticoinProviderPlugin = ensResolver.MulticoinProviderPlugin = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireConstants();
  const index_js_3 = /* @__PURE__ */ requireContract();
  const index_js_4 = /* @__PURE__ */ requireHash();
  const index_js_5 = /* @__PURE__ */ requireUtils$3();
  function getIpfsLink(link2) {
    if (link2.match(/^ipfs:\/\/ipfs\//i)) {
      link2 = link2.substring(12);
    } else if (link2.match(/^ipfs:\/\//i)) {
      link2 = link2.substring(7);
    } else {
      (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link2);
    }
    return `https://gateway.ipfs.io/ipfs/${link2}`;
  }
  class MulticoinProviderPlugin {
    /**
     *  The name.
     */
    name;
    /**
     *  Creates a new **MulticoinProviderPluing** for %%name%%.
     */
    constructor(name) {
      (0, index_js_5.defineProperties)(this, { name });
    }
    connect(proivder) {
      return this;
    }
    /**
     *  Returns ``true`` if %%coinType%% is supported by this plugin.
     */
    supportsCoinType(coinType) {
      return false;
    }
    /**
     *  Resolves to the encoded %%address%% for %%coinType%%.
     */
    async encodeAddress(coinType, address2) {
      throw new Error("unsupported coin");
    }
    /**
     *  Resolves to the decoded %%data%% for %%coinType%%.
     */
    async decodeAddress(coinType, data2) {
      throw new Error("unsupported coin");
    }
  }
  ensResolver.MulticoinProviderPlugin = MulticoinProviderPlugin;
  const BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
  class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {
    /**
     *  Creates a new **BasicMulticoinProviderPlugin**.
     */
    constructor() {
      super(BasicMulticoinPluginId);
    }
  }
  ensResolver.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
  const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
  const matchers = [
    new RegExp("^(https)://(.*)$", "i"),
    new RegExp("^(data):(.*)$", "i"),
    matcherIpfs,
    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
  ];
  class EnsResolver {
    /**
     *  The connected provider.
     */
    provider;
    /**
     *  The address of the resolver.
     */
    address;
    /**
     *  The name this resolver was resolved against.
     */
    name;
    // For EIP-2544 names, the ancestor that provided the resolver
    #supports2544;
    #resolver;
    constructor(provider2, address2, name) {
      (0, index_js_5.defineProperties)(this, { provider: provider2, address: address2, name });
      this.#supports2544 = null;
      this.#resolver = new index_js_3.Contract(address2, [
        "function supportsInterface(bytes4) view returns (bool)",
        "function resolve(bytes, bytes) view returns (bytes)",
        "function addr(bytes32) view returns (address)",
        "function addr(bytes32, uint) view returns (bytes)",
        "function text(bytes32, string) view returns (string)",
        "function contenthash(bytes32) view returns (bytes)"
      ], provider2);
    }
    /**
     *  Resolves to true if the resolver supports wildcard resolution.
     */
    async supportsWildcard() {
      if (this.#supports2544 == null) {
        this.#supports2544 = (async () => {
          try {
            return await this.#resolver.supportsInterface("0x9061b923");
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
              return false;
            }
            this.#supports2544 = null;
            throw error;
          }
        })();
      }
      return await this.#supports2544;
    }
    async #fetch(funcName, params) {
      params = (params || []).slice();
      const iface = this.#resolver.interface;
      params.unshift((0, index_js_4.namehash)(this.name));
      let fragment = null;
      if (await this.supportsWildcard()) {
        fragment = iface.getFunction(funcName);
        (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
          info: { funcName }
        });
        params = [
          (0, index_js_4.dnsEncode)(this.name, 255),
          iface.encodeFunctionData(fragment, params)
        ];
        funcName = "resolve(bytes,bytes)";
      }
      params.push({
        enableCcipRead: true
      });
      try {
        const result = await this.#resolver[funcName](...params);
        if (fragment) {
          return iface.decodeFunctionResult(fragment, result)[0];
        }
        return result;
      } catch (error) {
        if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
          throw error;
        }
      }
      return null;
    }
    /**
     *  Resolves to the address for %%coinType%% or null if the
     *  provided %%coinType%% has not been configured.
     */
    async getAddress(coinType) {
      if (coinType == null) {
        coinType = 60;
      }
      if (coinType === 60) {
        try {
          const result = await this.#fetch("addr(bytes32)");
          if (result == null || result === index_js_2.ZeroAddress) {
            return null;
          }
          return result;
        } catch (error) {
          if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
      }
      if (coinType >= 0 && coinType < 2147483648) {
        let ethCoinType = coinType + 2147483648;
        const data3 = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
        if ((0, index_js_5.isHexString)(data3, 20)) {
          return (0, index_js_1.getAddress)(data3);
        }
      }
      let coinPlugin = null;
      for (const plugin of this.provider.plugins) {
        if (!(plugin instanceof MulticoinProviderPlugin)) {
          continue;
        }
        if (plugin.supportsCoinType(coinType)) {
          coinPlugin = plugin;
          break;
        }
      }
      if (coinPlugin == null) {
        return null;
      }
      const data2 = await this.#fetch("addr(bytes32,uint)", [coinType]);
      if (data2 == null || data2 === "0x") {
        return null;
      }
      const address2 = await coinPlugin.decodeAddress(coinType, data2);
      if (address2 != null) {
        return address2;
      }
      (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
        operation: `getAddress(${coinType})`,
        info: { coinType, data: data2 }
      });
    }
    /**
     *  Resolves to the EIP-634 text record for %%key%%, or ``null``
     *  if unconfigured.
     */
    async getText(key) {
      const data2 = await this.#fetch("text(bytes32,string)", [key]);
      if (data2 == null || data2 === "0x") {
        return null;
      }
      return data2;
    }
    /**
     *  Rsolves to the content-hash or ``null`` if unconfigured.
     */
    async getContentHash() {
      const data2 = await this.#fetch("contenthash(bytes32)");
      if (data2 == null || data2 === "0x") {
        return null;
      }
      const ipfs = data2.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
      if (ipfs) {
        const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
        const length = parseInt(ipfs[4], 16);
        if (ipfs[5].length === length * 2) {
          return `${scheme}://${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
        }
      }
      const swarm = data2.match(/^0xe40101fa011b20([0-9a-f]*)$/);
      if (swarm && swarm[1].length === 64) {
        return `bzz://${swarm[1]}`;
      }
      (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
        operation: "getContentHash()",
        info: { data: data2 }
      });
    }
    /**
     *  Resolves to the avatar url or ``null`` if the avatar is either
     *  unconfigured or incorrectly configured (e.g. references an NFT
     *  not owned by the address).
     *
     *  If diagnosing issues with configurations, the [[_getAvatar]]
     *  method may be useful.
     */
    async getAvatar() {
      const avatar = await this._getAvatar();
      return avatar.url;
    }
    /**
     *  When resolving an avatar, there are many steps involved, such
     *  fetching metadata and possibly validating ownership of an
     *  NFT.
     *
     *  This method can be used to examine each step and the value it
     *  was working from.
     */
    async _getAvatar() {
      const linkage = [{ type: "name", value: this.name }];
      try {
        const avatar = await this.getText("avatar");
        if (avatar == null) {
          linkage.push({ type: "!avatar", value: "" });
          return { url: null, linkage };
        }
        linkage.push({ type: "avatar", value: avatar });
        for (let i = 0; i < matchers.length; i++) {
          const match = avatar.match(matchers[i]);
          if (match == null) {
            continue;
          }
          const scheme = match[1].toLowerCase();
          switch (scheme) {
            case "https":
            case "data":
              linkage.push({ type: "url", value: avatar });
              return { linkage, url: avatar };
            case "ipfs": {
              const url = getIpfsLink(avatar);
              linkage.push({ type: "ipfs", value: avatar });
              linkage.push({ type: "url", value: url });
              return { linkage, url };
            }
            case "erc721":
            case "erc1155": {
              const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
              linkage.push({ type: scheme, value: avatar });
              const owner = await this.getAddress();
              if (owner == null) {
                linkage.push({ type: "!owner", value: "" });
                return { url: null, linkage };
              }
              const comps = (match[2] || "").split("/");
              if (comps.length !== 2) {
                linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                return { url: null, linkage };
              }
              const tokenId = comps[1];
              const contract2 = new index_js_3.Contract(comps[0], [
                // ERC-721
                "function tokenURI(uint) view returns (string)",
                "function ownerOf(uint) view returns (address)",
                // ERC-1155
                "function uri(uint) view returns (string)",
                "function balanceOf(address, uint256) view returns (uint)"
              ], this.provider);
              if (scheme === "erc721") {
                const tokenOwner = await contract2.ownerOf(tokenId);
                if (owner !== tokenOwner) {
                  linkage.push({ type: "!owner", value: tokenOwner });
                  return { url: null, linkage };
                }
                linkage.push({ type: "owner", value: tokenOwner });
              } else if (scheme === "erc1155") {
                const balance = await contract2.balanceOf(owner, tokenId);
                if (!balance) {
                  linkage.push({ type: "!balance", value: "0" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "balance", value: balance.toString() });
              }
              let metadataUrl = await contract2[selector](tokenId);
              if (metadataUrl == null || metadataUrl === "0x") {
                linkage.push({ type: "!metadata-url", value: "" });
                return { url: null, linkage };
              }
              linkage.push({ type: "metadata-url-base", value: metadataUrl });
              if (scheme === "erc1155") {
                metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
                linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
              }
              if (metadataUrl.match(/^ipfs:/i)) {
                metadataUrl = getIpfsLink(metadataUrl);
              }
              linkage.push({ type: "metadata-url", value: metadataUrl });
              let metadata = {};
              const response = await new index_js_5.FetchRequest(metadataUrl).send();
              response.assertOk();
              try {
                metadata = response.bodyJson;
              } catch (error) {
                try {
                  linkage.push({ type: "!metadata", value: response.bodyText });
                } catch (error2) {
                  const bytes2 = response.body;
                  if (bytes2) {
                    linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes2) });
                  }
                  return { url: null, linkage };
                }
                return { url: null, linkage };
              }
              if (!metadata) {
                linkage.push({ type: "!metadata", value: "" });
                return { url: null, linkage };
              }
              linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
              let imageUrl = metadata.image;
              if (typeof imageUrl !== "string") {
                linkage.push({ type: "!imageUrl", value: "" });
                return { url: null, linkage };
              }
              if (imageUrl.match(/^(https:\/\/|data:)/i)) {
              } else {
                const ipfs = imageUrl.match(matcherIpfs);
                if (ipfs == null) {
                  linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                  return { url: null, linkage };
                }
                linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                imageUrl = getIpfsLink(imageUrl);
              }
              linkage.push({ type: "url", value: imageUrl });
              return { linkage, url: imageUrl };
            }
          }
        }
      } catch (error) {
      }
      return { linkage, url: null };
    }
    static async getEnsAddress(provider2) {
      const network2 = await provider2.getNetwork();
      const ensPlugin = network2.getPlugin("org.ethers.plugins.network.Ens");
      (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
        operation: "getEnsAddress",
        info: { network: network2 }
      });
      return ensPlugin.address;
    }
    static async #getResolver(provider2, name) {
      const ensAddr = await EnsResolver.getEnsAddress(provider2);
      try {
        const contract2 = new index_js_3.Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], provider2);
        const addr = await contract2.resolver((0, index_js_4.namehash)(name), {
          enableCcipRead: true
        });
        if (addr === index_js_2.ZeroAddress) {
          return null;
        }
        return addr;
      } catch (error) {
        throw error;
      }
      return null;
    }
    /**
     *  Resolve to the ENS resolver for %%name%% using %%provider%% or
     *  ``null`` if unconfigured.
     */
    static async fromName(provider2, name) {
      let currentName = name;
      while (true) {
        if (currentName === "" || currentName === ".") {
          return null;
        }
        if (name !== "eth" && currentName === "eth") {
          return null;
        }
        const addr = await EnsResolver.#getResolver(provider2, currentName);
        if (addr != null) {
          const resolver = new EnsResolver(provider2, addr, name);
          if (currentName !== name && !await resolver.supportsWildcard()) {
            return null;
          }
          return resolver;
        }
        currentName = currentName.split(".").slice(1).join(".");
      }
    }
  }
  ensResolver.EnsResolver = EnsResolver;
  return ensResolver;
}
var format$1 = {};
var hasRequiredFormat;
function requireFormat() {
  if (hasRequiredFormat) return format$1;
  hasRequiredFormat = 1;
  Object.defineProperty(format$1, "__esModule", { value: true });
  format$1.formatTransactionResponse = format$1.formatTransactionReceipt = format$1.formatReceiptLog = format$1.formatBlock = format$1.formatLog = format$1.formatUint256 = format$1.formatHash = format$1.formatData = format$1.formatBoolean = format$1.object = format$1.arrayOf = format$1.allowNull = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  const BN_0 = BigInt(0);
  function allowNull(format2, nullValue) {
    return function(value) {
      if (value == null) {
        return nullValue;
      }
      return format2(value);
    };
  }
  format$1.allowNull = allowNull;
  function arrayOf2(format2, allowNull2) {
    return (array2) => {
      if (allowNull2 && array2 == null) {
        return null;
      }
      if (!Array.isArray(array2)) {
        throw new Error("not an array");
      }
      return array2.map((i) => format2(i));
    };
  }
  format$1.arrayOf = arrayOf2;
  function object(format2, altNames) {
    return (value) => {
      const result = {};
      for (const key in format2) {
        let srcKey = key;
        if (altNames && key in altNames && !(srcKey in value)) {
          for (const altKey of altNames[key]) {
            if (altKey in value) {
              srcKey = altKey;
              break;
            }
          }
        }
        try {
          const nv = format2[key](value[srcKey]);
          if (nv !== void 0) {
            result[key] = nv;
          }
        } catch (error) {
          const message2 = error instanceof Error ? error.message : "not-an-error";
          (0, index_js_4.assert)(false, `invalid value for value.${key} (${message2})`, "BAD_DATA", { value });
        }
      }
      return result;
    };
  }
  format$1.object = object;
  function formatBoolean(value) {
    switch (value) {
      case true:
      case "true":
        return true;
      case false:
      case "false":
        return false;
    }
    (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
  }
  format$1.formatBoolean = formatBoolean;
  function formatData(value) {
    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
    return value;
  }
  format$1.formatData = formatData;
  function formatHash(value) {
    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
    return value;
  }
  format$1.formatHash = formatHash;
  function formatUint256(value) {
    if (!(0, index_js_4.isHexString)(value)) {
      throw new Error("invalid uint256");
    }
    return (0, index_js_4.zeroPadValue)(value, 32);
  }
  format$1.formatUint256 = formatUint256;
  const _formatLog = object({
    address: index_js_1.getAddress,
    blockHash: formatHash,
    blockNumber: index_js_4.getNumber,
    data: formatData,
    index: index_js_4.getNumber,
    removed: allowNull(formatBoolean, false),
    topics: arrayOf2(formatHash),
    transactionHash: formatHash,
    transactionIndex: index_js_4.getNumber
  }, {
    index: ["logIndex"]
  });
  function formatLog(value) {
    return _formatLog(value);
  }
  format$1.formatLog = formatLog;
  const _formatBlock = object({
    hash: allowNull(formatHash),
    parentHash: formatHash,
    parentBeaconBlockRoot: allowNull(formatHash, null),
    number: index_js_4.getNumber,
    timestamp: index_js_4.getNumber,
    nonce: allowNull(formatData),
    difficulty: index_js_4.getBigInt,
    gasLimit: index_js_4.getBigInt,
    gasUsed: index_js_4.getBigInt,
    stateRoot: allowNull(formatHash, null),
    receiptsRoot: allowNull(formatHash, null),
    blobGasUsed: allowNull(index_js_4.getBigInt, null),
    excessBlobGas: allowNull(index_js_4.getBigInt, null),
    miner: allowNull(index_js_1.getAddress),
    prevRandao: allowNull(formatHash, null),
    extraData: formatData,
    baseFeePerGas: allowNull(index_js_4.getBigInt)
  }, {
    prevRandao: ["mixHash"]
  });
  function formatBlock2(value) {
    const result = _formatBlock(value);
    result.transactions = value.transactions.map((tx) => {
      if (typeof tx === "string") {
        return tx;
      }
      return formatTransactionResponse(tx);
    });
    return result;
  }
  format$1.formatBlock = formatBlock2;
  const _formatReceiptLog = object({
    transactionIndex: index_js_4.getNumber,
    blockNumber: index_js_4.getNumber,
    transactionHash: formatHash,
    address: index_js_1.getAddress,
    topics: arrayOf2(formatHash),
    data: formatData,
    index: index_js_4.getNumber,
    blockHash: formatHash
  }, {
    index: ["logIndex"]
  });
  function formatReceiptLog(value) {
    return _formatReceiptLog(value);
  }
  format$1.formatReceiptLog = formatReceiptLog;
  const _formatTransactionReceipt = object({
    to: allowNull(index_js_1.getAddress, null),
    from: allowNull(index_js_1.getAddress, null),
    contractAddress: allowNull(index_js_1.getAddress, null),
    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
    index: index_js_4.getNumber,
    root: allowNull(index_js_4.hexlify),
    gasUsed: index_js_4.getBigInt,
    blobGasUsed: allowNull(index_js_4.getBigInt, null),
    logsBloom: allowNull(formatData),
    blockHash: formatHash,
    hash: formatHash,
    logs: arrayOf2(formatReceiptLog),
    blockNumber: index_js_4.getNumber,
    //confirmations: allowNull(getNumber, null),
    cumulativeGasUsed: index_js_4.getBigInt,
    effectiveGasPrice: allowNull(index_js_4.getBigInt),
    blobGasPrice: allowNull(index_js_4.getBigInt, null),
    status: allowNull(index_js_4.getNumber),
    type: allowNull(index_js_4.getNumber, 0)
  }, {
    effectiveGasPrice: ["gasPrice"],
    hash: ["transactionHash"],
    index: ["transactionIndex"]
  });
  function formatTransactionReceipt(value) {
    return _formatTransactionReceipt(value);
  }
  format$1.formatTransactionReceipt = formatTransactionReceipt;
  function formatTransactionResponse(value) {
    if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {
      value.to = "0x0000000000000000000000000000000000000000";
    }
    const result = object({
      hash: formatHash,
      // Some nodes do not return this, usually test nodes (like Ganache)
      index: allowNull(index_js_4.getNumber, void 0),
      type: (value2) => {
        if (value2 === "0x" || value2 == null) {
          return 0;
        }
        return (0, index_js_4.getNumber)(value2);
      },
      accessList: allowNull(index_js_3.accessListify, null),
      blobVersionedHashes: allowNull(arrayOf2(formatHash, true), null),
      authorizationList: allowNull(arrayOf2((v) => {
        let sig;
        if (v.signature) {
          sig = v.signature;
        } else {
          let yParity = v.yParity;
          if (yParity === "0x1b") {
            yParity = 0;
          } else if (yParity === "0x1c") {
            yParity = 1;
          }
          sig = Object.assign({}, v, { yParity });
        }
        return {
          address: (0, index_js_1.getAddress)(v.address),
          chainId: (0, index_js_4.getBigInt)(v.chainId),
          nonce: (0, index_js_4.getBigInt)(v.nonce),
          signature: index_js_2.Signature.from(sig)
        };
      }, false), null),
      blockHash: allowNull(formatHash, null),
      blockNumber: allowNull(index_js_4.getNumber, null),
      transactionIndex: allowNull(index_js_4.getNumber, null),
      from: index_js_1.getAddress,
      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
      gasPrice: allowNull(index_js_4.getBigInt),
      maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),
      maxFeePerGas: allowNull(index_js_4.getBigInt),
      maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),
      gasLimit: index_js_4.getBigInt,
      to: allowNull(index_js_1.getAddress, null),
      value: index_js_4.getBigInt,
      nonce: index_js_4.getNumber,
      data: formatData,
      creates: allowNull(index_js_1.getAddress, null),
      chainId: allowNull(index_js_4.getBigInt, null)
    }, {
      data: ["input"],
      gasLimit: ["gas"],
      index: ["transactionIndex"]
    })(value);
    if (result.to == null && result.creates == null) {
      result.creates = (0, index_js_1.getCreateAddress)(result);
    }
    if ((value.type === 1 || value.type === 2) && value.accessList == null) {
      result.accessList = [];
    }
    if (value.signature) {
      result.signature = index_js_2.Signature.from(value.signature);
    } else {
      result.signature = index_js_2.Signature.from(value);
    }
    if (result.chainId == null) {
      const chainId = result.signature.legacyChainId;
      if (chainId != null) {
        result.chainId = chainId;
      }
    }
    if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {
      result.blockHash = null;
    }
    return result;
  }
  format$1.formatTransactionResponse = formatTransactionResponse;
  return format$1;
}
var network = {};
var pluginsNetwork = {};
var hasRequiredPluginsNetwork;
function requirePluginsNetwork() {
  if (hasRequiredPluginsNetwork) return pluginsNetwork;
  hasRequiredPluginsNetwork = 1;
  Object.defineProperty(pluginsNetwork, "__esModule", { value: true });
  pluginsNetwork.FetchUrlFeeDataNetworkPlugin = pluginsNetwork.FeeDataNetworkPlugin = pluginsNetwork.EnsPlugin = pluginsNetwork.GasCostPlugin = pluginsNetwork.NetworkPlugin = void 0;
  const properties_js_1 = /* @__PURE__ */ requireProperties();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
  class NetworkPlugin {
    /**
     *  The name of the plugin.
     *
     *  It is recommended to use reverse-domain-notation, which permits
     *  unique names with a known authority as well as hierarchal entries.
     */
    name;
    /**
     *  Creates a new **NetworkPlugin**.
     */
    constructor(name) {
      (0, properties_js_1.defineProperties)(this, { name });
    }
    /**
     *  Creates a copy of this plugin.
     */
    clone() {
      return new NetworkPlugin(this.name);
    }
  }
  pluginsNetwork.NetworkPlugin = NetworkPlugin;
  class GasCostPlugin extends NetworkPlugin {
    /**
     *  The block number to treat these values as valid from.
     *
     *  This allows a hardfork to have updated values included as well as
     *  mulutiple hardforks to be supported.
     */
    effectiveBlock;
    /**
     *  The transactions base fee.
     */
    txBase;
    /**
     *  The fee for creating a new account.
     */
    txCreate;
    /**
     *  The fee per zero-byte in the data.
     */
    txDataZero;
    /**
     *  The fee per non-zero-byte in the data.
     */
    txDataNonzero;
    /**
     *  The fee per storage key in the [[link-eip-2930]] access list.
     */
    txAccessListStorageKey;
    /**
     *  The fee per address in the [[link-eip-2930]] access list.
     */
    txAccessListAddress;
    /**
     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
     *  latest block or another GasCostPlugin supercedes that block number,
     *  with the associated %%costs%%.
     */
    constructor(effectiveBlock, costs) {
      if (effectiveBlock == null) {
        effectiveBlock = 0;
      }
      super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
      const props = { effectiveBlock };
      function set(name, nullish) {
        let value = (costs || {})[name];
        if (value == null) {
          value = nullish;
        }
        (0, index_js_1.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
        props[name] = value;
      }
      set("txBase", 21e3);
      set("txCreate", 32e3);
      set("txDataZero", 4);
      set("txDataNonzero", 16);
      set("txAccessListStorageKey", 1900);
      set("txAccessListAddress", 2400);
      (0, properties_js_1.defineProperties)(this, props);
    }
    clone() {
      return new GasCostPlugin(this.effectiveBlock, this);
    }
  }
  pluginsNetwork.GasCostPlugin = GasCostPlugin;
  class EnsPlugin extends NetworkPlugin {
    /**
     *  The ENS Registrty Contract address.
     */
    address;
    /**
     *  The chain ID that the ENS contract lives on.
     */
    targetNetwork;
    /**
     *  Creates a new **EnsPlugin** connected to %%address%% on the
     *  %%targetNetwork%%. The default ENS address and mainnet is used
     *  if unspecified.
     */
    constructor(address2, targetNetwork) {
      super("org.ethers.plugins.network.Ens");
      (0, properties_js_1.defineProperties)(this, {
        address: address2 || EnsAddress,
        targetNetwork: targetNetwork == null ? 1 : targetNetwork
      });
    }
    clone() {
      return new EnsPlugin(this.address, this.targetNetwork);
    }
  }
  pluginsNetwork.EnsPlugin = EnsPlugin;
  class FeeDataNetworkPlugin extends NetworkPlugin {
    #feeDataFunc;
    /**
     *  The fee data function provided to the constructor.
     */
    get feeDataFunc() {
      return this.#feeDataFunc;
    }
    /**
     *  Creates a new **FeeDataNetworkPlugin**.
     */
    constructor(feeDataFunc) {
      super("org.ethers.plugins.network.FeeData");
      this.#feeDataFunc = feeDataFunc;
    }
    /**
     *  Resolves to the fee data.
     */
    async getFeeData(provider2) {
      return await this.#feeDataFunc(provider2);
    }
    clone() {
      return new FeeDataNetworkPlugin(this.#feeDataFunc);
    }
  }
  pluginsNetwork.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
  class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {
    #url;
    #processFunc;
    /**
     *  The URL to initialize the FetchRequest with in %%processFunc%%.
     */
    get url() {
      return this.#url;
    }
    /**
     *  The callback to use when computing the FeeData.
     */
    get processFunc() {
      return this.#processFunc;
    }
    /**
     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
     *  be used when computing the fee data for the network.
     */
    constructor(url, processFunc) {
      super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
      this.#url = url;
      this.#processFunc = processFunc;
    }
    // We are immutable, so we can serve as our own clone
    clone() {
      return this;
    }
  }
  pluginsNetwork.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
  return pluginsNetwork;
}
var hasRequiredNetwork;
function requireNetwork() {
  if (hasRequiredNetwork) return network;
  hasRequiredNetwork = 1;
  Object.defineProperty(network, "__esModule", { value: true });
  network.Network = void 0;
  const index_js_1 = /* @__PURE__ */ requireTransaction();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const plugins_network_js_1 = /* @__PURE__ */ requirePluginsNetwork();
  const Networks = /* @__PURE__ */ new Map();
  class Network2 {
    #name;
    #chainId;
    #plugins;
    /**
     *  Creates a new **Network** for %%name%% and %%chainId%%.
     */
    constructor(name, chainId) {
      this.#name = name;
      this.#chainId = (0, index_js_2.getBigInt)(chainId);
      this.#plugins = /* @__PURE__ */ new Map();
    }
    /**
     *  Returns a JSON-compatible representation of a Network.
     */
    toJSON() {
      return { name: this.name, chainId: String(this.chainId) };
    }
    /**
     *  The network common name.
     *
     *  This is the canonical name, as networks migh have multiple
     *  names.
     */
    get name() {
      return this.#name;
    }
    set name(value) {
      this.#name = value;
    }
    /**
     *  The network chain ID.
     */
    get chainId() {
      return this.#chainId;
    }
    set chainId(value) {
      this.#chainId = (0, index_js_2.getBigInt)(value, "chainId");
    }
    /**
     *  Returns true if %%other%% matches this network. Any chain ID
     *  must match, and if no chain ID is present, the name must match.
     *
     *  This method does not currently check for additional properties,
     *  such as ENS address or plug-in compatibility.
     */
    matches(other) {
      if (other == null) {
        return false;
      }
      if (typeof other === "string") {
        try {
          return this.chainId === (0, index_js_2.getBigInt)(other);
        } catch (error) {
        }
        return this.name === other;
      }
      if (typeof other === "number" || typeof other === "bigint") {
        try {
          return this.chainId === (0, index_js_2.getBigInt)(other);
        } catch (error) {
        }
        return false;
      }
      if (typeof other === "object") {
        if (other.chainId != null) {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other.chainId);
          } catch (error) {
          }
          return false;
        }
        if (other.name != null) {
          return this.name === other.name;
        }
        return false;
      }
      return false;
    }
    /**
     *  Returns the list of plugins currently attached to this Network.
     */
    get plugins() {
      return Array.from(this.#plugins.values());
    }
    /**
     *  Attach a new %%plugin%% to this Network. The network name
     *  must be unique, excluding any fragment.
     */
    attachPlugin(plugin) {
      if (this.#plugins.get(plugin.name)) {
        throw new Error(`cannot replace existing plugin: ${plugin.name} `);
      }
      this.#plugins.set(plugin.name, plugin.clone());
      return this;
    }
    /**
     *  Return the plugin, if any, matching %%name%% exactly. Plugins
     *  with fragments will not be returned unless %%name%% includes
     *  a fragment.
     */
    getPlugin(name) {
      return this.#plugins.get(name) || null;
    }
    /**
     *  Gets a list of all plugins that match %%name%%, with otr without
     *  a fragment.
     */
    getPlugins(basename) {
      return this.plugins.filter((p) => p.name.split("#")[0] === basename);
    }
    /**
     *  Create a copy of this Network.
     */
    clone() {
      const clone = new Network2(this.name, this.chainId);
      this.plugins.forEach((plugin) => {
        clone.attachPlugin(plugin.clone());
      });
      return clone;
    }
    /**
     *  Compute the intrinsic gas required for a transaction.
     *
     *  A GasCostPlugin can be attached to override the default
     *  values.
     */
    computeIntrinsicGas(tx) {
      const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new plugins_network_js_1.GasCostPlugin();
      let gas = costs.txBase;
      if (tx.to == null) {
        gas += costs.txCreate;
      }
      if (tx.data) {
        for (let i = 2; i < tx.data.length; i += 2) {
          if (tx.data.substring(i, i + 2) === "00") {
            gas += costs.txDataZero;
          } else {
            gas += costs.txDataNonzero;
          }
        }
      }
      if (tx.accessList) {
        const accessList = (0, index_js_1.accessListify)(tx.accessList);
        for (const addr in accessList) {
          gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
        }
      }
      return gas;
    }
    /**
     *  Returns a new Network for the %%network%% name or chainId.
     */
    static from(network2) {
      injectCommonNetworks();
      if (network2 == null) {
        return Network2.from("mainnet");
      }
      if (typeof network2 === "number") {
        network2 = BigInt(network2);
      }
      if (typeof network2 === "string" || typeof network2 === "bigint") {
        const networkFunc = Networks.get(network2);
        if (networkFunc) {
          return networkFunc();
        }
        if (typeof network2 === "bigint") {
          return new Network2("unknown", network2);
        }
        (0, index_js_2.assertArgument)(false, "unknown network", "network", network2);
      }
      if (typeof network2.clone === "function") {
        const clone = network2.clone();
        return clone;
      }
      if (typeof network2 === "object") {
        (0, index_js_2.assertArgument)(typeof network2.name === "string" && typeof network2.chainId === "number", "invalid network object name or chainId", "network", network2);
        const custom = new Network2(network2.name, network2.chainId);
        if (network2.ensAddress || network2.ensNetwork != null) {
          custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network2.ensAddress, network2.ensNetwork));
        }
        return custom;
      }
      (0, index_js_2.assertArgument)(false, "invalid network", "network", network2);
    }
    /**
     *  Register %%nameOrChainId%% with a function which returns
     *  an instance of a Network representing that chain.
     */
    static register(nameOrChainId, networkFunc) {
      if (typeof nameOrChainId === "number") {
        nameOrChainId = BigInt(nameOrChainId);
      }
      const existing = Networks.get(nameOrChainId);
      if (existing) {
        (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
      }
      Networks.set(nameOrChainId, networkFunc);
    }
  }
  network.Network = Network2;
  function parseUnits(_value, decimals) {
    const value = String(_value);
    if (!value.match(/^[0-9.]+$/)) {
      throw new Error(`invalid gwei value: ${_value}`);
    }
    const comps = value.split(".");
    if (comps.length === 1) {
      comps.push("");
    }
    if (comps.length !== 2) {
      throw new Error(`invalid gwei value: ${_value}`);
    }
    while (comps[1].length < decimals) {
      comps[1] += "0";
    }
    if (comps[1].length > 9) {
      let frac = BigInt(comps[1].substring(0, 9));
      if (!comps[1].substring(9).match(/^0+$/)) {
        frac++;
      }
      comps[1] = frac.toString();
    }
    return BigInt(comps[0] + comps[1]);
  }
  function getGasStationPlugin(url) {
    return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider2, request2) => {
      request2.setHeader("User-Agent", "ethers");
      let response;
      try {
        const [_response, _feeData] = await Promise.all([
          request2.send(),
          fetchFeeData()
        ]);
        response = _response;
        const payload = response.bodyJson.standard;
        const feeData = {
          gasPrice: _feeData.gasPrice,
          maxFeePerGas: parseUnits(payload.maxFee, 9),
          maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)
        };
        return feeData;
      } catch (error) {
        (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request2.url)})`, "SERVER_ERROR", { request: request2, response, error });
      }
    });
  }
  let injected = false;
  function injectCommonNetworks() {
    if (injected) {
      return;
    }
    injected = true;
    function registerEth(name, chainId, options) {
      const func = function() {
        const network2 = new Network2(name, chainId);
        if (options.ensNetwork != null) {
          network2.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
        }
        network2.attachPlugin(new plugins_network_js_1.GasCostPlugin());
        (options.plugins || []).forEach((plugin) => {
          network2.attachPlugin(plugin);
        });
        return network2;
      };
      Network2.register(name, func);
      Network2.register(chainId, func);
      if (options.altNames) {
        options.altNames.forEach((name2) => {
          Network2.register(name2, func);
        });
      }
    }
    registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
    registerEth("ropsten", 3, { ensNetwork: 3 });
    registerEth("rinkeby", 4, { ensNetwork: 4 });
    registerEth("goerli", 5, { ensNetwork: 5 });
    registerEth("kovan", 42, { ensNetwork: 42 });
    registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
    registerEth("holesky", 17e3, { ensNetwork: 17e3 });
    registerEth("classic", 61, {});
    registerEth("classicKotti", 6, {});
    registerEth("arbitrum", 42161, {
      ensNetwork: 1
    });
    registerEth("arbitrum-goerli", 421613, {});
    registerEth("arbitrum-sepolia", 421614, {});
    registerEth("base", 8453, { ensNetwork: 1 });
    registerEth("base-goerli", 84531, {});
    registerEth("base-sepolia", 84532, {});
    registerEth("bnb", 56, { ensNetwork: 1 });
    registerEth("bnbt", 97, {});
    registerEth("linea", 59144, { ensNetwork: 1 });
    registerEth("linea-goerli", 59140, {});
    registerEth("linea-sepolia", 59141, {});
    registerEth("matic", 137, {
      ensNetwork: 1,
      plugins: [
        getGasStationPlugin("https://gasstation.polygon.technology/v2")
      ]
    });
    registerEth("matic-amoy", 80002, {});
    registerEth("matic-mumbai", 80001, {
      altNames: ["maticMumbai", "maticmum"],
      plugins: [
        getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
      ]
    });
    registerEth("optimism", 10, {
      ensNetwork: 1,
      plugins: []
    });
    registerEth("optimism-goerli", 420, {});
    registerEth("optimism-sepolia", 11155420, {});
    registerEth("xdai", 100, { ensNetwork: 1 });
  }
  return network;
}
var subscriberPolling = {};
var hasRequiredSubscriberPolling;
function requireSubscriberPolling() {
  if (hasRequiredSubscriberPolling) return subscriberPolling;
  hasRequiredSubscriberPolling = 1;
  Object.defineProperty(subscriberPolling, "__esModule", { value: true });
  subscriberPolling.PollingEventSubscriber = subscriberPolling.PollingTransactionSubscriber = subscriberPolling.PollingOrphanSubscriber = subscriberPolling.PollingBlockTagSubscriber = subscriberPolling.OnBlockSubscriber = subscriberPolling.PollingBlockSubscriber = subscriberPolling.getPollingSubscriber = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  function copy(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  function getPollingSubscriber(provider2, event) {
    if (event === "block") {
      return new PollingBlockSubscriber(provider2);
    }
    if ((0, index_js_1.isHexString)(event, 32)) {
      return new PollingTransactionSubscriber(provider2, event);
    }
    (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
      operation: "getPollingSubscriber",
      info: { event }
    });
  }
  subscriberPolling.getPollingSubscriber = getPollingSubscriber;
  class PollingBlockSubscriber {
    #provider;
    #poller;
    #interval;
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    #blockNumber;
    /**
     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
     */
    constructor(provider2) {
      this.#provider = provider2;
      this.#poller = null;
      this.#interval = 4e3;
      this.#blockNumber = -2;
    }
    /**
     *  The polling interval.
     */
    get pollingInterval() {
      return this.#interval;
    }
    set pollingInterval(value) {
      this.#interval = value;
    }
    async #poll() {
      try {
        const blockNumber = await this.#provider.getBlockNumber();
        if (this.#blockNumber === -2) {
          this.#blockNumber = blockNumber;
          return;
        }
        if (blockNumber !== this.#blockNumber) {
          for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {
            if (this.#poller == null) {
              return;
            }
            await this.#provider.emit("block", b);
          }
          this.#blockNumber = blockNumber;
        }
      } catch (error) {
      }
      if (this.#poller == null) {
        return;
      }
      this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
    }
    start() {
      if (this.#poller) {
        return;
      }
      this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
      this.#poll();
    }
    stop() {
      if (!this.#poller) {
        return;
      }
      this.#provider._clearTimeout(this.#poller);
      this.#poller = null;
    }
    pause(dropWhilePaused) {
      this.stop();
      if (dropWhilePaused) {
        this.#blockNumber = -2;
      }
    }
    resume() {
      this.start();
    }
  }
  subscriberPolling.PollingBlockSubscriber = PollingBlockSubscriber;
  class OnBlockSubscriber {
    #provider;
    #poll;
    #running;
    /**
     *  Create a new **OnBlockSubscriber** attached to %%provider%%.
     */
    constructor(provider2) {
      this.#provider = provider2;
      this.#running = false;
      this.#poll = (blockNumber) => {
        this._poll(blockNumber, this.#provider);
      };
    }
    /**
     *  Called on every new block.
     */
    async _poll(blockNumber, provider2) {
      throw new Error("sub-classes must override this");
    }
    start() {
      if (this.#running) {
        return;
      }
      this.#running = true;
      this.#poll(-2);
      this.#provider.on("block", this.#poll);
    }
    stop() {
      if (!this.#running) {
        return;
      }
      this.#running = false;
      this.#provider.off("block", this.#poll);
    }
    pause(dropWhilePaused) {
      this.stop();
    }
    resume() {
      this.start();
    }
  }
  subscriberPolling.OnBlockSubscriber = OnBlockSubscriber;
  class PollingBlockTagSubscriber extends OnBlockSubscriber {
    #tag;
    #lastBlock;
    constructor(provider2, tag) {
      super(provider2);
      this.#tag = tag;
      this.#lastBlock = -2;
    }
    pause(dropWhilePaused) {
      if (dropWhilePaused) {
        this.#lastBlock = -2;
      }
      super.pause(dropWhilePaused);
    }
    async _poll(blockNumber, provider2) {
      const block = await provider2.getBlock(this.#tag);
      if (block == null) {
        return;
      }
      if (this.#lastBlock === -2) {
        this.#lastBlock = block.number;
      } else if (block.number > this.#lastBlock) {
        provider2.emit(this.#tag, block.number);
        this.#lastBlock = block.number;
      }
    }
  }
  subscriberPolling.PollingBlockTagSubscriber = PollingBlockTagSubscriber;
  class PollingOrphanSubscriber extends OnBlockSubscriber {
    #filter;
    constructor(provider2, filter2) {
      super(provider2);
      this.#filter = copy(filter2);
    }
    async _poll(blockNumber, provider2) {
      throw new Error("@TODO");
    }
  }
  subscriberPolling.PollingOrphanSubscriber = PollingOrphanSubscriber;
  class PollingTransactionSubscriber extends OnBlockSubscriber {
    #hash;
    /**
     *  Create a new **PollingTransactionSubscriber** attached to
     *  %%provider%%, listening for %%hash%%.
     */
    constructor(provider2, hash2) {
      super(provider2);
      this.#hash = hash2;
    }
    async _poll(blockNumber, provider2) {
      const tx = await provider2.getTransactionReceipt(this.#hash);
      if (tx) {
        provider2.emit(this.#hash, tx);
      }
    }
  }
  subscriberPolling.PollingTransactionSubscriber = PollingTransactionSubscriber;
  class PollingEventSubscriber {
    #provider;
    #filter;
    #poller;
    #running;
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    #blockNumber;
    /**
     *  Create a new **PollingTransactionSubscriber** attached to
     *  %%provider%%, listening for %%filter%%.
     */
    constructor(provider2, filter2) {
      this.#provider = provider2;
      this.#filter = copy(filter2);
      this.#poller = this.#poll.bind(this);
      this.#running = false;
      this.#blockNumber = -2;
    }
    async #poll(blockNumber) {
      if (this.#blockNumber === -2) {
        return;
      }
      const filter2 = copy(this.#filter);
      filter2.fromBlock = this.#blockNumber + 1;
      filter2.toBlock = blockNumber;
      const logs = await this.#provider.getLogs(filter2);
      if (logs.length === 0) {
        if (this.#blockNumber < blockNumber - 60) {
          this.#blockNumber = blockNumber - 60;
        }
        return;
      }
      for (const log2 of logs) {
        this.#provider.emit(this.#filter, log2);
        this.#blockNumber = log2.blockNumber;
      }
    }
    start() {
      if (this.#running) {
        return;
      }
      this.#running = true;
      if (this.#blockNumber === -2) {
        this.#provider.getBlockNumber().then((blockNumber) => {
          this.#blockNumber = blockNumber;
        });
      }
      this.#provider.on("block", this.#poller);
    }
    stop() {
      if (!this.#running) {
        return;
      }
      this.#running = false;
      this.#provider.off("block", this.#poller);
    }
    pause(dropWhilePaused) {
      this.stop();
      if (dropWhilePaused) {
        this.#blockNumber = -2;
      }
    }
    resume() {
      this.start();
    }
  }
  subscriberPolling.PollingEventSubscriber = PollingEventSubscriber;
  return subscriberPolling;
}
var hasRequiredAbstractProvider;
function requireAbstractProvider() {
  if (hasRequiredAbstractProvider) return abstractProvider;
  hasRequiredAbstractProvider = 1;
  Object.defineProperty(abstractProvider, "__esModule", { value: true });
  abstractProvider.AbstractProvider = abstractProvider.UnmanagedSubscriber = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireConstants();
  const index_js_3 = /* @__PURE__ */ requireContract();
  const index_js_4 = /* @__PURE__ */ requireHash();
  const index_js_5 = /* @__PURE__ */ requireTransaction();
  const index_js_6 = /* @__PURE__ */ requireUtils$3();
  const ens_resolver_js_1 = /* @__PURE__ */ requireEnsResolver();
  const format_js_1 = /* @__PURE__ */ requireFormat();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_js_1 = /* @__PURE__ */ requireProvider();
  const subscriber_polling_js_1 = /* @__PURE__ */ requireSubscriberPolling();
  const BN_2 = BigInt(2);
  const MAX_CCIP_REDIRECTS = 10;
  function isPromise(value) {
    return value && typeof value.then === "function";
  }
  function getTag(prefix, value) {
    return prefix + ":" + JSON.stringify(value, (k, v) => {
      if (v == null) {
        return "null";
      }
      if (typeof v === "bigint") {
        return `bigint:${v.toString()}`;
      }
      if (typeof v === "string") {
        return v.toLowerCase();
      }
      if (typeof v === "object" && !Array.isArray(v)) {
        const keys = Object.keys(v);
        keys.sort();
        return keys.reduce((accum, key) => {
          accum[key] = v[key];
          return accum;
        }, {});
      }
      return v;
    });
  }
  class UnmanagedSubscriber {
    /**
     *  The name fof the event.
     */
    name;
    /**
     *  Create a new UnmanagedSubscriber with %%name%%.
     */
    constructor(name) {
      (0, index_js_6.defineProperties)(this, { name });
    }
    start() {
    }
    stop() {
    }
    pause(dropWhilePaused) {
    }
    resume() {
    }
  }
  abstractProvider.UnmanagedSubscriber = UnmanagedSubscriber;
  function copy(value) {
    return JSON.parse(JSON.stringify(value));
  }
  function concisify(items) {
    items = Array.from(new Set(items).values());
    items.sort();
    return items;
  }
  async function getSubscription(_event, provider2) {
    if (_event == null) {
      throw new Error("invalid event");
    }
    if (Array.isArray(_event)) {
      _event = { topics: _event };
    }
    if (typeof _event === "string") {
      switch (_event) {
        case "block":
        case "debug":
        case "error":
        case "finalized":
        case "network":
        case "pending":
        case "safe": {
          return { type: _event, tag: _event };
        }
      }
    }
    if ((0, index_js_6.isHexString)(_event, 32)) {
      const hash2 = _event.toLowerCase();
      return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
    }
    if (_event.orphan) {
      const event = _event;
      return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
    }
    if (_event.address || _event.topics) {
      const event = _event;
      const filter2 = {
        topics: (event.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        })
      };
      if (event.address) {
        const addresses2 = [];
        const promises2 = [];
        const addAddress = (addr) => {
          if ((0, index_js_6.isHexString)(addr)) {
            addresses2.push(addr);
          } else {
            promises2.push((async () => {
              addresses2.push(await (0, index_js_1.resolveAddress)(addr, provider2));
            })());
          }
        };
        if (Array.isArray(event.address)) {
          event.address.forEach(addAddress);
        } else {
          addAddress(event.address);
        }
        if (promises2.length) {
          await Promise.all(promises2);
        }
        filter2.address = concisify(addresses2.map((a) => a.toLowerCase()));
      }
      return { filter: filter2, tag: getTag("event", filter2), type: "event" };
    }
    (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
  }
  function getTime() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  const defaultOptions = {
    cacheTimeout: 250,
    pollingInterval: 4e3
  };
  class AbstractProvider {
    #subs;
    #plugins;
    // null=unpaused, true=paused+dropWhilePaused, false=paused
    #pausedState;
    #destroyed;
    #networkPromise;
    #anyNetwork;
    #performCache;
    // The most recent block number if running an event or -1 if no "block" event
    #lastBlockNumber;
    #nextTimer;
    #timers;
    #disableCcipRead;
    #options;
    /**
     *  Create a new **AbstractProvider** connected to %%network%%, or
     *  use the various network detection capabilities to discover the
     *  [[Network]] if necessary.
     */
    constructor(_network, options) {
      this.#options = Object.assign({}, defaultOptions, options || {});
      if (_network === "any") {
        this.#anyNetwork = true;
        this.#networkPromise = null;
      } else if (_network) {
        const network2 = network_js_1.Network.from(_network);
        this.#anyNetwork = false;
        this.#networkPromise = Promise.resolve(network2);
        setTimeout(() => {
          this.emit("network", network2, null);
        }, 0);
      } else {
        this.#anyNetwork = false;
        this.#networkPromise = null;
      }
      this.#lastBlockNumber = -1;
      this.#performCache = /* @__PURE__ */ new Map();
      this.#subs = /* @__PURE__ */ new Map();
      this.#plugins = /* @__PURE__ */ new Map();
      this.#pausedState = null;
      this.#destroyed = false;
      this.#nextTimer = 1;
      this.#timers = /* @__PURE__ */ new Map();
      this.#disableCcipRead = false;
    }
    get pollingInterval() {
      return this.#options.pollingInterval;
    }
    /**
     *  Returns ``this``, to allow an **AbstractProvider** to implement
     *  the [[ContractRunner]] interface.
     */
    get provider() {
      return this;
    }
    /**
     *  Returns all the registered plug-ins.
     */
    get plugins() {
      return Array.from(this.#plugins.values());
    }
    /**
     *  Attach a new plug-in.
     */
    attachPlugin(plugin) {
      if (this.#plugins.get(plugin.name)) {
        throw new Error(`cannot replace existing plugin: ${plugin.name} `);
      }
      this.#plugins.set(plugin.name, plugin.connect(this));
      return this;
    }
    /**
     *  Get a plugin by name.
     */
    getPlugin(name) {
      return this.#plugins.get(name) || null;
    }
    /**
     *  Prevent any CCIP-read operation, regardless of whether requested
     *  in a [[call]] using ``enableCcipRead``.
     */
    get disableCcipRead() {
      return this.#disableCcipRead;
    }
    set disableCcipRead(value) {
      this.#disableCcipRead = !!value;
    }
    // Shares multiple identical requests made during the same 250ms
    async #perform(req) {
      const timeout = this.#options.cacheTimeout;
      if (timeout < 0) {
        return await this._perform(req);
      }
      const tag = getTag(req.method, req);
      let perform = this.#performCache.get(tag);
      if (!perform) {
        perform = this._perform(req);
        this.#performCache.set(tag, perform);
        setTimeout(() => {
          if (this.#performCache.get(tag) === perform) {
            this.#performCache.delete(tag);
          }
        }, timeout);
      }
      return await perform;
    }
    /**
     *  Resolves to the data for executing the CCIP-read operations.
     */
    async ccipReadFetch(tx, calldata, urls) {
      if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
        return null;
      }
      const sender = tx.to.toLowerCase();
      const data2 = calldata.toLowerCase();
      const errorMessages = [];
      for (let i = 0; i < urls.length; i++) {
        const url = urls[i];
        const href = url.replace("{sender}", sender).replace("{data}", data2);
        const request2 = new index_js_6.FetchRequest(href);
        if (url.indexOf("{data}") === -1) {
          request2.body = { data: data2, sender };
        }
        this.emit("debug", { action: "sendCcipReadFetchRequest", request: request2, index: i, urls });
        let errorMessage = "unknown error";
        let resp;
        try {
          resp = await request2.send();
        } catch (error) {
          errorMessages.push(error.message);
          this.emit("debug", { action: "receiveCcipReadFetchError", request: request2, result: { error } });
          continue;
        }
        try {
          const result = resp.bodyJson;
          if (result.data) {
            this.emit("debug", { action: "receiveCcipReadFetchResult", request: request2, result });
            return result.data;
          }
          if (result.message) {
            errorMessage = result.message;
          }
          this.emit("debug", { action: "receiveCcipReadFetchError", request: request2, result });
        } catch (error) {
        }
        (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
        errorMessages.push(errorMessage);
      }
      (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
        reason: "500_SERVER_ERROR",
        transaction: tx,
        info: { urls, errorMessages }
      });
    }
    /**
     *  Provides the opportunity for a sub-class to wrap a block before
     *  returning it, to add additional properties or an alternate
     *  sub-class of [[Block]].
     */
    _wrapBlock(value, network2) {
      return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
    }
    /**
     *  Provides the opportunity for a sub-class to wrap a log before
     *  returning it, to add additional properties or an alternate
     *  sub-class of [[Log]].
     */
    _wrapLog(value, network2) {
      return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
    }
    /**
     *  Provides the opportunity for a sub-class to wrap a transaction
     *  receipt before returning it, to add additional properties or an
     *  alternate sub-class of [[TransactionReceipt]].
     */
    _wrapTransactionReceipt(value, network2) {
      return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
    }
    /**
     *  Provides the opportunity for a sub-class to wrap a transaction
     *  response before returning it, to add additional properties or an
     *  alternate sub-class of [[TransactionResponse]].
     */
    _wrapTransactionResponse(tx, network2) {
      return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
    }
    /**
     *  Resolves to the Network, forcing a network detection using whatever
     *  technique the sub-class requires.
     *
     *  Sub-classes **must** override this.
     */
    _detectNetwork() {
      (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
        operation: "_detectNetwork"
      });
    }
    /**
     *  Sub-classes should use this to perform all built-in operations. All
     *  methods sanitizes and normalizes the values passed into this.
     *
     *  Sub-classes **must** override this.
     */
    async _perform(req) {
      (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
        operation: req.method,
        info: req
      });
    }
    // State
    async getBlockNumber() {
      const blockNumber = (0, index_js_6.getNumber)(await this.#perform({ method: "getBlockNumber" }), "%response");
      if (this.#lastBlockNumber >= 0) {
        this.#lastBlockNumber = blockNumber;
      }
      return blockNumber;
    }
    /**
     *  Returns or resolves to the address for %%address%%, resolving ENS
     *  names and [[Addressable]] objects and returning if already an
     *  address.
     */
    _getAddress(address2) {
      return (0, index_js_1.resolveAddress)(address2, this);
    }
    /**
     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
     *  negative values and returning if already a valid block tag.
     */
    _getBlockTag(blockTag) {
      if (blockTag == null) {
        return "latest";
      }
      switch (blockTag) {
        case "earliest":
          return "0x0";
        case "finalized":
        case "latest":
        case "pending":
        case "safe":
          return blockTag;
      }
      if ((0, index_js_6.isHexString)(blockTag)) {
        if ((0, index_js_6.isHexString)(blockTag, 32)) {
          return blockTag;
        }
        return (0, index_js_6.toQuantity)(blockTag);
      }
      if (typeof blockTag === "bigint") {
        blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
      }
      if (typeof blockTag === "number") {
        if (blockTag >= 0) {
          return (0, index_js_6.toQuantity)(blockTag);
        }
        if (this.#lastBlockNumber >= 0) {
          return (0, index_js_6.toQuantity)(this.#lastBlockNumber + blockTag);
        }
        return this.getBlockNumber().then((b) => (0, index_js_6.toQuantity)(b + blockTag));
      }
      (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
    }
    /**
     *  Returns or resolves to a filter for %%filter%%, resolving any ENS
     *  names or [[Addressable]] object and returning if already a valid
     *  filter.
     */
    _getFilter(filter2) {
      const topics = (filter2.topics || []).map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          return concisify(t.map((t2) => t2.toLowerCase()));
        }
        return t.toLowerCase();
      });
      const blockHash = "blockHash" in filter2 ? filter2.blockHash : void 0;
      const resolve = (_address, fromBlock2, toBlock2) => {
        let address3 = void 0;
        switch (_address.length) {
          case 0:
            break;
          case 1:
            address3 = _address[0];
            break;
          default:
            _address.sort();
            address3 = _address;
        }
        if (blockHash) {
          if (fromBlock2 != null || toBlock2 != null) {
            throw new Error("invalid filter");
          }
        }
        const filter3 = {};
        if (address3) {
          filter3.address = address3;
        }
        if (topics.length) {
          filter3.topics = topics;
        }
        if (fromBlock2) {
          filter3.fromBlock = fromBlock2;
        }
        if (toBlock2) {
          filter3.toBlock = toBlock2;
        }
        if (blockHash) {
          filter3.blockHash = blockHash;
        }
        return filter3;
      };
      let address2 = [];
      if (filter2.address) {
        if (Array.isArray(filter2.address)) {
          for (const addr of filter2.address) {
            address2.push(this._getAddress(addr));
          }
        } else {
          address2.push(this._getAddress(filter2.address));
        }
      }
      let fromBlock = void 0;
      if ("fromBlock" in filter2) {
        fromBlock = this._getBlockTag(filter2.fromBlock);
      }
      let toBlock = void 0;
      if ("toBlock" in filter2) {
        toBlock = this._getBlockTag(filter2.toBlock);
      }
      if (address2.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
        return Promise.all([Promise.all(address2), fromBlock, toBlock]).then((result) => {
          return resolve(result[0], result[1], result[2]);
        });
      }
      return resolve(address2, fromBlock, toBlock);
    }
    /**
     *  Returns or resolves to a transaction for %%request%%, resolving
     *  any ENS names or [[Addressable]] and returning if already a valid
     *  transaction.
     */
    _getTransactionRequest(_request) {
      const request2 = (0, provider_js_1.copyRequest)(_request);
      const promises2 = [];
      ["to", "from"].forEach((key) => {
        if (request2[key] == null) {
          return;
        }
        const addr = (0, index_js_1.resolveAddress)(request2[key], this);
        if (isPromise(addr)) {
          promises2.push(async function() {
            request2[key] = await addr;
          }());
        } else {
          request2[key] = addr;
        }
      });
      if (request2.blockTag != null) {
        const blockTag = this._getBlockTag(request2.blockTag);
        if (isPromise(blockTag)) {
          promises2.push(async function() {
            request2.blockTag = await blockTag;
          }());
        } else {
          request2.blockTag = blockTag;
        }
      }
      if (promises2.length) {
        return async function() {
          await Promise.all(promises2);
          return request2;
        }();
      }
      return request2;
    }
    async getNetwork() {
      if (this.#networkPromise == null) {
        const detectNetwork = (async () => {
          try {
            const network2 = await this._detectNetwork();
            this.emit("network", network2, null);
            return network2;
          } catch (error) {
            if (this.#networkPromise === detectNetwork) {
              this.#networkPromise = null;
            }
            throw error;
          }
        })();
        this.#networkPromise = detectNetwork;
        return (await detectNetwork).clone();
      }
      const networkPromise = this.#networkPromise;
      const [expected, actual] = await Promise.all([
        networkPromise,
        this._detectNetwork()
        // The actual connected network
      ]);
      if (expected.chainId !== actual.chainId) {
        if (this.#anyNetwork) {
          this.emit("network", actual, expected);
          if (this.#networkPromise === networkPromise) {
            this.#networkPromise = Promise.resolve(actual);
          }
        } else {
          (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
            event: "changed"
          });
        }
      }
      return expected.clone();
    }
    async getFeeData() {
      const network2 = await this.getNetwork();
      const getFeeDataFunc = async () => {
        const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
          _block: this.#getBlock("latest", false),
          gasPrice: (async () => {
            try {
              const value = await this.#perform({ method: "getGasPrice" });
              return (0, index_js_6.getBigInt)(value, "%response");
            } catch (error) {
            }
            return null;
          })(),
          priorityFee: (async () => {
            try {
              const value = await this.#perform({ method: "getPriorityFee" });
              return (0, index_js_6.getBigInt)(value, "%response");
            } catch (error) {
            }
            return null;
          })()
        });
        let maxFeePerGas = null;
        let maxPriorityFeePerGas = null;
        const block = this._wrapBlock(_block, network2);
        if (block && block.baseFeePerGas) {
          maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
          maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
        }
        return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
      };
      const plugin = network2.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
      if (plugin) {
        const req = new index_js_6.FetchRequest(plugin.url);
        const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
        return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
      }
      return await getFeeDataFunc();
    }
    async estimateGas(_tx) {
      let tx = this._getTransactionRequest(_tx);
      if (isPromise(tx)) {
        tx = await tx;
      }
      return (0, index_js_6.getBigInt)(await this.#perform({
        method: "estimateGas",
        transaction: tx
      }), "%response");
    }
    async #call(tx, blockTag, attempt) {
      (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
        reason: "TOO_MANY_REDIRECTS",
        transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
      });
      const transaction2 = (0, provider_js_1.copyRequest)(tx);
      try {
        return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction: transaction2, blockTag }));
      } catch (error) {
        if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction2.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
          const data2 = error.data;
          const txSender = await (0, index_js_1.resolveAddress)(transaction2.to, this);
          let ccipArgs;
          try {
            ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
          } catch (error2) {
            (0, index_js_6.assert)(false, error2.message, "OFFCHAIN_FAULT", {
              reason: "BAD_DATA",
              transaction: transaction2,
              info: { data: data2 }
            });
          }
          (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
            action: "call",
            data: data2,
            reason: "OffchainLookup",
            transaction: transaction2,
            invocation: null,
            revert: {
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              name: "OffchainLookup",
              args: ccipArgs.errorArgs
            }
          });
          const ccipResult = await this.ccipReadFetch(transaction2, ccipArgs.calldata, ccipArgs.urls);
          (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
            reason: "FETCH_FAILED",
            transaction: transaction2,
            info: { data: error.data, errorArgs: ccipArgs.errorArgs }
          });
          const tx2 = {
            to: txSender,
            data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
          };
          this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
          try {
            const result = await this.#call(tx2, blockTag, attempt + 1);
            this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
            return result;
          } catch (error2) {
            this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
            throw error2;
          }
        }
        throw error;
      }
    }
    async #checkNetwork(promise) {
      const { value } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        value: promise
      });
      return value;
    }
    async call(_tx) {
      const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
        tx: this._getTransactionRequest(_tx),
        blockTag: this._getBlockTag(_tx.blockTag)
      });
      return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
    }
    // Account
    async #getAccountValue(request2, _address, _blockTag) {
      let address2 = this._getAddress(_address);
      let blockTag = this._getBlockTag(_blockTag);
      if (typeof address2 !== "string" || typeof blockTag !== "string") {
        [address2, blockTag] = await Promise.all([address2, blockTag]);
      }
      return await this.#checkNetwork(this.#perform(Object.assign(request2, { address: address2, blockTag })));
    }
    async getBalance(address2, blockTag) {
      return (0, index_js_6.getBigInt)(await this.#getAccountValue({ method: "getBalance" }, address2, blockTag), "%response");
    }
    async getTransactionCount(address2, blockTag) {
      return (0, index_js_6.getNumber)(await this.#getAccountValue({ method: "getTransactionCount" }, address2, blockTag), "%response");
    }
    async getCode(address2, blockTag) {
      return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getCode" }, address2, blockTag));
    }
    async getStorage(address2, _position, blockTag) {
      const position = (0, index_js_6.getBigInt)(_position, "position");
      return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getStorage", position }, address2, blockTag));
    }
    // Write
    async broadcastTransaction(signedTx) {
      const { blockNumber, hash: hash2, network: network2 } = await (0, index_js_6.resolveProperties)({
        blockNumber: this.getBlockNumber(),
        hash: this._perform({
          method: "broadcastTransaction",
          signedTransaction: signedTx
        }),
        network: this.getNetwork()
      });
      const tx = index_js_5.Transaction.from(signedTx);
      if (tx.hash !== hash2) {
        throw new Error("@TODO: the returned hash did not match");
      }
      return this._wrapTransactionResponse(tx, network2).replaceableTransaction(blockNumber);
    }
    async #getBlock(block, includeTransactions) {
      if ((0, index_js_6.isHexString)(block, 32)) {
        return await this.#perform({
          method: "getBlock",
          blockHash: block,
          includeTransactions
        });
      }
      let blockTag = this._getBlockTag(block);
      if (typeof blockTag !== "string") {
        blockTag = await blockTag;
      }
      return await this.#perform({
        method: "getBlock",
        blockTag,
        includeTransactions
      });
    }
    // Queries
    async getBlock(block, prefetchTxs) {
      const { network: network2, params } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        params: this.#getBlock(block, !!prefetchTxs)
      });
      if (params == null) {
        return null;
      }
      return this._wrapBlock(params, network2);
    }
    async getTransaction(hash2) {
      const { network: network2, params } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        params: this.#perform({ method: "getTransaction", hash: hash2 })
      });
      if (params == null) {
        return null;
      }
      return this._wrapTransactionResponse(params, network2);
    }
    async getTransactionReceipt(hash2) {
      const { network: network2, params } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        params: this.#perform({ method: "getTransactionReceipt", hash: hash2 })
      });
      if (params == null) {
        return null;
      }
      if (params.gasPrice == null && params.effectiveGasPrice == null) {
        const tx = await this.#perform({ method: "getTransaction", hash: hash2 });
        if (tx == null) {
          throw new Error("report this; could not find tx or effectiveGasPrice");
        }
        params.effectiveGasPrice = tx.gasPrice;
      }
      return this._wrapTransactionReceipt(params, network2);
    }
    async getTransactionResult(hash2) {
      const { result } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        result: this.#perform({ method: "getTransactionResult", hash: hash2 })
      });
      if (result == null) {
        return null;
      }
      return (0, index_js_6.hexlify)(result);
    }
    // Bloom-filter Queries
    async getLogs(_filter) {
      let filter2 = this._getFilter(_filter);
      if (isPromise(filter2)) {
        filter2 = await filter2;
      }
      const { network: network2, params } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        params: this.#perform({ method: "getLogs", filter: filter2 })
      });
      return params.map((p) => this._wrapLog(p, network2));
    }
    // ENS
    _getProvider(chainId) {
      (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
        operation: "_getProvider()"
      });
    }
    async getResolver(name) {
      return await ens_resolver_js_1.EnsResolver.fromName(this, name);
    }
    async getAvatar(name) {
      const resolver = await this.getResolver(name);
      if (resolver) {
        return await resolver.getAvatar();
      }
      return null;
    }
    async resolveName(name) {
      const resolver = await this.getResolver(name);
      if (resolver) {
        return await resolver.getAddress();
      }
      return null;
    }
    async lookupAddress(address2) {
      address2 = (0, index_js_1.getAddress)(address2);
      const node2 = (0, index_js_4.namehash)(address2.substring(2).toLowerCase() + ".addr.reverse");
      try {
        const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
        const ensContract = new index_js_3.Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], this);
        const resolver = await ensContract.resolver(node2);
        if (resolver == null || resolver === index_js_2.ZeroAddress) {
          return null;
        }
        const resolverContract = new index_js_3.Contract(resolver, [
          "function name(bytes32) view returns (string)"
        ], this);
        const name = await resolverContract.name(node2);
        const check = await this.resolveName(name);
        if (check !== address2) {
          return null;
        }
        return name;
      } catch (error) {
        if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
          return null;
        }
        if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
          return null;
        }
        throw error;
      }
      return null;
    }
    async waitForTransaction(hash2, _confirms, timeout) {
      const confirms = _confirms != null ? _confirms : 1;
      if (confirms === 0) {
        return this.getTransactionReceipt(hash2);
      }
      return new Promise(async (resolve, reject) => {
        let timer = null;
        const listener = async (blockNumber) => {
          try {
            const receipt = await this.getTransactionReceipt(hash2);
            if (receipt != null) {
              if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                resolve(receipt);
                if (timer) {
                  clearTimeout(timer);
                  timer = null;
                }
                return;
              }
            }
          } catch (error) {
            console.log("EEE", error);
          }
          this.once("block", listener);
        };
        if (timeout != null) {
          timer = setTimeout(() => {
            if (timer == null) {
              return;
            }
            timer = null;
            this.off("block", listener);
            reject((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
          }, timeout);
        }
        listener(await this.getBlockNumber());
      });
    }
    async waitForBlock(blockTag) {
      (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
        operation: "waitForBlock"
      });
    }
    /**
     *  Clear a timer created using the [[_setTimeout]] method.
     */
    _clearTimeout(timerId) {
      const timer = this.#timers.get(timerId);
      if (!timer) {
        return;
      }
      if (timer.timer) {
        clearTimeout(timer.timer);
      }
      this.#timers.delete(timerId);
    }
    /**
     *  Create a timer that will execute %%func%% after at least %%timeout%%
     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
     *  in the next event loop.
     *
     *  [Pausing](AbstractProvider-paused) the provider will pause any
     *  associated timers.
     */
    _setTimeout(_func, timeout) {
      if (timeout == null) {
        timeout = 0;
      }
      const timerId = this.#nextTimer++;
      const func = () => {
        this.#timers.delete(timerId);
        _func();
      };
      if (this.paused) {
        this.#timers.set(timerId, { timer: null, func, time: timeout });
      } else {
        const timer = setTimeout(func, timeout);
        this.#timers.set(timerId, { timer, func, time: getTime() });
      }
      return timerId;
    }
    /**
     *  Perform %%func%% on each subscriber.
     */
    _forEachSubscriber(func) {
      for (const sub of this.#subs.values()) {
        func(sub.subscriber);
      }
    }
    /**
     *  Sub-classes may override this to customize subscription
     *  implementations.
     */
    _getSubscriber(sub) {
      switch (sub.type) {
        case "debug":
        case "error":
        case "network":
          return new UnmanagedSubscriber(sub.type);
        case "block": {
          const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
          subscriber.pollingInterval = this.pollingInterval;
          return subscriber;
        }
        case "safe":
        case "finalized":
          return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
        case "event":
          return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
        case "transaction":
          return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
        case "orphan":
          return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
      }
      throw new Error(`unsupported event: ${sub.type}`);
    }
    /**
     *  If a [[Subscriber]] fails and needs to replace itself, this
     *  method may be used.
     *
     *  For example, this is used for providers when using the
     *  ``eth_getFilterChanges`` method, which can return null if state
     *  filters are not supported by the backend, allowing the Subscriber
     *  to swap in a [[PollingEventSubscriber]].
     */
    _recoverSubscriber(oldSub, newSub) {
      for (const sub of this.#subs.values()) {
        if (sub.subscriber === oldSub) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          sub.subscriber = newSub;
          if (sub.started) {
            newSub.start();
          }
          if (this.#pausedState != null) {
            newSub.pause(this.#pausedState);
          }
          break;
        }
      }
    }
    async #hasSub(event, emitArgs) {
      let sub = await getSubscription(event, this);
      if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
        sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
      }
      return this.#subs.get(sub.tag) || null;
    }
    async #getSub(event) {
      const subscription = await getSubscription(event, this);
      const tag = subscription.tag;
      let sub = this.#subs.get(tag);
      if (!sub) {
        const subscriber = this._getSubscriber(subscription);
        const addressableMap = /* @__PURE__ */ new WeakMap();
        const nameMap = /* @__PURE__ */ new Map();
        sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
        this.#subs.set(tag, sub);
      }
      return sub;
    }
    async on(event, listener) {
      const sub = await this.#getSub(event);
      sub.listeners.push({ listener, once: false });
      if (!sub.started) {
        sub.subscriber.start();
        sub.started = true;
        if (this.#pausedState != null) {
          sub.subscriber.pause(this.#pausedState);
        }
      }
      return this;
    }
    async once(event, listener) {
      const sub = await this.#getSub(event);
      sub.listeners.push({ listener, once: true });
      if (!sub.started) {
        sub.subscriber.start();
        sub.started = true;
        if (this.#pausedState != null) {
          sub.subscriber.pause(this.#pausedState);
        }
      }
      return this;
    }
    async emit(event, ...args) {
      const sub = await this.#hasSub(event, args);
      if (!sub || sub.listeners.length === 0) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once: once2 }) => {
        const payload = new index_js_6.EventPayload(this, once2 ? null : listener, event);
        try {
          listener.call(this, ...args, payload);
        } catch (error) {
        }
        return !once2;
      });
      if (sub.listeners.length === 0) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        this.#subs.delete(sub.tag);
      }
      return count > 0;
    }
    async listenerCount(event) {
      if (event) {
        const sub = await this.#hasSub(event);
        if (!sub) {
          return 0;
        }
        return sub.listeners.length;
      }
      let total = 0;
      for (const { listeners: listeners2 } of this.#subs.values()) {
        total += listeners2.length;
      }
      return total;
    }
    async listeners(event) {
      if (event) {
        const sub = await this.#hasSub(event);
        if (!sub) {
          return [];
        }
        return sub.listeners.map(({ listener }) => listener);
      }
      let result = [];
      for (const { listeners: listeners2 } of this.#subs.values()) {
        result = result.concat(listeners2.map(({ listener }) => listener));
      }
      return result;
    }
    async off(event, listener) {
      const sub = await this.#hasSub(event);
      if (!sub) {
        return this;
      }
      if (listener) {
        const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
        if (index >= 0) {
          sub.listeners.splice(index, 1);
        }
      }
      if (!listener || sub.listeners.length === 0) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        this.#subs.delete(sub.tag);
      }
      return this;
    }
    async removeAllListeners(event) {
      if (event) {
        const { tag, started, subscriber } = await this.#getSub(event);
        if (started) {
          subscriber.stop();
        }
        this.#subs.delete(tag);
      } else {
        for (const [tag, { started, subscriber }] of this.#subs) {
          if (started) {
            subscriber.stop();
          }
          this.#subs.delete(tag);
        }
      }
      return this;
    }
    // Alias for "on"
    async addListener(event, listener) {
      return await this.on(event, listener);
    }
    // Alias for "off"
    async removeListener(event, listener) {
      return this.off(event, listener);
    }
    /**
     *  If this provider has been destroyed using the [[destroy]] method.
     *
     *  Once destroyed, all resources are reclaimed, internal event loops
     *  and timers are cleaned up and no further requests may be sent to
     *  the provider.
     */
    get destroyed() {
      return this.#destroyed;
    }
    /**
     *  Sub-classes may use this to shutdown any sockets or release their
     *  resources and reject any pending requests.
     *
     *  Sub-classes **must** call ``super.destroy()``.
     */
    destroy() {
      this.removeAllListeners();
      for (const timerId of this.#timers.keys()) {
        this._clearTimeout(timerId);
      }
      this.#destroyed = true;
    }
    /**
     *  Whether the provider is currently paused.
     *
     *  A paused provider will not emit any events, and generally should
     *  not make any requests to the network, but that is up to sub-classes
     *  to manage.
     *
     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
     *  which will buffer any events that occur while paused until the
     *  provider is unpaused.
     */
    get paused() {
      return this.#pausedState != null;
    }
    set paused(pause) {
      if (!!pause === this.paused) {
        return;
      }
      if (this.paused) {
        this.resume();
      } else {
        this.pause(false);
      }
    }
    /**
     *  Pause the provider. If %%dropWhilePaused%%, any events that occur
     *  while paused are dropped, otherwise all events will be emitted once
     *  the provider is unpaused.
     */
    pause(dropWhilePaused) {
      this.#lastBlockNumber = -1;
      if (this.#pausedState != null) {
        if (this.#pausedState == !!dropWhilePaused) {
          return;
        }
        (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
          operation: "pause"
        });
      }
      this._forEachSubscriber((s) => s.pause(dropWhilePaused));
      this.#pausedState = !!dropWhilePaused;
      for (const timer of this.#timers.values()) {
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        timer.time = getTime() - timer.time;
      }
    }
    /**
     *  Resume the provider.
     */
    resume() {
      if (this.#pausedState == null) {
        return;
      }
      this._forEachSubscriber((s) => s.resume());
      this.#pausedState = null;
      for (const timer of this.#timers.values()) {
        let timeout = timer.time;
        if (timeout < 0) {
          timeout = 0;
        }
        timer.time = getTime();
        setTimeout(timer.func, timeout);
      }
    }
  }
  abstractProvider.AbstractProvider = AbstractProvider;
  function _parseString(result, start) {
    try {
      const bytes2 = _parseBytes(result, start);
      if (bytes2) {
        return (0, index_js_6.toUtf8String)(bytes2);
      }
    } catch (error) {
    }
    return null;
  }
  function _parseBytes(result, start) {
    if (result === "0x") {
      return null;
    }
    try {
      const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
      const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));
      return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);
    } catch (error) {
    }
    return null;
  }
  function numPad(value) {
    const result = (0, index_js_6.toBeArray)(value);
    if (result.length > 32) {
      throw new Error("internal; should not happen");
    }
    const padded = new Uint8Array(32);
    padded.set(result, 32 - result.length);
    return padded;
  }
  function bytesPad(value) {
    if (value.length % 32 === 0) {
      return value;
    }
    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
    result.set(value);
    return result;
  }
  const empty = new Uint8Array([]);
  function encodeBytes(datas) {
    const result = [];
    let byteCount = 0;
    for (let i = 0; i < datas.length; i++) {
      result.push(empty);
      byteCount += 32;
    }
    for (let i = 0; i < datas.length; i++) {
      const data2 = (0, index_js_6.getBytes)(datas[i]);
      result[i] = numPad(byteCount);
      result.push(numPad(data2.length));
      result.push(bytesPad(data2));
      byteCount += 32 + Math.ceil(data2.length / 32) * 32;
    }
    return (0, index_js_6.concat)(result);
  }
  const zeros2 = "0x0000000000000000000000000000000000000000000000000000000000000000";
  function parseOffchainLookup(data2) {
    const result = {
      sender: "",
      urls: [],
      calldata: "",
      selector: "",
      extraData: "",
      errorArgs: []
    };
    (0, index_js_6.assert)((0, index_js_6.dataLength)(data2) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
      reason: "insufficient OffchainLookup data"
    });
    const sender = (0, index_js_6.dataSlice)(data2, 0, 32);
    (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros2, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup sender"
    });
    result.sender = (0, index_js_6.dataSlice)(sender, 12);
    try {
      const urls = [];
      const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data2, 32, 64));
      const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data2, urlsOffset, urlsOffset + 32));
      const urlsData = (0, index_js_6.dataSlice)(data2, urlsOffset + 32);
      for (let u = 0; u < urlsLength; u++) {
        const url = _parseString(urlsData, u * 32);
        if (url == null) {
          throw new Error("abort");
        }
        urls.push(url);
      }
      result.urls = urls;
    } catch (error) {
      (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup urls"
      });
    }
    try {
      const calldata = _parseBytes(data2, 64);
      if (calldata == null) {
        throw new Error("abort");
      }
      result.calldata = calldata;
    } catch (error) {
      (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup calldata"
      });
    }
    (0, index_js_6.assert)((0, index_js_6.dataSlice)(data2, 100, 128) === (0, index_js_6.dataSlice)(zeros2, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup callbaackSelector"
    });
    result.selector = (0, index_js_6.dataSlice)(data2, 96, 100);
    try {
      const extraData = _parseBytes(data2, 128);
      if (extraData == null) {
        throw new Error("abort");
      }
      result.extraData = extraData;
    } catch (error) {
      (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup extraData"
      });
    }
    result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
    return result;
  }
  return abstractProvider;
}
var abstractSigner = {};
var hasRequiredAbstractSigner;
function requireAbstractSigner() {
  if (hasRequiredAbstractSigner) return abstractSigner;
  hasRequiredAbstractSigner = 1;
  Object.defineProperty(abstractSigner, "__esModule", { value: true });
  abstractSigner.VoidSigner = abstractSigner.AbstractSigner = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireTransaction();
  const index_js_3 = /* @__PURE__ */ requireUtils$3();
  const provider_js_1 = /* @__PURE__ */ requireProvider();
  function checkProvider(signer, operation) {
    if (signer.provider) {
      return signer.provider;
    }
    (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
  }
  async function populate2(signer, tx) {
    let pop = (0, provider_js_1.copyRequest)(tx);
    if (pop.to != null) {
      pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
    }
    if (pop.from != null) {
      const from = pop.from;
      pop.from = Promise.all([
        signer.getAddress(),
        (0, index_js_1.resolveAddress)(from, signer)
      ]).then(([address2, from2]) => {
        (0, index_js_3.assertArgument)(address2.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
        return address2;
      });
    } else {
      pop.from = signer.getAddress();
    }
    return await (0, index_js_3.resolveProperties)(pop);
  }
  class AbstractSigner {
    /**
     *  The provider this signer is connected to.
     */
    provider;
    /**
     *  Creates a new Signer connected to %%provider%%.
     */
    constructor(provider2) {
      (0, index_js_3.defineProperties)(this, { provider: provider2 || null });
    }
    async getNonce(blockTag) {
      return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
    }
    async populateCall(tx) {
      const pop = await populate2(this, tx);
      return pop;
    }
    async populateTransaction(tx) {
      const provider2 = checkProvider(this, "populateTransaction");
      const pop = await populate2(this, tx);
      if (pop.nonce == null) {
        pop.nonce = await this.getNonce("pending");
      }
      if (pop.gasLimit == null) {
        pop.gasLimit = await this.estimateGas(pop);
      }
      const network2 = await this.provider.getNetwork();
      if (pop.chainId != null) {
        const chainId = (0, index_js_3.getBigInt)(pop.chainId);
        (0, index_js_3.assertArgument)(chainId === network2.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
      } else {
        pop.chainId = network2.chainId;
      }
      const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
      if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
        (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
      } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
        (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
      }
      if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
        pop.type = 2;
      } else if (pop.type === 0 || pop.type === 1) {
        const feeData = await provider2.getFeeData();
        (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
          operation: "getGasPrice"
        });
        if (pop.gasPrice == null) {
          pop.gasPrice = feeData.gasPrice;
        }
      } else {
        const feeData = await provider2.getFeeData();
        if (pop.type == null) {
          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
            if (pop.authorizationList && pop.authorizationList.length) {
              pop.type = 4;
            } else {
              pop.type = 2;
            }
            if (pop.gasPrice != null) {
              const gasPrice = pop.gasPrice;
              delete pop.gasPrice;
              pop.maxFeePerGas = gasPrice;
              pop.maxPriorityFeePerGas = gasPrice;
            } else {
              if (pop.maxFeePerGas == null) {
                pop.maxFeePerGas = feeData.maxFeePerGas;
              }
              if (pop.maxPriorityFeePerGas == null) {
                pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          } else if (feeData.gasPrice != null) {
            (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
              operation: "populateTransaction"
            });
            if (pop.gasPrice == null) {
              pop.gasPrice = feeData.gasPrice;
            }
            pop.type = 0;
          } else {
            (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
              operation: "signer.getFeeData"
            });
          }
        } else if (pop.type === 2 || pop.type === 3 || pop.type === 4) {
          if (pop.maxFeePerGas == null) {
            pop.maxFeePerGas = feeData.maxFeePerGas;
          }
          if (pop.maxPriorityFeePerGas == null) {
            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
          }
        }
      }
      return await (0, index_js_3.resolveProperties)(pop);
    }
    async populateAuthorization(_auth) {
      const auth = Object.assign({}, _auth);
      if (auth.chainId == null) {
        auth.chainId = (await checkProvider(this, "getNetwork").getNetwork()).chainId;
      }
      if (auth.nonce == null) {
        auth.nonce = await this.getNonce();
      }
      return auth;
    }
    async estimateGas(tx) {
      return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
    }
    async call(tx) {
      return checkProvider(this, "call").call(await this.populateCall(tx));
    }
    async resolveName(name) {
      const provider2 = checkProvider(this, "resolveName");
      return await provider2.resolveName(name);
    }
    async sendTransaction(tx) {
      const provider2 = checkProvider(this, "sendTransaction");
      const pop = await this.populateTransaction(tx);
      delete pop.from;
      const txObj = index_js_2.Transaction.from(pop);
      return await provider2.broadcastTransaction(await this.signTransaction(txObj));
    }
    // @TODO: in v7 move this to be abstract
    authorize(authorization2) {
      (0, index_js_3.assert)(false, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
    }
  }
  abstractSigner.AbstractSigner = AbstractSigner;
  class VoidSigner extends AbstractSigner {
    /**
     *  The signer address.
     */
    address;
    /**
     *  Creates a new **VoidSigner** with %%address%% attached to
     *  %%provider%%.
     */
    constructor(address2, provider2) {
      super(provider2);
      (0, index_js_3.defineProperties)(this, { address: address2 });
    }
    async getAddress() {
      return this.address;
    }
    connect(provider2) {
      return new VoidSigner(this.address, provider2);
    }
    #throwUnsupported(suffix, operation) {
      (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
    }
    async signTransaction(tx) {
      this.#throwUnsupported("transactions", "signTransaction");
    }
    async signMessage(message2) {
      this.#throwUnsupported("messages", "signMessage");
    }
    async signTypedData(domain2, types2, value) {
      this.#throwUnsupported("typed-data", "signTypedData");
    }
  }
  abstractSigner.VoidSigner = VoidSigner;
  return abstractSigner;
}
var community = {};
var hasRequiredCommunity;
function requireCommunity() {
  if (hasRequiredCommunity) return community;
  hasRequiredCommunity = 1;
  Object.defineProperty(community, "__esModule", { value: true });
  community.showThrottleMessage = void 0;
  const shown = /* @__PURE__ */ new Set();
  function showThrottleMessage(service) {
    if (shown.has(service)) {
      return;
    }
    shown.add(service);
    console.log("========= NOTICE =========");
    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.org/api-keys/");
    console.log("==========================");
  }
  community.showThrottleMessage = showThrottleMessage;
  return community;
}
var defaultProvider = {};
var providerAnkr = {};
var providerJsonrpc = {};
var subscriberFilterid = {};
var hasRequiredSubscriberFilterid;
function requireSubscriberFilterid() {
  if (hasRequiredSubscriberFilterid) return subscriberFilterid;
  hasRequiredSubscriberFilterid = 1;
  Object.defineProperty(subscriberFilterid, "__esModule", { value: true });
  subscriberFilterid.FilterIdPendingSubscriber = subscriberFilterid.FilterIdEventSubscriber = subscriberFilterid.FilterIdSubscriber = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const subscriber_polling_js_1 = /* @__PURE__ */ requireSubscriberPolling();
  function copy(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
  class FilterIdSubscriber {
    #provider;
    #filterIdPromise;
    #poller;
    #running;
    #network;
    #hault;
    /**
     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
     *  and [[_emitResults]] to setup the subscription and provide the event
     *  to the %%provider%%.
     */
    constructor(provider2) {
      this.#provider = provider2;
      this.#filterIdPromise = null;
      this.#poller = this.#poll.bind(this);
      this.#running = false;
      this.#network = null;
      this.#hault = false;
    }
    /**
     *  Sub-classes **must** override this to begin the subscription.
     */
    _subscribe(provider2) {
      throw new Error("subclasses must override this");
    }
    /**
     *  Sub-classes **must** override this handle the events.
     */
    _emitResults(provider2, result) {
      throw new Error("subclasses must override this");
    }
    /**
     *  Sub-classes **must** override this handle recovery on errors.
     */
    _recover(provider2) {
      throw new Error("subclasses must override this");
    }
    async #poll(blockNumber) {
      try {
        if (this.#filterIdPromise == null) {
          this.#filterIdPromise = this._subscribe(this.#provider);
        }
        let filterId = null;
        try {
          filterId = await this.#filterIdPromise;
        } catch (error) {
          if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
            throw error;
          }
        }
        if (filterId == null) {
          this.#filterIdPromise = null;
          this.#provider._recoverSubscriber(this, this._recover(this.#provider));
          return;
        }
        const network2 = await this.#provider.getNetwork();
        if (!this.#network) {
          this.#network = network2;
        }
        if (this.#network.chainId !== network2.chainId) {
          throw new Error("chaid changed");
        }
        if (this.#hault) {
          return;
        }
        const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
        await this._emitResults(this.#provider, result);
      } catch (error) {
        console.log("@TODO", error);
      }
      this.#provider.once("block", this.#poller);
    }
    #teardown() {
      const filterIdPromise = this.#filterIdPromise;
      if (filterIdPromise) {
        this.#filterIdPromise = null;
        filterIdPromise.then((filterId) => {
          if (this.#provider.destroyed) {
            return;
          }
          this.#provider.send("eth_uninstallFilter", [filterId]);
        });
      }
    }
    start() {
      if (this.#running) {
        return;
      }
      this.#running = true;
      this.#poll(-2);
    }
    stop() {
      if (!this.#running) {
        return;
      }
      this.#running = false;
      this.#hault = true;
      this.#teardown();
      this.#provider.off("block", this.#poller);
    }
    pause(dropWhilePaused) {
      if (dropWhilePaused) {
        this.#teardown();
      }
      this.#provider.off("block", this.#poller);
    }
    resume() {
      this.start();
    }
  }
  subscriberFilterid.FilterIdSubscriber = FilterIdSubscriber;
  class FilterIdEventSubscriber extends FilterIdSubscriber {
    #event;
    /**
     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
     *  listening for %%filter%%.
     */
    constructor(provider2, filter2) {
      super(provider2);
      this.#event = copy(filter2);
    }
    _recover(provider2) {
      return new subscriber_polling_js_1.PollingEventSubscriber(provider2, this.#event);
    }
    async _subscribe(provider2) {
      const filterId = await provider2.send("eth_newFilter", [this.#event]);
      return filterId;
    }
    async _emitResults(provider2, results) {
      for (const result of results) {
        provider2.emit(this.#event, provider2._wrapLog(result, provider2._network));
      }
    }
  }
  subscriberFilterid.FilterIdEventSubscriber = FilterIdEventSubscriber;
  class FilterIdPendingSubscriber extends FilterIdSubscriber {
    async _subscribe(provider2) {
      return await provider2.send("eth_newPendingTransactionFilter", []);
    }
    async _emitResults(provider2, results) {
      for (const result of results) {
        provider2.emit("pending", result);
      }
    }
  }
  subscriberFilterid.FilterIdPendingSubscriber = FilterIdPendingSubscriber;
  return subscriberFilterid;
}
var hasRequiredProviderJsonrpc;
function requireProviderJsonrpc() {
  if (hasRequiredProviderJsonrpc) return providerJsonrpc;
  hasRequiredProviderJsonrpc = 1;
  Object.defineProperty(providerJsonrpc, "__esModule", { value: true });
  providerJsonrpc.JsonRpcProvider = providerJsonrpc.JsonRpcApiPollingProvider = providerJsonrpc.JsonRpcApiProvider = providerJsonrpc.JsonRpcSigner = void 0;
  const index_js_1 = /* @__PURE__ */ requireAbi();
  const index_js_2 = /* @__PURE__ */ requireAddress$2();
  const index_js_3 = /* @__PURE__ */ requireHash();
  const index_js_4 = /* @__PURE__ */ requireTransaction();
  const index_js_5 = /* @__PURE__ */ requireUtils$3();
  const abstract_provider_js_1 = /* @__PURE__ */ requireAbstractProvider();
  const abstract_signer_js_1 = /* @__PURE__ */ requireAbstractSigner();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const subscriber_filterid_js_1 = /* @__PURE__ */ requireSubscriberFilterid();
  const subscriber_polling_js_1 = /* @__PURE__ */ requireSubscriberPolling();
  const Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
  function deepCopy2(value) {
    if (value == null || Primitive.indexOf(typeof value) >= 0) {
      return value;
    }
    if (typeof value.getAddress === "function") {
      return value;
    }
    if (Array.isArray(value)) {
      return value.map(deepCopy2);
    }
    if (typeof value === "object") {
      return Object.keys(value).reduce((accum, key) => {
        accum[key] = value[key];
        return accum;
      }, {});
    }
    throw new Error(`should not happen: ${value} (${typeof value})`);
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function getLowerCase(value) {
    if (value) {
      return value.toLowerCase();
    }
    return value;
  }
  function isPollable(value) {
    return value && typeof value.pollingInterval === "number";
  }
  const defaultOptions = {
    polling: false,
    staticNetwork: null,
    batchStallTime: 10,
    batchMaxSize: 1 << 20,
    batchMaxCount: 100,
    cacheTimeout: 250,
    pollingInterval: 4e3
  };
  class JsonRpcSigner extends abstract_signer_js_1.AbstractSigner {
    address;
    constructor(provider2, address2) {
      super(provider2);
      address2 = (0, index_js_2.getAddress)(address2);
      (0, index_js_5.defineProperties)(this, { address: address2 });
    }
    connect(provider2) {
      (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
        operation: "signer.connect"
      });
    }
    async getAddress() {
      return this.address;
    }
    // JSON-RPC will automatially fill in nonce, etc. so we just check from
    async populateTransaction(tx) {
      return await this.populateCall(tx);
    }
    // Returns just the hash of the transaction after sent, which is what
    // the bare JSON-RPC API does;
    async sendUncheckedTransaction(_tx) {
      const tx = deepCopy2(_tx);
      const promises2 = [];
      if (tx.from) {
        const _from = tx.from;
        promises2.push((async () => {
          const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
          (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        })());
      } else {
        tx.from = this.address;
      }
      if (tx.gasLimit == null) {
        promises2.push((async () => {
          tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
        })());
      }
      if (tx.to != null) {
        const _to = tx.to;
        promises2.push((async () => {
          tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
        })());
      }
      if (promises2.length) {
        await Promise.all(promises2);
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return this.provider.send("eth_sendTransaction", [hexTx]);
    }
    async sendTransaction(tx) {
      const blockNumber = await this.provider.getBlockNumber();
      const hash2 = await this.sendUncheckedTransaction(tx);
      return await new Promise((resolve, reject) => {
        const timeouts = [1e3, 100];
        let invalids = 0;
        const checkTx = async () => {
          try {
            const tx2 = await this.provider.getTransaction(hash2);
            if (tx2 != null) {
              resolve(tx2.replaceableTransaction(blockNumber));
              return;
            }
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") || (0, index_js_5.isError)(error, "NETWORK_ERROR") || (0, index_js_5.isError)(error, "UNSUPPORTED_OPERATION")) {
              if (error.info == null) {
                error.info = {};
              }
              error.info.sendTransactionHash = hash2;
              reject(error);
              return;
            }
            if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
              invalids++;
              if (error.info == null) {
                error.info = {};
              }
              error.info.sendTransactionHash = hash2;
              if (invalids > 10) {
                reject(error);
                return;
              }
            }
            this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
          }
          this.provider._setTimeout(() => {
            checkTx();
          }, timeouts.pop() || 4e3);
        };
        checkTx();
      });
    }
    async signTransaction(_tx) {
      const tx = deepCopy2(_tx);
      if (tx.from) {
        const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
        (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
        tx.from = from;
      } else {
        tx.from = this.address;
      }
      const hexTx = this.provider.getRpcTransaction(tx);
      return await this.provider.send("eth_signTransaction", [hexTx]);
    }
    async signMessage(_message) {
      const message2 = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
      return await this.provider.send("personal_sign", [
        (0, index_js_5.hexlify)(message2),
        this.address.toLowerCase()
      ]);
    }
    async signTypedData(domain2, types2, _value) {
      const value = deepCopy2(_value);
      const populated = await index_js_3.TypedDataEncoder.resolveNames(domain2, types2, value, async (value2) => {
        const address2 = await (0, index_js_2.resolveAddress)(value2);
        (0, index_js_5.assertArgument)(address2 != null, "TypedData does not support null address", "value", value2);
        return address2;
      });
      return await this.provider.send("eth_signTypedData_v4", [
        this.address.toLowerCase(),
        JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types2, populated.value))
      ]);
    }
    async unlock(password) {
      return this.provider.send("personal_unlockAccount", [
        this.address.toLowerCase(),
        password,
        null
      ]);
    }
    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
    async _legacySignMessage(_message) {
      const message2 = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
      return await this.provider.send("eth_sign", [
        this.address.toLowerCase(),
        (0, index_js_5.hexlify)(message2)
      ]);
    }
  }
  providerJsonrpc.JsonRpcSigner = JsonRpcSigner;
  class JsonRpcApiProvider extends abstract_provider_js_1.AbstractProvider {
    #options;
    // The next ID to use for the JSON-RPC ID field
    #nextId;
    // Payloads are queued and triggered in batches using the drainTimer
    #payloads;
    #drainTimer;
    #notReady;
    #network;
    #pendingDetectNetwork;
    #scheduleDrain() {
      if (this.#drainTimer) {
        return;
      }
      const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
      this.#drainTimer = setTimeout(() => {
        this.#drainTimer = null;
        const payloads = this.#payloads;
        this.#payloads = [];
        while (payloads.length) {
          const batch = [payloads.shift()];
          while (payloads.length) {
            if (batch.length === this.#options.batchMaxCount) {
              break;
            }
            batch.push(payloads.shift());
            const bytes2 = JSON.stringify(batch.map((p) => p.payload));
            if (bytes2.length > this.#options.batchMaxSize) {
              payloads.unshift(batch.pop());
              break;
            }
          }
          (async () => {
            const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
            this.emit("debug", { action: "sendRpcPayload", payload });
            try {
              const result = await this._send(payload);
              this.emit("debug", { action: "receiveRpcResult", result });
              for (const { resolve, reject, payload: payload2 } of batch) {
                if (this.destroyed) {
                  reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                  continue;
                }
                const resp = result.filter((r) => r.id === payload2.id)[0];
                if (resp == null) {
                  const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
                    value: result,
                    info: { payload: payload2 }
                  });
                  this.emit("error", error);
                  reject(error);
                  continue;
                }
                if ("error" in resp) {
                  reject(this.getRpcError(payload2, resp));
                  continue;
                }
                resolve(resp.result);
              }
            } catch (error) {
              this.emit("debug", { action: "receiveRpcError", error });
              for (const { reject } of batch) {
                reject(error);
              }
            }
          })();
        }
      }, stallTime);
    }
    constructor(network2, options) {
      super(network2, options);
      this.#nextId = 1;
      this.#options = Object.assign({}, defaultOptions, options || {});
      this.#payloads = [];
      this.#drainTimer = null;
      this.#network = null;
      this.#pendingDetectNetwork = null;
      {
        let resolve = null;
        const promise = new Promise((_resolve) => {
          resolve = _resolve;
        });
        this.#notReady = { promise, resolve };
      }
      const staticNetwork = this._getOption("staticNetwork");
      if (typeof staticNetwork === "boolean") {
        (0, index_js_5.assertArgument)(!staticNetwork || network2 !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
        if (staticNetwork && network2 != null) {
          this.#network = network_js_1.Network.from(network2);
        }
      } else if (staticNetwork) {
        (0, index_js_5.assertArgument)(network2 == null || staticNetwork.matches(network2), "staticNetwork MUST match network object", "options", options);
        this.#network = staticNetwork;
      }
    }
    /**
     *  Returns the value associated with the option %%key%%.
     *
     *  Sub-classes can use this to inquire about configuration options.
     */
    _getOption(key) {
      return this.#options[key];
    }
    /**
     *  Gets the [[Network]] this provider has committed to. On each call, the network
     *  is detected, and if it has changed, the call will reject.
     */
    get _network() {
      (0, index_js_5.assert)(this.#network, "network is not available yet", "NETWORK_ERROR");
      return this.#network;
    }
    /**
     *  Resolves to the non-normalized value by performing %%req%%.
     *
     *  Sub-classes may override this to modify behavior of actions,
     *  and should generally call ``super._perform`` as a fallback.
     */
    async _perform(req) {
      if (req.method === "call" || req.method === "estimateGas") {
        let tx = req.transaction;
        if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = await this.getFeeData();
            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              req = Object.assign({}, req, {
                transaction: Object.assign({}, tx, { type: void 0 })
              });
            }
          }
        }
      }
      const request2 = this.getRpcRequest(req);
      if (request2 != null) {
        return await this.send(request2.method, request2.args);
      }
      return super._perform(req);
    }
    /**
     *  Sub-classes may override this; it detects the *actual* network that
     *  we are **currently** connected to.
     *
     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
     *  _send primitive must be used instead.
     */
    async _detectNetwork() {
      const network2 = this._getOption("staticNetwork");
      if (network2) {
        if (network2 === true) {
          if (this.#network) {
            return this.#network;
          }
        } else {
          return network2;
        }
      }
      if (this.#pendingDetectNetwork) {
        return await this.#pendingDetectNetwork;
      }
      if (this.ready) {
        this.#pendingDetectNetwork = (async () => {
          try {
            const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
            this.#pendingDetectNetwork = null;
            return result;
          } catch (error) {
            this.#pendingDetectNetwork = null;
            throw error;
          }
        })();
        return await this.#pendingDetectNetwork;
      }
      this.#pendingDetectNetwork = (async () => {
        const payload = {
          id: this.#nextId++,
          method: "eth_chainId",
          params: [],
          jsonrpc: "2.0"
        };
        this.emit("debug", { action: "sendRpcPayload", payload });
        let result;
        try {
          result = (await this._send(payload))[0];
          this.#pendingDetectNetwork = null;
        } catch (error) {
          this.#pendingDetectNetwork = null;
          this.emit("debug", { action: "receiveRpcError", error });
          throw error;
        }
        this.emit("debug", { action: "receiveRpcResult", result });
        if ("result" in result) {
          return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
        }
        throw this.getRpcError(payload, result);
      })();
      return await this.#pendingDetectNetwork;
    }
    /**
     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
     *  will be passed to [[_send]] from [[send]]. If it is overridden, then
     *  ``super._start()`` **MUST** be called.
     *
     *  Calling it multiple times is safe and has no effect.
     */
    _start() {
      if (this.#notReady == null || this.#notReady.resolve == null) {
        return;
      }
      this.#notReady.resolve();
      this.#notReady = null;
      (async () => {
        while (this.#network == null && !this.destroyed) {
          try {
            this.#network = await this._detectNetwork();
          } catch (error) {
            if (this.destroyed) {
              break;
            }
            console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
            this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
            await stall(1e3);
          }
        }
        this.#scheduleDrain();
      })();
    }
    /**
     *  Resolves once the [[_start]] has been called. This can be used in
     *  sub-classes to defer sending data until the connection has been
     *  established.
     */
    async _waitUntilReady() {
      if (this.#notReady == null) {
        return;
      }
      return await this.#notReady.promise;
    }
    /**
     *  Return a Subscriber that will manage the %%sub%%.
     *
     *  Sub-classes may override this to modify the behavior of
     *  subscription management.
     */
    _getSubscriber(sub) {
      if (sub.type === "pending") {
        return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
      }
      if (sub.type === "event") {
        if (this._getOption("polling")) {
          return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
        }
        return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
      }
      if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
        return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
      }
      return super._getSubscriber(sub);
    }
    /**
     *  Returns true only if the [[_start]] has been called.
     */
    get ready() {
      return this.#notReady == null;
    }
    /**
     *  Returns %%tx%% as a normalized JSON-RPC transaction request,
     *  which has all values hexlified and any numeric values converted
     *  to Quantity values.
     */
    getRpcTransaction(tx) {
      const result = {};
      ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        let dstKey = key;
        if (key === "gasLimit") {
          dstKey = "gas";
        }
        result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
      });
      ["from", "to", "data"].forEach((key) => {
        if (tx[key] == null) {
          return;
        }
        result[key] = (0, index_js_5.hexlify)(tx[key]);
      });
      if (tx.accessList) {
        result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
      }
      if (tx.blobVersionedHashes) {
        result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
      }
      if (tx.authorizationList) {
        result["authorizationList"] = tx.authorizationList.map((_a) => {
          const a = (0, index_js_4.authorizationify)(_a);
          return {
            address: a.address,
            nonce: (0, index_js_5.toQuantity)(a.nonce),
            chainId: (0, index_js_5.toQuantity)(a.chainId),
            yParity: (0, index_js_5.toQuantity)(a.signature.yParity),
            r: (0, index_js_5.toQuantity)(a.signature.r),
            s: (0, index_js_5.toQuantity)(a.signature.s)
          };
        });
      }
      return result;
    }
    /**
     *  Returns the request method and arguments required to perform
     *  %%req%%.
     */
    getRpcRequest(req) {
      switch (req.method) {
        case "chainId":
          return { method: "eth_chainId", args: [] };
        case "getBlockNumber":
          return { method: "eth_blockNumber", args: [] };
        case "getGasPrice":
          return { method: "eth_gasPrice", args: [] };
        case "getPriorityFee":
          return { method: "eth_maxPriorityFeePerGas", args: [] };
        case "getBalance":
          return {
            method: "eth_getBalance",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getTransactionCount":
          return {
            method: "eth_getTransactionCount",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getCode":
          return {
            method: "eth_getCode",
            args: [getLowerCase(req.address), req.blockTag]
          };
        case "getStorage":
          return {
            method: "eth_getStorageAt",
            args: [
              getLowerCase(req.address),
              "0x" + req.position.toString(16),
              req.blockTag
            ]
          };
        case "broadcastTransaction":
          return {
            method: "eth_sendRawTransaction",
            args: [req.signedTransaction]
          };
        case "getBlock":
          if ("blockTag" in req) {
            return {
              method: "eth_getBlockByNumber",
              args: [req.blockTag, !!req.includeTransactions]
            };
          } else if ("blockHash" in req) {
            return {
              method: "eth_getBlockByHash",
              args: [req.blockHash, !!req.includeTransactions]
            };
          }
          break;
        case "getTransaction":
          return {
            method: "eth_getTransactionByHash",
            args: [req.hash]
          };
        case "getTransactionReceipt":
          return {
            method: "eth_getTransactionReceipt",
            args: [req.hash]
          };
        case "call":
          return {
            method: "eth_call",
            args: [this.getRpcTransaction(req.transaction), req.blockTag]
          };
        case "estimateGas": {
          return {
            method: "eth_estimateGas",
            args: [this.getRpcTransaction(req.transaction)]
          };
        }
        case "getLogs":
          if (req.filter && req.filter.address != null) {
            if (Array.isArray(req.filter.address)) {
              req.filter.address = req.filter.address.map(getLowerCase);
            } else {
              req.filter.address = getLowerCase(req.filter.address);
            }
          }
          return { method: "eth_getLogs", args: [req.filter] };
      }
      return null;
    }
    /**
     *  Returns an ethers-style Error for the given JSON-RPC error
     *  %%payload%%, coalescing the various strings and error shapes
     *  that different nodes return, coercing them into a machine-readable
     *  standardized error.
     */
    getRpcError(payload, _error) {
      const { method } = payload;
      const { error } = _error;
      if (method === "eth_estimateGas" && error.message) {
        const msg = error.message;
        if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
          return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
            transaction: payload.params[0],
            info: { payload, error }
          });
        } else if (msg.match(/nonce/i) && msg.match(/too low/i)) {
          return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", {
            transaction: payload.params[0],
            info: { payload, error }
          });
        }
      }
      if (method === "eth_call" || method === "eth_estimateGas") {
        const result = spelunkData(error);
        const e = index_js_1.AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
        e.info = { error, payload };
        return e;
      }
      const message2 = JSON.stringify(spelunkMessage(error));
      if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
        const actionMap = {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        };
        return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
          action: actionMap[method] || "unknown",
          reason: "rejected",
          info: { payload, error }
        });
      }
      if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
        const transaction2 = payload.params[0];
        if (message2.match(/insufficient funds|base fee exceeds gas limit/i)) {
          return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
            transaction: transaction2,
            info: { error }
          });
        }
        if (message2.match(/nonce/i) && message2.match(/too low/i)) {
          return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction: transaction2, info: { error } });
        }
        if (message2.match(/replacement transaction/i) && message2.match(/underpriced/i)) {
          return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction: transaction2, info: { error } });
        }
        if (message2.match(/only replay-protected/i)) {
          return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
            operation: method,
            info: { transaction: transaction2, info: { error } }
          });
        }
      }
      let unsupported = !!message2.match(/the method .* does not exist/i);
      if (!unsupported) {
        if (error && error.details && error.details.startsWith("Unauthorized method:")) {
          unsupported = true;
        }
      }
      if (unsupported) {
        return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
          operation: payload.method,
          info: { error, payload }
        });
      }
      return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
    }
    /**
     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
     *  over the underlying channel. This can be used to call methods
     *  on the backend that do not have a high-level API within the Provider
     *  API.
     *
     *  This method queues requests according to the batch constraints
     *  in the options, assigns the request a unique ID.
     *
     *  **Do NOT override** this method in sub-classes; instead
     *  override [[_send]] or force the options values in the
     *  call to the constructor to modify this method's behavior.
     */
    send(method, params) {
      if (this.destroyed) {
        return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
      }
      const id2 = this.#nextId++;
      const promise = new Promise((resolve, reject) => {
        this.#payloads.push({
          resolve,
          reject,
          payload: { method, params, id: id2, jsonrpc: "2.0" }
        });
      });
      this.#scheduleDrain();
      return promise;
    }
    /**
     *  Resolves to the [[Signer]] account for  %%address%% managed by
     *  the client.
     *
     *  If the %%address%% is a number, it is used as an index in the
     *  the accounts from [[listAccounts]].
     *
     *  This can only be used on clients which manage accounts (such as
     *  Geth with imported account or MetaMask).
     *
     *  Throws if the account doesn't exist.
     */
    async getSigner(address2) {
      if (address2 == null) {
        address2 = 0;
      }
      const accountsPromise = this.send("eth_accounts", []);
      if (typeof address2 === "number") {
        const accounts2 = await accountsPromise;
        if (address2 >= accounts2.length) {
          throw new Error("no such account");
        }
        return new JsonRpcSigner(this, accounts2[address2]);
      }
      const { accounts } = await (0, index_js_5.resolveProperties)({
        network: this.getNetwork(),
        accounts: accountsPromise
      });
      address2 = (0, index_js_2.getAddress)(address2);
      for (const account of accounts) {
        if ((0, index_js_2.getAddress)(account) === address2) {
          return new JsonRpcSigner(this, address2);
        }
      }
      throw new Error("invalid account");
    }
    async listAccounts() {
      const accounts = await this.send("eth_accounts", []);
      return accounts.map((a) => new JsonRpcSigner(this, a));
    }
    destroy() {
      if (this.#drainTimer) {
        clearTimeout(this.#drainTimer);
        this.#drainTimer = null;
      }
      for (const { payload, reject } of this.#payloads) {
        reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
      }
      this.#payloads = [];
      super.destroy();
    }
  }
  providerJsonrpc.JsonRpcApiProvider = JsonRpcApiProvider;
  class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
    #pollingInterval;
    constructor(network2, options) {
      super(network2, options);
      let pollingInterval = this._getOption("pollingInterval");
      if (pollingInterval == null) {
        pollingInterval = defaultOptions.pollingInterval;
      }
      this.#pollingInterval = pollingInterval;
    }
    _getSubscriber(sub) {
      const subscriber = super._getSubscriber(sub);
      if (isPollable(subscriber)) {
        subscriber.pollingInterval = this.#pollingInterval;
      }
      return subscriber;
    }
    /**
     *  The polling interval (default: 4000 ms)
     */
    get pollingInterval() {
      return this.#pollingInterval;
    }
    set pollingInterval(value) {
      if (!Number.isInteger(value) || value < 0) {
        throw new Error("invalid interval");
      }
      this.#pollingInterval = value;
      this._forEachSubscriber((sub) => {
        if (isPollable(sub)) {
          sub.pollingInterval = this.#pollingInterval;
        }
      });
    }
  }
  providerJsonrpc.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
  class JsonRpcProvider extends JsonRpcApiPollingProvider {
    #connect;
    constructor(url, network2, options) {
      if (url == null) {
        url = "http://localhost:8545";
      }
      super(network2, options);
      if (typeof url === "string") {
        this.#connect = new index_js_5.FetchRequest(url);
      } else {
        this.#connect = url.clone();
      }
    }
    _getConnection() {
      return this.#connect.clone();
    }
    async send(method, params) {
      await this._start();
      return await super.send(method, params);
    }
    async _send(payload) {
      const request2 = this._getConnection();
      request2.body = JSON.stringify(payload);
      request2.setHeader("content-type", "application/json");
      const response = await request2.send();
      response.assertOk();
      let resp = response.bodyJson;
      if (!Array.isArray(resp)) {
        resp = [resp];
      }
      return resp;
    }
  }
  providerJsonrpc.JsonRpcProvider = JsonRpcProvider;
  function spelunkData(value) {
    if (value == null) {
      return null;
    }
    if (typeof value.message === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
      return { message: value.message, data: value.data };
    }
    if (typeof value === "object") {
      for (const key in value) {
        const result = spelunkData(value[key]);
        if (result) {
          return result;
        }
      }
      return null;
    }
    if (typeof value === "string") {
      try {
        return spelunkData(JSON.parse(value));
      } catch (error) {
      }
    }
    return null;
  }
  function _spelunkMessage(value, result) {
    if (value == null) {
      return;
    }
    if (typeof value.message === "string") {
      result.push(value.message);
    }
    if (typeof value === "object") {
      for (const key in value) {
        _spelunkMessage(value[key], result);
      }
    }
    if (typeof value === "string") {
      try {
        return _spelunkMessage(JSON.parse(value), result);
      } catch (error) {
      }
    }
  }
  function spelunkMessage(value) {
    const result = [];
    _spelunkMessage(value, result);
    return result;
  }
  return providerJsonrpc;
}
var hasRequiredProviderAnkr;
function requireProviderAnkr() {
  if (hasRequiredProviderAnkr) return providerAnkr;
  hasRequiredProviderAnkr = 1;
  Object.defineProperty(providerAnkr, "__esModule", { value: true });
  providerAnkr.AnkrProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "rpc.ankr.com/eth";
      case "goerli":
        return "rpc.ankr.com/eth_goerli";
      case "sepolia":
        return "rpc.ankr.com/eth_sepolia";
      case "arbitrum":
        return "rpc.ankr.com/arbitrum";
      case "base":
        return "rpc.ankr.com/base";
      case "base-goerli":
        return "rpc.ankr.com/base_goerli";
      case "base-sepolia":
        return "rpc.ankr.com/base_sepolia";
      case "bnb":
        return "rpc.ankr.com/bsc";
      case "bnbt":
        return "rpc.ankr.com/bsc_testnet_chapel";
      case "matic":
        return "rpc.ankr.com/polygon";
      case "matic-mumbai":
        return "rpc.ankr.com/polygon_mumbai";
      case "optimism":
        return "rpc.ankr.com/optimism";
      case "optimism-goerli":
        return "rpc.ankr.com/optimism_testnet";
      case "optimism-sepolia":
        return "rpc.ankr.com/optimism_sepolia";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The API key for the Ankr connection.
     */
    apiKey;
    /**
     *  Create a new **AnkrProvider**.
     *
     *  By default connecting to ``mainnet`` with a highly throttled
     *  API key.
     */
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const options = { polling: true, staticNetwork: network2 };
      const request2 = AnkrProvider.getRequest(network2, apiKey);
      super(request2, network2, options);
      (0, index_js_1.defineProperties)(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new AnkrProvider(chainId, this.apiKey);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    /**
     *  Returns a prepared request for connecting to %%network%% with
     *  %%apiKey%%.
     */
    static getRequest(network2, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/${apiKey}`);
      request2.allowGzip = true;
      if (apiKey === defaultApiKey) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("AnkrProvider");
          return true;
        };
      }
      return request2;
    }
    getRpcError(payload, error) {
      if (payload.method === "eth_sendRawTransaction") {
        if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
          error.error.message = "replacement transaction underpriced";
        }
      }
      return super.getRpcError(payload, error);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
  }
  providerAnkr.AnkrProvider = AnkrProvider;
  return providerAnkr;
}
var providerAlchemy = {};
var hasRequiredProviderAlchemy;
function requireProviderAlchemy() {
  if (hasRequiredProviderAlchemy) return providerAlchemy;
  hasRequiredProviderAlchemy = 1;
  Object.defineProperty(providerAlchemy, "__esModule", { value: true });
  providerAlchemy.AlchemyProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "eth-mainnet.alchemyapi.io";
      case "goerli":
        return "eth-goerli.g.alchemy.com";
      case "sepolia":
        return "eth-sepolia.g.alchemy.com";
      case "arbitrum":
        return "arb-mainnet.g.alchemy.com";
      case "arbitrum-goerli":
        return "arb-goerli.g.alchemy.com";
      case "arbitrum-sepolia":
        return "arb-sepolia.g.alchemy.com";
      case "base":
        return "base-mainnet.g.alchemy.com";
      case "base-goerli":
        return "base-goerli.g.alchemy.com";
      case "base-sepolia":
        return "base-sepolia.g.alchemy.com";
      case "matic":
        return "polygon-mainnet.g.alchemy.com";
      case "matic-amoy":
        return "polygon-amoy.g.alchemy.com";
      case "matic-mumbai":
        return "polygon-mumbai.g.alchemy.com";
      case "optimism":
        return "opt-mainnet.g.alchemy.com";
      case "optimism-goerli":
        return "opt-goerli.g.alchemy.com";
      case "optimism-sepolia":
        return "opt-sepolia.g.alchemy.com";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    apiKey;
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const request2 = AlchemyProvider.getRequest(network2, apiKey);
      super(request2, network2, { staticNetwork: network2 });
      (0, index_js_1.defineProperties)(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new AlchemyProvider(chainId, this.apiKey);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    async _perform(req) {
      if (req.method === "getTransactionResult") {
        const { trace: trace2, tx } = await (0, index_js_1.resolveProperties)({
          trace: this.send("trace_transaction", [req.hash]),
          tx: this.getTransaction(req.hash)
        });
        if (trace2 == null || tx == null) {
          return null;
        }
        let data2;
        let error = false;
        try {
          data2 = trace2[0].result.output;
          error = trace2[0].error === "Reverted";
        } catch (error2) {
        }
        if (data2) {
          (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
            action: "getTransactionResult",
            data: data2,
            reason: null,
            transaction: tx,
            invocation: null,
            revert: null
            // @TODO
          });
          return data2;
        }
        (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace2 });
      }
      return await super._perform(req);
    }
    isCommunityResource() {
      return this.apiKey === defaultApiKey;
    }
    static getRequest(network2, apiKey) {
      if (apiKey == null) {
        apiKey = defaultApiKey;
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/v2/${apiKey}`);
      request2.allowGzip = true;
      if (apiKey === defaultApiKey) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("alchemy");
          return true;
        };
      }
      return request2;
    }
  }
  providerAlchemy.AlchemyProvider = AlchemyProvider;
  return providerAlchemy;
}
var providerChainstack = {};
var hasRequiredProviderChainstack;
function requireProviderChainstack() {
  if (hasRequiredProviderChainstack) return providerChainstack;
  hasRequiredProviderChainstack = 1;
  Object.defineProperty(providerChainstack, "__esModule", { value: true });
  providerChainstack.ChainstackProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  function getApiKey(name) {
    switch (name) {
      case "mainnet":
        return "39f1d67cedf8b7831010a665328c9197";
      case "arbitrum":
        return "0550c209db33c3abf4cc927e1e18cea1";
      case "bnb":
        return "98b5a77e531614387366f6fc5da097f8";
      case "matic":
        return "cd9d4d70377471aa7c142ec4a4205249";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "ethereum-mainnet.core.chainstack.com";
      case "arbitrum":
        return "arbitrum-mainnet.core.chainstack.com";
      case "bnb":
        return "bsc-mainnet.core.chainstack.com";
      case "matic":
        return "polygon-mainnet.core.chainstack.com";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The API key for the Chainstack connection.
     */
    apiKey;
    /**
     *  Creates a new **ChainstackProvider**.
     */
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (apiKey == null) {
        apiKey = getApiKey(network2.name);
      }
      const request2 = ChainstackProvider.getRequest(network2, apiKey);
      super(request2, network2, { staticNetwork: network2 });
      (0, index_js_1.defineProperties)(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new ChainstackProvider(chainId, this.apiKey);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.apiKey === getApiKey(this._network.name);
    }
    /**
     *  Returns a prepared request for connecting to %%network%%
     *  with %%apiKey%% and %%projectSecret%%.
     */
    static getRequest(network2, apiKey) {
      if (apiKey == null) {
        apiKey = getApiKey(network2.name);
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/${apiKey}`);
      request2.allowGzip = true;
      if (apiKey === getApiKey(network2.name)) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("ChainstackProvider");
          return true;
        };
      }
      return request2;
    }
  }
  providerChainstack.ChainstackProvider = ChainstackProvider;
  return providerChainstack;
}
var providerCloudflare = {};
var hasRequiredProviderCloudflare;
function requireProviderCloudflare() {
  if (hasRequiredProviderCloudflare) return providerCloudflare;
  hasRequiredProviderCloudflare = 1;
  Object.defineProperty(providerCloudflare, "__esModule", { value: true });
  providerCloudflare.CloudflareProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  class CloudflareProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    constructor(_network) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      (0, index_js_1.assertArgument)(network2.name === "mainnet", "unsupported network", "network", _network);
      super("https://cloudflare-eth.com/", network2, { staticNetwork: network2 });
    }
  }
  providerCloudflare.CloudflareProvider = CloudflareProvider;
  return providerCloudflare;
}
var providerEtherscan = {};
var hasRequiredProviderEtherscan;
function requireProviderEtherscan() {
  if (hasRequiredProviderEtherscan) return providerEtherscan;
  hasRequiredProviderEtherscan = 1;
  Object.defineProperty(providerEtherscan, "__esModule", { value: true });
  providerEtherscan.EtherscanProvider = providerEtherscan.EtherscanPlugin = void 0;
  const index_js_1 = /* @__PURE__ */ requireAbi();
  const index_js_2 = /* @__PURE__ */ requireContract();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  const abstract_provider_js_1 = /* @__PURE__ */ requireAbstractProvider();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const plugins_network_js_1 = /* @__PURE__ */ requirePluginsNetwork();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const THROTTLE = 2e3;
  function isPromise(value) {
    return value && typeof value.then === "function";
  }
  const EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
  class EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
    /**
     *  The Etherscan API base URL.
     */
    baseUrl;
    /**
     *  Creates a new **EtherscanProvider** which will use
     *  %%baseUrl%%.
     */
    constructor(baseUrl) {
      super(EtherscanPluginId);
      (0, index_js_4.defineProperties)(this, { baseUrl });
    }
    clone() {
      return new EtherscanPlugin(this.baseUrl);
    }
  }
  providerEtherscan.EtherscanPlugin = EtherscanPlugin;
  const skipKeys = ["enableCcipRead"];
  let nextId = 1;
  class EtherscanProvider extends abstract_provider_js_1.AbstractProvider {
    /**
     *  The connected network.
     */
    network;
    /**
     *  The API key or null if using the community provided bandwidth.
     */
    apiKey;
    #plugin;
    /**
     *  Creates a new **EtherscanBaseProvider**.
     */
    constructor(_network, _apiKey) {
      const apiKey = _apiKey != null ? _apiKey : null;
      super();
      const network2 = network_js_1.Network.from(_network);
      this.#plugin = network2.getPlugin(EtherscanPluginId);
      (0, index_js_4.defineProperties)(this, { apiKey, network: network2 });
    }
    /**
     *  Returns the base URL.
     *
     *  If an [[EtherscanPlugin]] is configured on the
     *  [[EtherscanBaseProvider_network]], returns the plugin's
     *  baseUrl.
     *
     *  Deprecated; for Etherscan v2 the base is no longer a simply
     *  host, but instead a URL including a chainId parameter. Changing
     *  this to return a URL prefix could break some libraries, so it
     *  is left intact but will be removed in the future as it is unused.
     */
    getBaseUrl() {
      if (this.#plugin) {
        return this.#plugin.baseUrl;
      }
      switch (this.network.name) {
        case "mainnet":
          return "https://api.etherscan.io";
        case "goerli":
          return "https://api-goerli.etherscan.io";
        case "sepolia":
          return "https://api-sepolia.etherscan.io";
        case "holesky":
          return "https://api-holesky.etherscan.io";
        case "arbitrum":
          return "https://api.arbiscan.io";
        case "arbitrum-goerli":
          return "https://api-goerli.arbiscan.io";
        case "base":
          return "https://api.basescan.org";
        case "base-sepolia":
          return "https://api-sepolia.basescan.org";
        case "bnb":
          return "https://api.bscscan.com";
        case "bnbt":
          return "https://api-testnet.bscscan.com";
        case "matic":
          return "https://api.polygonscan.com";
        case "matic-amoy":
          return "https://api-amoy.polygonscan.com";
        case "matic-mumbai":
          return "https://api-testnet.polygonscan.com";
        case "optimism":
          return "https://api-optimistic.etherscan.io";
        case "optimism-goerli":
          return "https://api-goerli-optimistic.etherscan.io";
      }
      (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
    }
    /**
     *  Returns the URL for the %%module%% and %%params%%.
     */
    getUrl(module, params) {
      let query = Object.keys(params).reduce((accum, key) => {
        const value = params[key];
        if (value != null) {
          accum += `&${key}=${value}`;
        }
        return accum;
      }, "");
      if (this.apiKey) {
        query += `&apikey=${this.apiKey}`;
      }
      return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}&module=${module}${query}`;
    }
    /**
     *  Returns the URL for using POST requests.
     */
    getPostUrl() {
      return `https://api.etherscan.io/v2/api?chainid=${this.network.chainId}`;
    }
    /**
     *  Returns the parameters for using POST requests.
     */
    getPostData(module, params) {
      params.module = module;
      params.apikey = this.apiKey;
      params.chainid = this.network.chainId;
      return params;
    }
    async detectNetwork() {
      return this.network;
    }
    /**
     *  Resolves to the result of calling %%module%% with %%params%%.
     *
     *  If %%post%%, the request is made as a POST request.
     */
    async fetch(module, params, post) {
      const id2 = nextId++;
      const url = post ? this.getPostUrl() : this.getUrl(module, params);
      const payload = post ? this.getPostData(module, params) : null;
      this.emit("debug", { action: "sendRequest", id: id2, url, payload });
      const request2 = new index_js_4.FetchRequest(url);
      request2.setThrottleParams({ slotInterval: 1e3 });
      request2.retryFunc = (req, resp, attempt) => {
        if (this.isCommunityResource()) {
          (0, community_js_1.showThrottleMessage)("Etherscan");
        }
        return Promise.resolve(true);
      };
      request2.processFunc = async (request3, response2) => {
        const result2 = response2.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response2.body)) : {};
        const throttle2 = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
        if (module === "proxy") {
          if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle2) {
            this.emit("debug", { action: "receiveError", id: id2, reason: "proxy-NOTOK", error: result2 });
            response2.throwThrottleError(result2.result, THROTTLE);
          }
        } else {
          if (throttle2) {
            this.emit("debug", { action: "receiveError", id: id2, reason: "null result", error: result2.result });
            response2.throwThrottleError(result2.result, THROTTLE);
          }
        }
        return response2;
      };
      if (payload) {
        request2.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        request2.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
      }
      const response = await request2.send();
      try {
        response.assertOk();
      } catch (error) {
        this.emit("debug", { action: "receiveError", id: id2, error, reason: "assertOk" });
        (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request: request2, response });
      }
      if (!response.hasBody()) {
        this.emit("debug", { action: "receiveError", id: id2, error: "missing body", reason: "null body" });
        (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request: request2, response });
      }
      const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
      if (module === "proxy") {
        if (result.jsonrpc != "2.0") {
          this.emit("debug", { action: "receiveError", id: id2, result, reason: "invalid JSON-RPC" });
          (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request: request2, response, info: { result } });
        }
        if (result.error) {
          this.emit("debug", { action: "receiveError", id: id2, result, reason: "JSON-RPC error" });
          (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request: request2, response, info: { result } });
        }
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      } else {
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
          this.emit("debug", { action: "receiveRequest", id: id2, result });
          return result.result;
        }
        if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
          this.emit("debug", { action: "receiveError", id: id2, result });
          (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request: request2, response, info: { result } });
        }
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      }
    }
    /**
     *  Returns %%transaction%% normalized for the Etherscan API.
     */
    _getTransactionPostData(transaction2) {
      const result = {};
      for (let key in transaction2) {
        if (skipKeys.indexOf(key) >= 0) {
          continue;
        }
        if (transaction2[key] == null) {
          continue;
        }
        let value = transaction2[key];
        if (key === "type" && value === 0) {
          continue;
        }
        if (key === "blockTag" && value === "latest") {
          continue;
        }
        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
          value = (0, index_js_4.toQuantity)(value);
        } else if (key === "accessList") {
          value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
            return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
          }).join(",") + "]";
        } else if (key === "blobVersionedHashes") {
          if (value.length === 0) {
            continue;
          }
          (0, index_js_4.assert)(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
            operation: "_getTransactionPostData",
            info: { transaction: transaction2 }
          });
        } else {
          value = (0, index_js_4.hexlify)(value);
        }
        result[key] = value;
      }
      return result;
    }
    /**
     *  Throws the normalized Etherscan error.
     */
    _checkError(req, error, transaction2) {
      let message2 = "";
      if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
        try {
          message2 = error.info.result.error.message;
        } catch (e) {
        }
        if (!message2) {
          try {
            message2 = error.info.message;
          } catch (e) {
          }
        }
      }
      if (req.method === "estimateGas") {
        if (!message2.match(/revert/i) && message2.match(/insufficient funds/i)) {
          (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
            transaction: req.transaction
          });
        }
      }
      if (req.method === "call" || req.method === "estimateGas") {
        if (message2.match(/execution reverted/i)) {
          let data2 = "";
          try {
            data2 = error.info.result.error.data;
          } catch (error2) {
          }
          const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data2);
          e.info = { request: req, error };
          throw e;
        }
      }
      if (message2) {
        if (req.method === "broadcastTransaction") {
          const transaction3 = index_js_3.Transaction.from(req.signedTransaction);
          if (message2.match(/replacement/i) && message2.match(/underpriced/i)) {
            (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
              transaction: transaction3
            });
          }
          if (message2.match(/insufficient funds/)) {
            (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction: transaction3
            });
          }
          if (message2.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
              transaction: transaction3
            });
          }
        }
      }
      throw error;
    }
    async _detectNetwork() {
      return this.network;
    }
    async _perform(req) {
      switch (req.method) {
        case "chainId":
          return this.network.chainId;
        case "getBlockNumber":
          return this.fetch("proxy", { action: "eth_blockNumber" });
        case "getGasPrice":
          return this.fetch("proxy", { action: "eth_gasPrice" });
        case "getPriorityFee":
          if (this.network.name === "mainnet") {
            return "1000000000";
          } else if (this.network.name === "optimism") {
            return "1000000";
          } else {
            throw new Error("fallback onto the AbstractProvider default");
          }
        /* Working with Etherscan to get this added:
        try {
            const test = await this.fetch("proxy", {
                action: "eth_maxPriorityFeePerGas"
            });
            console.log(test);
            return test;
        } catch (e) {
            console.log("DEBUG", e);
            throw e;
        }
        */
        /* This might be safe; but due to rounding neither myself
           or Etherscan are necessarily comfortable with this. :)
        try {
            const result = await this.fetch("gastracker", { action: "gasoracle" });
            console.log(result);
            const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
            const baseFee = parseUnits(result.suggestBaseFee, "gwei");
            const priorityFee = gasPrice - baseFee;
            if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
            return priorityFee;
        } catch (error) {
            console.log("DEBUG", error);
            throw error;
        }
        */
        case "getBalance":
          return this.fetch("account", {
            action: "balance",
            address: req.address,
            tag: req.blockTag
          });
        case "getTransactionCount":
          return this.fetch("proxy", {
            action: "eth_getTransactionCount",
            address: req.address,
            tag: req.blockTag
          });
        case "getCode":
          return this.fetch("proxy", {
            action: "eth_getCode",
            address: req.address,
            tag: req.blockTag
          });
        case "getStorage":
          return this.fetch("proxy", {
            action: "eth_getStorageAt",
            address: req.address,
            position: req.position,
            tag: req.blockTag
          });
        case "broadcastTransaction":
          return this.fetch("proxy", {
            action: "eth_sendRawTransaction",
            hex: req.signedTransaction
          }, true).catch((error) => {
            return this._checkError(req, error, req.signedTransaction);
          });
        case "getBlock":
          if ("blockTag" in req) {
            return this.fetch("proxy", {
              action: "eth_getBlockByNumber",
              tag: req.blockTag,
              boolean: req.includeTransactions ? "true" : "false"
            });
          }
          (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
            operation: "getBlock(blockHash)"
          });
        case "getTransaction":
          return this.fetch("proxy", {
            action: "eth_getTransactionByHash",
            txhash: req.hash
          });
        case "getTransactionReceipt":
          return this.fetch("proxy", {
            action: "eth_getTransactionReceipt",
            txhash: req.hash
          });
        case "call": {
          if (req.blockTag !== "latest") {
            throw new Error("EtherscanProvider does not support blockTag for call");
          }
          const postData = this._getTransactionPostData(req.transaction);
          postData.module = "proxy";
          postData.action = "eth_call";
          try {
            return await this.fetch("proxy", postData, true);
          } catch (error) {
            return this._checkError(req, error, req.transaction);
          }
        }
        case "estimateGas": {
          const postData = this._getTransactionPostData(req.transaction);
          postData.module = "proxy";
          postData.action = "eth_estimateGas";
          try {
            return await this.fetch("proxy", postData, true);
          } catch (error) {
            return this._checkError(req, error, req.transaction);
          }
        }
      }
      return super._perform(req);
    }
    async getNetwork() {
      return this.network;
    }
    /**
     *  Resolves to the current price of ether.
     *
     *  This returns ``0`` on any network other than ``mainnet``.
     */
    async getEtherPrice() {
      if (this.network.name !== "mainnet") {
        return 0;
      }
      return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
    }
    /**
     *  Resolves to a [Contract]] for %%address%%, using the
     *  Etherscan API to retreive the Contract ABI.
     */
    async getContract(_address) {
      let address2 = this._getAddress(_address);
      if (isPromise(address2)) {
        address2 = await address2;
      }
      try {
        const resp = await this.fetch("contract", {
          action: "getabi",
          address: address2
        });
        const abi2 = JSON.parse(resp);
        return new index_js_2.Contract(address2, abi2, this);
      } catch (error) {
        return null;
      }
    }
    isCommunityResource() {
      return this.apiKey == null;
    }
  }
  providerEtherscan.EtherscanProvider = EtherscanProvider;
  return providerEtherscan;
}
var providerInfura = {};
var providerWebsocket = {};
var ws = {};
var browser$1;
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$1;
  hasRequiredBrowser$1 = 1;
  browser$1 = function() {
    throw new Error(
      "ws does not work in the browser. Browser clients must use the native WebSocket object"
    );
  };
  return browser$1;
}
var hasRequiredWs;
function requireWs() {
  if (hasRequiredWs) return ws;
  hasRequiredWs = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocket = void 0;
    var ws_1 = requireBrowser$1();
    Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function() {
      return ws_1.WebSocket;
    } });
  })(ws);
  return ws;
}
var providerSocket = {};
var hasRequiredProviderSocket;
function requireProviderSocket() {
  if (hasRequiredProviderSocket) return providerSocket;
  hasRequiredProviderSocket = 1;
  Object.defineProperty(providerSocket, "__esModule", { value: true });
  providerSocket.SocketProvider = providerSocket.SocketEventSubscriber = providerSocket.SocketPendingSubscriber = providerSocket.SocketBlockSubscriber = providerSocket.SocketSubscriber = void 0;
  const abstract_provider_js_1 = /* @__PURE__ */ requireAbstractProvider();
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  class SocketSubscriber {
    #provider;
    #filter;
    /**
     *  The filter.
     */
    get filter() {
      return JSON.parse(this.#filter);
    }
    #filterId;
    #paused;
    #emitPromise;
    /**
     *  Creates a new **SocketSubscriber** attached to %%provider%% listening
     *  to %%filter%%.
     */
    constructor(provider2, filter2) {
      this.#provider = provider2;
      this.#filter = JSON.stringify(filter2);
      this.#filterId = null;
      this.#paused = null;
      this.#emitPromise = null;
    }
    start() {
      this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
        this.#provider._register(filterId, this);
        return filterId;
      });
    }
    stop() {
      this.#filterId.then((filterId) => {
        if (this.#provider.destroyed) {
          return;
        }
        this.#provider.send("eth_unsubscribe", [filterId]);
      });
      this.#filterId = null;
    }
    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
    //        and resume
    pause(dropWhilePaused) {
      (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
      this.#paused = !!dropWhilePaused;
    }
    resume() {
      this.#paused = null;
    }
    /**
     *  @_ignore:
     */
    _handleMessage(message2) {
      if (this.#filterId == null) {
        return;
      }
      if (this.#paused === null) {
        let emitPromise = this.#emitPromise;
        if (emitPromise == null) {
          emitPromise = this._emit(this.#provider, message2);
        } else {
          emitPromise = emitPromise.then(async () => {
            await this._emit(this.#provider, message2);
          });
        }
        this.#emitPromise = emitPromise.then(() => {
          if (this.#emitPromise === emitPromise) {
            this.#emitPromise = null;
          }
        });
      }
    }
    /**
     *  Sub-classes **must** override this to emit the events on the
     *  provider.
     */
    async _emit(provider2, message2) {
      throw new Error("sub-classes must implemente this; _emit");
    }
  }
  providerSocket.SocketSubscriber = SocketSubscriber;
  class SocketBlockSubscriber extends SocketSubscriber {
    /**
     *  @_ignore:
     */
    constructor(provider2) {
      super(provider2, ["newHeads"]);
    }
    async _emit(provider2, message2) {
      provider2.emit("block", parseInt(message2.number));
    }
  }
  providerSocket.SocketBlockSubscriber = SocketBlockSubscriber;
  class SocketPendingSubscriber extends SocketSubscriber {
    /**
     *  @_ignore:
     */
    constructor(provider2) {
      super(provider2, ["newPendingTransactions"]);
    }
    async _emit(provider2, message2) {
      provider2.emit("pending", message2);
    }
  }
  providerSocket.SocketPendingSubscriber = SocketPendingSubscriber;
  class SocketEventSubscriber extends SocketSubscriber {
    #logFilter;
    /**
     *  The filter.
     */
    get logFilter() {
      return JSON.parse(this.#logFilter);
    }
    /**
     *  @_ignore:
     */
    constructor(provider2, filter2) {
      super(provider2, ["logs", filter2]);
      this.#logFilter = JSON.stringify(filter2);
    }
    async _emit(provider2, message2) {
      provider2.emit(this.logFilter, provider2._wrapLog(message2, provider2._network));
    }
  }
  providerSocket.SocketEventSubscriber = SocketEventSubscriber;
  class SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {
    #callbacks;
    // Maps each filterId to its subscriber
    #subs;
    // If any events come in before a subscriber has finished
    // registering, queue them
    #pending;
    /**
     *  Creates a new **SocketProvider** connected to %%network%%.
     *
     *  If unspecified, the network will be discovered.
     */
    constructor(network2, _options) {
      const options = Object.assign({}, _options != null ? _options : {});
      (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
      options.batchMaxCount = 1;
      if (options.staticNetwork == null) {
        options.staticNetwork = true;
      }
      super(network2, options);
      this.#callbacks = /* @__PURE__ */ new Map();
      this.#subs = /* @__PURE__ */ new Map();
      this.#pending = /* @__PURE__ */ new Map();
    }
    // This value is only valid after _start has been called
    /*
    get _network(): Network {
        if (this.#network == null) {
            throw new Error("this shouldn't happen");
        }
        return this.#network.clone();
    }
    */
    _getSubscriber(sub) {
      switch (sub.type) {
        case "close":
          return new abstract_provider_js_1.UnmanagedSubscriber("close");
        case "block":
          return new SocketBlockSubscriber(this);
        case "pending":
          return new SocketPendingSubscriber(this);
        case "event":
          return new SocketEventSubscriber(this, sub.filter);
        case "orphan":
          if (sub.filter.orphan === "drop-log") {
            return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
          }
      }
      return super._getSubscriber(sub);
    }
    /**
     *  Register a new subscriber. This is used internalled by Subscribers
     *  and generally is unecessary unless extending capabilities.
     */
    _register(filterId, subscriber) {
      this.#subs.set(filterId, subscriber);
      const pending = this.#pending.get(filterId);
      if (pending) {
        for (const message2 of pending) {
          subscriber._handleMessage(message2);
        }
        this.#pending.delete(filterId);
      }
    }
    async _send(payload) {
      (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
      const promise = new Promise((resolve, reject) => {
        this.#callbacks.set(payload.id, { payload, resolve, reject });
      });
      await this._waitUntilReady();
      await this._write(JSON.stringify(payload));
      return [await promise];
    }
    // Sub-classes must call this once they are connected
    /*
    	    async _start(): Promise<void> {
    	        if (this.#ready) { return; }
    
    	        for (const { payload } of this.#callbacks.values()) {
    	            await this._write(JSON.stringify(payload));
    	        }
    
    	        this.#ready = (async function() {
    	            await super._start();
    	        })();
    	    }
    	    */
    /**
     *  Sub-classes **must** call this with messages received over their
     *  transport to be processed and dispatched.
     */
    async _processMessage(message2) {
      const result = JSON.parse(message2);
      if (result && typeof result === "object" && "id" in result) {
        const callback = this.#callbacks.get(result.id);
        if (callback == null) {
          this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
            reasonCode: "UNKNOWN_ID",
            result
          }));
          return;
        }
        this.#callbacks.delete(result.id);
        callback.resolve(result);
      } else if (result && result.method === "eth_subscription") {
        const filterId = result.params.subscription;
        const subscriber = this.#subs.get(filterId);
        if (subscriber) {
          subscriber._handleMessage(result.params.result);
        } else {
          let pending = this.#pending.get(filterId);
          if (pending == null) {
            pending = [];
            this.#pending.set(filterId, pending);
          }
          pending.push(result.params.result);
        }
      } else {
        this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
          reasonCode: "UNEXPECTED_MESSAGE",
          result
        }));
        return;
      }
    }
    /**
     *  Sub-classes **must** override this to send %%message%% over their
     *  transport.
     */
    async _write(message2) {
      throw new Error("sub-classes must override this");
    }
  }
  providerSocket.SocketProvider = SocketProvider;
  return providerSocket;
}
var hasRequiredProviderWebsocket;
function requireProviderWebsocket() {
  if (hasRequiredProviderWebsocket) return providerWebsocket;
  hasRequiredProviderWebsocket = 1;
  Object.defineProperty(providerWebsocket, "__esModule", { value: true });
  providerWebsocket.WebSocketProvider = void 0;
  const ws_js_1 = /* @__PURE__ */ requireWs();
  const provider_socket_js_1 = /* @__PURE__ */ requireProviderSocket();
  class WebSocketProvider extends provider_socket_js_1.SocketProvider {
    #connect;
    #websocket;
    get websocket() {
      if (this.#websocket == null) {
        throw new Error("websocket closed");
      }
      return this.#websocket;
    }
    constructor(url, network2, options) {
      super(network2, options);
      if (typeof url === "string") {
        this.#connect = () => {
          return new ws_js_1.WebSocket(url);
        };
        this.#websocket = this.#connect();
      } else if (typeof url === "function") {
        this.#connect = url;
        this.#websocket = url();
      } else {
        this.#connect = null;
        this.#websocket = url;
      }
      this.websocket.onopen = async () => {
        try {
          await this._start();
          this.resume();
        } catch (error) {
          console.log("failed to start WebsocketProvider", error);
        }
      };
      this.websocket.onmessage = (message2) => {
        this._processMessage(message2.data);
      };
    }
    async _write(message2) {
      this.websocket.send(message2);
    }
    async destroy() {
      if (this.#websocket != null) {
        this.#websocket.close();
        this.#websocket = null;
      }
      super.destroy();
    }
  }
  providerWebsocket.WebSocketProvider = WebSocketProvider;
  return providerWebsocket;
}
var hasRequiredProviderInfura;
function requireProviderInfura() {
  if (hasRequiredProviderInfura) return providerInfura;
  hasRequiredProviderInfura = 1;
  Object.defineProperty(providerInfura, "__esModule", { value: true });
  providerInfura.InfuraProvider = providerInfura.InfuraWebSocketProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const provider_websocket_js_1 = /* @__PURE__ */ requireProviderWebsocket();
  const defaultProjectId = "84842078b09946638c03157f83405213";
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "mainnet.infura.io";
      case "goerli":
        return "goerli.infura.io";
      case "sepolia":
        return "sepolia.infura.io";
      case "arbitrum":
        return "arbitrum-mainnet.infura.io";
      case "arbitrum-goerli":
        return "arbitrum-goerli.infura.io";
      case "arbitrum-sepolia":
        return "arbitrum-sepolia.infura.io";
      case "base":
        return "base-mainnet.infura.io";
      case "base-goerlia":
      // @TODO: Remove this typo in the future!
      case "base-goerli":
        return "base-goerli.infura.io";
      case "base-sepolia":
        return "base-sepolia.infura.io";
      case "bnb":
        return "bsc-mainnet.infura.io";
      case "bnbt":
        return "bsc-testnet.infura.io";
      case "linea":
        return "linea-mainnet.infura.io";
      case "linea-goerli":
        return "linea-goerli.infura.io";
      case "linea-sepolia":
        return "linea-sepolia.infura.io";
      case "matic":
        return "polygon-mainnet.infura.io";
      case "matic-amoy":
        return "polygon-amoy.infura.io";
      case "matic-mumbai":
        return "polygon-mumbai.infura.io";
      case "optimism":
        return "optimism-mainnet.infura.io";
      case "optimism-goerli":
        return "optimism-goerli.infura.io";
      case "optimism-sepolia":
        return "optimism-sepolia.infura.io";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class InfuraWebSocketProvider extends provider_websocket_js_1.WebSocketProvider {
    /**
     *  The Project ID for the INFURA connection.
     */
    projectId;
    /**
     *  The Project Secret.
     *
     *  If null, no authenticated requests are made. This should not
     *  be used outside of private contexts.
     */
    projectSecret;
    /**
     *  Creates a new **InfuraWebSocketProvider**.
     */
    constructor(network2, projectId) {
      const provider2 = new InfuraProvider(network2, projectId);
      const req = provider2._getConnection();
      (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
      const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
      super(url, provider2._network);
      (0, index_js_1.defineProperties)(this, {
        projectId: provider2.projectId,
        projectSecret: provider2.projectSecret
      });
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
  }
  providerInfura.InfuraWebSocketProvider = InfuraWebSocketProvider;
  class InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The Project ID for the INFURA connection.
     */
    projectId;
    /**
     *  The Project Secret.
     *
     *  If null, no authenticated requests are made. This should not
     *  be used outside of private contexts.
     */
    projectSecret;
    /**
     *  Creates a new **InfuraProvider**.
     */
    constructor(_network, projectId, projectSecret) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (projectId == null) {
        projectId = defaultProjectId;
      }
      if (projectSecret == null) {
        projectSecret = null;
      }
      const request2 = InfuraProvider.getRequest(network2, projectId, projectSecret);
      super(request2, network2, { staticNetwork: network2 });
      (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
    }
    _getProvider(chainId) {
      try {
        return new InfuraProvider(chainId, this.projectId, this.projectSecret);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.projectId === defaultProjectId;
    }
    /**
     *  Creates a new **InfuraWebSocketProvider**.
     */
    static getWebSocketProvider(network2, projectId) {
      return new InfuraWebSocketProvider(network2, projectId);
    }
    /**
     *  Returns a prepared request for connecting to %%network%%
     *  with %%projectId%% and %%projectSecret%%.
     */
    static getRequest(network2, projectId, projectSecret) {
      if (projectId == null) {
        projectId = defaultProjectId;
      }
      if (projectSecret == null) {
        projectSecret = null;
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/v3/${projectId}`);
      request2.allowGzip = true;
      if (projectSecret) {
        request2.setCredentials("", projectSecret);
      }
      if (projectId === defaultProjectId) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("InfuraProvider");
          return true;
        };
      }
      return request2;
    }
  }
  providerInfura.InfuraProvider = InfuraProvider;
  return providerInfura;
}
var providerQuicknode = {};
var hasRequiredProviderQuicknode;
function requireProviderQuicknode() {
  if (hasRequiredProviderQuicknode) return providerQuicknode;
  hasRequiredProviderQuicknode = 1;
  Object.defineProperty(providerQuicknode, "__esModule", { value: true });
  providerQuicknode.QuickNodeProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "ethers.quiknode.pro";
      case "goerli":
        return "ethers.ethereum-goerli.quiknode.pro";
      case "sepolia":
        return "ethers.ethereum-sepolia.quiknode.pro";
      case "holesky":
        return "ethers.ethereum-holesky.quiknode.pro";
      case "arbitrum":
        return "ethers.arbitrum-mainnet.quiknode.pro";
      case "arbitrum-goerli":
        return "ethers.arbitrum-goerli.quiknode.pro";
      case "arbitrum-sepolia":
        return "ethers.arbitrum-sepolia.quiknode.pro";
      case "base":
        return "ethers.base-mainnet.quiknode.pro";
      case "base-goerli":
        return "ethers.base-goerli.quiknode.pro";
      case "base-spolia":
        return "ethers.base-sepolia.quiknode.pro";
      case "bnb":
        return "ethers.bsc.quiknode.pro";
      case "bnbt":
        return "ethers.bsc-testnet.quiknode.pro";
      case "matic":
        return "ethers.matic.quiknode.pro";
      case "matic-mumbai":
        return "ethers.matic-testnet.quiknode.pro";
      case "optimism":
        return "ethers.optimism.quiknode.pro";
      case "optimism-goerli":
        return "ethers.optimism-goerli.quiknode.pro";
      case "optimism-sepolia":
        return "ethers.optimism-sepolia.quiknode.pro";
      case "xdai":
        return "ethers.xdai.quiknode.pro";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The API token.
     */
    token;
    /**
     *  Creates a new **QuickNodeProvider**.
     */
    constructor(_network, token) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (token == null) {
        token = defaultToken;
      }
      const request2 = QuickNodeProvider.getRequest(network2, token);
      super(request2, network2, { staticNetwork: network2 });
      (0, index_js_1.defineProperties)(this, { token });
    }
    _getProvider(chainId) {
      try {
        return new QuickNodeProvider(chainId, this.token);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.token === defaultToken;
    }
    /**
     *  Returns a new request prepared for %%network%% and the
     *  %%token%%.
     */
    static getRequest(network2, token) {
      if (token == null) {
        token = defaultToken;
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/${token}`);
      request2.allowGzip = true;
      if (token === defaultToken) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
          return true;
        };
      }
      return request2;
    }
  }
  providerQuicknode.QuickNodeProvider = QuickNodeProvider;
  return providerQuicknode;
}
var providerFallback = {};
var hasRequiredProviderFallback;
function requireProviderFallback() {
  if (hasRequiredProviderFallback) return providerFallback;
  hasRequiredProviderFallback = 1;
  Object.defineProperty(providerFallback, "__esModule", { value: true });
  providerFallback.FallbackProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const abstract_provider_js_1 = /* @__PURE__ */ requireAbstractProvider();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const BN_1 = BigInt("1");
  const BN_2 = BigInt("2");
  function shuffle(array2) {
    for (let i = array2.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const tmp = array2[i];
      array2[i] = array2[j];
      array2[j] = tmp;
    }
  }
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(resolve, duration);
    });
  }
  function getTime() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  function stringify2(value) {
    return JSON.stringify(value, (key, value2) => {
      if (typeof value2 === "bigint") {
        return { type: "bigint", value: value2.toString() };
      }
      return value2;
    });
  }
  const defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
  const defaultState = {
    blockNumber: -2,
    requests: 0,
    lateResponses: 0,
    errorResponses: 0,
    outOfSync: -1,
    unsupportedEvents: 0,
    rollingDuration: 0,
    score: 0,
    _network: null,
    _updateNumber: null,
    _totalTime: 0,
    _lastFatalError: null,
    _lastFatalErrorTimestamp: 0
  };
  async function waitForSync(config2, blockNumber) {
    while (config2.blockNumber < 0 || config2.blockNumber < blockNumber) {
      if (!config2._updateNumber) {
        config2._updateNumber = (async () => {
          try {
            const blockNumber2 = await config2.provider.getBlockNumber();
            if (blockNumber2 > config2.blockNumber) {
              config2.blockNumber = blockNumber2;
            }
          } catch (error) {
            config2.blockNumber = -2;
            config2._lastFatalError = error;
            config2._lastFatalErrorTimestamp = getTime();
          }
          config2._updateNumber = null;
        })();
      }
      await config2._updateNumber;
      config2.outOfSync++;
      if (config2._lastFatalError) {
        break;
      }
    }
  }
  function _normalize(value) {
    if (value == null) {
      return "null";
    }
    if (Array.isArray(value)) {
      return "[" + value.map(_normalize).join(",") + "]";
    }
    if (typeof value === "object" && typeof value.toJSON === "function") {
      return _normalize(value.toJSON());
    }
    switch (typeof value) {
      case "boolean":
      case "symbol":
        return value.toString();
      case "bigint":
      case "number":
        return BigInt(value).toString();
      case "string":
        return JSON.stringify(value);
      case "object": {
        const keys = Object.keys(value);
        keys.sort();
        return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
      }
    }
    console.log("Could not serialize", value);
    throw new Error("Hmm...");
  }
  function normalizeResult(method, value) {
    if ("error" in value) {
      const error = value.error;
      let tag;
      if ((0, index_js_1.isError)(error, "CALL_EXCEPTION")) {
        tag = _normalize(Object.assign({}, error, {
          shortMessage: void 0,
          reason: void 0,
          info: void 0
        }));
      } else {
        tag = _normalize(error);
      }
      return { tag, value: error };
    }
    const result = value.result;
    return { tag: _normalize(result), value: result };
  }
  function checkQuorum(quorum, results) {
    const tally = /* @__PURE__ */ new Map();
    for (const { value, tag, weight } of results) {
      const t = tally.get(tag) || { value, weight: 0 };
      t.weight += weight;
      tally.set(tag, t);
    }
    let best = null;
    for (const r of tally.values()) {
      if (r.weight >= quorum && (!best || r.weight > best.weight)) {
        best = r;
      }
    }
    if (best) {
      return best.value;
    }
    return void 0;
  }
  function getMedian(quorum, results) {
    let resultWeight = 0;
    const errorMap = /* @__PURE__ */ new Map();
    let bestError = null;
    const values = [];
    for (const { value, tag, weight } of results) {
      if (value instanceof Error) {
        const e = errorMap.get(tag) || { value, weight: 0 };
        e.weight += weight;
        errorMap.set(tag, e);
        if (bestError == null || e.weight > bestError.weight) {
          bestError = e;
        }
      } else {
        values.push(BigInt(value));
        resultWeight += weight;
      }
    }
    if (resultWeight < quorum) {
      if (bestError && bestError.weight >= quorum) {
        return bestError.value;
      }
      return void 0;
    }
    values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);
    const mid = Math.floor(values.length / 2);
    if (values.length % 2) {
      return values[mid];
    }
    return (values[mid - 1] + values[mid] + BN_1) / BN_2;
  }
  function getAnyResult(quorum, results) {
    const result = checkQuorum(quorum, results);
    if (result !== void 0) {
      return result;
    }
    for (const r of results) {
      if (r.value) {
        return r.value;
      }
    }
    return void 0;
  }
  function getFuzzyMode(quorum, results) {
    if (quorum === 1) {
      return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
    }
    const tally = /* @__PURE__ */ new Map();
    const add = (result, weight) => {
      const t = tally.get(result) || { result, weight: 0 };
      t.weight += weight;
      tally.set(result, t);
    };
    for (const { weight, value } of results) {
      const r = (0, index_js_1.getNumber)(value);
      add(r - 1, weight);
      add(r, weight);
      add(r + 1, weight);
    }
    let bestWeight = 0;
    let bestResult = void 0;
    for (const { weight, result } of tally.values()) {
      if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
        bestWeight = weight;
        bestResult = result;
      }
    }
    return bestResult;
  }
  class FallbackProvider extends abstract_provider_js_1.AbstractProvider {
    /**
     *  The number of backends that must agree on a value before it is
     *  accpeted.
     */
    quorum;
    /**
     *  @_ignore:
     */
    eventQuorum;
    /**
     *  @_ignore:
     */
    eventWorkers;
    #configs;
    #height;
    #initialSyncPromise;
    /**
     *  Creates a new **FallbackProvider** with %%providers%% connected to
     *  %%network%%.
     *
     *  If a [[Provider]] is included in %%providers%%, defaults are used
     *  for the configuration.
     */
    constructor(providers2, network2, options) {
      super(network2, options);
      this.#configs = providers2.map((p) => {
        if (p instanceof abstract_provider_js_1.AbstractProvider) {
          return Object.assign({ provider: p }, defaultConfig, defaultState);
        } else {
          return Object.assign({}, defaultConfig, p, defaultState);
        }
      });
      this.#height = -2;
      this.#initialSyncPromise = null;
      if (options && options.quorum != null) {
        this.quorum = options.quorum;
      } else {
        this.quorum = Math.ceil(this.#configs.reduce((accum, config2) => {
          accum += config2.weight;
          return accum;
        }, 0) / 2);
      }
      this.eventQuorum = 1;
      this.eventWorkers = 1;
      (0, index_js_1.assertArgument)(this.quorum <= this.#configs.reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
    }
    get providerConfigs() {
      return this.#configs.map((c) => {
        const result = Object.assign({}, c);
        for (const key in result) {
          if (key[0] === "_") {
            delete result[key];
          }
        }
        return result;
      });
    }
    async _detectNetwork() {
      return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
    }
    // @TODO: Add support to select providers to be the event subscriber
    //_getSubscriber(sub: Subscription): Subscriber {
    //    throw new Error("@TODO");
    //}
    /**
     *  Transforms a %%req%% into the correct method call on %%provider%%.
     */
    async _translatePerform(provider2, req) {
      switch (req.method) {
        case "broadcastTransaction":
          return await provider2.broadcastTransaction(req.signedTransaction);
        case "call":
          return await provider2.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
        case "chainId":
          return (await provider2.getNetwork()).chainId;
        case "estimateGas":
          return await provider2.estimateGas(req.transaction);
        case "getBalance":
          return await provider2.getBalance(req.address, req.blockTag);
        case "getBlock": {
          const block = "blockHash" in req ? req.blockHash : req.blockTag;
          return await provider2.getBlock(block, req.includeTransactions);
        }
        case "getBlockNumber":
          return await provider2.getBlockNumber();
        case "getCode":
          return await provider2.getCode(req.address, req.blockTag);
        case "getGasPrice":
          return (await provider2.getFeeData()).gasPrice;
        case "getPriorityFee":
          return (await provider2.getFeeData()).maxPriorityFeePerGas;
        case "getLogs":
          return await provider2.getLogs(req.filter);
        case "getStorage":
          return await provider2.getStorage(req.address, req.position, req.blockTag);
        case "getTransaction":
          return await provider2.getTransaction(req.hash);
        case "getTransactionCount":
          return await provider2.getTransactionCount(req.address, req.blockTag);
        case "getTransactionReceipt":
          return await provider2.getTransactionReceipt(req.hash);
        case "getTransactionResult":
          return await provider2.getTransactionResult(req.hash);
      }
    }
    // Grab the next (random) config that is not already part of
    // the running set
    #getNextConfig(running) {
      const configs = Array.from(running).map((r) => r.config);
      const allConfigs = this.#configs.slice();
      shuffle(allConfigs);
      allConfigs.sort((a, b) => a.priority - b.priority);
      for (const config2 of allConfigs) {
        if (config2._lastFatalError) {
          continue;
        }
        if (configs.indexOf(config2) === -1) {
          return config2;
        }
      }
      return null;
    }
    // Adds a new runner (if available) to running.
    #addRunner(running, req) {
      const config2 = this.#getNextConfig(running);
      if (config2 == null) {
        return null;
      }
      const runner = {
        config: config2,
        result: null,
        didBump: false,
        perform: null,
        staller: null
      };
      const now = getTime();
      runner.perform = (async () => {
        try {
          config2.requests++;
          const result = await this._translatePerform(config2.provider, req);
          runner.result = { result };
        } catch (error) {
          config2.errorResponses++;
          runner.result = { error };
        }
        const dt = getTime() - now;
        config2._totalTime += dt;
        config2.rollingDuration = 0.95 * config2.rollingDuration + 0.05 * dt;
        runner.perform = null;
      })();
      runner.staller = (async () => {
        await stall(config2.stallTimeout);
        runner.staller = null;
      })();
      running.add(runner);
      return runner;
    }
    // Initializes the blockNumber and network for each runner and
    // blocks until initialized
    async #initialSync() {
      let initialSync = this.#initialSyncPromise;
      if (!initialSync) {
        const promises2 = [];
        this.#configs.forEach((config2) => {
          promises2.push((async () => {
            await waitForSync(config2, 0);
            if (!config2._lastFatalError) {
              config2._network = await config2.provider.getNetwork();
            }
          })());
        });
        this.#initialSyncPromise = initialSync = (async () => {
          await Promise.all(promises2);
          let chainId = null;
          for (const config2 of this.#configs) {
            if (config2._lastFatalError) {
              continue;
            }
            const network2 = config2._network;
            if (chainId == null) {
              chainId = network2.chainId;
            } else if (network2.chainId !== chainId) {
              (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                operation: "new FallbackProvider"
              });
            }
          }
        })();
      }
      await initialSync;
    }
    async #checkQuorum(running, req) {
      const results = [];
      for (const runner of running) {
        if (runner.result != null) {
          const { tag, value } = normalizeResult(req.method, runner.result);
          results.push({ tag, value, weight: runner.config.weight });
        }
      }
      if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
        return void 0;
      }
      switch (req.method) {
        case "getBlockNumber": {
          if (this.#height === -2) {
            this.#height = Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, this.#configs.filter((c) => !c._lastFatalError).map((c) => ({
              value: c.blockNumber,
              tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
              weight: c.weight
            })))));
          }
          const mode2 = getFuzzyMode(this.quorum, results);
          if (mode2 === void 0) {
            return void 0;
          }
          if (mode2 > this.#height) {
            this.#height = mode2;
          }
          return this.#height;
        }
        case "getGasPrice":
        case "getPriorityFee":
        case "estimateGas":
          return getMedian(this.quorum, results);
        case "getBlock":
          if ("blockTag" in req && req.blockTag === "pending") {
            return getAnyResult(this.quorum, results);
          }
          return checkQuorum(this.quorum, results);
        case "call":
        case "chainId":
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorage":
        case "getTransaction":
        case "getTransactionReceipt":
        case "getLogs":
          return checkQuorum(this.quorum, results);
        case "broadcastTransaction":
          return getAnyResult(this.quorum, results);
      }
      (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
        operation: `_perform(${stringify2(req.method)})`
      });
    }
    async #waitForQuorum(running, req) {
      if (running.size === 0) {
        throw new Error("no runners?!");
      }
      const interesting = [];
      let newRunners = 0;
      for (const runner of running) {
        if (runner.perform) {
          interesting.push(runner.perform);
        }
        if (runner.staller) {
          interesting.push(runner.staller);
          continue;
        }
        if (runner.didBump) {
          continue;
        }
        runner.didBump = true;
        newRunners++;
      }
      const value = await this.#checkQuorum(running, req);
      if (value !== void 0) {
        if (value instanceof Error) {
          throw value;
        }
        return value;
      }
      for (let i = 0; i < newRunners; i++) {
        this.#addRunner(running, req);
      }
      (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
      });
      await Promise.race(interesting);
      return await this.#waitForQuorum(running, req);
    }
    async _perform(req) {
      if (req.method === "broadcastTransaction") {
        const results = this.#configs.map((c) => null);
        const broadcasts = this.#configs.map(async ({ provider: provider2, weight }, index) => {
          try {
            const result3 = await provider2._perform(req);
            results[index] = Object.assign(normalizeResult(req.method, { result: result3 }), { weight });
          } catch (error) {
            results[index] = Object.assign(normalizeResult(req.method, { error }), { weight });
          }
        });
        while (true) {
          const done = results.filter((r) => r != null);
          for (const { value } of done) {
            if (!(value instanceof Error)) {
              return value;
            }
          }
          const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
          if ((0, index_js_1.isError)(result3, "INSUFFICIENT_FUNDS")) {
            throw result3;
          }
          const waiting = broadcasts.filter((b, i) => results[i] == null);
          if (waiting.length === 0) {
            break;
          }
          await Promise.race(waiting);
        }
        const result2 = getAnyResult(this.quorum, results);
        (0, index_js_1.assert)(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
          request: "%sub-requests",
          info: { request: req, results: results.map(stringify2) }
        });
        if (result2 instanceof Error) {
          throw result2;
        }
        return result2;
      }
      await this.#initialSync();
      const running = /* @__PURE__ */ new Set();
      let inflightQuorum = 0;
      while (true) {
        const runner = this.#addRunner(running, req);
        if (runner == null) {
          break;
        }
        inflightQuorum += runner.config.weight;
        if (inflightQuorum >= this.quorum) {
          break;
        }
      }
      const result = await this.#waitForQuorum(running, req);
      for (const runner of running) {
        if (runner.perform && runner.result == null) {
          runner.config.lateResponses++;
        }
      }
      return result;
    }
    async destroy() {
      for (const { provider: provider2 } of this.#configs) {
        provider2.destroy();
      }
      super.destroy();
    }
  }
  providerFallback.FallbackProvider = FallbackProvider;
  return providerFallback;
}
var hasRequiredDefaultProvider;
function requireDefaultProvider() {
  if (hasRequiredDefaultProvider) return defaultProvider;
  hasRequiredDefaultProvider = 1;
  Object.defineProperty(defaultProvider, "__esModule", { value: true });
  defaultProvider.getDefaultProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const provider_ankr_js_1 = /* @__PURE__ */ requireProviderAnkr();
  const provider_alchemy_js_1 = /* @__PURE__ */ requireProviderAlchemy();
  const provider_chainstack_js_1 = /* @__PURE__ */ requireProviderChainstack();
  const provider_cloudflare_js_1 = /* @__PURE__ */ requireProviderCloudflare();
  const provider_etherscan_js_1 = /* @__PURE__ */ requireProviderEtherscan();
  const provider_infura_js_1 = /* @__PURE__ */ requireProviderInfura();
  const provider_quicknode_js_1 = /* @__PURE__ */ requireProviderQuicknode();
  const provider_fallback_js_1 = /* @__PURE__ */ requireProviderFallback();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_websocket_js_1 = /* @__PURE__ */ requireProviderWebsocket();
  function isWebSocketLike(value) {
    return value && typeof value.send === "function" && typeof value.close === "function";
  }
  const Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
  function getDefaultProvider(network2, options) {
    if (options == null) {
      options = {};
    }
    const allowService = (name) => {
      if (options[name] === "-") {
        return false;
      }
      if (typeof options.exclusive === "string") {
        return name === options.exclusive;
      }
      if (Array.isArray(options.exclusive)) {
        return options.exclusive.indexOf(name) !== -1;
      }
      return true;
    };
    if (typeof network2 === "string" && network2.match(/^https?:/)) {
      return new provider_jsonrpc_js_1.JsonRpcProvider(network2);
    }
    if (typeof network2 === "string" && network2.match(/^wss?:/) || isWebSocketLike(network2)) {
      return new provider_websocket_js_1.WebSocketProvider(network2);
    }
    let staticNetwork = null;
    try {
      staticNetwork = network_js_1.Network.from(network2);
    } catch (error) {
    }
    const providers2 = [];
    if (allowService("publicPolygon") && staticNetwork) {
      if (staticNetwork.name === "matic") {
        providers2.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
      } else if (staticNetwork.name === "matic-amoy") {
        providers2.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
      }
    }
    if (allowService("alchemy")) {
      try {
        providers2.push(new provider_alchemy_js_1.AlchemyProvider(network2, options.alchemy));
      } catch (error) {
      }
    }
    if (allowService("ankr") && options.ankr != null) {
      try {
        providers2.push(new provider_ankr_js_1.AnkrProvider(network2, options.ankr));
      } catch (error) {
      }
    }
    if (allowService("chainstack")) {
      try {
        providers2.push(new provider_chainstack_js_1.ChainstackProvider(network2, options.chainstack));
      } catch (error) {
      }
    }
    if (allowService("cloudflare")) {
      try {
        providers2.push(new provider_cloudflare_js_1.CloudflareProvider(network2));
      } catch (error) {
      }
    }
    if (allowService("etherscan")) {
      try {
        providers2.push(new provider_etherscan_js_1.EtherscanProvider(network2, options.etherscan));
      } catch (error) {
      }
    }
    if (allowService("infura")) {
      try {
        let projectId = options.infura;
        let projectSecret = void 0;
        if (typeof projectId === "object") {
          projectSecret = projectId.projectSecret;
          projectId = projectId.projectId;
        }
        providers2.push(new provider_infura_js_1.InfuraProvider(network2, projectId, projectSecret));
      } catch (error) {
      }
    }
    if (allowService("quicknode")) {
      try {
        let token = options.quicknode;
        providers2.push(new provider_quicknode_js_1.QuickNodeProvider(network2, token));
      } catch (error) {
      }
    }
    (0, index_js_1.assert)(providers2.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
      operation: "getDefaultProvider"
    });
    if (providers2.length === 1) {
      return providers2[0];
    }
    let quorum = Math.floor(providers2.length / 2);
    if (quorum > 2) {
      quorum = 2;
    }
    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
      quorum = 1;
    }
    if (options && options.quorum) {
      quorum = options.quorum;
    }
    return new provider_fallback_js_1.FallbackProvider(providers2, void 0, { quorum });
  }
  defaultProvider.getDefaultProvider = getDefaultProvider;
  return defaultProvider;
}
var signerNoncemanager = {};
var hasRequiredSignerNoncemanager;
function requireSignerNoncemanager() {
  if (hasRequiredSignerNoncemanager) return signerNoncemanager;
  hasRequiredSignerNoncemanager = 1;
  Object.defineProperty(signerNoncemanager, "__esModule", { value: true });
  signerNoncemanager.NonceManager = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const abstract_signer_js_1 = /* @__PURE__ */ requireAbstractSigner();
  class NonceManager extends abstract_signer_js_1.AbstractSigner {
    /**
     *  The Signer being managed.
     */
    signer;
    #noncePromise;
    #delta;
    /**
     *  Creates a new **NonceManager** to manage %%signer%%.
     */
    constructor(signer) {
      super(signer.provider);
      (0, index_js_1.defineProperties)(this, { signer });
      this.#noncePromise = null;
      this.#delta = 0;
    }
    async getAddress() {
      return this.signer.getAddress();
    }
    connect(provider2) {
      return new NonceManager(this.signer.connect(provider2));
    }
    async getNonce(blockTag) {
      if (blockTag === "pending") {
        if (this.#noncePromise == null) {
          this.#noncePromise = super.getNonce("pending");
        }
        const delta = this.#delta;
        return await this.#noncePromise + delta;
      }
      return super.getNonce(blockTag);
    }
    /**
     *  Manually increment the nonce. This may be useful when managng
     *  offline transactions.
     */
    increment() {
      this.#delta++;
    }
    /**
     *  Resets the nonce, causing the **NonceManager** to reload the current
     *  nonce from the blockchain on the next transaction.
     */
    reset() {
      this.#delta = 0;
      this.#noncePromise = null;
    }
    async sendTransaction(tx) {
      const noncePromise = this.getNonce("pending");
      this.increment();
      tx = await this.signer.populateTransaction(tx);
      tx.nonce = await noncePromise;
      return await this.signer.sendTransaction(tx);
    }
    signTransaction(tx) {
      return this.signer.signTransaction(tx);
    }
    signMessage(message2) {
      return this.signer.signMessage(message2);
    }
    signTypedData(domain2, types2, value) {
      return this.signer.signTypedData(domain2, types2, value);
    }
  }
  signerNoncemanager.NonceManager = NonceManager;
  return signerNoncemanager;
}
var providerBrowser = {};
var hasRequiredProviderBrowser;
function requireProviderBrowser() {
  if (hasRequiredProviderBrowser) return providerBrowser;
  hasRequiredProviderBrowser = 1;
  Object.defineProperty(providerBrowser, "__esModule", { value: true });
  providerBrowser.BrowserProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  class BrowserProvider extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
    #request;
    #providerInfo;
    /**
     *  Connect to the %%ethereum%% provider, optionally forcing the
     *  %%network%%.
     */
    constructor(ethereum, network2, _options) {
      const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
      (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
      super(network2, options);
      this.#providerInfo = null;
      if (_options && _options.providerInfo) {
        this.#providerInfo = _options.providerInfo;
      }
      this.#request = async (method, params) => {
        const payload = { method, params };
        this.emit("debug", { action: "sendEip1193Request", payload });
        try {
          const result = await ethereum.request(payload);
          this.emit("debug", { action: "receiveEip1193Result", result });
          return result;
        } catch (e) {
          const error = new Error(e.message);
          error.code = e.code;
          error.data = e.data;
          error.payload = payload;
          this.emit("debug", { action: "receiveEip1193Error", error });
          throw error;
        }
      };
    }
    get providerInfo() {
      return this.#providerInfo;
    }
    async send(method, params) {
      await this._start();
      return await super.send(method, params);
    }
    async _send(payload) {
      (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
      try {
        const result = await this.#request(payload.method, payload.params || []);
        return [{ id: payload.id, result }];
      } catch (e) {
        return [{
          id: payload.id,
          error: { code: e.code, data: e.data, message: e.message }
        }];
      }
    }
    getRpcError(payload, error) {
      error = JSON.parse(JSON.stringify(error));
      switch (error.error.code || -1) {
        case 4001:
          error.error.message = `ethers-user-denied: ${error.error.message}`;
          break;
        case 4200:
          error.error.message = `ethers-unsupported: ${error.error.message}`;
          break;
      }
      return super.getRpcError(payload, error);
    }
    /**
     *  Resolves to ``true`` if the provider manages the %%address%%.
     */
    async hasSigner(address2) {
      if (address2 == null) {
        address2 = 0;
      }
      const accounts = await this.send("eth_accounts", []);
      if (typeof address2 === "number") {
        return accounts.length > address2;
      }
      address2 = address2.toLowerCase();
      return accounts.filter((a) => a.toLowerCase() === address2).length !== 0;
    }
    async getSigner(address2) {
      if (address2 == null) {
        address2 = 0;
      }
      if (!await this.hasSigner(address2)) {
        try {
          await this.#request("eth_requestAccounts", []);
        } catch (error) {
          const payload = error.payload;
          throw this.getRpcError(payload, { id: payload.id, error });
        }
      }
      return await super.getSigner(address2);
    }
    /**
     *  Discover and connect to a Provider in the Browser using the
     *  [[link-eip-6963]] discovery mechanism. If no providers are
     *  present, ``null`` is resolved.
     */
    static async discover(options) {
      if (options == null) {
        options = {};
      }
      if (options.provider) {
        return new BrowserProvider(options.provider);
      }
      const context = options.window ? options.window : typeof window !== "undefined" ? window : null;
      if (context == null) {
        return null;
      }
      const anyProvider = options.anyProvider;
      if (anyProvider && context.ethereum) {
        return new BrowserProvider(context.ethereum);
      }
      if (!("addEventListener" in context && "dispatchEvent" in context && "removeEventListener" in context)) {
        return null;
      }
      const timeout = options.timeout ? options.timeout : 300;
      if (timeout === 0) {
        return null;
      }
      return await new Promise((resolve, reject) => {
        let found = [];
        const addProvider = (event) => {
          found.push(event.detail);
          if (anyProvider) {
            finalize();
          }
        };
        const finalize = () => {
          clearTimeout(timer);
          if (found.length) {
            if (options && options.filter) {
              const filtered = options.filter(found.map((i) => Object.assign({}, i.info)));
              if (filtered == null) {
                resolve(null);
              } else if (filtered instanceof BrowserProvider) {
                resolve(filtered);
              } else {
                let match = null;
                if (filtered.uuid) {
                  const matches = found.filter((f) => filtered.uuid === f.info.uuid);
                  match = matches[0];
                }
                if (match) {
                  const { provider: provider2, info } = match;
                  resolve(new BrowserProvider(provider2, void 0, {
                    providerInfo: info
                  }));
                } else {
                  reject((0, index_js_1.makeError)("filter returned unknown info", "UNSUPPORTED_OPERATION", {
                    value: filtered
                  }));
                }
              }
            } else {
              const { provider: provider2, info } = found[0];
              resolve(new BrowserProvider(provider2, void 0, {
                providerInfo: info
              }));
            }
          } else {
            resolve(null);
          }
          context.removeEventListener("eip6963:announceProvider", addProvider);
        };
        const timer = setTimeout(() => {
          finalize();
        }, timeout);
        context.addEventListener("eip6963:announceProvider", addProvider);
        context.dispatchEvent(new Event("eip6963:requestProvider"));
      });
    }
  }
  providerBrowser.BrowserProvider = BrowserProvider;
  return providerBrowser;
}
var providerBlockscout = {};
var hasRequiredProviderBlockscout;
function requireProviderBlockscout() {
  if (hasRequiredProviderBlockscout) return providerBlockscout;
  hasRequiredProviderBlockscout = 1;
  Object.defineProperty(providerBlockscout, "__esModule", { value: true });
  providerBlockscout.BlockscoutProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  function getUrl(name) {
    switch (name) {
      case "mainnet":
        return "https://eth.blockscout.com/api/eth-rpc";
      case "sepolia":
        return "https://eth-sepolia.blockscout.com/api/eth-rpc";
      case "holesky":
        return "https://eth-holesky.blockscout.com/api/eth-rpc";
      case "classic":
        return "https://etc.blockscout.com/api/eth-rpc";
      case "arbitrum":
        return "https://arbitrum.blockscout.com/api/eth-rpc";
      case "base":
        return "https://base.blockscout.com/api/eth-rpc";
      case "base-sepolia":
        return "https://base-sepolia.blockscout.com/api/eth-rpc";
      case "matic":
        return "https://polygon.blockscout.com/api/eth-rpc";
      case "optimism":
        return "https://optimism.blockscout.com/api/eth-rpc";
      case "optimism-sepolia":
        return "https://optimism-sepolia.blockscout.com/api/eth-rpc";
      case "xdai":
        return "https://gnosis.blockscout.com/api/eth-rpc";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class BlockscoutProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The API key.
     */
    apiKey;
    /**
     *  Creates a new **BlockscoutProvider**.
     */
    constructor(_network, apiKey) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (apiKey == null) {
        apiKey = null;
      }
      const request2 = BlockscoutProvider.getRequest(network2);
      super(request2, network2, { staticNetwork: network2 });
      (0, index_js_1.defineProperties)(this, { apiKey });
    }
    _getProvider(chainId) {
      try {
        return new BlockscoutProvider(chainId, this.apiKey);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    isCommunityResource() {
      return this.apiKey === null;
    }
    getRpcRequest(req) {
      const resp = super.getRpcRequest(req);
      if (resp && resp.method === "eth_estimateGas" && resp.args.length == 1) {
        resp.args = resp.args.slice();
        resp.args.push("latest");
      }
      return resp;
    }
    getRpcError(payload, _error) {
      const error = _error ? _error.error : null;
      if (error && error.code === -32015 && !(0, index_js_1.isHexString)(error.data || "", true)) {
        const panicCodes = {
          "assert(false)": "01",
          "arithmetic underflow or overflow": "11",
          "division or modulo by zero": "12",
          "out-of-bounds array access; popping on an empty array": "31",
          "out-of-bounds access of an array or bytesN": "32"
        };
        let panicCode = "";
        if (error.message === "VM execution error.") {
          panicCode = panicCodes[error.data] || "";
        } else if (panicCodes[error.message || ""]) {
          panicCode = panicCodes[error.message || ""];
        }
        if (panicCode) {
          error.message += ` (reverted: ${error.data})`;
          error.data = "0x4e487b7100000000000000000000000000000000000000000000000000000000000000" + panicCode;
        }
      } else if (error && error.code === -32e3) {
        if (error.message === "wrong transaction nonce") {
          error.message += " (nonce too low)";
        }
      }
      return super.getRpcError(payload, _error);
    }
    /**
     *  Returns a prepared request for connecting to %%network%%
     *  with %%apiKey%%.
     */
    static getRequest(network2) {
      const request2 = new index_js_1.FetchRequest(getUrl(network2.name));
      request2.allowGzip = true;
      return request2;
    }
  }
  providerBlockscout.BlockscoutProvider = BlockscoutProvider;
  return providerBlockscout;
}
var providerPocket = {};
var hasRequiredProviderPocket;
function requireProviderPocket() {
  if (hasRequiredProviderPocket) return providerPocket;
  hasRequiredProviderPocket = 1;
  Object.defineProperty(providerPocket, "__esModule", { value: true });
  providerPocket.PocketProvider = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const community_js_1 = /* @__PURE__ */ requireCommunity();
  const network_js_1 = /* @__PURE__ */ requireNetwork();
  const provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
  const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
  function getHost(name) {
    switch (name) {
      case "mainnet":
        return "eth-mainnet.gateway.pokt.network";
      case "goerli":
        return "eth-goerli.gateway.pokt.network";
      case "matic":
        return "poly-mainnet.gateway.pokt.network";
      case "matic-mumbai":
        return "polygon-mumbai-rpc.gateway.pokt.network";
    }
    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
  }
  class PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
    /**
     *  The Application ID for the Pocket connection.
     */
    applicationId;
    /**
     *  The Application Secret for making authenticated requests
     *  to the Pocket connection.
     */
    applicationSecret;
    /**
     *  Create a new **PocketProvider**.
     *
     *  By default connecting to ``mainnet`` with a highly throttled
     *  API key.
     */
    constructor(_network, applicationId, applicationSecret) {
      if (_network == null) {
        _network = "mainnet";
      }
      const network2 = network_js_1.Network.from(_network);
      if (applicationId == null) {
        applicationId = defaultApplicationId;
      }
      if (applicationSecret == null) {
        applicationSecret = null;
      }
      const options = { staticNetwork: network2 };
      const request2 = PocketProvider.getRequest(network2, applicationId, applicationSecret);
      super(request2, network2, options);
      (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
    }
    _getProvider(chainId) {
      try {
        return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
      } catch (error) {
      }
      return super._getProvider(chainId);
    }
    /**
     *  Returns a prepared request for connecting to %%network%% with
     *  %%applicationId%%.
     */
    static getRequest(network2, applicationId, applicationSecret) {
      if (applicationId == null) {
        applicationId = defaultApplicationId;
      }
      const request2 = new index_js_1.FetchRequest(`https://${getHost(network2.name)}/v1/lb/${applicationId}`);
      request2.allowGzip = true;
      if (applicationSecret) {
        request2.setCredentials("", applicationSecret);
      }
      if (applicationId === defaultApplicationId) {
        request2.retryFunc = async (request3, response, attempt) => {
          (0, community_js_1.showThrottleMessage)("PocketProvider");
          return true;
        };
      }
      return request2;
    }
    isCommunityResource() {
      return this.applicationId === defaultApplicationId;
    }
  }
  providerPocket.PocketProvider = PocketProvider;
  return providerPocket;
}
var providerIpcsocket = {};
var hasRequiredProviderIpcsocket;
function requireProviderIpcsocket() {
  if (hasRequiredProviderIpcsocket) return providerIpcsocket;
  hasRequiredProviderIpcsocket = 1;
  Object.defineProperty(providerIpcsocket, "__esModule", { value: true });
  providerIpcsocket.IpcSocketProvider = void 0;
  const net_1 = require$$0$5;
  const provider_socket_js_1 = /* @__PURE__ */ requireProviderSocket();
  function splitBuffer(data2) {
    const messages = [];
    let lastStart = 0;
    while (true) {
      const nl = data2.indexOf(10, lastStart);
      if (nl === -1) {
        break;
      }
      messages.push(data2.subarray(lastStart, nl).toString().trim());
      lastStart = nl + 1;
    }
    return { messages, remaining: data2.subarray(lastStart) };
  }
  class IpcSocketProvider extends provider_socket_js_1.SocketProvider {
    #socket;
    /**
     *  The connected socket.
     */
    get socket() {
      return this.#socket;
    }
    constructor(path, network2, options) {
      super(network2, options);
      this.#socket = (0, net_1.connect)(path);
      this.socket.on("ready", async () => {
        try {
          await this._start();
        } catch (error) {
          console.log("failed to start IpcSocketProvider", error);
        }
      });
      let response = Buffer.alloc(0);
      this.socket.on("data", (data2) => {
        response = Buffer.concat([response, data2]);
        const { messages, remaining } = splitBuffer(response);
        messages.forEach((message2) => {
          this._processMessage(message2);
        });
        response = remaining;
      });
      this.socket.on("end", () => {
        this.emit("close");
        this.socket.destroy();
        this.socket.end();
      });
    }
    destroy() {
      this.socket.destroy();
      this.socket.end();
      super.destroy();
    }
    async _write(message2) {
      if (!message2.endsWith("\n")) {
        message2 += "\n";
      }
      this.socket.write(message2);
    }
  }
  providerIpcsocket.IpcSocketProvider = IpcSocketProvider;
  return providerIpcsocket;
}
var hasRequiredProviders;
function requireProviders() {
  if (hasRequiredProviders) return providers;
  hasRequiredProviders = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanPlugin = exports.EtherscanProvider = exports.ChainstackProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.BlockscoutProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.copyRequest = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = exports.NonceManager = exports.Network = exports.MulticoinProviderPlugin = exports.EnsResolver = exports.getDefaultProvider = exports.showThrottleMessage = exports.VoidSigner = exports.AbstractSigner = exports.UnmanagedSubscriber = exports.AbstractProvider = void 0;
    var abstract_provider_js_1 = /* @__PURE__ */ requireAbstractProvider();
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return abstract_provider_js_1.AbstractProvider;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return abstract_provider_js_1.UnmanagedSubscriber;
    } });
    var abstract_signer_js_1 = /* @__PURE__ */ requireAbstractSigner();
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.AbstractSigner;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.VoidSigner;
    } });
    var community_js_1 = /* @__PURE__ */ requireCommunity();
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return community_js_1.showThrottleMessage;
    } });
    var default_provider_js_1 = /* @__PURE__ */ requireDefaultProvider();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return default_provider_js_1.getDefaultProvider;
    } });
    var ens_resolver_js_1 = /* @__PURE__ */ requireEnsResolver();
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return ens_resolver_js_1.EnsResolver;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return ens_resolver_js_1.MulticoinProviderPlugin;
    } });
    var network_js_1 = /* @__PURE__ */ requireNetwork();
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return network_js_1.Network;
    } });
    var signer_noncemanager_js_1 = /* @__PURE__ */ requireSignerNoncemanager();
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return signer_noncemanager_js_1.NonceManager;
    } });
    var plugins_network_js_1 = /* @__PURE__ */ requirePluginsNetwork();
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.NetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.GasCostPlugin;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.EnsPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;
    } });
    var provider_js_1 = /* @__PURE__ */ requireProvider();
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return provider_js_1.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return provider_js_1.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return provider_js_1.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return provider_js_1.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return provider_js_1.TransactionResponse;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return provider_js_1.copyRequest;
    } });
    var provider_fallback_js_1 = /* @__PURE__ */ requireProviderFallback();
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return provider_fallback_js_1.FallbackProvider;
    } });
    var provider_jsonrpc_js_1 = /* @__PURE__ */ requireProviderJsonrpc();
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcSigner;
    } });
    var provider_browser_js_1 = /* @__PURE__ */ requireProviderBrowser();
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return provider_browser_js_1.BrowserProvider;
    } });
    var provider_alchemy_js_1 = /* @__PURE__ */ requireProviderAlchemy();
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return provider_alchemy_js_1.AlchemyProvider;
    } });
    var provider_blockscout_js_1 = /* @__PURE__ */ requireProviderBlockscout();
    Object.defineProperty(exports, "BlockscoutProvider", { enumerable: true, get: function() {
      return provider_blockscout_js_1.BlockscoutProvider;
    } });
    var provider_ankr_js_1 = /* @__PURE__ */ requireProviderAnkr();
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return provider_ankr_js_1.AnkrProvider;
    } });
    var provider_cloudflare_js_1 = /* @__PURE__ */ requireProviderCloudflare();
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return provider_cloudflare_js_1.CloudflareProvider;
    } });
    var provider_chainstack_js_1 = /* @__PURE__ */ requireProviderChainstack();
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return provider_chainstack_js_1.ChainstackProvider;
    } });
    var provider_etherscan_js_1 = /* @__PURE__ */ requireProviderEtherscan();
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanProvider;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanPlugin;
    } });
    var provider_infura_js_1 = /* @__PURE__ */ requireProviderInfura();
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraWebSocketProvider;
    } });
    var provider_pocket_js_1 = /* @__PURE__ */ requireProviderPocket();
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return provider_pocket_js_1.PocketProvider;
    } });
    var provider_quicknode_js_1 = /* @__PURE__ */ requireProviderQuicknode();
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return provider_quicknode_js_1.QuickNodeProvider;
    } });
    const provider_ipcsocket_js_1 = /* @__PURE__ */ requireProviderIpcsocket();
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return provider_ipcsocket_js_1.IpcSocketProvider;
    } });
    var provider_socket_js_1 = /* @__PURE__ */ requireProviderSocket();
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return provider_socket_js_1.SocketProvider;
    } });
    var provider_websocket_js_1 = /* @__PURE__ */ requireProviderWebsocket();
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return provider_websocket_js_1.WebSocketProvider;
    } });
    var provider_socket_js_2 = /* @__PURE__ */ requireProviderSocket();
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketSubscriber;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketEventSubscriber;
    } });
  })(providers);
  return providers;
}
var wallet$1 = {};
var baseWallet = {};
var hasRequiredBaseWallet;
function requireBaseWallet() {
  if (hasRequiredBaseWallet) return baseWallet;
  hasRequiredBaseWallet = 1;
  Object.defineProperty(baseWallet, "__esModule", { value: true });
  baseWallet.BaseWallet = void 0;
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireHash();
  const index_js_3 = /* @__PURE__ */ requireProviders();
  const index_js_4 = /* @__PURE__ */ requireTransaction();
  const index_js_5 = /* @__PURE__ */ requireUtils$3();
  class BaseWallet extends index_js_3.AbstractSigner {
    /**
     *  The wallet address.
     */
    address;
    #signingKey;
    /**
     *  Creates a new BaseWallet for %%privateKey%%, optionally
     *  connected to %%provider%%.
     *
     *  If %%provider%% is not specified, only offline methods can
     *  be used.
     */
    constructor(privateKey, provider2) {
      super(provider2);
      (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
      this.#signingKey = privateKey;
      const address2 = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
      (0, index_js_5.defineProperties)(this, { address: address2 });
    }
    // Store private values behind getters to reduce visibility
    // in console.log
    /**
     *  The [[SigningKey]] used for signing payloads.
     */
    get signingKey() {
      return this.#signingKey;
    }
    /**
     *  The private key for this wallet.
     */
    get privateKey() {
      return this.signingKey.privateKey;
    }
    async getAddress() {
      return this.address;
    }
    connect(provider2) {
      return new BaseWallet(this.#signingKey, provider2);
    }
    async signTransaction(tx) {
      tx = (0, index_js_3.copyRequest)(tx);
      const { to, from } = await (0, index_js_5.resolveProperties)({
        to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this) : void 0,
        from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this) : void 0
      });
      if (to != null) {
        tx.to = to;
      }
      if (from != null) {
        tx.from = from;
      }
      if (tx.from != null) {
        (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
        delete tx.from;
      }
      const btx = index_js_4.Transaction.from(tx);
      btx.signature = this.signingKey.sign(btx.unsignedHash);
      return btx.serialized;
    }
    async signMessage(message2) {
      return this.signMessageSync(message2);
    }
    // @TODO: Add a secialized signTx and signTyped sync that enforces
    // all parameters are known?
    /**
     *  Returns the signature for %%message%% signed with this wallet.
     */
    signMessageSync(message2) {
      return this.signingKey.sign((0, index_js_2.hashMessage)(message2)).serialized;
    }
    /**
     *  Returns the Authorization for %%auth%%.
     */
    authorizeSync(auth) {
      (0, index_js_5.assertArgument)(typeof auth.address === "string", "invalid address for authorizeSync", "auth.address", auth);
      const signature2 = this.signingKey.sign((0, index_js_2.hashAuthorization)(auth));
      return Object.assign({}, {
        address: (0, index_js_1.getAddress)(auth.address),
        nonce: (0, index_js_5.getBigInt)(auth.nonce || 0),
        chainId: (0, index_js_5.getBigInt)(auth.chainId || 0)
      }, { signature: signature2 });
    }
    /**
     *  Resolves to the Authorization for %%auth%%.
     */
    async authorize(auth) {
      auth = Object.assign({}, auth, {
        address: await (0, index_js_1.resolveAddress)(auth.address, this)
      });
      return this.authorizeSync(await this.populateAuthorization(auth));
    }
    async signTypedData(domain2, types2, value) {
      const populated = await index_js_2.TypedDataEncoder.resolveNames(domain2, types2, value, async (name) => {
        (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
          operation: "resolveName",
          info: { name }
        });
        const address2 = await this.provider.resolveName(name);
        (0, index_js_5.assert)(address2 != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
          value: name
        });
        return address2;
      });
      return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types2, populated.value)).serialized;
    }
  }
  baseWallet.BaseWallet = BaseWallet;
  return baseWallet;
}
var hdwallet = {};
var langEn = {};
var wordlistOwl = {};
var decodeOwl = {};
var hasRequiredDecodeOwl;
function requireDecodeOwl() {
  if (hasRequiredDecodeOwl) return decodeOwl;
  hasRequiredDecodeOwl = 1;
  Object.defineProperty(decodeOwl, "__esModule", { value: true });
  decodeOwl.decodeOwl = decodeOwl.decode = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
  const Word = /^[a-z]*$/i;
  function unfold(words, sep) {
    let initial = 97;
    return words.reduce((accum, word) => {
      if (word === sep) {
        initial++;
      } else if (word.match(Word)) {
        accum.push(String.fromCharCode(initial) + word);
      } else {
        initial = 97;
        accum.push(word);
      }
      return accum;
    }, []);
  }
  function decode(data2, subs) {
    for (let i = subsChrs.length - 1; i >= 0; i--) {
      data2 = data2.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
    }
    const clumps = [];
    const leftover = data2.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all3, item, semi, word) => {
      if (semi) {
        for (let i = parseInt(semi); i >= 0; i--) {
          clumps.push(";");
        }
      } else {
        clumps.push(item.toLowerCase());
      }
      return "";
    });
    if (leftover) {
      throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
    }
    return unfold(unfold(clumps, ";"), ":");
  }
  decodeOwl.decode = decode;
  function decodeOwl$1(data2) {
    (0, index_js_1.assertArgument)(data2[0] === "0", "unsupported auwl data", "data", data2);
    return decode(data2.substring(1 + 2 * subsChrs.length), data2.substring(1, 1 + 2 * subsChrs.length));
  }
  decodeOwl.decodeOwl = decodeOwl$1;
  return decodeOwl;
}
var wordlist = {};
var hasRequiredWordlist;
function requireWordlist() {
  if (hasRequiredWordlist) return wordlist;
  hasRequiredWordlist = 1;
  Object.defineProperty(wordlist, "__esModule", { value: true });
  wordlist.Wordlist = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  class Wordlist {
    locale;
    /**
     *  Creates a new Wordlist instance.
     *
     *  Sub-classes MUST call this if they provide their own constructor,
     *  passing in the locale string of the language.
     *
     *  Generally there is no need to create instances of a Wordlist,
     *  since each language-specific Wordlist creates an instance and
     *  there is no state kept internally, so they are safe to share.
     */
    constructor(locale) {
      (0, index_js_1.defineProperties)(this, { locale });
    }
    /**
     *  Sub-classes may override this to provide a language-specific
     *  method for spliting %%phrase%% into individual words.
     *
     *  By default, %%phrase%% is split using any sequences of
     *  white-space as defined by regular expressions (i.e. ``/\s+/``).
     */
    split(phrase) {
      return phrase.toLowerCase().split(/\s+/g);
    }
    /**
     *  Sub-classes may override this to provider a language-specific
     *  method for joining %%words%% into a phrase.
     *
     *  By default, %%words%% are joined by a single space.
     */
    join(words) {
      return words.join(" ");
    }
  }
  wordlist.Wordlist = Wordlist;
  return wordlist;
}
var hasRequiredWordlistOwl;
function requireWordlistOwl() {
  if (hasRequiredWordlistOwl) return wordlistOwl;
  hasRequiredWordlistOwl = 1;
  Object.defineProperty(wordlistOwl, "__esModule", { value: true });
  wordlistOwl.WordlistOwl = void 0;
  const index_js_1 = /* @__PURE__ */ requireHash();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const decode_owl_js_1 = /* @__PURE__ */ requireDecodeOwl();
  const wordlist_js_1 = /* @__PURE__ */ requireWordlist();
  class WordlistOwl extends wordlist_js_1.Wordlist {
    #data;
    #checksum;
    /**
     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
     *  and validated against the %%checksum%%.
     */
    constructor(locale, data2, checksum) {
      super(locale);
      this.#data = data2;
      this.#checksum = checksum;
      this.#words = null;
    }
    /**
     *  The OWL-encoded data.
     */
    get _data() {
      return this.#data;
    }
    /**
     *  Decode all the words for the wordlist.
     */
    _decodeWords() {
      return (0, decode_owl_js_1.decodeOwl)(this.#data);
    }
    #words;
    #loadWords() {
      if (this.#words == null) {
        const words = this._decodeWords();
        const checksum = (0, index_js_1.id)(words.join("\n") + "\n");
        if (checksum !== this.#checksum) {
          throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
        }
        this.#words = words;
      }
      return this.#words;
    }
    getWord(index) {
      const words = this.#loadWords();
      (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
      return words[index];
    }
    getWordIndex(word) {
      return this.#loadWords().indexOf(word);
    }
  }
  wordlistOwl.WordlistOwl = WordlistOwl;
  return wordlistOwl;
}
var hasRequiredLangEn;
function requireLangEn() {
  if (hasRequiredLangEn) return langEn;
  hasRequiredLangEn = 1;
  Object.defineProperty(langEn, "__esModule", { value: true });
  langEn.LangEn = void 0;
  const wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
  const words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
  const checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
  let wordlist2 = null;
  class LangEn extends wordlist_owl_js_1.WordlistOwl {
    /**
     *  Creates a new instance of the English language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langEn]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("en", words, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangEn``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangEn();
      }
      return wordlist2;
    }
  }
  langEn.LangEn = LangEn;
  return langEn;
}
var mnemonic = {};
var hasRequiredMnemonic;
function requireMnemonic() {
  if (hasRequiredMnemonic) return mnemonic;
  hasRequiredMnemonic = 1;
  Object.defineProperty(mnemonic, "__esModule", { value: true });
  mnemonic.Mnemonic = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const lang_en_js_1 = /* @__PURE__ */ requireLangEn();
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits & 255;
  }
  function getLowerMask(bits) {
    return (1 << bits) - 1 & 255;
  }
  function mnemonicToEntropy(mnemonic2, wordlist2) {
    (0, index_js_2.assertNormalize)("NFKD");
    if (wordlist2 == null) {
      wordlist2 = lang_en_js_1.LangEn.wordlist();
    }
    const words = wordlist2.split(mnemonic2);
    (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
    let offset = 0;
    for (let i = 0; i < words.length; i++) {
      let index = wordlist2.getWordIndex(words[i].normalize("NFKD"));
      (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
      for (let bit = 0; bit < 11; bit++) {
        if (index & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }
        offset++;
      }
    }
    const entropyBits = 32 * words.length / 3;
    const checksumBits = words.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
    return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
  }
  function entropyToMnemonic(entropy, wordlist2) {
    (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
    if (wordlist2 == null) {
      wordlist2 = lang_en_js_1.LangEn.wordlist();
    }
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i++) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
  }
  const _guard = {};
  class Mnemonic {
    /**
     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
     *
     *  Use the [[wordlist]] ``split`` method to get the individual words.
     */
    phrase;
    /**
     *  The password used for this mnemonic. If no password is used this
     *  is the empty string (i.e. ``""``) as per the specification.
     */
    password;
    /**
     *  The wordlist for this mnemonic.
     */
    wordlist;
    /**
     *  The underlying entropy which the mnemonic encodes.
     */
    entropy;
    /**
     *  @private
     */
    constructor(guard, entropy, phrase, password, wordlist2) {
      if (password == null) {
        password = "";
      }
      if (wordlist2 == null) {
        wordlist2 = lang_en_js_1.LangEn.wordlist();
      }
      (0, index_js_2.assertPrivate)(guard, _guard, "Mnemonic");
      (0, index_js_2.defineProperties)(this, { phrase, password, wordlist: wordlist2, entropy });
    }
    /**
     *  Returns the seed for the mnemonic.
     */
    computeSeed() {
      const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
      return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
    }
    /**
     *  Creates a new Mnemonic for the %%phrase%%.
     *
     *  The default %%password%% is the empty string and the default
     *  wordlist is the [English wordlists](LangEn).
     */
    static fromPhrase(phrase, password, wordlist2) {
      const entropy = mnemonicToEntropy(phrase, wordlist2);
      phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist2);
      return new Mnemonic(_guard, entropy, phrase, password, wordlist2);
    }
    /**
     *  Create a new **Mnemonic** from the %%entropy%%.
     *
     *  The default %%password%% is the empty string and the default
     *  wordlist is the [English wordlists](LangEn).
     */
    static fromEntropy(_entropy, password, wordlist2) {
      const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
      const phrase = entropyToMnemonic(entropy, wordlist2);
      return new Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist2);
    }
    /**
     *  Returns the phrase for %%mnemonic%%.
     */
    static entropyToPhrase(_entropy, wordlist2) {
      const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
      return entropyToMnemonic(entropy, wordlist2);
    }
    /**
     *  Returns the entropy for %%phrase%%.
     */
    static phraseToEntropy(phrase, wordlist2) {
      return mnemonicToEntropy(phrase, wordlist2);
    }
    /**
     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
     *
     *  This checks all the provided words belong to the %%wordlist%%,
     *  that the length is valid and the checksum is correct.
     */
    static isValidMnemonic(phrase, wordlist2) {
      try {
        mnemonicToEntropy(phrase, wordlist2);
        return true;
      } catch (error) {
      }
      return false;
    }
  }
  mnemonic.Mnemonic = Mnemonic;
  return mnemonic;
}
var jsonKeystore = {};
var lib_commonjs = {};
var aes = {};
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes) return aes;
  hasRequiredAes = 1;
  /*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
  var __classPrivateFieldGet2 = aes && aes.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __classPrivateFieldSet2 = aes && aes.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var _AES_key, _AES_Kd, _AES_Ke;
  Object.defineProperty(aes, "__esModule", { value: true });
  aes.AES = void 0;
  const numberOfRounds = { 16: 10, 24: 12, 32: 14 };
  const rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
  const S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
  const Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
  const T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
  const T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
  const T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
  const T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
  const T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
  const T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
  const T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
  const T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
  const U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
  const U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
  const U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
  const U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
  function convertToInt32(bytes2) {
    const result = [];
    for (let i = 0; i < bytes2.length; i += 4) {
      result.push(bytes2[i] << 24 | bytes2[i + 1] << 16 | bytes2[i + 2] << 8 | bytes2[i + 3]);
    }
    return result;
  }
  class AES {
    get key() {
      return __classPrivateFieldGet2(this, _AES_key, "f").slice();
    }
    constructor(key) {
      _AES_key.set(this, void 0);
      _AES_Kd.set(this, void 0);
      _AES_Ke.set(this, void 0);
      if (!(this instanceof AES)) {
        throw Error("AES must be instanitated with `new`");
      }
      __classPrivateFieldSet2(this, _AES_key, new Uint8Array(key), "f");
      const rounds = numberOfRounds[this.key.length];
      if (rounds == null) {
        throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
      }
      __classPrivateFieldSet2(this, _AES_Ke, [], "f");
      __classPrivateFieldSet2(this, _AES_Kd, [], "f");
      for (let i = 0; i <= rounds; i++) {
        __classPrivateFieldGet2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
        __classPrivateFieldGet2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
      }
      const roundKeyCount = (rounds + 1) * 4;
      const KC = this.key.length / 4;
      const tk = convertToInt32(this.key);
      let index;
      for (let i = 0; i < KC; i++) {
        index = i >> 2;
        __classPrivateFieldGet2(this, _AES_Ke, "f")[index][i % 4] = tk[i];
        __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
      }
      let rconpointer = 0;
      let t = KC, tt;
      while (t < roundKeyCount) {
        tt = tk[KC - 1];
        tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
        rconpointer += 1;
        if (KC != 8) {
          for (let i2 = 1; i2 < KC; i2++) {
            tk[i2] ^= tk[i2 - 1];
          }
        } else {
          for (let i2 = 1; i2 < KC / 2; i2++) {
            tk[i2] ^= tk[i2 - 1];
          }
          tt = tk[KC / 2 - 1];
          tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
          for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
            tk[i2] ^= tk[i2 - 1];
          }
        }
        let i = 0, r, c;
        while (i < KC && t < roundKeyCount) {
          r = t >> 2;
          c = t % 4;
          __classPrivateFieldGet2(this, _AES_Ke, "f")[r][c] = tk[i];
          __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
          t++;
        }
      }
      for (let r = 1; r < rounds; r++) {
        for (let c = 0; c < 4; c++) {
          tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c];
          __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
        }
      }
    }
    encrypt(plaintext) {
      if (plaintext.length != 16) {
        throw new TypeError("invalid plaintext size (must be 16 bytes)");
      }
      const rounds = __classPrivateFieldGet2(this, _AES_Ke, "f").length - 1;
      const a = [0, 0, 0, 0];
      let t = convertToInt32(plaintext);
      for (let i = 0; i < 4; i++) {
        t[i] ^= __classPrivateFieldGet2(this, _AES_Ke, "f")[0][i];
      }
      for (let r = 1; r < rounds; r++) {
        for (let i = 0; i < 4; i++) {
          a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Ke, "f")[r][i];
        }
        t = a.slice();
      }
      const result = new Uint8Array(16);
      let tt = 0;
      for (let i = 0; i < 4; i++) {
        tt = __classPrivateFieldGet2(this, _AES_Ke, "f")[rounds][i];
        result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
        result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
        result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
        result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
      }
      return result;
    }
    decrypt(ciphertext) {
      if (ciphertext.length != 16) {
        throw new TypeError("invalid ciphertext size (must be 16 bytes)");
      }
      const rounds = __classPrivateFieldGet2(this, _AES_Kd, "f").length - 1;
      const a = [0, 0, 0, 0];
      let t = convertToInt32(ciphertext);
      for (let i = 0; i < 4; i++) {
        t[i] ^= __classPrivateFieldGet2(this, _AES_Kd, "f")[0][i];
      }
      for (let r = 1; r < rounds; r++) {
        for (let i = 0; i < 4; i++) {
          a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Kd, "f")[r][i];
        }
        t = a.slice();
      }
      const result = new Uint8Array(16);
      let tt = 0;
      for (let i = 0; i < 4; i++) {
        tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds][i];
        result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
        result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
        result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
        result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
      }
      return result;
    }
  }
  aes.AES = AES;
  _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  return aes;
}
var mode = {};
var hasRequiredMode;
function requireMode() {
  if (hasRequiredMode) return mode;
  hasRequiredMode = 1;
  Object.defineProperty(mode, "__esModule", { value: true });
  mode.ModeOfOperation = void 0;
  const aes_js_1 = requireAes();
  class ModeOfOperation {
    constructor(name, key, cls) {
      if (cls && !(this instanceof cls)) {
        throw new Error(`${name} must be instantiated with "new"`);
      }
      Object.defineProperties(this, {
        aes: { enumerable: true, value: new aes_js_1.AES(key) },
        name: { enumerable: true, value: name }
      });
    }
  }
  mode.ModeOfOperation = ModeOfOperation;
  return mode;
}
var modeCbc = {};
var hasRequiredModeCbc;
function requireModeCbc() {
  if (hasRequiredModeCbc) return modeCbc;
  hasRequiredModeCbc = 1;
  var __classPrivateFieldSet2 = modeCbc && modeCbc.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet2 = modeCbc && modeCbc.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _CBC_iv, _CBC_lastBlock;
  Object.defineProperty(modeCbc, "__esModule", { value: true });
  modeCbc.CBC = void 0;
  const mode_js_1 = requireMode();
  class CBC extends mode_js_1.ModeOfOperation {
    constructor(key, iv) {
      super("ECC", key, CBC);
      _CBC_iv.set(this, void 0);
      _CBC_lastBlock.set(this, void 0);
      if (iv) {
        if (iv.length % 16) {
          throw new TypeError("invalid iv size (must be 16 bytes)");
        }
        __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
      } else {
        __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
      }
      __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
    }
    get iv() {
      return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
    }
    encrypt(plaintext) {
      if (plaintext.length % 16) {
        throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
      }
      const ciphertext = new Uint8Array(plaintext.length);
      for (let i = 0; i < plaintext.length; i += 16) {
        for (let j = 0; j < 16; j++) {
          __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
        ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
      }
      return ciphertext;
    }
    decrypt(ciphertext) {
      if (ciphertext.length % 16) {
        throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
      }
      const plaintext = new Uint8Array(ciphertext.length);
      for (let i = 0; i < ciphertext.length; i += 16) {
        const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
        for (let j = 0; j < 16; j++) {
          plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
          __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
        }
      }
      return plaintext;
    }
  }
  modeCbc.CBC = CBC;
  _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  return modeCbc;
}
var modeCfb = {};
var hasRequiredModeCfb;
function requireModeCfb() {
  if (hasRequiredModeCfb) return modeCfb;
  hasRequiredModeCfb = 1;
  var __classPrivateFieldSet2 = modeCfb && modeCfb.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet2 = modeCfb && modeCfb.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;
  Object.defineProperty(modeCfb, "__esModule", { value: true });
  modeCfb.CFB = void 0;
  const mode_js_1 = requireMode();
  class CFB extends mode_js_1.ModeOfOperation {
    constructor(key, iv, segmentSize = 8) {
      super("CFB", key, CFB);
      _CFB_instances.add(this);
      _CFB_iv.set(this, void 0);
      _CFB_shiftRegister.set(this, void 0);
      if (!Number.isInteger(segmentSize) || segmentSize % 8) {
        throw new TypeError("invalid segmentSize");
      }
      Object.defineProperties(this, {
        segmentSize: { enumerable: true, value: segmentSize }
      });
      if (iv) {
        if (iv.length % 16) {
          throw new TypeError("invalid iv size (must be 16 bytes)");
        }
        __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(iv), "f");
      } else {
        __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(16), "f");
      }
      __classPrivateFieldSet2(this, _CFB_shiftRegister, this.iv, "f");
    }
    get iv() {
      return new Uint8Array(__classPrivateFieldGet2(this, _CFB_iv, "f"));
    }
    encrypt(plaintext) {
      if (8 * plaintext.length % this.segmentSize) {
        throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
      }
      const segmentSize = this.segmentSize / 8;
      const ciphertext = new Uint8Array(plaintext);
      for (let i = 0; i < ciphertext.length; i += segmentSize) {
        const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
        for (let j = 0; j < segmentSize; j++) {
          ciphertext[i + j] ^= xorSegment[j];
        }
        __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
      }
      return ciphertext;
    }
    decrypt(ciphertext) {
      if (8 * ciphertext.length % this.segmentSize) {
        throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
      }
      const segmentSize = this.segmentSize / 8;
      const plaintext = new Uint8Array(ciphertext);
      for (let i = 0; i < plaintext.length; i += segmentSize) {
        const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
        for (let j = 0; j < segmentSize; j++) {
          plaintext[i + j] ^= xorSegment[j];
        }
        __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
      }
      return plaintext;
    }
  }
  modeCfb.CFB = CFB;
  _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data2) {
    const segmentSize = this.segmentSize / 8;
    __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f").subarray(segmentSize));
    __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(data2.subarray(0, segmentSize), 16 - segmentSize);
  };
  return modeCfb;
}
var modeCtr = {};
var hasRequiredModeCtr;
function requireModeCtr() {
  if (hasRequiredModeCtr) return modeCtr;
  hasRequiredModeCtr = 1;
  var __classPrivateFieldSet2 = modeCtr && modeCtr.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet2 = modeCtr && modeCtr.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _CTR_remaining, _CTR_remainingIndex, _CTR_counter;
  Object.defineProperty(modeCtr, "__esModule", { value: true });
  modeCtr.CTR = void 0;
  const mode_js_1 = requireMode();
  class CTR extends mode_js_1.ModeOfOperation {
    constructor(key, initialValue) {
      super("CTR", key, CTR);
      _CTR_remaining.set(this, void 0);
      _CTR_remainingIndex.set(this, void 0);
      _CTR_counter.set(this, void 0);
      __classPrivateFieldSet2(this, _CTR_counter, new Uint8Array(16), "f");
      __classPrivateFieldGet2(this, _CTR_counter, "f").fill(0);
      __classPrivateFieldSet2(this, _CTR_remaining, __classPrivateFieldGet2(this, _CTR_counter, "f"), "f");
      __classPrivateFieldSet2(this, _CTR_remainingIndex, 16, "f");
      if (initialValue == null) {
        initialValue = 1;
      }
      if (typeof initialValue === "number") {
        this.setCounterValue(initialValue);
      } else {
        this.setCounterBytes(initialValue);
      }
    }
    get counter() {
      return new Uint8Array(__classPrivateFieldGet2(this, _CTR_counter, "f"));
    }
    setCounterValue(value) {
      if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
        throw new TypeError("invalid counter initial integer value");
      }
      for (let index = 15; index >= 0; --index) {
        __classPrivateFieldGet2(this, _CTR_counter, "f")[index] = value % 256;
        value = Math.floor(value / 256);
      }
    }
    setCounterBytes(value) {
      if (value.length !== 16) {
        throw new TypeError("invalid counter initial Uint8Array value length");
      }
      __classPrivateFieldGet2(this, _CTR_counter, "f").set(value);
    }
    increment() {
      for (let i = 15; i >= 0; i--) {
        if (__classPrivateFieldGet2(this, _CTR_counter, "f")[i] === 255) {
          __classPrivateFieldGet2(this, _CTR_counter, "f")[i] = 0;
        } else {
          __classPrivateFieldGet2(this, _CTR_counter, "f")[i]++;
          break;
        }
      }
    }
    encrypt(plaintext) {
      var _a, _b;
      const crypttext = new Uint8Array(plaintext);
      for (let i = 0; i < crypttext.length; i++) {
        if (__classPrivateFieldGet2(this, _CTR_remainingIndex, "f") === 16) {
          __classPrivateFieldSet2(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet2(this, _CTR_counter, "f")), "f");
          __classPrivateFieldSet2(this, _CTR_remainingIndex, 0, "f");
          this.increment();
        }
        crypttext[i] ^= __classPrivateFieldGet2(this, _CTR_remaining, "f")[__classPrivateFieldSet2(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet2(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
      }
      return crypttext;
    }
    decrypt(ciphertext) {
      return this.encrypt(ciphertext);
    }
  }
  modeCtr.CTR = CTR;
  _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  return modeCtr;
}
var modeEcb = {};
var hasRequiredModeEcb;
function requireModeEcb() {
  if (hasRequiredModeEcb) return modeEcb;
  hasRequiredModeEcb = 1;
  Object.defineProperty(modeEcb, "__esModule", { value: true });
  modeEcb.ECB = void 0;
  const mode_js_1 = requireMode();
  class ECB extends mode_js_1.ModeOfOperation {
    constructor(key) {
      super("ECB", key, ECB);
    }
    encrypt(plaintext) {
      if (plaintext.length % 16) {
        throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
      }
      const crypttext = new Uint8Array(plaintext.length);
      for (let i = 0; i < plaintext.length; i += 16) {
        crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
      }
      return crypttext;
    }
    decrypt(crypttext) {
      if (crypttext.length % 16) {
        throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
      }
      const plaintext = new Uint8Array(crypttext.length);
      for (let i = 0; i < crypttext.length; i += 16) {
        plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
      }
      return plaintext;
    }
  }
  modeEcb.ECB = ECB;
  return modeEcb;
}
var modeOfb = {};
var hasRequiredModeOfb;
function requireModeOfb() {
  if (hasRequiredModeOfb) return modeOfb;
  hasRequiredModeOfb = 1;
  var __classPrivateFieldSet2 = modeOfb && modeOfb.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet2 = modeOfb && modeOfb.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;
  Object.defineProperty(modeOfb, "__esModule", { value: true });
  modeOfb.OFB = void 0;
  const mode_js_1 = requireMode();
  class OFB extends mode_js_1.ModeOfOperation {
    constructor(key, iv) {
      super("OFB", key, OFB);
      _OFB_iv.set(this, void 0);
      _OFB_lastPrecipher.set(this, void 0);
      _OFB_lastPrecipherIndex.set(this, void 0);
      if (iv) {
        if (iv.length % 16) {
          throw new TypeError("invalid iv size (must be 16 bytes)");
        }
        __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(iv), "f");
      } else {
        __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(16), "f");
      }
      __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.iv, "f");
      __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 16, "f");
    }
    get iv() {
      return new Uint8Array(__classPrivateFieldGet2(this, _OFB_iv, "f"));
    }
    encrypt(plaintext) {
      var _a, _b;
      if (plaintext.length % 16) {
        throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
      }
      const ciphertext = new Uint8Array(plaintext);
      for (let i = 0; i < ciphertext.length; i++) {
        if (__classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f") === 16) {
          __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")), "f");
          __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 0, "f");
        }
        ciphertext[i] ^= __classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
      }
      return ciphertext;
    }
    decrypt(ciphertext) {
      if (ciphertext.length % 16) {
        throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
      }
      return this.encrypt(ciphertext);
    }
  }
  modeOfb.OFB = OFB;
  _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
  return modeOfb;
}
var padding = {};
var hasRequiredPadding;
function requirePadding() {
  if (hasRequiredPadding) return padding;
  hasRequiredPadding = 1;
  Object.defineProperty(padding, "__esModule", { value: true });
  padding.pkcs7Strip = padding.pkcs7Pad = void 0;
  function pkcs7Pad(data2) {
    const padder = 16 - data2.length % 16;
    const result = new Uint8Array(data2.length + padder);
    result.set(data2);
    for (let i = data2.length; i < result.length; i++) {
      result[i] = padder;
    }
    return result;
  }
  padding.pkcs7Pad = pkcs7Pad;
  function pkcs7Strip(data2) {
    if (data2.length < 16) {
      throw new TypeError("PKCS#7 invalid length");
    }
    const padder = data2[data2.length - 1];
    if (padder > 16) {
      throw new TypeError("PKCS#7 padding byte out of range");
    }
    const length = data2.length - padder;
    for (let i = 0; i < padder; i++) {
      if (data2[length + i] !== padder) {
        throw new TypeError("PKCS#7 invalid padding byte");
      }
    }
    return new Uint8Array(data2.subarray(0, length));
  }
  padding.pkcs7Strip = pkcs7Strip;
  return padding;
}
var hasRequiredLib_commonjs$1;
function requireLib_commonjs$1() {
  if (hasRequiredLib_commonjs$1) return lib_commonjs;
  hasRequiredLib_commonjs$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;
    var aes_js_1 = requireAes();
    Object.defineProperty(exports, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = requireMode();
    Object.defineProperty(exports, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = requireModeCbc();
    Object.defineProperty(exports, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = requireModeCfb();
    Object.defineProperty(exports, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = requireModeCtr();
    Object.defineProperty(exports, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = requireModeEcb();
    Object.defineProperty(exports, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = requireModeOfb();
    Object.defineProperty(exports, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = requirePadding();
    Object.defineProperty(exports, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  })(lib_commonjs);
  return lib_commonjs;
}
var utils$3 = {};
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$3;
  hasRequiredUtils$1 = 1;
  Object.defineProperty(utils$3, "__esModule", { value: true });
  utils$3.spelunk = utils$3.getPassword = utils$3.zpad = utils$3.looseArrayify = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  function looseArrayify(hexString) {
    if (typeof hexString === "string" && !hexString.startsWith("0x")) {
      hexString = "0x" + hexString;
    }
    return (0, index_js_1.getBytesCopy)(hexString);
  }
  utils$3.looseArrayify = looseArrayify;
  function zpad(value, length) {
    value = String(value);
    while (value.length < length) {
      value = "0" + value;
    }
    return value;
  }
  utils$3.zpad = zpad;
  function getPassword(password) {
    if (typeof password === "string") {
      return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
    }
    return (0, index_js_1.getBytesCopy)(password);
  }
  utils$3.getPassword = getPassword;
  function spelunk(object, _path) {
    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
    (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
    const path = match[1];
    const type2 = match[3];
    const reqd = match[4] === "!";
    let cur = object;
    for (const comp of path.toLowerCase().split(".")) {
      if (Array.isArray(cur)) {
        if (!comp.match(/^[0-9]+$/)) {
          break;
        }
        cur = cur[parseInt(comp)];
      } else if (typeof cur === "object") {
        let found = null;
        for (const key in cur) {
          if (key.toLowerCase() === comp) {
            found = cur[key];
            break;
          }
        }
        cur = found;
      } else {
        cur = null;
      }
      if (cur == null) {
        break;
      }
    }
    (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
    if (type2 && cur != null) {
      if (type2 === "int") {
        if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
          return parseInt(cur);
        } else if (Number.isSafeInteger(cur)) {
          return cur;
        }
      }
      if (type2 === "number") {
        if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
          return parseFloat(cur);
        }
      }
      if (type2 === "data") {
        if (typeof cur === "string") {
          return looseArrayify(cur);
        }
      }
      if (type2 === "array" && Array.isArray(cur)) {
        return cur;
      }
      if (type2 === typeof cur) {
        return cur;
      }
      (0, index_js_1.assertArgument)(false, `wrong type found for ${type2} `, "path", path);
    }
    return cur;
  }
  utils$3.spelunk = spelunk;
  return utils$3;
}
var hasRequiredJsonKeystore;
function requireJsonKeystore() {
  if (hasRequiredJsonKeystore) return jsonKeystore;
  hasRequiredJsonKeystore = 1;
  Object.defineProperty(jsonKeystore, "__esModule", { value: true });
  jsonKeystore.encryptKeystoreJson = jsonKeystore.encryptKeystoreJsonSync = jsonKeystore.decryptKeystoreJson = jsonKeystore.decryptKeystoreJsonSync = jsonKeystore.isKeystoreJson = void 0;
  const aes_js_1 = /* @__PURE__ */ requireLib_commonjs$1();
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireTransaction();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  const utils_js_1 = /* @__PURE__ */ requireUtils$1();
  const _version_js_1 = /* @__PURE__ */ require_version();
  const defaultPath = "m/44'/60'/0'/0/0";
  function isKeystoreJson(json) {
    try {
      const data2 = JSON.parse(json);
      const version2 = data2.version != null ? parseInt(data2.version) : 0;
      if (version2 === 3) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  jsonKeystore.isKeystoreJson = isKeystoreJson;
  function decrypt(data2, key, ciphertext) {
    const cipher = (0, utils_js_1.spelunk)(data2, "crypto.cipher:string");
    if (cipher === "aes-128-ctr") {
      const iv = (0, utils_js_1.spelunk)(data2, "crypto.cipherparams.iv:data!");
      const aesCtr = new aes_js_1.CTR(key, iv);
      return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
    }
    (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
      operation: "decrypt"
    });
  }
  function getAccount(data2, _key) {
    const key = (0, index_js_4.getBytes)(_key);
    const ciphertext = (0, utils_js_1.spelunk)(data2, "crypto.ciphertext:data!");
    const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
    (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data2, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
    const privateKey = decrypt(data2, key.slice(0, 16), ciphertext);
    const address2 = (0, index_js_3.computeAddress)(privateKey);
    if (data2.address) {
      let check = data2.address.toLowerCase();
      if (!check.startsWith("0x")) {
        check = "0x" + check;
      }
      (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address2, "keystore address/privateKey mismatch", "address", data2.address);
    }
    const account = { address: address2, privateKey };
    const version2 = (0, utils_js_1.spelunk)(data2, "x-ethers.version:string");
    if (version2 === "0.1") {
      const mnemonicKey = key.slice(32, 64);
      const mnemonicCiphertext = (0, utils_js_1.spelunk)(data2, "x-ethers.mnemonicCiphertext:data!");
      const mnemonicIv = (0, utils_js_1.spelunk)(data2, "x-ethers.mnemonicCounter:data!");
      const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
      account.mnemonic = {
        path: (0, utils_js_1.spelunk)(data2, "x-ethers.path:string") || defaultPath,
        locale: (0, utils_js_1.spelunk)(data2, "x-ethers.locale:string") || "en",
        entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
      };
    }
    return account;
  }
  function getDecryptKdfParams(data2) {
    const kdf = (0, utils_js_1.spelunk)(data2, "crypto.kdf:string");
    if (kdf && typeof kdf === "string") {
      if (kdf.toLowerCase() === "scrypt") {
        const salt = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.salt:data!");
        const N = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.n:int!");
        const r = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.r:int!");
        const p = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.p:int!");
        (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, "invalid kdf.N", "kdf.N", N);
        (0, index_js_4.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
        const dkLen = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.dklen:int!");
        (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
        return { name: "scrypt", salt, N, r, p, dkLen: 64 };
      } else if (kdf.toLowerCase() === "pbkdf2") {
        const salt = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.salt:data!");
        const prf = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.prf:string!");
        const algorithm = prf.split("-").pop();
        (0, index_js_4.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
        const count = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.c:int!");
        const dkLen = (0, utils_js_1.spelunk)(data2, "crypto.kdfparams.dklen:int!");
        (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
        return { name: "pbkdf2", salt, count, dkLen, algorithm };
      }
    }
    (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
  }
  function decryptKeystoreJsonSync(json, _password) {
    const data2 = JSON.parse(json);
    const password = (0, utils_js_1.getPassword)(_password);
    const params = getDecryptKdfParams(data2);
    if (params.name === "pbkdf2") {
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
      return getAccount(data2, key2);
    }
    (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N, r, p, dkLen } = params;
    const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);
    return getAccount(data2, key);
  }
  jsonKeystore.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  async function decryptKeystoreJson(json, _password, progress) {
    const data2 = JSON.parse(json);
    const password = (0, utils_js_1.getPassword)(_password);
    const params = getDecryptKdfParams(data2);
    if (params.name === "pbkdf2") {
      if (progress) {
        progress(0);
        await stall(0);
      }
      const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
      const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
      if (progress) {
        progress(1);
        await stall(0);
      }
      return getAccount(data2, key2);
    }
    (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
    const { salt, N, r, p, dkLen } = params;
    const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);
    return getAccount(data2, key);
  }
  jsonKeystore.decryptKeystoreJson = decryptKeystoreJson;
  function getEncryptKdfParams(options) {
    const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
    let N = 1 << 17, r = 8, p = 1;
    if (options.scrypt) {
      if (options.scrypt.N) {
        N = options.scrypt.N;
      }
      if (options.scrypt.r) {
        r = options.scrypt.r;
      }
      if (options.scrypt.p) {
        p = options.scrypt.p;
      }
    }
    (0, index_js_4.assertArgument)(typeof N === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
    (0, index_js_4.assertArgument)(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
    (0, index_js_4.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
    return { name: "scrypt", dkLen: 32, salt, N, r, p };
  }
  function _encryptKeystore(key, kdf, account, options) {
    const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
    const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
    (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
    const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
    (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
    const derivedKey = key.slice(0, 16);
    const macPrefix = key.slice(16, 32);
    const aesCtr = new aes_js_1.CTR(derivedKey, iv);
    const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
    const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
    const data2 = {
      address: account.address.substring(2).toLowerCase(),
      id: (0, index_js_4.uuidV4)(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: (0, index_js_4.hexlify)(iv).substring(2)
        },
        ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
          n: kdf.N,
          dklen: 32,
          p: kdf.p,
          r: kdf.r
        },
        mac: mac.substring(2)
      }
    };
    if (account.mnemonic) {
      const client2 = options.client != null ? options.client : `ethers/${_version_js_1.version}`;
      const path = account.mnemonic.path || defaultPath;
      const locale = account.mnemonic.locale || "en";
      const mnemonicKey = key.slice(32, 64);
      const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
      const mnemonicIv = (0, index_js_2.randomBytes)(16);
      const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
      const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
      const now = /* @__PURE__ */ new Date();
      const timestamp = now.getUTCFullYear() + "-" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + "T" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + ".0Z";
      const gethFilename = "UTC--" + timestamp + "--" + data2.address;
      data2["x-ethers"] = {
        client: client2,
        gethFilename,
        path,
        locale,
        mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
        mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
        version: "0.1"
      };
    }
    return JSON.stringify(data2);
  }
  function encryptKeystoreJsonSync(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = (0, utils_js_1.getPassword)(password);
    const kdf = getEncryptKdfParams(options);
    const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
  }
  jsonKeystore.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
  async function encryptKeystoreJson(account, password, options) {
    if (options == null) {
      options = {};
    }
    const passwordBytes = (0, utils_js_1.getPassword)(password);
    const kdf = getEncryptKdfParams(options);
    const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
  }
  jsonKeystore.encryptKeystoreJson = encryptKeystoreJson;
  return jsonKeystore;
}
var hasRequiredHdwallet;
function requireHdwallet() {
  if (hasRequiredHdwallet) return hdwallet;
  hasRequiredHdwallet = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIndexedAccountPath = exports.getAccountPath = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.defaultPath = void 0;
    const index_js_1 = /* @__PURE__ */ requireCrypto();
    const index_js_2 = /* @__PURE__ */ requireProviders();
    const index_js_3 = /* @__PURE__ */ requireTransaction();
    const index_js_4 = /* @__PURE__ */ requireUtils$3();
    const lang_en_js_1 = /* @__PURE__ */ requireLangEn();
    const base_wallet_js_1 = /* @__PURE__ */ requireBaseWallet();
    const mnemonic_js_1 = /* @__PURE__ */ requireMnemonic();
    const json_keystore_js_1 = /* @__PURE__ */ requireJsonKeystore();
    exports.defaultPath = "m/44'/60'/0'/0/0";
    const MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    const HardenedBit = 2147483648;
    const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const Nibbles = "0123456789abcdef";
    function zpad(value, length) {
      let result = "";
      while (value) {
        result = Nibbles[value % 16] + result;
        value = Math.trunc(value / 16);
      }
      while (result.length < length * 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function encodeBase58Check(_value) {
      const value = (0, index_js_4.getBytes)(_value);
      const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
      const bytes2 = (0, index_js_4.concat)([value, check]);
      return (0, index_js_4.encodeBase58)(bytes2);
    }
    const _guard = {};
    function ser_I(index, chainCode, publicKey, privateKey) {
      const data2 = new Uint8Array(37);
      if (index & HardenedBit) {
        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
          operation: "deriveChild"
        });
        data2.set((0, index_js_4.getBytes)(privateKey), 1);
      } else {
        data2.set((0, index_js_4.getBytes)(publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data2[33 + (i >> 3)] = index >> 24 - i & 255;
      }
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data2));
      return { IL: I.slice(0, 32), IR: I.slice(32) };
    }
    function derivePath(node2, path) {
      const components = path.split("/");
      (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path);
      if (components[0] === "m") {
        (0, index_js_4.assertArgument)(node2.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node2.depth}`, "path", path);
        components.shift();
      }
      let result = node2;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index = parseInt(component.substring(0, component.length - 1));
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          const index = parseInt(component);
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(index);
        } else {
          (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
        }
      }
      return result;
    }
    class HDNodeWallet extends base_wallet_js_1.BaseWallet {
      /**
       *  The compressed public key.
       */
      publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */
      fingerprint;
      /**
       *  The parent fingerprint.
       */
      parentFingerprint;
      /**
       *  The mnemonic used to create this HD Node, if available.
       *
       *  Sources such as extended keys do not encode the mnemonic, in
       *  which case this will be ``null``.
       */
      mnemonic;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */
      chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provide full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  encode it.
       */
      path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */
      index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */
      depth;
      /**
       *  @private
       */
      constructor(guard, signingKey2, parentFingerprint, chainCode, path, index, depth, mnemonic2, provider2) {
        super(signingKey2, provider2);
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: signingKey2.compressedPublicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          parentFingerprint,
          fingerprint,
          chainCode,
          path,
          index,
          depth
        });
        (0, index_js_4.defineProperties)(this, { mnemonic: mnemonic2 });
      }
      connect(provider2) {
        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider2);
      }
      #account() {
        const account = { address: this.address, privateKey: this.privateKey };
        const m = this.mnemonic;
        if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
          account.mnemonic = {
            path: this.path,
            locale: "en",
            entropy: m.entropy
          };
        }
        return account;
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        return await (0, json_keystore_js_1.encryptKeystoreJson)(this.#account(), password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(this.#account(), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488ADE4",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          (0, index_js_4.concat)(["0x00", this.privateKey])
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */
      neuter() {
        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
        return new HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
      static #fromSeed(_seed, mnemonic2) {
        (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
        const seed = (0, index_js_4.getBytes)(_seed, "seed");
        (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
        const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret, seed));
        const signingKey2 = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));
        return new HDNodeWallet(_guard, signingKey2, "0x00000000", (0, index_js_4.hexlify)(I.slice(32)), "m", 0, 0, mnemonic2, null);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */
      static fromExtendedKey(extendedKey) {
        const bytes2 = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey));
        (0, index_js_4.assertArgument)(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
        const depth = bytes2[4];
        const parentFingerprint = (0, index_js_4.hexlify)(bytes2.slice(5, 9));
        const index = parseInt((0, index_js_4.hexlify)(bytes2.slice(9, 13)).substring(2), 16);
        const chainCode = (0, index_js_4.hexlify)(bytes2.slice(13, 45));
        const key = bytes2.slice(45, 78);
        switch ((0, index_js_4.hexlify)(bytes2.slice(0, 4))) {
          // Public Key
          case "0x0488b21e":
          case "0x043587cf": {
            const publicKey = (0, index_js_4.hexlify)(key);
            return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
          }
          // Private Key
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
        }
        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */
      static createRandom(password, path, wordlist2) {
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports.defaultPath;
        }
        if (wordlist2 == null) {
          wordlist2 = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic2 = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist2);
        return HDNodeWallet.#fromSeed(mnemonic2.computeSeed(), mnemonic2).derivePath(path);
      }
      /**
       *  Create an HD Node from %%mnemonic%%.
       */
      static fromMnemonic(mnemonic2, path) {
        if (!path) {
          path = exports.defaultPath;
        }
        return HDNodeWallet.#fromSeed(mnemonic2.computeSeed(), mnemonic2).derivePath(path);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */
      static fromPhrase(phrase, password, path, wordlist2) {
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports.defaultPath;
        }
        if (wordlist2 == null) {
          wordlist2 = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic2 = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist2);
        return HDNodeWallet.#fromSeed(mnemonic2.computeSeed(), mnemonic2).derivePath(path);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */
      static fromSeed(seed) {
        return HDNodeWallet.#fromSeed(seed, null);
      }
    }
    exports.HDNodeWallet = HDNodeWallet;
    class HDNodeVoidWallet extends index_js_2.VoidSigner {
      /**
       *  The compressed public key.
       */
      publicKey;
      /**
       *  The fingerprint.
       *
       *  A fingerprint allows quick qay to detect parent and child nodes,
       *  but developers should be prepared to deal with collisions as it
       *  is only 4 bytes.
       */
      fingerprint;
      /**
       *  The parent node fingerprint.
       */
      parentFingerprint;
      /**
       *  The chaincode, which is effectively a public key used
       *  to derive children.
       */
      chainCode;
      /**
       *  The derivation path of this wallet.
       *
       *  Since extended keys do not provider full path details, this
       *  may be ``null``, if instantiated from a source that does not
       *  enocde it.
       */
      path;
      /**
       *  The child index of this wallet. Values over ``2 *\* 31`` indicate
       *  the node is hardened.
       */
      index;
      /**
       *  The depth of this wallet, which is the number of components
       *  in its path.
       */
      depth;
      /**
       *  @private
       */
      constructor(guard, address2, publicKey, parentFingerprint, chainCode, path, index, depth, provider2) {
        super(address2, provider2);
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
        (0, index_js_4.defineProperties)(this, { publicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          publicKey,
          fingerprint,
          parentFingerprint,
          chainCode,
          path,
          index,
          depth
        });
      }
      connect(provider2) {
        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider2);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488B21E",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          this.publicKey
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
        const address2 = (0, index_js_3.computeAddress)(Ki);
        return new HDNodeVoidWallet(_guard, address2, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
    }
    exports.HDNodeVoidWallet = HDNodeVoidWallet;
    function getAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
    }
    exports.getAccountPath = getAccountPath;
    function getIndexedAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
    }
    exports.getIndexedAccountPath = getIndexedAccountPath;
  })(hdwallet);
  return hdwallet;
}
var jsonCrowdsale = {};
var hasRequiredJsonCrowdsale;
function requireJsonCrowdsale() {
  if (hasRequiredJsonCrowdsale) return jsonCrowdsale;
  hasRequiredJsonCrowdsale = 1;
  Object.defineProperty(jsonCrowdsale, "__esModule", { value: true });
  jsonCrowdsale.decryptCrowdsaleJson = jsonCrowdsale.isCrowdsaleJson = void 0;
  const aes_js_1 = /* @__PURE__ */ requireLib_commonjs$1();
  const index_js_1 = /* @__PURE__ */ requireAddress$2();
  const index_js_2 = /* @__PURE__ */ requireCrypto();
  const index_js_3 = /* @__PURE__ */ requireHash();
  const index_js_4 = /* @__PURE__ */ requireUtils$3();
  const utils_js_1 = /* @__PURE__ */ requireUtils$1();
  function isCrowdsaleJson(json) {
    try {
      const data2 = JSON.parse(json);
      if (data2.encseed) {
        return true;
      }
    } catch (error) {
    }
    return false;
  }
  jsonCrowdsale.isCrowdsaleJson = isCrowdsaleJson;
  function decryptCrowdsaleJson(json, _password) {
    const data2 = JSON.parse(json);
    const password = (0, utils_js_1.getPassword)(_password);
    const address2 = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data2, "ethaddr:string!"));
    const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data2, "encseed:string!"));
    (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
    const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    const aesCbc = new aes_js_1.CBC(key, iv);
    const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
    let seedHex = "";
    for (let i = 0; i < seed.length; i++) {
      seedHex += String.fromCharCode(seed[i]);
    }
    return { address: address2, privateKey: (0, index_js_3.id)(seedHex) };
  }
  jsonCrowdsale.decryptCrowdsaleJson = decryptCrowdsaleJson;
  return jsonCrowdsale;
}
var wallet = {};
var hasRequiredWallet$1;
function requireWallet$1() {
  if (hasRequiredWallet$1) return wallet;
  hasRequiredWallet$1 = 1;
  Object.defineProperty(wallet, "__esModule", { value: true });
  wallet.Wallet = void 0;
  const index_js_1 = /* @__PURE__ */ requireCrypto();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const base_wallet_js_1 = /* @__PURE__ */ requireBaseWallet();
  const hdwallet_js_1 = /* @__PURE__ */ requireHdwallet();
  const json_crowdsale_js_1 = /* @__PURE__ */ requireJsonCrowdsale();
  const json_keystore_js_1 = /* @__PURE__ */ requireJsonKeystore();
  const mnemonic_js_1 = /* @__PURE__ */ requireMnemonic();
  function stall(duration) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, duration);
    });
  }
  class Wallet extends base_wallet_js_1.BaseWallet {
    /**
     *  Create a new wallet for the private %%key%%, optionally connected
     *  to %%provider%%.
     */
    constructor(key, provider2) {
      if (typeof key === "string" && !key.startsWith("0x")) {
        key = "0x" + key;
      }
      let signingKey2 = typeof key === "string" ? new index_js_1.SigningKey(key) : key;
      super(signingKey2, provider2);
    }
    connect(provider2) {
      return new Wallet(this.signingKey, provider2);
    }
    /**
     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
     *  %%password%%.
     *
     *  If %%progressCallback%% is specified, it will receive periodic
     *  updates as the encryption process progreses.
     */
    async encrypt(password, progressCallback) {
      const account = { address: this.address, privateKey: this.privateKey };
      return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
    }
    /**
     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
     *  %%password%%.
     *
     *  It is preferred to use the [async version](encrypt) instead,
     *  which allows a [[ProgressCallback]] to keep the user informed.
     *
     *  This method will block the event loop (freezing all UI) until
     *  it is complete, which may be a non-trivial duration.
     */
    encryptSync(password) {
      const account = { address: this.address, privateKey: this.privateKey };
      return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
    }
    static #fromAccount(account) {
      (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
      if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
        const mnemonic2 = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
        const wallet3 = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic2, account.mnemonic.path);
        if (wallet3.address === account.address && wallet3.privateKey === account.privateKey) {
          return wallet3;
        }
        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
      }
      const wallet2 = new Wallet(account.privateKey);
      (0, index_js_2.assertArgument)(wallet2.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
      return wallet2;
    }
    /**
     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
     *  with %%password%%.
     *
     *  If %%progress%% is provided, it is called periodically during
     *  decryption so that any UI can be updated.
     */
    static async fromEncryptedJson(json, password, progress) {
      let account = null;
      if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
        account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
      } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
        if (progress) {
          progress(0);
          await stall(0);
        }
        account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
        if (progress) {
          progress(1);
          await stall(0);
        }
      }
      return Wallet.#fromAccount(account);
    }
    /**
     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
     *
     *  The [[fromEncryptedJson]] method is preferred, as this method
     *  will lock up and freeze the UI during decryption, which may take
     *  some time.
     */
    static fromEncryptedJsonSync(json, password) {
      let account = null;
      if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
        account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
      } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
        account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
      } else {
        (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
      }
      return Wallet.#fromAccount(account);
    }
    /**
     *  Creates a new random [[HDNodeWallet]] using the available
     *  [cryptographic random source](randomBytes).
     *
     *  If there is no crytographic random source, this will throw.
     */
    static createRandom(provider2) {
      const wallet2 = hdwallet_js_1.HDNodeWallet.createRandom();
      if (provider2) {
        return wallet2.connect(provider2);
      }
      return wallet2;
    }
    /**
     *  Creates a [[HDNodeWallet]] for %%phrase%%.
     */
    static fromPhrase(phrase, provider2) {
      const wallet2 = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
      if (provider2) {
        return wallet2.connect(provider2);
      }
      return wallet2;
    }
  }
  wallet.Wallet = Wallet;
  return wallet;
}
var hasRequiredWallet;
function requireWallet() {
  if (hasRequiredWallet) return wallet$1;
  hasRequiredWallet = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;
    var base_wallet_js_1 = /* @__PURE__ */ requireBaseWallet();
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return base_wallet_js_1.BaseWallet;
    } });
    var hdwallet_js_1 = /* @__PURE__ */ requireHdwallet();
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return hdwallet_js_1.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeVoidWallet;
    } });
    var json_crowdsale_js_1 = /* @__PURE__ */ requireJsonCrowdsale();
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.decryptCrowdsaleJson;
    } });
    var json_keystore_js_1 = /* @__PURE__ */ requireJsonKeystore();
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJsonSync;
    } });
    var mnemonic_js_1 = /* @__PURE__ */ requireMnemonic();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return mnemonic_js_1.Mnemonic;
    } });
    var wallet_js_1 = /* @__PURE__ */ requireWallet$1();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_js_1.Wallet;
    } });
  })(wallet$1);
  return wallet$1;
}
var wordlists$1 = {};
var wordlistOwla = {};
var decodeOwla = {};
var bitReader = {};
var hasRequiredBitReader;
function requireBitReader() {
  if (hasRequiredBitReader) return bitReader;
  hasRequiredBitReader = 1;
  Object.defineProperty(bitReader, "__esModule", { value: true });
  bitReader.decodeBits = void 0;
  const Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
  function decodeBits(width, data2) {
    const maxValue = (1 << width) - 1;
    const result = [];
    let accum = 0, bits = 0, flood = 0;
    for (let i = 0; i < data2.length; i++) {
      accum = accum << 6 | Base64.indexOf(data2[i]);
      bits += 6;
      while (bits >= width) {
        const value = accum >> bits - width;
        accum &= (1 << bits - width) - 1;
        bits -= width;
        if (value === 0) {
          flood += maxValue;
        } else {
          result.push(value + flood);
          flood = 0;
        }
      }
    }
    return result;
  }
  bitReader.decodeBits = decodeBits;
  return bitReader;
}
var hasRequiredDecodeOwla;
function requireDecodeOwla() {
  if (hasRequiredDecodeOwla) return decodeOwla;
  hasRequiredDecodeOwla = 1;
  Object.defineProperty(decodeOwla, "__esModule", { value: true });
  decodeOwla.decodeOwlA = void 0;
  const index_js_1 = /* @__PURE__ */ requireUtils$3();
  const bit_reader_js_1 = /* @__PURE__ */ requireBitReader();
  const decode_owl_js_1 = /* @__PURE__ */ requireDecodeOwl();
  function decodeOwlA(data2, accents) {
    let words = (0, decode_owl_js_1.decodeOwl)(data2).join(",");
    accents.split(/,/g).forEach((accent) => {
      const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
      (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
      let posOffset = 0;
      const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
      const charCode = parseInt(match[2]);
      const regex = new RegExp(`([${match[1]}])`, "g");
      words = words.replace(regex, (all3, letter) => {
        const rem = --positions[posOffset];
        if (rem === 0) {
          letter = String.fromCharCode(letter.charCodeAt(0), charCode);
          posOffset++;
        }
        return letter;
      });
    });
    return words.split(",");
  }
  decodeOwla.decodeOwlA = decodeOwlA;
  return decodeOwla;
}
var hasRequiredWordlistOwla;
function requireWordlistOwla() {
  if (hasRequiredWordlistOwla) return wordlistOwla;
  hasRequiredWordlistOwla = 1;
  Object.defineProperty(wordlistOwla, "__esModule", { value: true });
  wordlistOwla.WordlistOwlA = void 0;
  const wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
  const decode_owla_js_1 = /* @__PURE__ */ requireDecodeOwla();
  class WordlistOwlA extends wordlist_owl_js_1.WordlistOwl {
    #accent;
    /**
     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
     *  and %%accent%% data and validated against the %%checksum%%.
     */
    constructor(locale, data2, accent, checksum) {
      super(locale, data2, checksum);
      this.#accent = accent;
    }
    /**
     *  The OWLA-encoded accent data.
     */
    get _accent() {
      return this.#accent;
    }
    /**
     *  Decode all the words for the wordlist.
     */
    _decodeWords() {
      return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
    }
  }
  wordlistOwla.WordlistOwlA = WordlistOwlA;
  return wordlistOwla;
}
var wordlists = {};
var langCz = {};
var hasRequiredLangCz;
function requireLangCz() {
  if (hasRequiredLangCz) return langCz;
  hasRequiredLangCz = 1;
  Object.defineProperty(langCz, "__esModule", { value: true });
  langCz.LangCz = void 0;
  const wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
  const words = "0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk";
  const checksum = "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a";
  let wordlist2 = null;
  class LangCz extends wordlist_owl_js_1.WordlistOwl {
    /**
     *  Creates a new instance of the Czech language Wordlist.
     *
     *  Using the constructor should be unnecessary, instead use the
     *  [[wordlist]] singleton method.
     *
     *  @_ignore:
     */
    constructor() {
      super("cz", words, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangCz``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangCz();
      }
      return wordlist2;
    }
  }
  langCz.LangCz = LangCz;
  return langCz;
}
var langEs = {};
var hasRequiredLangEs;
function requireLangEs() {
  if (hasRequiredLangEs) return langEs;
  hasRequiredLangEs = 1;
  Object.defineProperty(langEs, "__esModule", { value: true });
  langEs.LangEs = void 0;
  const wordlist_owla_js_1 = /* @__PURE__ */ requireWordlistOwla();
  const words = "0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&";
  const accents = "aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M";
  const checksum = "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300";
  let wordlist2 = null;
  class LangEs extends wordlist_owla_js_1.WordlistOwlA {
    /**
     *  Creates a new instance of the Spanish language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langEs]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("es", words, accents, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangEs``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangEs();
      }
      return wordlist2;
    }
  }
  langEs.LangEs = LangEs;
  return langEs;
}
var langFr = {};
var hasRequiredLangFr;
function requireLangFr() {
  if (hasRequiredLangFr) return langFr;
  hasRequiredLangFr = 1;
  Object.defineProperty(langFr, "__esModule", { value: true });
  langFr.LangFr = void 0;
  const wordlist_owla_js_1 = /* @__PURE__ */ requireWordlistOwla();
  const words = "0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+";
  const accents = "e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS";
  const checksum = "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045";
  let wordlist2 = null;
  class LangFr extends wordlist_owla_js_1.WordlistOwlA {
    /**
     *  Creates a new instance of the French language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langFr]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("fr", words, accents, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangFr``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangFr();
      }
      return wordlist2;
    }
  }
  langFr.LangFr = LangFr;
  return langFr;
}
var langJa = {};
var hasRequiredLangJa;
function requireLangJa() {
  if (hasRequiredLangJa) return langJa;
  hasRequiredLangJa = 1;
  Object.defineProperty(langJa, "__esModule", { value: true });
  langJa.LangJa = void 0;
  const index_js_1 = /* @__PURE__ */ requireHash();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const wordlist_js_1 = /* @__PURE__ */ requireWordlist();
  const data2 = [
    // 4-kana words
    "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
    // 5-kana words
    "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
    // 6-kana words
    "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
    // 7-kana words
    "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
    // 8-kana words
    "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
    // 9-kana words
    "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
    // 10-kana words
    "IJBEJqXZJ"
  ];
  const mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
  let _wordlist = null;
  function hex(word) {
    return (0, index_js_2.hexlify)((0, index_js_2.toUtf8Bytes)(word));
  }
  const KiYoKu = "0xe3818de38284e3818f";
  const KyoKu = "0xe3818de38283e3818f";
  function toString3(data3) {
    return (0, index_js_2.toUtf8String)(new Uint8Array(data3));
  }
  function loadWords() {
    if (_wordlist !== null) {
      return _wordlist;
    }
    const wordlist3 = [];
    const transform = {};
    transform[toString3([227, 130, 154])] = false;
    transform[toString3([227, 130, 153])] = false;
    transform[toString3([227, 130, 133])] = toString3([227, 130, 134]);
    transform[toString3([227, 129, 163])] = toString3([227, 129, 164]);
    transform[toString3([227, 130, 131])] = toString3([227, 130, 132]);
    transform[toString3([227, 130, 135])] = toString3([227, 130, 136]);
    function normalize(word) {
      let result = "";
      for (let i = 0; i < word.length; i++) {
        let kana = word[i];
        const target = transform[kana];
        if (target === false) {
          continue;
        }
        if (target) {
          kana = target;
        }
        result += kana;
      }
      return result;
    }
    function sortJapanese(a, b) {
      a = normalize(a);
      b = normalize(b);
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    for (let length = 3; length <= 9; length++) {
      const d = data2[length - 3];
      for (let offset = 0; offset < d.length; offset += length) {
        const word = [];
        for (let i = 0; i < length; i++) {
          const k = mapping.indexOf(d[offset + i]);
          word.push(227);
          word.push(k & 64 ? 130 : 129);
          word.push((k & 63) + 128);
        }
        wordlist3.push(toString3(word));
      }
    }
    wordlist3.sort(sortJapanese);
    if (hex(wordlist3[442]) === KiYoKu && hex(wordlist3[443]) === KyoKu) {
      const tmp = wordlist3[442];
      wordlist3[442] = wordlist3[443];
      wordlist3[443] = tmp;
    }
    const checksum = (0, index_js_1.id)(wordlist3.join("\n") + "\n");
    if (checksum !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
      throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
    }
    _wordlist = wordlist3;
    return wordlist3;
  }
  let wordlist2 = null;
  class LangJa extends wordlist_js_1.Wordlist {
    /**
     *  Creates a new instance of the Japanese language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langJa]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("ja");
    }
    getWord(index) {
      const words = loadWords();
      (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
      return words[index];
    }
    getWordIndex(word) {
      return loadWords().indexOf(word);
    }
    split(phrase) {
      return phrase.split(/(?:\u3000| )+/g);
    }
    join(words) {
      return words.join("　");
    }
    /**
     *  Returns a singleton instance of a ``LangJa``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangJa();
      }
      return wordlist2;
    }
  }
  langJa.LangJa = LangJa;
  return langJa;
}
var langKo = {};
var hasRequiredLangKo;
function requireLangKo() {
  if (hasRequiredLangKo) return langKo;
  hasRequiredLangKo = 1;
  Object.defineProperty(langKo, "__esModule", { value: true });
  langKo.LangKo = void 0;
  const index_js_1 = /* @__PURE__ */ requireHash();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const wordlist_js_1 = /* @__PURE__ */ requireWordlist();
  const data2 = [
    "OYAa",
    "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
    "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
    "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
    "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
    "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
    "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
    "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
  ];
  const codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
  function getHangul(code) {
    if (code >= 40) {
      code = code + 168 - 40;
    } else if (code >= 19) {
      code = code + 97 - 19;
    }
    return (0, index_js_2.toUtf8String)(new Uint8Array([225, (code >> 6) + 132, (code & 63) + 128]));
  }
  let _wordlist = null;
  function loadWords() {
    if (_wordlist != null) {
      return _wordlist;
    }
    const wordlist3 = [];
    data2.forEach((data3, length) => {
      length += 4;
      for (let i = 0; i < data3.length; i += length) {
        let word = "";
        for (let j = 0; j < length; j++) {
          word += getHangul(codes.indexOf(data3[i + j]));
        }
        wordlist3.push(word);
      }
    });
    wordlist3.sort();
    const checksum = (0, index_js_1.id)(wordlist3.join("\n") + "\n");
    if (checksum !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
      throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
    }
    _wordlist = wordlist3;
    return wordlist3;
  }
  let wordlist2 = null;
  class LangKo extends wordlist_js_1.Wordlist {
    /**
     *  Creates a new instance of the Korean language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langKo]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("ko");
    }
    getWord(index) {
      const words = loadWords();
      (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
      return words[index];
    }
    getWordIndex(word) {
      return loadWords().indexOf(word);
    }
    /**
     *  Returns a singleton instance of a ``LangKo``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangKo();
      }
      return wordlist2;
    }
  }
  langKo.LangKo = LangKo;
  return langKo;
}
var langIt = {};
var hasRequiredLangIt;
function requireLangIt() {
  if (hasRequiredLangIt) return langIt;
  hasRequiredLangIt = 1;
  Object.defineProperty(langIt, "__esModule", { value: true });
  langIt.LangIt = void 0;
  const wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
  const words = "0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa";
  const checksum = "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620";
  let wordlist2 = null;
  class LangIt extends wordlist_owl_js_1.WordlistOwl {
    /**
     *  Creates a new instance of the Italian language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langIt]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("it", words, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangIt``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangIt();
      }
      return wordlist2;
    }
  }
  langIt.LangIt = LangIt;
  return langIt;
}
var langPt = {};
var hasRequiredLangPt;
function requireLangPt() {
  if (hasRequiredLangPt) return langPt;
  hasRequiredLangPt = 1;
  Object.defineProperty(langPt, "__esModule", { value: true });
  langPt.LangPt = void 0;
  const wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
  const words = "0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=";
  const checksum = "0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac";
  let wordlist2 = null;
  class LangPt extends wordlist_owl_js_1.WordlistOwl {
    /**
     *  Creates a new instance of the Portuguese language Wordlist.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langPt]] should suffice.
     *
     *  @_ignore:
     */
    constructor() {
      super("pt", words, checksum);
    }
    /**
     *  Returns a singleton instance of a ``LangPt``, creating it
     *  if this is the first time being called.
     */
    static wordlist() {
      if (wordlist2 == null) {
        wordlist2 = new LangPt();
      }
      return wordlist2;
    }
  }
  langPt.LangPt = LangPt;
  return langPt;
}
var langZh = {};
var hasRequiredLangZh;
function requireLangZh() {
  if (hasRequiredLangZh) return langZh;
  hasRequiredLangZh = 1;
  Object.defineProperty(langZh, "__esModule", { value: true });
  langZh.LangZh = void 0;
  const index_js_1 = /* @__PURE__ */ requireHash();
  const index_js_2 = /* @__PURE__ */ requireUtils$3();
  const wordlist_js_1 = /* @__PURE__ */ requireWordlist();
  const data2 = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
  const deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
  const _wordlist = {
    zh_cn: null,
    zh_tw: null
  };
  const Checks = {
    zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
    zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
  };
  const codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  const style2 = "~!@#$%^&*_-=[]{}|;:,.()<>?";
  function loadWords(locale) {
    if (_wordlist[locale] != null) {
      return _wordlist[locale];
    }
    const wordlist2 = [];
    let deltaOffset = 0;
    for (let i = 0; i < 2048; i++) {
      const s = style2.indexOf(data2[i * 3]);
      const bytes2 = [
        228 + (s >> 2),
        128 + codes.indexOf(data2[i * 3 + 1]),
        128 + codes.indexOf(data2[i * 3 + 2])
      ];
      if (locale === "zh_tw") {
        const common2 = s % 4;
        for (let i2 = common2; i2 < 3; i2++) {
          bytes2[i2] = codes.indexOf(deltaData[deltaOffset++]) + (i2 == 0 ? 228 : 128);
        }
      }
      wordlist2.push((0, index_js_2.toUtf8String)(new Uint8Array(bytes2)));
    }
    const checksum = (0, index_js_1.id)(wordlist2.join("\n") + "\n");
    if (checksum !== Checks[locale]) {
      throw new Error(`BIP39 Wordlist for ${locale} (Chinese) FAILED`);
    }
    _wordlist[locale] = wordlist2;
    return wordlist2;
  }
  const wordlists2 = {};
  class LangZh extends wordlist_js_1.Wordlist {
    /**
     *  Creates a new instance of the Chinese language Wordlist for
     *  the %%dialect%%, either ``"cn"`` or ``"tw"`` for simplified
     *  or traditional, respectively.
     *
     *  This should be unnecessary most of the time as the exported
     *  [[langZhCn]] and [[langZhTw]] should suffice.
     *
     *  @_ignore:
     */
    constructor(dialect) {
      super("zh_" + dialect);
    }
    getWord(index) {
      const words = loadWords(this.locale);
      (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
      return words[index];
    }
    getWordIndex(word) {
      return loadWords(this.locale).indexOf(word);
    }
    split(phrase) {
      phrase = phrase.replace(/(?:\u3000| )+/g, "");
      return phrase.split("");
    }
    /**
     *  Returns a singleton instance of a ``LangZh`` for %%dialect%%,
     *  creating it if this is the first time being called.
     *
     *  Use the %%dialect%% ``"cn"`` or ``"tw"`` for simplified or
     *  traditional, respectively.
     */
    static wordlist(dialect) {
      if (wordlists2[dialect] == null) {
        wordlists2[dialect] = new LangZh(dialect);
      }
      return wordlists2[dialect];
    }
  }
  langZh.LangZh = LangZh;
  return langZh;
}
var hasRequiredWordlists$1;
function requireWordlists$1() {
  if (hasRequiredWordlists$1) return wordlists;
  hasRequiredWordlists$1 = 1;
  Object.defineProperty(wordlists, "__esModule", { value: true });
  wordlists.wordlists = void 0;
  const lang_cz_js_1 = /* @__PURE__ */ requireLangCz();
  const lang_en_js_1 = /* @__PURE__ */ requireLangEn();
  const lang_es_js_1 = /* @__PURE__ */ requireLangEs();
  const lang_fr_js_1 = /* @__PURE__ */ requireLangFr();
  const lang_ja_js_1 = /* @__PURE__ */ requireLangJa();
  const lang_ko_js_1 = /* @__PURE__ */ requireLangKo();
  const lang_it_js_1 = /* @__PURE__ */ requireLangIt();
  const lang_pt_js_1 = /* @__PURE__ */ requireLangPt();
  const lang_zh_js_1 = /* @__PURE__ */ requireLangZh();
  wordlists.wordlists = {
    cz: lang_cz_js_1.LangCz.wordlist(),
    en: lang_en_js_1.LangEn.wordlist(),
    es: lang_es_js_1.LangEs.wordlist(),
    fr: lang_fr_js_1.LangFr.wordlist(),
    it: lang_it_js_1.LangIt.wordlist(),
    pt: lang_pt_js_1.LangPt.wordlist(),
    ja: lang_ja_js_1.LangJa.wordlist(),
    ko: lang_ko_js_1.LangKo.wordlist(),
    zh_cn: lang_zh_js_1.LangZh.wordlist("cn"),
    zh_tw: lang_zh_js_1.LangZh.wordlist("tw")
  };
  return wordlists;
}
var hasRequiredWordlists;
function requireWordlists() {
  if (hasRequiredWordlists) return wordlists$1;
  hasRequiredWordlists = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = void 0;
    var wordlist_js_1 = /* @__PURE__ */ requireWordlist();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return wordlist_js_1.Wordlist;
    } });
    var lang_en_js_1 = /* @__PURE__ */ requireLangEn();
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return lang_en_js_1.LangEn;
    } });
    var wordlist_owl_js_1 = /* @__PURE__ */ requireWordlistOwl();
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return wordlist_owl_js_1.WordlistOwl;
    } });
    var wordlist_owla_js_1 = /* @__PURE__ */ requireWordlistOwla();
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return wordlist_owla_js_1.WordlistOwlA;
    } });
    var wordlists_js_1 = /* @__PURE__ */ requireWordlists$1();
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return wordlists_js_1.wordlists;
    } });
  })(wordlists$1);
  return wordlists$1;
}
var hasRequiredEthers;
function requireEthers() {
  if (hasRequiredEthers) return ethers;
  hasRequiredEthers = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = exports.UndecodedEventLog = exports.EventLog = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.MessagePrefix = exports.EtherSymbol = exports.ZeroHash = exports.N = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.ZeroAddress = exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = exports.Typed = exports.TransactionDescription = exports.Result = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.FallbackFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.AbiCoder = exports.encodeBytes32String = exports.decodeBytes32String = exports.version = void 0;
    exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.ChainstackProvider = exports.BlockscoutProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.AbstractProvider = exports.VoidSigner = exports.NonceManager = exports.AbstractSigner = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.getDefaultProvider = exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.verifyAuthorization = exports.hashAuthorization = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.SigningKey = exports.Signature = exports.lock = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = void 0;
    exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.isError = exports.isCallException = exports.makeError = exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.resolveProperties = exports.defineProperties = exports.zeroPadValue = exports.zeroPadBytes = exports.stripZerosLeft = exports.isBytesLike = exports.isHexString = exports.hexlify = exports.getBytesCopy = exports.getBytes = exports.dataSlice = exports.dataLength = exports.concat = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.authorizationify = exports.accessListify = exports.showThrottleMessage = exports.copyRequest = exports.UnmanagedSubscriber = exports.SocketSubscriber = exports.SocketPendingSubscriber = exports.SocketEventSubscriber = exports.SocketBlockSubscriber = exports.MulticoinProviderPlugin = exports.NetworkPlugin = exports.GasCostPlugin = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EtherscanPlugin = exports.EnsPlugin = exports.Network = exports.EnsResolver = void 0;
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.decryptCrowdsaleJson = exports.isKeystoreJson = exports.isCrowdsaleJson = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.Wallet = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.BaseWallet = exports.Mnemonic = exports.uuidV4 = exports.encodeRlp = exports.decodeRlp = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.mask = exports.toTwos = exports.fromTwos = exports.toQuantity = exports.toNumber = exports.toBeHex = exports.toBigInt = exports.toBeArray = exports.getUint = exports.getNumber = exports.getBigInt = exports.FixedNumber = void 0;
    var _version_js_1 = /* @__PURE__ */ require_version();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return _version_js_1.version;
    } });
    var index_js_1 = /* @__PURE__ */ requireAbi();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.encodeBytes32String;
    } });
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return index_js_1.AbiCoder;
    } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return index_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return index_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return index_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return index_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return index_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return index_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return index_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return index_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return index_js_1.StructFragment;
    } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return index_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return index_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return index_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return index_js_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return index_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return index_js_1.Result;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return index_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return index_js_1.Typed;
    } });
    var index_js_2 = /* @__PURE__ */ requireAddress$2();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return index_js_2.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return index_js_2.getIcapAddress;
    } });
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return index_js_2.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return index_js_2.getCreate2Address;
    } });
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return index_js_2.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return index_js_2.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return index_js_2.resolveAddress;
    } });
    var index_js_3 = /* @__PURE__ */ requireConstants();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return index_js_3.ZeroAddress;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return index_js_3.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return index_js_3.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return index_js_3.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return index_js_3.MaxInt256;
    } });
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return index_js_3.N;
    } });
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return index_js_3.ZeroHash;
    } });
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return index_js_3.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return index_js_3.MessagePrefix;
    } });
    var index_js_4 = /* @__PURE__ */ requireContract();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return index_js_4.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return index_js_4.Contract;
    } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return index_js_4.ContractFactory;
    } });
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return index_js_4.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return index_js_4.UndecodedEventLog;
    } });
    var index_js_5 = /* @__PURE__ */ requireCrypto();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return index_js_5.computeHmac;
    } });
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return index_js_5.randomBytes;
    } });
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return index_js_5.keccak256;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return index_js_5.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return index_js_5.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return index_js_5.sha512;
    } });
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return index_js_5.pbkdf2;
    } });
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return index_js_5.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return index_js_5.scryptSync;
    } });
    Object.defineProperty(exports, "lock", { enumerable: true, get: function() {
      return index_js_5.lock;
    } });
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return index_js_5.Signature;
    } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return index_js_5.SigningKey;
    } });
    var index_js_6 = /* @__PURE__ */ requireHash();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return index_js_6.id;
    } });
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return index_js_6.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return index_js_6.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return index_js_6.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return index_js_6.dnsEncode;
    } });
    Object.defineProperty(exports, "hashAuthorization", { enumerable: true, get: function() {
      return index_js_6.hashAuthorization;
    } });
    Object.defineProperty(exports, "verifyAuthorization", { enumerable: true, get: function() {
      return index_js_6.verifyAuthorization;
    } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return index_js_6.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return index_js_6.verifyMessage;
    } });
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return index_js_6.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedSha256;
    } });
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return index_js_6.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return index_js_6.verifyTypedData;
    } });
    var index_js_7 = /* @__PURE__ */ requireProviders();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return index_js_7.getDefaultProvider;
    } });
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return index_js_7.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return index_js_7.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return index_js_7.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return index_js_7.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return index_js_7.TransactionResponse;
    } });
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return index_js_7.AbstractSigner;
    } });
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return index_js_7.NonceManager;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return index_js_7.VoidSigner;
    } });
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return index_js_7.AbstractProvider;
    } });
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return index_js_7.FallbackProvider;
    } });
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return index_js_7.JsonRpcSigner;
    } });
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return index_js_7.BrowserProvider;
    } });
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return index_js_7.AlchemyProvider;
    } });
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return index_js_7.AnkrProvider;
    } });
    Object.defineProperty(exports, "BlockscoutProvider", { enumerable: true, get: function() {
      return index_js_7.BlockscoutProvider;
    } });
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return index_js_7.ChainstackProvider;
    } });
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return index_js_7.CloudflareProvider;
    } });
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return index_js_7.EtherscanProvider;
    } });
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraWebSocketProvider;
    } });
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return index_js_7.PocketProvider;
    } });
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return index_js_7.QuickNodeProvider;
    } });
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return index_js_7.IpcSocketProvider;
    } });
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return index_js_7.SocketProvider;
    } });
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.WebSocketProvider;
    } });
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return index_js_7.EnsResolver;
    } });
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return index_js_7.Network;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return index_js_7.EnsPlugin;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return index_js_7.EtherscanPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FetchUrlFeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return index_js_7.GasCostPlugin;
    } });
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.NetworkPlugin;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return index_js_7.MulticoinProviderPlugin;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketEventSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketSubscriber;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return index_js_7.UnmanagedSubscriber;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return index_js_7.copyRequest;
    } });
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return index_js_7.showThrottleMessage;
    } });
    var index_js_8 = /* @__PURE__ */ requireTransaction();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return index_js_8.accessListify;
    } });
    Object.defineProperty(exports, "authorizationify", { enumerable: true, get: function() {
      return index_js_8.authorizationify;
    } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return index_js_8.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return index_js_8.recoverAddress;
    } });
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return index_js_8.Transaction;
    } });
    var index_js_9 = /* @__PURE__ */ requireUtils$3();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return index_js_9.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return index_js_9.encodeBase58;
    } });
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return index_js_9.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return index_js_9.encodeBase64;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return index_js_9.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return index_js_9.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return index_js_9.dataSlice;
    } });
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return index_js_9.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return index_js_9.getBytesCopy;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return index_js_9.hexlify;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return index_js_9.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return index_js_9.isBytesLike;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return index_js_9.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return index_js_9.zeroPadBytes;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return index_js_9.zeroPadValue;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return index_js_9.defineProperties;
    } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return index_js_9.resolveProperties;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return index_js_9.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return index_js_9.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return index_js_9.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return index_js_9.assertNormalize;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return index_js_9.assertPrivate;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return index_js_9.makeError;
    } });
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return index_js_9.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return index_js_9.isError;
    } });
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return index_js_9.EventPayload;
    } });
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return index_js_9.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return index_js_9.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return index_js_9.FetchCancelSignal;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return index_js_9.FixedNumber;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return index_js_9.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return index_js_9.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return index_js_9.getUint;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return index_js_9.toBeArray;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return index_js_9.toBigInt;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return index_js_9.toBeHex;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return index_js_9.toNumber;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return index_js_9.toQuantity;
    } });
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return index_js_9.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return index_js_9.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return index_js_9.mask;
    } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return index_js_9.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return index_js_9.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return index_js_9.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return index_js_9.parseUnits;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return index_js_9.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return index_js_9.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return index_js_9.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return index_js_9.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return index_js_9.decodeRlp;
    } });
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return index_js_9.encodeRlp;
    } });
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return index_js_9.uuidV4;
    } });
    var index_js_10 = /* @__PURE__ */ requireWallet();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return index_js_10.Mnemonic;
    } });
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return index_js_10.BaseWallet;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeVoidWallet;
    } });
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return index_js_10.Wallet;
    } });
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return index_js_10.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return index_js_10.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return index_js_10.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.decryptCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJsonSync;
    } });
    var index_js_11 = /* @__PURE__ */ requireWordlists();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return index_js_11.Wordlist;
    } });
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return index_js_11.LangEn;
    } });
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return index_js_11.WordlistOwl;
    } });
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return index_js_11.WordlistOwlA;
    } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return index_js_11.wordlists;
    } });
  })(ethers);
  return ethers;
}
var hasRequiredLib_commonjs;
function requireLib_commonjs() {
  if (hasRequiredLib_commonjs) return lib_commonjs$1;
  hasRequiredLib_commonjs = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethers = void 0;
    const tslib_1 = require$$0$3;
    const ethers2 = tslib_1.__importStar(/* @__PURE__ */ requireEthers());
    exports.ethers = ethers2;
    tslib_1.__exportStar(/* @__PURE__ */ requireEthers(), exports);
  })(lib_commonjs$1);
  return lib_commonjs$1;
}
var hasRequiredEthersCompat;
function requireEthersCompat() {
  if (hasRequiredEthersCompat) return ethersCompat;
  hasRequiredEthersCompat = 1;
  Object.defineProperty(ethersCompat, "__esModule", { value: true });
  ethersCompat.getAddress = ethersCompat.hashMessage = ethersCompat.verifyMessage = void 0;
  const ethers_1 = /* @__PURE__ */ requireLib_commonjs();
  let ethersVerifyMessage = null;
  let ethersHashMessage = null;
  let ethersGetAddress = null;
  try {
    ethersVerifyMessage = ethers_1.ethers.utils.verifyMessage;
    ethersHashMessage = ethers_1.ethers.utils.hashMessage;
    ethersGetAddress = ethers_1.ethers.utils.getAddress;
  } catch (_a) {
    ethersVerifyMessage = ethers_1.ethers.verifyMessage;
    ethersHashMessage = ethers_1.ethers.hashMessage;
    ethersGetAddress = ethers_1.ethers.getAddress;
  }
  ethersCompat.verifyMessage = ethersVerifyMessage;
  ethersCompat.hashMessage = ethersHashMessage;
  ethersCompat.getAddress = ethersGetAddress;
  return ethersCompat;
}
var types$1 = {};
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types$1;
  hasRequiredTypes = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SiweErrorType = exports.SiweError = exports.VerifyOptsKeys = exports.VerifyParamsKeys = void 0;
    exports.VerifyParamsKeys = [
      "signature",
      "scheme",
      "domain",
      "nonce",
      "time"
    ];
    exports.VerifyOptsKeys = [
      "provider",
      "suppressExceptions",
      "verificationFallback"
    ];
    class SiweError {
      constructor(type2, expected, received) {
        this.type = type2;
        this.expected = expected;
        this.received = received;
      }
    }
    exports.SiweError = SiweError;
    (function(SiweErrorType) {
      SiweErrorType["EXPIRED_MESSAGE"] = "Expired message.";
      SiweErrorType["INVALID_DOMAIN"] = "Invalid domain.";
      SiweErrorType["SCHEME_MISMATCH"] = "Scheme does not match provided scheme for verification.";
      SiweErrorType["DOMAIN_MISMATCH"] = "Domain does not match provided domain for verification.";
      SiweErrorType["NONCE_MISMATCH"] = "Nonce does not match provided nonce for verification.";
      SiweErrorType["INVALID_ADDRESS"] = "Invalid address.";
      SiweErrorType["INVALID_URI"] = "URI does not conform to RFC 3986.";
      SiweErrorType["INVALID_NONCE"] = "Nonce size smaller then 8 characters or is not alphanumeric.";
      SiweErrorType["NOT_YET_VALID_MESSAGE"] = "Message is not valid yet.";
      SiweErrorType["INVALID_SIGNATURE"] = "Signature does not match address of the message.";
      SiweErrorType["INVALID_TIME_FORMAT"] = "Invalid time format.";
      SiweErrorType["INVALID_MESSAGE_VERSION"] = "Invalid message version.";
      SiweErrorType["UNABLE_TO_PARSE"] = "Unable to parse the message.";
    })(exports.SiweErrorType || (exports.SiweErrorType = {}));
  })(types$1);
  return types$1;
}
var utils$2 = {};
var random = {};
var system = {};
var browser = {};
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser;
  hasRequiredBrowser = 1;
  Object.defineProperty(browser, "__esModule", { value: true });
  browser.BrowserRandomSource = void 0;
  const QUOTA = 65536;
  class BrowserRandomSource {
    constructor() {
      this.isAvailable = false;
      this.isInstantiated = false;
      const browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
      if (browserCrypto && browserCrypto.getRandomValues !== void 0) {
        this._crypto = browserCrypto;
        this.isAvailable = true;
        this.isInstantiated = true;
      }
    }
    randomBytes(length) {
      if (!this.isAvailable || !this._crypto) {
        throw new Error("Browser random byte generator is not available.");
      }
      const out = new Uint8Array(length);
      for (let i = 0; i < out.length; i += QUOTA) {
        this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
      }
      return out;
    }
  }
  browser.BrowserRandomSource = BrowserRandomSource;
  return browser;
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var node = {};
var wipe = {};
var hasRequiredWipe;
function requireWipe() {
  if (hasRequiredWipe) return wipe;
  hasRequiredWipe = 1;
  Object.defineProperty(wipe, "__esModule", { value: true });
  function wipe$1(array2) {
    for (var i = 0; i < array2.length; i++) {
      array2[i] = 0;
    }
    return array2;
  }
  wipe.wipe = wipe$1;
  return wipe;
}
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node;
  hasRequiredNode = 1;
  Object.defineProperty(node, "__esModule", { value: true });
  node.NodeRandomSource = void 0;
  const wipe_1 = requireWipe();
  class NodeRandomSource {
    constructor() {
      this.isAvailable = false;
      this.isInstantiated = false;
      if (typeof commonjsRequire !== "undefined") {
        const nodeCrypto = require$$8;
        if (nodeCrypto && nodeCrypto.randomBytes) {
          this._crypto = nodeCrypto;
          this.isAvailable = true;
          this.isInstantiated = true;
        }
      }
    }
    randomBytes(length) {
      if (!this.isAvailable || !this._crypto) {
        throw new Error("Node.js random byte generator is not available.");
      }
      let buffer = this._crypto.randomBytes(length);
      if (buffer.length !== length) {
        throw new Error("NodeRandomSource: got fewer bytes than requested");
      }
      const out = new Uint8Array(length);
      for (let i = 0; i < out.length; i++) {
        out[i] = buffer[i];
      }
      (0, wipe_1.wipe)(buffer);
      return out;
    }
  }
  node.NodeRandomSource = NodeRandomSource;
  return node;
}
var hasRequiredSystem;
function requireSystem() {
  if (hasRequiredSystem) return system;
  hasRequiredSystem = 1;
  Object.defineProperty(system, "__esModule", { value: true });
  system.SystemRandomSource = void 0;
  const browser_1 = requireBrowser();
  const node_1 = requireNode();
  class SystemRandomSource {
    constructor() {
      this.isAvailable = false;
      this.name = "";
      this._source = new browser_1.BrowserRandomSource();
      if (this._source.isAvailable) {
        this.isAvailable = true;
        this.name = "Browser";
        return;
      }
      this._source = new node_1.NodeRandomSource();
      if (this._source.isAvailable) {
        this.isAvailable = true;
        this.name = "Node";
        return;
      }
    }
    randomBytes(length) {
      if (!this.isAvailable) {
        throw new Error("System random byte generator is not available.");
      }
      return this._source.randomBytes(length);
    }
  }
  system.SystemRandomSource = SystemRandomSource;
  return system;
}
var binary = {};
var int = {};
var hasRequiredInt;
function requireInt() {
  if (hasRequiredInt) return int;
  hasRequiredInt = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function imulShim(a, b) {
      var ah = a >>> 16 & 65535, al = a & 65535;
      var bh = b >>> 16 & 65535, bl = b & 65535;
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    }
    exports.mul = Math.imul || imulShim;
    function add(a, b) {
      return a + b | 0;
    }
    exports.add = add;
    function sub(a, b) {
      return a - b | 0;
    }
    exports.sub = sub;
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    exports.rotl = rotl;
    function rotr(x, n) {
      return x << 32 - n | x >>> n;
    }
    exports.rotr = rotr;
    function isIntegerShim(n) {
      return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
    }
    exports.isInteger = Number.isInteger || isIntegerShim;
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    exports.isSafeInteger = function(n) {
      return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
    };
  })(int);
  return int;
}
var hasRequiredBinary;
function requireBinary() {
  if (hasRequiredBinary) return binary;
  hasRequiredBinary = 1;
  Object.defineProperty(binary, "__esModule", { value: true });
  var int_1 = requireInt();
  function readInt16BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset + 0] << 8 | array2[offset + 1]) << 16 >> 16;
  }
  binary.readInt16BE = readInt16BE;
  function readUint16BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset + 0] << 8 | array2[offset + 1]) >>> 0;
  }
  binary.readUint16BE = readUint16BE;
  function readInt16LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset + 1] << 8 | array2[offset]) << 16 >> 16;
  }
  binary.readInt16LE = readInt16LE;
  function readUint16LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset + 1] << 8 | array2[offset]) >>> 0;
  }
  binary.readUint16LE = readUint16LE;
  function writeUint16BE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(2);
    }
    if (offset === void 0) {
      offset = 0;
    }
    out[offset + 0] = value >>> 8;
    out[offset + 1] = value >>> 0;
    return out;
  }
  binary.writeUint16BE = writeUint16BE;
  binary.writeInt16BE = writeUint16BE;
  function writeUint16LE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(2);
    }
    if (offset === void 0) {
      offset = 0;
    }
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    return out;
  }
  binary.writeUint16LE = writeUint16LE;
  binary.writeInt16LE = writeUint16LE;
  function readInt32BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return array2[offset] << 24 | array2[offset + 1] << 16 | array2[offset + 2] << 8 | array2[offset + 3];
  }
  binary.readInt32BE = readInt32BE;
  function readUint32BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset] << 24 | array2[offset + 1] << 16 | array2[offset + 2] << 8 | array2[offset + 3]) >>> 0;
  }
  binary.readUint32BE = readUint32BE;
  function readInt32LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return array2[offset + 3] << 24 | array2[offset + 2] << 16 | array2[offset + 1] << 8 | array2[offset];
  }
  binary.readInt32LE = readInt32LE;
  function readUint32LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    return (array2[offset + 3] << 24 | array2[offset + 2] << 16 | array2[offset + 1] << 8 | array2[offset]) >>> 0;
  }
  binary.readUint32LE = readUint32LE;
  function writeUint32BE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(4);
    }
    if (offset === void 0) {
      offset = 0;
    }
    out[offset + 0] = value >>> 24;
    out[offset + 1] = value >>> 16;
    out[offset + 2] = value >>> 8;
    out[offset + 3] = value >>> 0;
    return out;
  }
  binary.writeUint32BE = writeUint32BE;
  binary.writeInt32BE = writeUint32BE;
  function writeUint32LE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(4);
    }
    if (offset === void 0) {
      offset = 0;
    }
    out[offset + 0] = value >>> 0;
    out[offset + 1] = value >>> 8;
    out[offset + 2] = value >>> 16;
    out[offset + 3] = value >>> 24;
    return out;
  }
  binary.writeUint32LE = writeUint32LE;
  binary.writeInt32LE = writeUint32LE;
  function readInt64BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var hi = readInt32BE(array2, offset);
    var lo = readInt32BE(array2, offset + 4);
    return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
  }
  binary.readInt64BE = readInt64BE;
  function readUint64BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var hi = readUint32BE(array2, offset);
    var lo = readUint32BE(array2, offset + 4);
    return hi * 4294967296 + lo;
  }
  binary.readUint64BE = readUint64BE;
  function readInt64LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var lo = readInt32LE(array2, offset);
    var hi = readInt32LE(array2, offset + 4);
    return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
  }
  binary.readInt64LE = readInt64LE;
  function readUint64LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var lo = readUint32LE(array2, offset);
    var hi = readUint32LE(array2, offset + 4);
    return hi * 4294967296 + lo;
  }
  binary.readUint64LE = readUint64LE;
  function writeUint64BE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    writeUint32BE(value / 4294967296 >>> 0, out, offset);
    writeUint32BE(value >>> 0, out, offset + 4);
    return out;
  }
  binary.writeUint64BE = writeUint64BE;
  binary.writeInt64BE = writeUint64BE;
  function writeUint64LE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    writeUint32LE(value >>> 0, out, offset);
    writeUint32LE(value / 4294967296 >>> 0, out, offset + 4);
    return out;
  }
  binary.writeUint64LE = writeUint64LE;
  binary.writeInt64LE = writeUint64LE;
  function readUintBE(bitLength, array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    if (bitLength % 8 !== 0) {
      throw new Error("readUintBE supports only bitLengths divisible by 8");
    }
    if (bitLength / 8 > array2.length - offset) {
      throw new Error("readUintBE: array is too short for the given bitLength");
    }
    var result = 0;
    var mul = 1;
    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
      result += array2[i] * mul;
      mul *= 256;
    }
    return result;
  }
  binary.readUintBE = readUintBE;
  function readUintLE(bitLength, array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    if (bitLength % 8 !== 0) {
      throw new Error("readUintLE supports only bitLengths divisible by 8");
    }
    if (bitLength / 8 > array2.length - offset) {
      throw new Error("readUintLE: array is too short for the given bitLength");
    }
    var result = 0;
    var mul = 1;
    for (var i = offset; i < offset + bitLength / 8; i++) {
      result += array2[i] * mul;
      mul *= 256;
    }
    return result;
  }
  binary.readUintLE = readUintLE;
  function writeUintBE(bitLength, value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(bitLength / 8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    if (bitLength % 8 !== 0) {
      throw new Error("writeUintBE supports only bitLengths divisible by 8");
    }
    if (!int_1.isSafeInteger(value)) {
      throw new Error("writeUintBE value must be an integer");
    }
    var div = 1;
    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
      out[i] = value / div & 255;
      div *= 256;
    }
    return out;
  }
  binary.writeUintBE = writeUintBE;
  function writeUintLE(bitLength, value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(bitLength / 8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    if (bitLength % 8 !== 0) {
      throw new Error("writeUintLE supports only bitLengths divisible by 8");
    }
    if (!int_1.isSafeInteger(value)) {
      throw new Error("writeUintLE value must be an integer");
    }
    var div = 1;
    for (var i = offset; i < offset + bitLength / 8; i++) {
      out[i] = value / div & 255;
      div *= 256;
    }
    return out;
  }
  binary.writeUintLE = writeUintLE;
  function readFloat32BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
    return view.getFloat32(offset);
  }
  binary.readFloat32BE = readFloat32BE;
  function readFloat32LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
    return view.getFloat32(offset, true);
  }
  binary.readFloat32LE = readFloat32LE;
  function readFloat64BE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
    return view.getFloat64(offset);
  }
  binary.readFloat64BE = readFloat64BE;
  function readFloat64LE(array2, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(array2.buffer, array2.byteOffset, array2.byteLength);
    return view.getFloat64(offset, true);
  }
  binary.readFloat64LE = readFloat64LE;
  function writeFloat32BE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(4);
    }
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value);
    return out;
  }
  binary.writeFloat32BE = writeFloat32BE;
  function writeFloat32LE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(4);
    }
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat32(offset, value, true);
    return out;
  }
  binary.writeFloat32LE = writeFloat32LE;
  function writeFloat64BE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value);
    return out;
  }
  binary.writeFloat64BE = writeFloat64BE;
  function writeFloat64LE(value, out, offset) {
    if (out === void 0) {
      out = new Uint8Array(8);
    }
    if (offset === void 0) {
      offset = 0;
    }
    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
    view.setFloat64(offset, value, true);
    return out;
  }
  binary.writeFloat64LE = writeFloat64LE;
  return binary;
}
var hasRequiredRandom;
function requireRandom() {
  if (hasRequiredRandom) return random;
  hasRequiredRandom = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;
    const system_1 = requireSystem();
    const binary_1 = requireBinary();
    const wipe_1 = requireWipe();
    exports.defaultRandomSource = new system_1.SystemRandomSource();
    function randomBytes2(length, prng = exports.defaultRandomSource) {
      return prng.randomBytes(length);
    }
    exports.randomBytes = randomBytes2;
    function randomUint32(prng = exports.defaultRandomSource) {
      const buf = randomBytes2(4, prng);
      const result = (0, binary_1.readUint32LE)(buf);
      (0, wipe_1.wipe)(buf);
      return result;
    }
    exports.randomUint32 = randomUint32;
    const ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    function randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      if (charset.length < 2) {
        throw new Error("randomString charset is too short");
      }
      if (charset.length > 256) {
        throw new Error("randomString charset is too long");
      }
      let out = "";
      const charsLen = charset.length;
      const maxByte = 256 - 256 % charsLen;
      while (length > 0) {
        const buf = randomBytes2(Math.ceil(length * 256 / maxByte), prng);
        for (let i = 0; i < buf.length && length > 0; i++) {
          const randomByte = buf[i];
          if (randomByte < maxByte) {
            out += charset.charAt(randomByte % charsLen);
            length--;
          }
        }
        (0, wipe_1.wipe)(buf);
      }
      return out;
    }
    exports.randomString = randomString;
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
      return randomString(length, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;
  })(random);
  return random;
}
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils$2;
  hasRequiredUtils = 1;
  Object.defineProperty(utils$2, "__esModule", { value: true });
  utils$2.checkInvalidKeys = utils$2.isValidISO8601Date = utils$2.generateNonce = utils$2.checkContractWalletSignature = void 0;
  const random_1 = requireRandom();
  const ethers_1 = /* @__PURE__ */ requireLib_commonjs();
  const ethersCompat_1 = requireEthersCompat();
  const EIP1271_ABI = [
    "function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)"
  ];
  const EIP1271_MAGICVALUE = "0x1626ba7e";
  const ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
  const checkContractWalletSignature = async (message2, signature2, provider2) => {
    if (!provider2) {
      return false;
    }
    const walletContract = new ethers_1.Contract(message2.address, EIP1271_ABI, provider2);
    const hashedMessage = (0, ethersCompat_1.hashMessage)(message2.prepareMessage());
    const res = await walletContract.isValidSignature(hashedMessage, signature2);
    return res === EIP1271_MAGICVALUE;
  };
  utils$2.checkContractWalletSignature = checkContractWalletSignature;
  const generateNonce = () => {
    const nonce = (0, random_1.randomStringForEntropy)(96);
    if (!nonce || nonce.length < 8) {
      throw new Error("Error during nonce creation.");
    }
    return nonce;
  };
  utils$2.generateNonce = generateNonce;
  const isValidISO8601Date = (inputDate) => {
    const inputMatch = ISO8601.exec(inputDate);
    if (!inputMatch) {
      return false;
    }
    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();
    const parsedInputMatch = ISO8601.exec(inputDateParsed);
    return inputMatch.groups.date === parsedInputMatch.groups.date;
  };
  utils$2.isValidISO8601Date = isValidISO8601Date;
  const checkInvalidKeys = (obj, keys) => {
    const invalidKeys = [];
    Object.keys(obj).forEach((key) => {
      if (!keys.includes(key)) {
        invalidKeys.push(key);
      }
    });
    return invalidKeys;
  };
  utils$2.checkInvalidKeys = checkInvalidKeys;
  return utils$2;
}
var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient) return client;
  hasRequiredClient = 1;
  Object.defineProperty(client, "__esModule", { value: true });
  client.SiweMessage = void 0;
  const siwe_parser_1 = requireParsers();
  const ethersCompat_1 = requireEthersCompat();
  const types_1 = requireTypes();
  const utils_1 = requireUtils();
  class SiweMessage {
    /**
     * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a
     * string or an object. If a string is used an ABNF parser is called to
     * validate the parameter, otherwise the fields are attributed.
     * @param param {string | SiweMessage} Sign message as a string or an object.
     */
    constructor(param) {
      if (typeof param === "string") {
        const parsedMessage = new siwe_parser_1.ParsedMessage(param);
        this.scheme = parsedMessage.scheme;
        this.domain = parsedMessage.domain;
        this.address = parsedMessage.address;
        this.statement = parsedMessage.statement;
        this.uri = parsedMessage.uri;
        this.version = parsedMessage.version;
        this.nonce = parsedMessage.nonce;
        this.issuedAt = parsedMessage.issuedAt;
        this.expirationTime = parsedMessage.expirationTime;
        this.notBefore = parsedMessage.notBefore;
        this.requestId = parsedMessage.requestId;
        this.chainId = parsedMessage.chainId;
        this.resources = parsedMessage.resources;
      } else {
        this.scheme = param === null || param === void 0 ? void 0 : param.scheme;
        this.domain = param.domain;
        this.address = param.address;
        this.statement = param === null || param === void 0 ? void 0 : param.statement;
        this.uri = param.uri;
        this.version = param.version;
        this.chainId = param.chainId;
        this.nonce = param.nonce;
        this.issuedAt = param === null || param === void 0 ? void 0 : param.issuedAt;
        this.expirationTime = param === null || param === void 0 ? void 0 : param.expirationTime;
        this.notBefore = param === null || param === void 0 ? void 0 : param.notBefore;
        this.requestId = param === null || param === void 0 ? void 0 : param.requestId;
        this.resources = param === null || param === void 0 ? void 0 : param.resources;
        if (typeof this.chainId === "string") {
          this.chainId = (0, siwe_parser_1.parseIntegerNumber)(this.chainId);
        }
        this.nonce = this.nonce || (0, utils_1.generateNonce)();
        new siwe_parser_1.ParsedMessage(this.prepareMessage());
      }
    }
    /**
     * This function can be used to retrieve an EIP-4361 formatted message for
     * signature, although you can call it directly it's advised to use
     * [prepareMessage()] instead which will resolve to the correct method based
     * on the [type] attribute of this object, in case of other formats being
     * implemented.
     * @returns {string} EIP-4361 formatted message, ready for EIP-191 signing.
     */
    toMessage() {
      const headerPrefix = this.scheme ? `${this.scheme}://${this.domain}` : this.domain;
      const header = `${headerPrefix} wants you to sign in with your Ethereum account:`;
      const uriField = `URI: ${this.uri}`;
      let prefix = [header, this.address].join("\n");
      const versionField = `Version: ${this.version}`;
      if (!this.nonce) {
        this.nonce = (0, utils_1.generateNonce)();
      }
      const chainField = `Chain ID: ` + this.chainId || "1";
      const nonceField = `Nonce: ${this.nonce}`;
      const suffixArray = [uriField, versionField, chainField, nonceField];
      this.issuedAt = this.issuedAt || (/* @__PURE__ */ new Date()).toISOString();
      suffixArray.push(`Issued At: ${this.issuedAt}`);
      if (this.expirationTime) {
        const expiryField = `Expiration Time: ${this.expirationTime}`;
        suffixArray.push(expiryField);
      }
      if (this.notBefore) {
        suffixArray.push(`Not Before: ${this.notBefore}`);
      }
      if (this.requestId) {
        suffixArray.push(`Request ID: ${this.requestId}`);
      }
      if (this.resources) {
        suffixArray.push([`Resources:`, ...this.resources.map((x) => `- ${x}`)].join("\n"));
      }
      const suffix = suffixArray.join("\n");
      prefix = [prefix, this.statement].join("\n\n");
      if (this.statement !== void 0) {
        prefix += "\n";
      }
      return [prefix, suffix].join("\n");
    }
    /**
     * This method parses all the fields in the object and creates a messaging for signing
     * message according with the type defined.
     * @returns {string} Returns a message ready to be signed according with the
     * type defined in the object.
     */
    prepareMessage() {
      let message2;
      switch (this.version) {
        case "1": {
          message2 = this.toMessage();
          break;
        }
        default: {
          message2 = this.toMessage();
          break;
        }
      }
      return message2;
    }
    /**
     * Verifies the integrity of the object by matching its signature.
     * @param params Parameters to verify the integrity of the message, signature is required.
     * @returns {Promise<SiweMessage>} This object if valid.
     */
    async verify(params, opts = { suppressExceptions: false }) {
      return new Promise((resolve, reject) => {
        var _a, _b, _c;
        const fail = (result) => {
          if (opts.suppressExceptions) {
            return resolve(result);
          } else {
            return reject(result);
          }
        };
        const invalidParams = (0, utils_1.checkInvalidKeys)(params, types_1.VerifyParamsKeys);
        if (invalidParams.length > 0) {
          fail({
            success: false,
            data: this,
            error: new Error(`${invalidParams.join(", ")} is/are not valid key(s) for VerifyParams.`)
          });
        }
        const invalidOpts = (0, utils_1.checkInvalidKeys)(opts, types_1.VerifyOptsKeys);
        if (invalidOpts.length > 0) {
          fail({
            success: false,
            data: this,
            error: new Error(`${invalidOpts.join(", ")} is/are not valid key(s) for VerifyOpts.`)
          });
        }
        const { signature: signature2, scheme, domain: domain2, nonce, time } = params;
        if (scheme && scheme !== this.scheme) {
          fail({
            success: false,
            data: this,
            error: new types_1.SiweError(types_1.SiweErrorType.SCHEME_MISMATCH, scheme, this.scheme)
          });
        }
        if (domain2 && domain2 !== this.domain) {
          fail({
            success: false,
            data: this,
            error: new types_1.SiweError(types_1.SiweErrorType.DOMAIN_MISMATCH, domain2, this.domain)
          });
        }
        if (nonce && nonce !== this.nonce) {
          fail({
            success: false,
            data: this,
            error: new types_1.SiweError(types_1.SiweErrorType.NONCE_MISMATCH, nonce, this.nonce)
          });
        }
        const checkTime = new Date(time || /* @__PURE__ */ new Date());
        if (this.expirationTime) {
          const expirationDate = new Date(this.expirationTime);
          if (checkTime.getTime() >= expirationDate.getTime()) {
            fail({
              success: false,
              data: this,
              error: new types_1.SiweError(types_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`)
            });
          }
        }
        if (this.notBefore) {
          const notBefore = new Date(this.notBefore);
          if (checkTime.getTime() < notBefore.getTime()) {
            fail({
              success: false,
              data: this,
              error: new types_1.SiweError(types_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${notBefore.toISOString()}`, `${checkTime.toISOString()} < ${notBefore.toISOString()}`)
            });
          }
        }
        let EIP4361Message;
        try {
          EIP4361Message = this.prepareMessage();
        } catch (e) {
          fail({
            success: false,
            data: this,
            error: e
          });
        }
        let addr;
        try {
          addr = (0, ethersCompat_1.verifyMessage)(EIP4361Message, signature2);
        } catch (e) {
          console.error(e);
        }
        if (addr === this.address) {
          return resolve({
            success: true,
            data: this
          });
        } else {
          const EIP1271Promise = (0, utils_1.checkContractWalletSignature)(this, signature2, opts.provider).then((isValid) => {
            if (!isValid) {
              return {
                success: false,
                data: this,
                error: new types_1.SiweError(types_1.SiweErrorType.INVALID_SIGNATURE, addr, `Resolved address to be ${this.address}`)
              };
            }
            return {
              success: true,
              data: this
            };
          }).catch((error) => {
            return {
              success: false,
              data: this,
              error
            };
          });
          Promise.all([
            EIP1271Promise,
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.verificationFallback) === null || _a === void 0 ? void 0 : _a.call(opts, params, opts, this, EIP1271Promise)) === null || _b === void 0 ? void 0 : _b.then((res) => res)) === null || _c === void 0 ? void 0 : _c.catch((res) => res)
          ]).then(([EIP1271Response, fallbackResponse]) => {
            if (fallbackResponse) {
              if (fallbackResponse.success) {
                return resolve(fallbackResponse);
              } else {
                fail(fallbackResponse);
              }
            } else {
              if (EIP1271Response.success) {
                return resolve(EIP1271Response);
              } else {
                fail(EIP1271Response);
              }
            }
          });
        }
      });
    }
  }
  client.SiweMessage = SiweMessage;
  return client;
}
var hasRequiredSiwe;
function requireSiwe() {
  if (hasRequiredSiwe) return siwe;
  hasRequiredSiwe = 1;
  (function(exports) {
    var __createBinding2 = siwe && siwe.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = siwe && siwe.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(requireClient(), exports);
    __exportStar2(requireTypes(), exports);
    __exportStar2(requireUtils(), exports);
  })(siwe);
  return siwe;
}
var siweExports = requireSiwe();
const version$4 = "logger/5.8.0";
let _permanentCensorErrors$1 = false;
let _censorErrors$1 = false;
const LogLevels$1 = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
let _logLevel$1 = LogLevels$1["default"];
let _globalLogger$1 = null;
function _checkNormalize$1() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
const _normalizeError$1 = _checkNormalize$1();
var LogLevel$2;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel$2 || (LogLevel$2 = {}));
var ErrorCode$1;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode$1 || (ErrorCode$1 = {}));
const HEX$1 = "0123456789abcdef";
let Logger$2 = class Logger {
  constructor(version2) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version2,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels$1[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel$1 > LogLevels$1[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(Logger.levels.WARNING, args);
  }
  makeError(message2, code, params) {
    if (_censorErrors$1) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX$1[value[i] >> 4];
            hex += HEX$1[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message2;
    let url = "";
    switch (code) {
      case ErrorCode$1.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message2;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode$1.CALL_EXCEPTION:
      case ErrorCode$1.INSUFFICIENT_FUNDS:
      case ErrorCode$1.MISSING_NEW:
      case ErrorCode$1.NONCE_EXPIRED:
      case ErrorCode$1.REPLACEMENT_UNDERPRICED:
      case ErrorCode$1.TRANSACTION_REPLACED:
      case ErrorCode$1.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message2 += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message2 += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message2);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message2, code, params) {
    throw this.makeError(message2, code, params);
  }
  throwArgumentError(message2, name, value) {
    return this.throwError(message2, Logger.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message2, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message2, code, params);
  }
  assertArgument(condition, message2, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message2, name, value);
  }
  checkNormalize(message2) {
    if (_normalizeError$1) {
      this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError$1
      });
    }
  }
  checkSafeUint53(value, message2) {
    if (typeof value !== "number") {
      return;
    }
    if (message2 == null) {
      message2 = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message2, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message2, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message2) {
    if (message2) {
      message2 = ": " + message2;
    } else {
      message2 = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message2, Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message2, Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger$1) {
      _globalLogger$1 = new Logger(version$4);
    }
    return _globalLogger$1;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors$1) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors$1 = !!censorship;
    _permanentCensorErrors$1 = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels$1[logLevel.toLowerCase()];
    if (level == null) {
      Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel$1 = level;
  }
  static from(version2) {
    return new Logger(version2);
  }
};
Logger$2.errors = ErrorCode$1;
Logger$2.levels = LogLevel$2;
const version$3 = "bytes/5.8.0";
const logger$3 = new Logger$2(version$3);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array2) {
  if (array2.slice) {
    return array2;
  }
  array2.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array2, args)));
  };
  return array2;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger$3.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger$3.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger$3.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger$3.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
const HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger$3.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger$3.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger$3.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data2) {
  if (typeof data2 !== "string") {
    data2 = hexlify(data2);
  } else if (!isHexString(data2) || data2.length % 2) {
    return null;
  }
  return (data2.length - 2) / 2;
}
function hexDataSlice(data2, offset, endOffset) {
  if (typeof data2 !== "string") {
    data2 = hexlify(data2);
  } else if (!isHexString(data2) || data2.length % 2) {
    logger$3.throwArgumentError("invalid hexData", "value", data2);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data2.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data2.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexValue(value) {
  const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }
  if (!isHexString(value)) {
    logger$3.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  let offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger$3.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger$3.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes2 = arrayify(signature2);
    if (bytes2.length === 64) {
      result.v = 27 + (bytes2[32] >> 7);
      bytes2[32] &= 127;
      result.r = hexlify(bytes2.slice(0, 32));
      result.s = hexlify(bytes2.slice(32, 64));
    } else if (bytes2.length === 65) {
      result.r = hexlify(bytes2.slice(0, 32));
      result.s = hexlify(bytes2.slice(32, 64));
      result.v = bytes2[64];
    } else {
      logger$3.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger$3.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes2[32] |= 128;
    }
    result._vs = hexlify(bytes2.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger$3.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs2[0] &= 127;
      const s = hexlify(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger$3.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger$3.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger$3.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger$3.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger$3.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger$3.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger$3.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger$3.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
var bn$1 = { exports: {} };
var bn = bn$1.exports;
var hasRequiredBn;
function requireBn() {
  if (hasRequiredBn) return bn$1.exports;
  hasRequiredBn = 1;
  (function(module) {
    (function(module2, exports) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number2, base, endian) {
        if (BN2.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number2 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require("buffer").Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min2(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number2, base, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert2(base === (base | 0) && base >= 2 && base <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number2, base, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN2.prototype._initArray = function _initArray(number2, base, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off2 = 0;
        if (endian === "be") {
          for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
            w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
            this.words[j] |= w << off2 & 67108863;
            this.words[j + 1] = w >>> 26 - off2 & 67108863;
            off2 += 24;
            if (off2 >= 26) {
              off2 -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number2.length; i += 3) {
            w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
            this.words[j] |= w << off2 & 67108863;
            this.words[j + 1] = w >>> 26 - off2 & 67108863;
            off2 += 24;
            if (off2 >= 26) {
              off2 -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c = string2.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte(string2, lowerBound, index) {
        var r = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r;
      }
      BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off2 = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number2.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number2, start, i) << off2;
            this.words[j] |= w & 67108863;
            if (off2 >= 18) {
              off2 -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off2 += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {
            w = parseHexByte(number2, start, i) << off2;
            this.words[j] |= w & 67108863;
            if (off2 >= 18) {
              off2 -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off2 += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN2.prototype._parseBase = function _parseBase(number2, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number2, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow2 = 1;
          word = parseBase(number2, i, number2.length, base);
          for (i = 0; i < mod; i++) {
            pow2 *= base;
          }
          this.imuln(pow2);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone() {
        var r = new BN2(null);
        this.copy(r);
        return r;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
        } catch (e) {
          BN2.prototype.inspect = inspect2;
        }
      } else {
        BN2.prototype.inspect = inspect2;
      }
      function inspect2() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString3(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off2 = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off2 | carry) & 16777215).toString(16);
            carry = w >>> 24 - off2 & 16777215;
            off2 += 2;
            if (off2 >= 26) {
              off2 -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off2 = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off2] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off2 + 1);
        if (val) {
          this.words[off2] = this.words[off2] | 1 << wbit;
        } else {
          this.words[off2] = this.words[off2] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow2(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs2() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode2) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode2 !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode2 !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode2, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode2);
          if (mode2 !== "mod") {
            div = res.div.neg();
          }
          if (mode2 !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode2);
          if (mode2 !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode2);
          if (mode2 !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode2 === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode2 === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode2);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow2 = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow2);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, bn);
  })(bn$1);
  return bn$1.exports;
}
var bnExports = requireBn();
const BN$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(bnExports);
const version$2 = "bignumber/5.8.0";
var BN = BN$1.BN;
const logger$2 = new Logger$2(version$2);
const _constructorGuard$1 = {};
const MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
let _warnedToStringRadix = false;
class BigNumber {
  constructor(constructorGuard, hex) {
    if (constructorGuard !== _constructorGuard$1) {
      logger$2.throwError("cannot call constructor directly; use BigNumber.from", Logger$2.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return BigNumber.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o = BigNumber.from(other);
    if (o.isZero()) {
      throwFault$1("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault$1("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault$1("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault$1("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault$1("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault$1("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault$1("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault$1("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault$1("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault$1("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger$2.throwError("this platform does not support BigInt", Logger$2.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger$2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger$2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger$2.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger$2.throwError("BigNumber.toString does not accept parameters", Logger$2.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof BigNumber) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber(_constructorGuard$1, toHex$1(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber(_constructorGuard$1, toHex$1(new BN(value)));
      }
      return logger$2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault$1("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault$1("overflow", "BigNumber.from", value);
      }
      return BigNumber.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return BigNumber.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return BigNumber.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return BigNumber.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
            return BigNumber.from(hex);
          }
        }
      }
    }
    return logger$2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
}
function toHex$1(value) {
  if (typeof value !== "string") {
    return toHex$1(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger$2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex$1(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex$1(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault$1(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger$2.throwError(fault, Logger$2.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
const logger$1 = new Logger$2(version$2);
const _constructorGuard = {};
const Zero = BigNumber.from(0);
const NegativeOne = BigNumber.from(-1);
function throwFault(message2, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger$1.throwError(message2, Logger$2.errors.NUMERIC_FAULT, params);
}
let zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger$1.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger$1.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger$1.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger$1.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
class FixedFormat {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard) {
      logger$1.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger$2.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") ;
      else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger$1.throwArgumentError("invalid fixed format", "format", value);
        }
        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type2, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type2) {
          logger$1.throwArgumentError("invalid fixed format (" + key + " not " + type2 + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger$1.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger$1.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new FixedFormat(_constructorGuard, signed, width, decimals);
  }
}
class FixedNumber {
  constructor(constructorGuard, hex, value, format2) {
    if (constructorGuard !== _constructorGuard) {
      logger$1.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger$2.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format2;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger$1.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  // @TODO: Support other rounding algorithms
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger$1.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger$1.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format2) {
    return FixedNumber.fromString(this._value, format2);
  }
  static fromValue(value, decimals, format2) {
    if (format2 == null && decimals != null && !isBigNumberish(decimals)) {
      format2 = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format2 == null) {
      format2 = "fixed";
    }
    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format2));
  }
  static fromString(value, format2) {
    if (format2 == null) {
      format2 = "fixed";
    }
    const fixedFormat = FixedFormat.from(format2);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format2) {
    if (format2 == null) {
      format2 = "fixed";
    }
    const fixedFormat = FixedFormat.from(format2);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
  }
  static from(value, format2) {
    if (typeof value === "string") {
      return FixedNumber.fromString(value, format2);
    }
    if (isBytes(value)) {
      return FixedNumber.fromBytes(value, format2);
    }
    try {
      return FixedNumber.fromValue(value, 0, format2);
    } catch (error) {
      if (error.code !== Logger$2.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger$1.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
}
const ONE = FixedNumber.from(1);
const BUMP = FixedNumber.from("0.5");
const names = [
  "wei",
  "kwei",
  "mwei",
  "gwei",
  "szabo",
  "finney",
  "ether"
];
function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);
    if (index !== -1) {
      unitName = 3 * index;
    }
  }
  return formatFixed(value, unitName != null ? unitName : 18);
}
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}
const { toString } = Object.prototype;
const { getPrototypeOf } = Object;
const { iterator, toStringTag } = Symbol;
const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
const kindOfTest = (type2) => {
  type2 = type2.toLowerCase();
  return (thing) => kindOf(thing) === type2;
};
const typeOfTest = (type2) => (thing) => typeof thing === type2;
const { isArray: isArray$1 } = Array;
const isUndefined$1 = typeOfTest("undefined");
function isBuffer$1(val) {
  return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
const isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
const isString$1 = typeOfTest("string");
const isFunction$1 = typeOfTest("function");
const isNumber$1 = typeOfTest("number");
const isObject$1 = (thing) => thing !== null && typeof thing === "object";
const isBoolean$1 = (thing) => thing === true || thing === false;
const isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype2 = getPrototypeOf(val);
  return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
};
const isEmptyObject = (val) => {
  if (!isObject$1(val) || isBuffer$1(val)) {
    return false;
  }
  try {
    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
  } catch (e) {
    return false;
  }
};
const isDate$1 = kindOfTest("Date");
const isFile = kindOfTest("File");
const isBlob = kindOfTest("Blob");
const isFileList = kindOfTest("FileList");
const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);
const isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$1(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction$1(thing.toString) && thing.toString() === "[object FormData]"));
};
const isURLSearchParams = kindOfTest("URLSearchParams");
const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    if (isBuffer$1(obj)) {
      return;
    }
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  if (isBuffer$1(obj)) {
    return null;
  }
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context) => !isUndefined$1(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray$1(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
const inherits$1 = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray$1(thing)) return thing;
  let i = thing.length;
  if (!isNumber$1(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
const isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
const isRegExp$1 = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction$1(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction$1(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray$1(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
const noop$1 = () => {
};
const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
const toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject$1(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (isBuffer$1(source)) {
        return source;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray$1(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined$1(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing) => thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);
const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks2) => {
    _global.addEventListener("message", ({ source, data: data2 }) => {
      if (source === _global && data2 === token) {
        callbacks2.length && callbacks2.shift()();
      }
    }, false);
    return (cb) => {
      callbacks2.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction$1(_global.postMessage)
);
const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
const isIterable = (thing) => thing != null && isFunction$1(thing[iterator]);
const utils$1 = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer: isBuffer$1,
  isFormData,
  isArrayBufferView,
  isString: isString$1,
  isNumber: isNumber$1,
  isBoolean: isBoolean$1,
  isObject: isObject$1,
  isPlainObject,
  isEmptyObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined: isUndefined$1,
  isDate: isDate$1,
  isFile,
  isBlob,
  isRegExp: isRegExp$1,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits: inherits$1,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop: noop$1,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};
function AxiosError$1(message2, code, config2, request2, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message2;
  this.name = "AxiosError";
  code && (this.code = code);
  config2 && (this.config = config2);
  request2 && (this.request = request2);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils$1.inherits(AxiosError$1, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const prototype$1 = AxiosError$1.prototype;
const descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError$1, descriptors);
Object.defineProperty(prototype$1, "isAxiosError", { value: true });
AxiosError$1.from = (error, code, config2, request2, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils$1.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError$1.call(axiosError, error.message, code, config2, request2, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
const isRegExp = (val) => val instanceof RegExp;
const isDate = (val) => val instanceof Date;
const isBoolean = (val) => typeof val === "boolean";
const isNull = (val) => val === null;
const isNullOrUndefined = (val) => val === null || val === void 0;
const isNumber = (val) => typeof val === "number";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isUndefined = (val) => val === void 0;
const isFunction = (val) => typeof val === "function";
const isBuffer = (val) => {
  return val && typeof val === "object" && typeof val.copy === "function" && typeof val.fill === "function" && typeof val.readUInt8 === "function";
};
const isObject = (val) => val !== null && typeof val === "object" && Object.getPrototypeOf(val).isPrototypeOf(Object);
const isError = (val) => val instanceof Error;
const isPrimitive = (val) => {
  if (typeof val === "object") {
    return val === null;
  }
  return typeof val !== "function";
};
const _errnoException = /* @__PURE__ */ notImplemented("util._errnoException");
const _exceptionWithHostPort = /* @__PURE__ */ notImplemented("util._exceptionWithHostPort");
const getSystemErrorMap = /* @__PURE__ */ notImplemented("util.getSystemErrorMap");
const getSystemErrorName = /* @__PURE__ */ notImplemented("util.getSystemErrorName");
const parseEnv = /* @__PURE__ */ notImplemented("util.parseEnv");
const styleText = /* @__PURE__ */ notImplemented("util.styleText");
const workerdUtil = process.getBuiltinModule("node:util");
const {
  MIMEParams,
  MIMEType,
  TextDecoder: TextDecoder$1,
  TextEncoder: TextEncoder$1,
  // @ts-expect-error missing types?
  _extend,
  aborted,
  callbackify: callbackify$2,
  debug: debug$1,
  debuglog,
  deprecate,
  format,
  formatWithOptions,
  // @ts-expect-error unknown type
  getCallSite,
  inherits,
  inspect,
  isArray,
  isDeepStrictEqual,
  log,
  parseArgs,
  promisify,
  stripVTControlCharacters,
  toUSVString,
  transferableAbortController,
  transferableAbortSignal
} = workerdUtil;
const types = workerdUtil.types;
const util = {
  /**
   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable
   */
  _errnoException,
  _exceptionWithHostPort,
  // @ts-expect-error unenv has unknown type
  getSystemErrorMap,
  // @ts-expect-error unenv has unknown type
  getSystemErrorName,
  isBoolean,
  isBuffer,
  isDate,
  isError,
  isFunction,
  isNull,
  isNullOrUndefined,
  isNumber,
  isObject,
  isPrimitive,
  isRegExp,
  isString,
  isSymbol,
  isUndefined,
  // @ts-expect-error unenv has unknown type
  parseEnv,
  // @ts-expect-error unenv has unknown type
  styleText,
  /**
   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable
   */
  _extend,
  aborted,
  callbackify: callbackify$2,
  debug: debug$1,
  debuglog,
  deprecate,
  format,
  formatWithOptions,
  getCallSite,
  inherits,
  inspect,
  isArray,
  isDeepStrictEqual,
  log,
  MIMEParams,
  MIMEType,
  parseArgs,
  promisify,
  stripVTControlCharacters,
  TextDecoder: TextDecoder$1,
  TextEncoder: TextEncoder$1,
  toUSVString,
  transferableAbortController,
  transferableAbortSignal,
  // special-cased deep merged symbols
  types
};
const util$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MIMEParams,
  MIMEType,
  TextDecoder: TextDecoder$1,
  TextEncoder: TextEncoder$1,
  _errnoException,
  _exceptionWithHostPort,
  _extend,
  aborted,
  callbackify: callbackify$2,
  debug: debug$1,
  debuglog,
  default: util,
  deprecate,
  format,
  formatWithOptions,
  getCallSite,
  getSystemErrorMap,
  getSystemErrorName,
  inherits,
  inspect,
  isArray,
  isBoolean,
  isBuffer,
  isDate,
  isDeepStrictEqual,
  isError,
  isFunction,
  isNull,
  isNullOrUndefined,
  isNumber,
  isObject,
  isPrimitive,
  isRegExp,
  isString,
  isSymbol,
  isUndefined,
  log,
  parseArgs,
  parseEnv,
  promisify,
  stripVTControlCharacters,
  styleText,
  toUSVString,
  transferableAbortController,
  transferableAbortSignal,
  types
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(util$1);
var delayed_stream;
var hasRequiredDelayed_stream;
function requireDelayed_stream() {
  if (hasRequiredDelayed_stream) return delayed_stream;
  hasRequiredDelayed_stream = 1;
  var Stream = stream.Stream;
  var util2 = require$$0$2;
  delayed_stream = DelayedStream;
  function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util2.inherits(DelayedStream, Stream);
  DelayedStream.create = function(source, options) {
    var delayedStream = new this();
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on("error", function() {
    });
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, "readable", {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };
  DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === "data") {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message2 = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this.emit("error", new Error(message2));
  };
  return delayed_stream;
}
var combined_stream;
var hasRequiredCombined_stream;
function requireCombined_stream() {
  if (hasRequiredCombined_stream) return combined_stream;
  hasRequiredCombined_stream = 1;
  var util2 = require$$0$2;
  var Stream = stream.Stream;
  var DelayedStream = requireDelayed_stream();
  combined_stream = CombinedStream;
  function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  }
  util2.inherits(CombinedStream, Stream);
  CombinedStream.create = function(options) {
    var combinedStream = new this();
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function(stream2) {
    return typeof stream2 !== "function" && typeof stream2 !== "string" && typeof stream2 !== "boolean" && typeof stream2 !== "number" && !Buffer.isBuffer(stream2);
  };
  CombinedStream.prototype.append = function(stream2) {
    var isStreamLike = CombinedStream.isStreamLike(stream2);
    if (isStreamLike) {
      if (!(stream2 instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream2, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream2.on("data", this._checkDataSize.bind(this));
        stream2 = newStream;
      }
      this._handleErrors(stream2);
      if (this.pauseStreams) {
        stream2.pause();
      }
    }
    this._streams.push(stream2);
    return this;
  };
  CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return;
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream.prototype._realGetNext = function() {
    var stream2 = this._streams.shift();
    if (typeof stream2 == "undefined") {
      this.end();
      return;
    }
    if (typeof stream2 !== "function") {
      this._pipeNext(stream2);
      return;
    }
    var getStream = stream2;
    getStream(function(stream3) {
      var isStreamLike = CombinedStream.isStreamLike(stream3);
      if (isStreamLike) {
        stream3.on("data", this._checkDataSize.bind(this));
        this._handleErrors(stream3);
      }
      this._pipeNext(stream3);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function(stream2) {
    this._currentStream = stream2;
    var isStreamLike = CombinedStream.isStreamLike(stream2);
    if (isStreamLike) {
      stream2.on("end", this._getNext.bind(this));
      stream2.pipe(this, { end: false });
      return;
    }
    var value = stream2;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function(stream2) {
    var self2 = this;
    stream2.on("error", function(err) {
      self2._emitError(err);
    });
  };
  CombinedStream.prototype.write = function(data2) {
    this.emit("data", data2);
  };
  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
    this.emit("pause");
  };
  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
    this.emit("resume");
  };
  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit("end");
  };
  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit("close");
  };
  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message2 = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this._emitError(new Error(message2));
  };
  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self2 = this;
    this._streams.forEach(function(stream2) {
      if (!stream2.dataSize) {
        return;
      }
      self2.dataSize += stream2.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit("error", err);
  };
  return combined_stream;
}
const access$1 = /* @__PURE__ */ notImplemented("fs.access");
const copyFile$1 = /* @__PURE__ */ notImplemented("fs.copyFile");
const cp$1 = /* @__PURE__ */ notImplemented("fs.cp");
const open$1 = /* @__PURE__ */ notImplemented("fs.open");
const opendir$1 = /* @__PURE__ */ notImplemented("fs.opendir");
const rename$1 = /* @__PURE__ */ notImplemented("fs.rename");
const truncate$1 = /* @__PURE__ */ notImplemented("fs.truncate");
const rm$1 = /* @__PURE__ */ notImplemented("fs.rm");
const rmdir$1 = /* @__PURE__ */ notImplemented("fs.rmdir");
const mkdir$1 = /* @__PURE__ */ notImplemented("fs.mkdir");
const readdir$1 = /* @__PURE__ */ notImplemented("fs.readdir");
const readlink$1 = /* @__PURE__ */ notImplemented("fs.readlink");
const symlink$1 = /* @__PURE__ */ notImplemented("fs.symlink");
const lstat$1 = /* @__PURE__ */ notImplemented("fs.lstat");
const stat$1 = /* @__PURE__ */ notImplemented("fs.stat");
const link$1 = /* @__PURE__ */ notImplemented("fs.link");
const unlink$1 = /* @__PURE__ */ notImplemented("fs.unlink");
const chmod$1 = /* @__PURE__ */ notImplemented("fs.chmod");
const lchmod$1 = /* @__PURE__ */ notImplemented("fs.lchmod");
const lchown$1 = /* @__PURE__ */ notImplemented("fs.lchown");
const chown$1 = /* @__PURE__ */ notImplemented("fs.chown");
const utimes$1 = /* @__PURE__ */ notImplemented("fs.utimes");
const lutimes$1 = /* @__PURE__ */ notImplemented("fs.lutimes");
const realpath$1 = /* @__PURE__ */ notImplemented("fs.realpath");
const mkdtemp$1 = /* @__PURE__ */ notImplemented("fs.mkdtemp");
const writeFile$1 = /* @__PURE__ */ notImplemented("fs.writeFile");
const appendFile$1 = /* @__PURE__ */ notImplemented("fs.appendFile");
const readFile$1 = /* @__PURE__ */ notImplemented("fs.readFile");
const watch$1 = /* @__PURE__ */ notImplemented("fs.watch");
const statfs$1 = /* @__PURE__ */ notImplemented("fs.statfs");
const glob$1 = /* @__PURE__ */ notImplemented("fs.glob");
const UV_FS_SYMLINK_DIR = 1;
const UV_FS_SYMLINK_JUNCTION = 2;
const O_RDONLY = 0;
const O_WRONLY = 1;
const O_RDWR = 2;
const UV_DIRENT_UNKNOWN = 0;
const UV_DIRENT_FILE = 1;
const UV_DIRENT_DIR = 2;
const UV_DIRENT_LINK = 3;
const UV_DIRENT_FIFO = 4;
const UV_DIRENT_SOCKET = 5;
const UV_DIRENT_CHAR = 6;
const UV_DIRENT_BLOCK = 7;
const EXTENSIONLESS_FORMAT_JAVASCRIPT = 0;
const EXTENSIONLESS_FORMAT_WASM = 1;
const S_IFMT = 61440;
const S_IFREG = 32768;
const S_IFDIR = 16384;
const S_IFCHR = 8192;
const S_IFBLK = 24576;
const S_IFIFO = 4096;
const S_IFLNK = 40960;
const S_IFSOCK = 49152;
const O_CREAT = 64;
const O_EXCL = 128;
const UV_FS_O_FILEMAP = 0;
const O_NOCTTY = 256;
const O_TRUNC = 512;
const O_APPEND = 1024;
const O_DIRECTORY = 65536;
const O_NOATIME = 262144;
const O_NOFOLLOW = 131072;
const O_SYNC = 1052672;
const O_DSYNC = 4096;
const O_DIRECT = 16384;
const O_NONBLOCK = 2048;
const S_IRWXU = 448;
const S_IRUSR = 256;
const S_IWUSR = 128;
const S_IXUSR = 64;
const S_IRWXG = 56;
const S_IRGRP = 32;
const S_IWGRP = 16;
const S_IXGRP = 8;
const S_IRWXO = 7;
const S_IROTH = 4;
const S_IWOTH = 2;
const S_IXOTH = 1;
const F_OK = 0;
const R_OK = 4;
const W_OK = 2;
const X_OK = 1;
const UV_FS_COPYFILE_EXCL = 1;
const COPYFILE_EXCL = 1;
const UV_FS_COPYFILE_FICLONE = 2;
const COPYFILE_FICLONE = 2;
const UV_FS_COPYFILE_FICLONE_FORCE = 4;
const COPYFILE_FICLONE_FORCE = 4;
const constants = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  COPYFILE_EXCL,
  COPYFILE_FICLONE,
  COPYFILE_FICLONE_FORCE,
  EXTENSIONLESS_FORMAT_JAVASCRIPT,
  EXTENSIONLESS_FORMAT_WASM,
  F_OK,
  O_APPEND,
  O_CREAT,
  O_DIRECT,
  O_DIRECTORY,
  O_DSYNC,
  O_EXCL,
  O_NOATIME,
  O_NOCTTY,
  O_NOFOLLOW,
  O_NONBLOCK,
  O_RDONLY,
  O_RDWR,
  O_SYNC,
  O_TRUNC,
  O_WRONLY,
  R_OK,
  S_IFBLK,
  S_IFCHR,
  S_IFDIR,
  S_IFIFO,
  S_IFLNK,
  S_IFMT,
  S_IFREG,
  S_IFSOCK,
  S_IRGRP,
  S_IROTH,
  S_IRUSR,
  S_IRWXG,
  S_IRWXO,
  S_IRWXU,
  S_IWGRP,
  S_IWOTH,
  S_IWUSR,
  S_IXGRP,
  S_IXOTH,
  S_IXUSR,
  UV_DIRENT_BLOCK,
  UV_DIRENT_CHAR,
  UV_DIRENT_DIR,
  UV_DIRENT_FIFO,
  UV_DIRENT_FILE,
  UV_DIRENT_LINK,
  UV_DIRENT_SOCKET,
  UV_DIRENT_UNKNOWN,
  UV_FS_COPYFILE_EXCL,
  UV_FS_COPYFILE_FICLONE,
  UV_FS_COPYFILE_FICLONE_FORCE,
  UV_FS_O_FILEMAP,
  UV_FS_SYMLINK_DIR,
  UV_FS_SYMLINK_JUNCTION,
  W_OK,
  X_OK
}, Symbol.toStringTag, { value: "Module" }));
const promises = {
  constants,
  access: access$1,
  appendFile: appendFile$1,
  chmod: chmod$1,
  chown: chown$1,
  copyFile: copyFile$1,
  cp: cp$1,
  glob: glob$1,
  lchmod: lchmod$1,
  lchown: lchown$1,
  link: link$1,
  lstat: lstat$1,
  lutimes: lutimes$1,
  mkdir: mkdir$1,
  mkdtemp: mkdtemp$1,
  open: open$1,
  opendir: opendir$1,
  readFile: readFile$1,
  readdir: readdir$1,
  readlink: readlink$1,
  realpath: realpath$1,
  rename: rename$1,
  rm: rm$1,
  rmdir: rmdir$1,
  stat: stat$1,
  statfs: statfs$1,
  symlink: symlink$1,
  truncate: truncate$1,
  unlink: unlink$1,
  utimes: utimes$1,
  watch: watch$1,
  writeFile: writeFile$1
};
const Dir = /* @__PURE__ */ notImplementedClass("fs.Dir");
const Dirent = /* @__PURE__ */ notImplementedClass("fs.Dirent");
const Stats = /* @__PURE__ */ notImplementedClass("fs.Stats");
const ReadStream2 = /* @__PURE__ */ notImplementedClass("fs.ReadStream");
const WriteStream2 = /* @__PURE__ */ notImplementedClass("fs.WriteStream");
const FileReadStream = ReadStream2;
const FileWriteStream = WriteStream2;
function callbackify$1(fn) {
  const fnc = function(...args) {
    const cb = args.pop();
    fn().catch((error) => cb(error)).then((val) => cb(void 0, val));
  };
  fnc.__promisify__ = fn;
  fnc.native = fnc;
  return fnc;
}
const access = callbackify$1(access$1);
const appendFile = callbackify$1(appendFile$1);
const chown = callbackify$1(chown$1);
const chmod = callbackify$1(chmod$1);
const copyFile = callbackify$1(copyFile$1);
const cp = callbackify$1(cp$1);
const lchown = callbackify$1(lchown$1);
const lchmod = callbackify$1(lchmod$1);
const link = callbackify$1(link$1);
const lstat = callbackify$1(lstat$1);
const lutimes = callbackify$1(lutimes$1);
const mkdir = callbackify$1(mkdir$1);
const mkdtemp = callbackify$1(mkdtemp$1);
const realpath = callbackify$1(realpath$1);
const open = callbackify$1(open$1);
const opendir = callbackify$1(opendir$1);
const readdir = callbackify$1(readdir$1);
const readFile = callbackify$1(readFile$1);
const readlink = callbackify$1(readlink$1);
const rename = callbackify$1(rename$1);
const rm = callbackify$1(rm$1);
const rmdir = callbackify$1(rmdir$1);
const stat = callbackify$1(stat$1);
const symlink = callbackify$1(symlink$1);
const truncate = callbackify$1(truncate$1);
const unlink = callbackify$1(unlink$1);
const utimes = callbackify$1(utimes$1);
const writeFile = callbackify$1(writeFile$1);
const statfs = callbackify$1(statfs$1);
const close = /* @__PURE__ */ notImplementedAsync("fs.close");
const createReadStream = /* @__PURE__ */ notImplementedAsync("fs.createReadStream");
const createWriteStream = /* @__PURE__ */ notImplementedAsync("fs.createWriteStream");
const exists = /* @__PURE__ */ notImplementedAsync("fs.exists");
const fchown = /* @__PURE__ */ notImplementedAsync("fs.fchown");
const fchmod = /* @__PURE__ */ notImplementedAsync("fs.fchmod");
const fdatasync = /* @__PURE__ */ notImplementedAsync("fs.fdatasync");
const fstat = /* @__PURE__ */ notImplementedAsync("fs.fstat");
const fsync = /* @__PURE__ */ notImplementedAsync("fs.fsync");
const ftruncate = /* @__PURE__ */ notImplementedAsync("fs.ftruncate");
const futimes = /* @__PURE__ */ notImplementedAsync("fs.futimes");
const lstatSync = /* @__PURE__ */ notImplementedAsync("fs.lstatSync");
const read = /* @__PURE__ */ notImplementedAsync("fs.read");
const readv = /* @__PURE__ */ notImplementedAsync("fs.readv");
const realpathSync = /* @__PURE__ */ notImplementedAsync("fs.realpathSync");
const statSync = /* @__PURE__ */ notImplementedAsync("fs.statSync");
const unwatchFile = /* @__PURE__ */ notImplementedAsync("fs.unwatchFile");
const watch = /* @__PURE__ */ notImplementedAsync("fs.watch");
const watchFile = /* @__PURE__ */ notImplementedAsync("fs.watchFile");
const write = /* @__PURE__ */ notImplementedAsync("fs.write");
const writev = /* @__PURE__ */ notImplementedAsync("fs.writev");
const _toUnixTimestamp = /* @__PURE__ */ notImplementedAsync("fs._toUnixTimestamp");
const openAsBlob = /* @__PURE__ */ notImplementedAsync("fs.openAsBlob");
const glob = /* @__PURE__ */ notImplementedAsync("fs.glob");
const appendFileSync = /* @__PURE__ */ notImplemented("fs.appendFileSync");
const accessSync = /* @__PURE__ */ notImplemented("fs.accessSync");
const chownSync = /* @__PURE__ */ notImplemented("fs.chownSync");
const chmodSync = /* @__PURE__ */ notImplemented("fs.chmodSync");
const closeSync = /* @__PURE__ */ notImplemented("fs.closeSync");
const copyFileSync = /* @__PURE__ */ notImplemented("fs.copyFileSync");
const cpSync = /* @__PURE__ */ notImplemented("fs.cpSync");
const existsSync = () => false;
const fchownSync = /* @__PURE__ */ notImplemented("fs.fchownSync");
const fchmodSync = /* @__PURE__ */ notImplemented("fs.fchmodSync");
const fdatasyncSync = /* @__PURE__ */ notImplemented("fs.fdatasyncSync");
const fstatSync = /* @__PURE__ */ notImplemented("fs.fstatSync");
const fsyncSync = /* @__PURE__ */ notImplemented("fs.fsyncSync");
const ftruncateSync = /* @__PURE__ */ notImplemented("fs.ftruncateSync");
const futimesSync = /* @__PURE__ */ notImplemented("fs.futimesSync");
const lchownSync = /* @__PURE__ */ notImplemented("fs.lchownSync");
const lchmodSync = /* @__PURE__ */ notImplemented("fs.lchmodSync");
const linkSync = /* @__PURE__ */ notImplemented("fs.linkSync");
const lutimesSync = /* @__PURE__ */ notImplemented("fs.lutimesSync");
const mkdirSync = /* @__PURE__ */ notImplemented("fs.mkdirSync");
const mkdtempSync = /* @__PURE__ */ notImplemented("fs.mkdtempSync");
const openSync = /* @__PURE__ */ notImplemented("fs.openSync");
const opendirSync = /* @__PURE__ */ notImplemented("fs.opendirSync");
const readdirSync = /* @__PURE__ */ notImplemented("fs.readdirSync");
const readSync = /* @__PURE__ */ notImplemented("fs.readSync");
const readvSync = /* @__PURE__ */ notImplemented("fs.readvSync");
const readFileSync = /* @__PURE__ */ notImplemented("fs.readFileSync");
const readlinkSync = /* @__PURE__ */ notImplemented("fs.readlinkSync");
const renameSync = /* @__PURE__ */ notImplemented("fs.renameSync");
const rmSync = /* @__PURE__ */ notImplemented("fs.rmSync");
const rmdirSync = /* @__PURE__ */ notImplemented("fs.rmdirSync");
const symlinkSync = /* @__PURE__ */ notImplemented("fs.symlinkSync");
const truncateSync = /* @__PURE__ */ notImplemented("fs.truncateSync");
const unlinkSync = /* @__PURE__ */ notImplemented("fs.unlinkSync");
const utimesSync = /* @__PURE__ */ notImplemented("fs.utimesSync");
const writeFileSync = /* @__PURE__ */ notImplemented("fs.writeFileSync");
const writeSync = /* @__PURE__ */ notImplemented("fs.writeSync");
const writevSync = /* @__PURE__ */ notImplemented("fs.writevSync");
const statfsSync = /* @__PURE__ */ notImplemented("fs.statfsSync");
const globSync = /* @__PURE__ */ notImplemented("fs.globSync");
const fs = {
  F_OK,
  R_OK,
  W_OK,
  X_OK,
  constants,
  promises,
  Dir,
  Dirent,
  FileReadStream,
  FileWriteStream,
  ReadStream: ReadStream2,
  Stats,
  WriteStream: WriteStream2,
  _toUnixTimestamp,
  access,
  accessSync,
  appendFile,
  appendFileSync,
  chmod,
  chmodSync,
  chown,
  chownSync,
  close,
  closeSync,
  copyFile,
  copyFileSync,
  cp,
  cpSync,
  createReadStream,
  createWriteStream,
  exists,
  existsSync,
  fchmod,
  fchmodSync,
  fchown,
  fchownSync,
  fdatasync,
  fdatasyncSync,
  fstat,
  fstatSync,
  fsync,
  fsyncSync,
  ftruncate,
  ftruncateSync,
  futimes,
  futimesSync,
  glob,
  lchmod,
  globSync,
  lchmodSync,
  lchown,
  lchownSync,
  link,
  linkSync,
  lstat,
  lstatSync,
  lutimes,
  lutimesSync,
  mkdir,
  mkdirSync,
  mkdtemp,
  mkdtempSync,
  open,
  openAsBlob,
  openSync,
  opendir,
  opendirSync,
  read,
  readFile,
  readFileSync,
  readSync,
  readdir,
  readdirSync,
  readlink,
  readlinkSync,
  readv,
  readvSync,
  realpath,
  realpathSync,
  rename,
  renameSync,
  rm,
  rmSync,
  rmdir,
  rmdirSync,
  stat,
  statSync,
  statfs,
  statfsSync,
  symlink,
  symlinkSync,
  truncate,
  truncateSync,
  unlink,
  unlinkSync,
  unwatchFile,
  utimes,
  utimesSync,
  watch,
  watchFile,
  write,
  writeFile,
  writeFileSync,
  writeSync,
  writev,
  writevSync
};
const fs$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Dir,
  Dirent,
  F_OK,
  FileReadStream,
  FileWriteStream,
  R_OK,
  ReadStream: ReadStream2,
  Stats,
  W_OK,
  WriteStream: WriteStream2,
  X_OK,
  _toUnixTimestamp,
  access,
  accessSync,
  appendFile,
  appendFileSync,
  chmod,
  chmodSync,
  chown,
  chownSync,
  close,
  closeSync,
  constants,
  copyFile,
  copyFileSync,
  cp,
  cpSync,
  createReadStream,
  createWriteStream,
  default: fs,
  exists,
  existsSync,
  fchmod,
  fchmodSync,
  fchown,
  fchownSync,
  fdatasync,
  fdatasyncSync,
  fstat,
  fstatSync,
  fsync,
  fsyncSync,
  ftruncate,
  ftruncateSync,
  futimes,
  futimesSync,
  glob,
  globSync,
  lchmod,
  lchmodSync,
  lchown,
  lchownSync,
  link,
  linkSync,
  lstat,
  lstatSync,
  lutimes,
  lutimesSync,
  mkdir,
  mkdirSync,
  mkdtemp,
  mkdtempSync,
  open,
  openAsBlob,
  openSync,
  opendir,
  opendirSync,
  promises,
  read,
  readFile,
  readFileSync,
  readSync,
  readdir,
  readdirSync,
  readlink,
  readlinkSync,
  readv,
  readvSync,
  realpath,
  realpathSync,
  rename,
  renameSync,
  rm,
  rmSync,
  rmdir,
  rmdirSync,
  stat,
  statSync,
  statfs,
  statfsSync,
  symlink,
  symlinkSync,
  truncate,
  truncateSync,
  unlink,
  unlinkSync,
  unwatchFile,
  utimes,
  utimesSync,
  watch,
  watchFile,
  write,
  writeFile,
  writeFileSync,
  writeSync,
  writev,
  writevSync
}, Symbol.toStringTag, { value: "Module" }));
const require$$6 = /* @__PURE__ */ getAugmentedNamespace(fs$1);
var mimeTypes = {};
const require$$0$1 = {
  "application/1d-interleaved-parityfec": { "source": "iana" },
  "application/3gpdash-qoe-report+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/3gpp-ims+xml": { "source": "iana", "compressible": true },
  "application/3gpphal+json": { "source": "iana", "compressible": true },
  "application/3gpphalforms+json": { "source": "iana", "compressible": true },
  "application/a2l": { "source": "iana" },
  "application/ace+cbor": { "source": "iana" },
  "application/activemessage": { "source": "iana" },
  "application/activity+json": { "source": "iana", "compressible": true },
  "application/alto-costmap+json": { "source": "iana", "compressible": true },
  "application/alto-costmapfilter+json": { "source": "iana", "compressible": true },
  "application/alto-directory+json": { "source": "iana", "compressible": true },
  "application/alto-endpointcost+json": { "source": "iana", "compressible": true },
  "application/alto-endpointcostparams+json": { "source": "iana", "compressible": true },
  "application/alto-endpointprop+json": { "source": "iana", "compressible": true },
  "application/alto-endpointpropparams+json": { "source": "iana", "compressible": true },
  "application/alto-error+json": { "source": "iana", "compressible": true },
  "application/alto-networkmap+json": { "source": "iana", "compressible": true },
  "application/alto-networkmapfilter+json": { "source": "iana", "compressible": true },
  "application/alto-updatestreamcontrol+json": { "source": "iana", "compressible": true },
  "application/alto-updatestreamparams+json": { "source": "iana", "compressible": true },
  "application/aml": { "source": "iana" },
  "application/andrew-inset": { "source": "iana", "extensions": ["ez"] },
  "application/applefile": { "source": "iana" },
  "application/applixware": { "source": "apache", "extensions": ["aw"] },
  "application/at+jwt": { "source": "iana" },
  "application/atf": { "source": "iana" },
  "application/atfx": { "source": "iana" },
  "application/atom+xml": { "source": "iana", "compressible": true, "extensions": ["atom"] },
  "application/atomcat+xml": { "source": "iana", "compressible": true, "extensions": ["atomcat"] },
  "application/atomdeleted+xml": { "source": "iana", "compressible": true, "extensions": ["atomdeleted"] },
  "application/atomicmail": { "source": "iana" },
  "application/atomsvc+xml": { "source": "iana", "compressible": true, "extensions": ["atomsvc"] },
  "application/atsc-dwd+xml": { "source": "iana", "compressible": true, "extensions": ["dwd"] },
  "application/atsc-dynamic-event-message": { "source": "iana" },
  "application/atsc-held+xml": { "source": "iana", "compressible": true, "extensions": ["held"] },
  "application/atsc-rdt+json": { "source": "iana", "compressible": true },
  "application/atsc-rsat+xml": { "source": "iana", "compressible": true, "extensions": ["rsat"] },
  "application/atxml": { "source": "iana" },
  "application/auth-policy+xml": { "source": "iana", "compressible": true },
  "application/bacnet-xdd+zip": { "source": "iana", "compressible": false },
  "application/batch-smtp": { "source": "iana" },
  "application/bdoc": { "compressible": false, "extensions": ["bdoc"] },
  "application/beep+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/calendar+json": { "source": "iana", "compressible": true },
  "application/calendar+xml": { "source": "iana", "compressible": true, "extensions": ["xcs"] },
  "application/call-completion": { "source": "iana" },
  "application/cals-1840": { "source": "iana" },
  "application/captive+json": { "source": "iana", "compressible": true },
  "application/cbor": { "source": "iana" },
  "application/cbor-seq": { "source": "iana" },
  "application/cccex": { "source": "iana" },
  "application/ccmp+xml": { "source": "iana", "compressible": true },
  "application/ccxml+xml": { "source": "iana", "compressible": true, "extensions": ["ccxml"] },
  "application/cdfx+xml": { "source": "iana", "compressible": true, "extensions": ["cdfx"] },
  "application/cdmi-capability": { "source": "iana", "extensions": ["cdmia"] },
  "application/cdmi-container": { "source": "iana", "extensions": ["cdmic"] },
  "application/cdmi-domain": { "source": "iana", "extensions": ["cdmid"] },
  "application/cdmi-object": { "source": "iana", "extensions": ["cdmio"] },
  "application/cdmi-queue": { "source": "iana", "extensions": ["cdmiq"] },
  "application/cdni": { "source": "iana" },
  "application/cea": { "source": "iana" },
  "application/cea-2018+xml": { "source": "iana", "compressible": true },
  "application/cellml+xml": { "source": "iana", "compressible": true },
  "application/cfw": { "source": "iana" },
  "application/city+json": { "source": "iana", "compressible": true },
  "application/clr": { "source": "iana" },
  "application/clue+xml": { "source": "iana", "compressible": true },
  "application/clue_info+xml": { "source": "iana", "compressible": true },
  "application/cms": { "source": "iana" },
  "application/cnrp+xml": { "source": "iana", "compressible": true },
  "application/coap-group+json": { "source": "iana", "compressible": true },
  "application/coap-payload": { "source": "iana" },
  "application/commonground": { "source": "iana" },
  "application/conference-info+xml": { "source": "iana", "compressible": true },
  "application/cose": { "source": "iana" },
  "application/cose-key": { "source": "iana" },
  "application/cose-key-set": { "source": "iana" },
  "application/cpl+xml": { "source": "iana", "compressible": true, "extensions": ["cpl"] },
  "application/csrattrs": { "source": "iana" },
  "application/csta+xml": { "source": "iana", "compressible": true },
  "application/cstadata+xml": { "source": "iana", "compressible": true },
  "application/csvm+json": { "source": "iana", "compressible": true },
  "application/cu-seeme": { "source": "apache", "extensions": ["cu"] },
  "application/cwt": { "source": "iana" },
  "application/cybercash": { "source": "iana" },
  "application/dart": { "compressible": true },
  "application/dash+xml": { "source": "iana", "compressible": true, "extensions": ["mpd"] },
  "application/dash-patch+xml": { "source": "iana", "compressible": true, "extensions": ["mpp"] },
  "application/dashdelta": { "source": "iana" },
  "application/davmount+xml": { "source": "iana", "compressible": true, "extensions": ["davmount"] },
  "application/dca-rft": { "source": "iana" },
  "application/dcd": { "source": "iana" },
  "application/dec-dx": { "source": "iana" },
  "application/dialog-info+xml": { "source": "iana", "compressible": true },
  "application/dicom": { "source": "iana" },
  "application/dicom+json": { "source": "iana", "compressible": true },
  "application/dicom+xml": { "source": "iana", "compressible": true },
  "application/dii": { "source": "iana" },
  "application/dit": { "source": "iana" },
  "application/dns": { "source": "iana" },
  "application/dns+json": { "source": "iana", "compressible": true },
  "application/dns-message": { "source": "iana" },
  "application/docbook+xml": { "source": "apache", "compressible": true, "extensions": ["dbk"] },
  "application/dots+cbor": { "source": "iana" },
  "application/dskpp+xml": { "source": "iana", "compressible": true },
  "application/dssc+der": { "source": "iana", "extensions": ["dssc"] },
  "application/dssc+xml": { "source": "iana", "compressible": true, "extensions": ["xdssc"] },
  "application/dvcs": { "source": "iana" },
  "application/ecmascript": { "source": "iana", "compressible": true, "extensions": ["es", "ecma"] },
  "application/edi-consent": { "source": "iana" },
  "application/edi-x12": { "source": "iana", "compressible": false },
  "application/edifact": { "source": "iana", "compressible": false },
  "application/efi": { "source": "iana" },
  "application/elm+json": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/elm+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.cap+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/emergencycalldata.comment+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.control+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.deviceinfo+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.ecall.msd": { "source": "iana" },
  "application/emergencycalldata.providerinfo+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.serviceinfo+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.subscriberinfo+xml": { "source": "iana", "compressible": true },
  "application/emergencycalldata.veds+xml": { "source": "iana", "compressible": true },
  "application/emma+xml": { "source": "iana", "compressible": true, "extensions": ["emma"] },
  "application/emotionml+xml": { "source": "iana", "compressible": true, "extensions": ["emotionml"] },
  "application/encaprtp": { "source": "iana" },
  "application/epp+xml": { "source": "iana", "compressible": true },
  "application/epub+zip": { "source": "iana", "compressible": false, "extensions": ["epub"] },
  "application/eshop": { "source": "iana" },
  "application/exi": { "source": "iana", "extensions": ["exi"] },
  "application/expect-ct-report+json": { "source": "iana", "compressible": true },
  "application/express": { "source": "iana", "extensions": ["exp"] },
  "application/fastinfoset": { "source": "iana" },
  "application/fastsoap": { "source": "iana" },
  "application/fdt+xml": { "source": "iana", "compressible": true, "extensions": ["fdt"] },
  "application/fhir+json": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/fhir+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/fido.trusted-apps+json": { "compressible": true },
  "application/fits": { "source": "iana" },
  "application/flexfec": { "source": "iana" },
  "application/font-sfnt": { "source": "iana" },
  "application/font-tdpfr": { "source": "iana", "extensions": ["pfr"] },
  "application/font-woff": { "source": "iana", "compressible": false },
  "application/framework-attributes+xml": { "source": "iana", "compressible": true },
  "application/geo+json": { "source": "iana", "compressible": true, "extensions": ["geojson"] },
  "application/geo+json-seq": { "source": "iana" },
  "application/geopackage+sqlite3": { "source": "iana" },
  "application/geoxacml+xml": { "source": "iana", "compressible": true },
  "application/gltf-buffer": { "source": "iana" },
  "application/gml+xml": { "source": "iana", "compressible": true, "extensions": ["gml"] },
  "application/gpx+xml": { "source": "apache", "compressible": true, "extensions": ["gpx"] },
  "application/gxf": { "source": "apache", "extensions": ["gxf"] },
  "application/gzip": { "source": "iana", "compressible": false, "extensions": ["gz"] },
  "application/h224": { "source": "iana" },
  "application/held+xml": { "source": "iana", "compressible": true },
  "application/hjson": { "extensions": ["hjson"] },
  "application/http": { "source": "iana" },
  "application/hyperstudio": { "source": "iana", "extensions": ["stk"] },
  "application/ibe-key-request+xml": { "source": "iana", "compressible": true },
  "application/ibe-pkg-reply+xml": { "source": "iana", "compressible": true },
  "application/ibe-pp-data": { "source": "iana" },
  "application/iges": { "source": "iana" },
  "application/im-iscomposing+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/index": { "source": "iana" },
  "application/index.cmd": { "source": "iana" },
  "application/index.obj": { "source": "iana" },
  "application/index.response": { "source": "iana" },
  "application/index.vnd": { "source": "iana" },
  "application/inkml+xml": { "source": "iana", "compressible": true, "extensions": ["ink", "inkml"] },
  "application/iotp": { "source": "iana" },
  "application/ipfix": { "source": "iana", "extensions": ["ipfix"] },
  "application/ipp": { "source": "iana" },
  "application/isup": { "source": "iana" },
  "application/its+xml": { "source": "iana", "compressible": true, "extensions": ["its"] },
  "application/java-archive": { "source": "apache", "compressible": false, "extensions": ["jar", "war", "ear"] },
  "application/java-serialized-object": { "source": "apache", "compressible": false, "extensions": ["ser"] },
  "application/java-vm": { "source": "apache", "compressible": false, "extensions": ["class"] },
  "application/javascript": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["js", "mjs"] },
  "application/jf2feed+json": { "source": "iana", "compressible": true },
  "application/jose": { "source": "iana" },
  "application/jose+json": { "source": "iana", "compressible": true },
  "application/jrd+json": { "source": "iana", "compressible": true },
  "application/jscalendar+json": { "source": "iana", "compressible": true },
  "application/json": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["json", "map"] },
  "application/json-patch+json": { "source": "iana", "compressible": true },
  "application/json-seq": { "source": "iana" },
  "application/json5": { "extensions": ["json5"] },
  "application/jsonml+json": { "source": "apache", "compressible": true, "extensions": ["jsonml"] },
  "application/jwk+json": { "source": "iana", "compressible": true },
  "application/jwk-set+json": { "source": "iana", "compressible": true },
  "application/jwt": { "source": "iana" },
  "application/kpml-request+xml": { "source": "iana", "compressible": true },
  "application/kpml-response+xml": { "source": "iana", "compressible": true },
  "application/ld+json": { "source": "iana", "compressible": true, "extensions": ["jsonld"] },
  "application/lgr+xml": { "source": "iana", "compressible": true, "extensions": ["lgr"] },
  "application/link-format": { "source": "iana" },
  "application/load-control+xml": { "source": "iana", "compressible": true },
  "application/lost+xml": { "source": "iana", "compressible": true, "extensions": ["lostxml"] },
  "application/lostsync+xml": { "source": "iana", "compressible": true },
  "application/lpf+zip": { "source": "iana", "compressible": false },
  "application/lxf": { "source": "iana" },
  "application/mac-binhex40": { "source": "iana", "extensions": ["hqx"] },
  "application/mac-compactpro": { "source": "apache", "extensions": ["cpt"] },
  "application/macwriteii": { "source": "iana" },
  "application/mads+xml": { "source": "iana", "compressible": true, "extensions": ["mads"] },
  "application/manifest+json": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["webmanifest"] },
  "application/marc": { "source": "iana", "extensions": ["mrc"] },
  "application/marcxml+xml": { "source": "iana", "compressible": true, "extensions": ["mrcx"] },
  "application/mathematica": { "source": "iana", "extensions": ["ma", "nb", "mb"] },
  "application/mathml+xml": { "source": "iana", "compressible": true, "extensions": ["mathml"] },
  "application/mathml-content+xml": { "source": "iana", "compressible": true },
  "application/mathml-presentation+xml": { "source": "iana", "compressible": true },
  "application/mbms-associated-procedure-description+xml": { "source": "iana", "compressible": true },
  "application/mbms-deregister+xml": { "source": "iana", "compressible": true },
  "application/mbms-envelope+xml": { "source": "iana", "compressible": true },
  "application/mbms-msk+xml": { "source": "iana", "compressible": true },
  "application/mbms-msk-response+xml": { "source": "iana", "compressible": true },
  "application/mbms-protection-description+xml": { "source": "iana", "compressible": true },
  "application/mbms-reception-report+xml": { "source": "iana", "compressible": true },
  "application/mbms-register+xml": { "source": "iana", "compressible": true },
  "application/mbms-register-response+xml": { "source": "iana", "compressible": true },
  "application/mbms-schedule+xml": { "source": "iana", "compressible": true },
  "application/mbms-user-service-description+xml": { "source": "iana", "compressible": true },
  "application/mbox": { "source": "iana", "extensions": ["mbox"] },
  "application/media-policy-dataset+xml": { "source": "iana", "compressible": true, "extensions": ["mpf"] },
  "application/media_control+xml": { "source": "iana", "compressible": true },
  "application/mediaservercontrol+xml": { "source": "iana", "compressible": true, "extensions": ["mscml"] },
  "application/merge-patch+json": { "source": "iana", "compressible": true },
  "application/metalink+xml": { "source": "apache", "compressible": true, "extensions": ["metalink"] },
  "application/metalink4+xml": { "source": "iana", "compressible": true, "extensions": ["meta4"] },
  "application/mets+xml": { "source": "iana", "compressible": true, "extensions": ["mets"] },
  "application/mf4": { "source": "iana" },
  "application/mikey": { "source": "iana" },
  "application/mipc": { "source": "iana" },
  "application/missing-blocks+cbor-seq": { "source": "iana" },
  "application/mmt-aei+xml": { "source": "iana", "compressible": true, "extensions": ["maei"] },
  "application/mmt-usd+xml": { "source": "iana", "compressible": true, "extensions": ["musd"] },
  "application/mods+xml": { "source": "iana", "compressible": true, "extensions": ["mods"] },
  "application/moss-keys": { "source": "iana" },
  "application/moss-signature": { "source": "iana" },
  "application/mosskey-data": { "source": "iana" },
  "application/mosskey-request": { "source": "iana" },
  "application/mp21": { "source": "iana", "extensions": ["m21", "mp21"] },
  "application/mp4": { "source": "iana", "extensions": ["mp4s", "m4p"] },
  "application/mpeg4-generic": { "source": "iana" },
  "application/mpeg4-iod": { "source": "iana" },
  "application/mpeg4-iod-xmt": { "source": "iana" },
  "application/mrb-consumer+xml": { "source": "iana", "compressible": true },
  "application/mrb-publish+xml": { "source": "iana", "compressible": true },
  "application/msc-ivr+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/msc-mixer+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/msword": { "source": "iana", "compressible": false, "extensions": ["doc", "dot"] },
  "application/mud+json": { "source": "iana", "compressible": true },
  "application/multipart-core": { "source": "iana" },
  "application/mxf": { "source": "iana", "extensions": ["mxf"] },
  "application/n-quads": { "source": "iana", "extensions": ["nq"] },
  "application/n-triples": { "source": "iana", "extensions": ["nt"] },
  "application/nasdata": { "source": "iana" },
  "application/news-checkgroups": { "source": "iana", "charset": "US-ASCII" },
  "application/news-groupinfo": { "source": "iana", "charset": "US-ASCII" },
  "application/news-transmission": { "source": "iana" },
  "application/nlsml+xml": { "source": "iana", "compressible": true },
  "application/node": { "source": "iana", "extensions": ["cjs"] },
  "application/nss": { "source": "iana" },
  "application/oauth-authz-req+jwt": { "source": "iana" },
  "application/oblivious-dns-message": { "source": "iana" },
  "application/ocsp-request": { "source": "iana" },
  "application/ocsp-response": { "source": "iana" },
  "application/octet-stream": { "source": "iana", "compressible": false, "extensions": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"] },
  "application/oda": { "source": "iana", "extensions": ["oda"] },
  "application/odm+xml": { "source": "iana", "compressible": true },
  "application/odx": { "source": "iana" },
  "application/oebps-package+xml": { "source": "iana", "compressible": true, "extensions": ["opf"] },
  "application/ogg": { "source": "iana", "compressible": false, "extensions": ["ogx"] },
  "application/omdoc+xml": { "source": "apache", "compressible": true, "extensions": ["omdoc"] },
  "application/onenote": { "source": "apache", "extensions": ["onetoc", "onetoc2", "onetmp", "onepkg"] },
  "application/opc-nodeset+xml": { "source": "iana", "compressible": true },
  "application/oscore": { "source": "iana" },
  "application/oxps": { "source": "iana", "extensions": ["oxps"] },
  "application/p21": { "source": "iana" },
  "application/p21+zip": { "source": "iana", "compressible": false },
  "application/p2p-overlay+xml": { "source": "iana", "compressible": true, "extensions": ["relo"] },
  "application/parityfec": { "source": "iana" },
  "application/passport": { "source": "iana" },
  "application/patch-ops-error+xml": { "source": "iana", "compressible": true, "extensions": ["xer"] },
  "application/pdf": { "source": "iana", "compressible": false, "extensions": ["pdf"] },
  "application/pdx": { "source": "iana" },
  "application/pem-certificate-chain": { "source": "iana" },
  "application/pgp-encrypted": { "source": "iana", "compressible": false, "extensions": ["pgp"] },
  "application/pgp-keys": { "source": "iana", "extensions": ["asc"] },
  "application/pgp-signature": { "source": "iana", "extensions": ["asc", "sig"] },
  "application/pics-rules": { "source": "apache", "extensions": ["prf"] },
  "application/pidf+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/pidf-diff+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/pkcs10": { "source": "iana", "extensions": ["p10"] },
  "application/pkcs12": { "source": "iana" },
  "application/pkcs7-mime": { "source": "iana", "extensions": ["p7m", "p7c"] },
  "application/pkcs7-signature": { "source": "iana", "extensions": ["p7s"] },
  "application/pkcs8": { "source": "iana", "extensions": ["p8"] },
  "application/pkcs8-encrypted": { "source": "iana" },
  "application/pkix-attr-cert": { "source": "iana", "extensions": ["ac"] },
  "application/pkix-cert": { "source": "iana", "extensions": ["cer"] },
  "application/pkix-crl": { "source": "iana", "extensions": ["crl"] },
  "application/pkix-pkipath": { "source": "iana", "extensions": ["pkipath"] },
  "application/pkixcmp": { "source": "iana", "extensions": ["pki"] },
  "application/pls+xml": { "source": "iana", "compressible": true, "extensions": ["pls"] },
  "application/poc-settings+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/postscript": { "source": "iana", "compressible": true, "extensions": ["ai", "eps", "ps"] },
  "application/ppsp-tracker+json": { "source": "iana", "compressible": true },
  "application/problem+json": { "source": "iana", "compressible": true },
  "application/problem+xml": { "source": "iana", "compressible": true },
  "application/provenance+xml": { "source": "iana", "compressible": true, "extensions": ["provx"] },
  "application/prs.alvestrand.titrax-sheet": { "source": "iana" },
  "application/prs.cww": { "source": "iana", "extensions": ["cww"] },
  "application/prs.cyn": { "source": "iana", "charset": "7-BIT" },
  "application/prs.hpub+zip": { "source": "iana", "compressible": false },
  "application/prs.nprend": { "source": "iana" },
  "application/prs.plucker": { "source": "iana" },
  "application/prs.rdf-xml-crypt": { "source": "iana" },
  "application/prs.xsf+xml": { "source": "iana", "compressible": true },
  "application/pskc+xml": { "source": "iana", "compressible": true, "extensions": ["pskcxml"] },
  "application/pvd+json": { "source": "iana", "compressible": true },
  "application/qsig": { "source": "iana" },
  "application/raml+yaml": { "compressible": true, "extensions": ["raml"] },
  "application/raptorfec": { "source": "iana" },
  "application/rdap+json": { "source": "iana", "compressible": true },
  "application/rdf+xml": { "source": "iana", "compressible": true, "extensions": ["rdf", "owl"] },
  "application/reginfo+xml": { "source": "iana", "compressible": true, "extensions": ["rif"] },
  "application/relax-ng-compact-syntax": { "source": "iana", "extensions": ["rnc"] },
  "application/remote-printing": { "source": "iana" },
  "application/reputon+json": { "source": "iana", "compressible": true },
  "application/resource-lists+xml": { "source": "iana", "compressible": true, "extensions": ["rl"] },
  "application/resource-lists-diff+xml": { "source": "iana", "compressible": true, "extensions": ["rld"] },
  "application/rfc+xml": { "source": "iana", "compressible": true },
  "application/riscos": { "source": "iana" },
  "application/rlmi+xml": { "source": "iana", "compressible": true },
  "application/rls-services+xml": { "source": "iana", "compressible": true, "extensions": ["rs"] },
  "application/route-apd+xml": { "source": "iana", "compressible": true, "extensions": ["rapd"] },
  "application/route-s-tsid+xml": { "source": "iana", "compressible": true, "extensions": ["sls"] },
  "application/route-usd+xml": { "source": "iana", "compressible": true, "extensions": ["rusd"] },
  "application/rpki-ghostbusters": { "source": "iana", "extensions": ["gbr"] },
  "application/rpki-manifest": { "source": "iana", "extensions": ["mft"] },
  "application/rpki-publication": { "source": "iana" },
  "application/rpki-roa": { "source": "iana", "extensions": ["roa"] },
  "application/rpki-updown": { "source": "iana" },
  "application/rsd+xml": { "source": "apache", "compressible": true, "extensions": ["rsd"] },
  "application/rss+xml": { "source": "apache", "compressible": true, "extensions": ["rss"] },
  "application/rtf": { "source": "iana", "compressible": true, "extensions": ["rtf"] },
  "application/rtploopback": { "source": "iana" },
  "application/rtx": { "source": "iana" },
  "application/samlassertion+xml": { "source": "iana", "compressible": true },
  "application/samlmetadata+xml": { "source": "iana", "compressible": true },
  "application/sarif+json": { "source": "iana", "compressible": true },
  "application/sarif-external-properties+json": { "source": "iana", "compressible": true },
  "application/sbe": { "source": "iana" },
  "application/sbml+xml": { "source": "iana", "compressible": true, "extensions": ["sbml"] },
  "application/scaip+xml": { "source": "iana", "compressible": true },
  "application/scim+json": { "source": "iana", "compressible": true },
  "application/scvp-cv-request": { "source": "iana", "extensions": ["scq"] },
  "application/scvp-cv-response": { "source": "iana", "extensions": ["scs"] },
  "application/scvp-vp-request": { "source": "iana", "extensions": ["spq"] },
  "application/scvp-vp-response": { "source": "iana", "extensions": ["spp"] },
  "application/sdp": { "source": "iana", "extensions": ["sdp"] },
  "application/secevent+jwt": { "source": "iana" },
  "application/senml+cbor": { "source": "iana" },
  "application/senml+json": { "source": "iana", "compressible": true },
  "application/senml+xml": { "source": "iana", "compressible": true, "extensions": ["senmlx"] },
  "application/senml-etch+cbor": { "source": "iana" },
  "application/senml-etch+json": { "source": "iana", "compressible": true },
  "application/senml-exi": { "source": "iana" },
  "application/sensml+cbor": { "source": "iana" },
  "application/sensml+json": { "source": "iana", "compressible": true },
  "application/sensml+xml": { "source": "iana", "compressible": true, "extensions": ["sensmlx"] },
  "application/sensml-exi": { "source": "iana" },
  "application/sep+xml": { "source": "iana", "compressible": true },
  "application/sep-exi": { "source": "iana" },
  "application/session-info": { "source": "iana" },
  "application/set-payment": { "source": "iana" },
  "application/set-payment-initiation": { "source": "iana", "extensions": ["setpay"] },
  "application/set-registration": { "source": "iana" },
  "application/set-registration-initiation": { "source": "iana", "extensions": ["setreg"] },
  "application/sgml": { "source": "iana" },
  "application/sgml-open-catalog": { "source": "iana" },
  "application/shf+xml": { "source": "iana", "compressible": true, "extensions": ["shf"] },
  "application/sieve": { "source": "iana", "extensions": ["siv", "sieve"] },
  "application/simple-filter+xml": { "source": "iana", "compressible": true },
  "application/simple-message-summary": { "source": "iana" },
  "application/simplesymbolcontainer": { "source": "iana" },
  "application/sipc": { "source": "iana" },
  "application/slate": { "source": "iana" },
  "application/smil": { "source": "iana" },
  "application/smil+xml": { "source": "iana", "compressible": true, "extensions": ["smi", "smil"] },
  "application/smpte336m": { "source": "iana" },
  "application/soap+fastinfoset": { "source": "iana" },
  "application/soap+xml": { "source": "iana", "compressible": true },
  "application/sparql-query": { "source": "iana", "extensions": ["rq"] },
  "application/sparql-results+xml": { "source": "iana", "compressible": true, "extensions": ["srx"] },
  "application/spdx+json": { "source": "iana", "compressible": true },
  "application/spirits-event+xml": { "source": "iana", "compressible": true },
  "application/sql": { "source": "iana" },
  "application/srgs": { "source": "iana", "extensions": ["gram"] },
  "application/srgs+xml": { "source": "iana", "compressible": true, "extensions": ["grxml"] },
  "application/sru+xml": { "source": "iana", "compressible": true, "extensions": ["sru"] },
  "application/ssdl+xml": { "source": "apache", "compressible": true, "extensions": ["ssdl"] },
  "application/ssml+xml": { "source": "iana", "compressible": true, "extensions": ["ssml"] },
  "application/stix+json": { "source": "iana", "compressible": true },
  "application/swid+xml": { "source": "iana", "compressible": true, "extensions": ["swidtag"] },
  "application/tamp-apex-update": { "source": "iana" },
  "application/tamp-apex-update-confirm": { "source": "iana" },
  "application/tamp-community-update": { "source": "iana" },
  "application/tamp-community-update-confirm": { "source": "iana" },
  "application/tamp-error": { "source": "iana" },
  "application/tamp-sequence-adjust": { "source": "iana" },
  "application/tamp-sequence-adjust-confirm": { "source": "iana" },
  "application/tamp-status-query": { "source": "iana" },
  "application/tamp-status-response": { "source": "iana" },
  "application/tamp-update": { "source": "iana" },
  "application/tamp-update-confirm": { "source": "iana" },
  "application/tar": { "compressible": true },
  "application/taxii+json": { "source": "iana", "compressible": true },
  "application/td+json": { "source": "iana", "compressible": true },
  "application/tei+xml": { "source": "iana", "compressible": true, "extensions": ["tei", "teicorpus"] },
  "application/tetra_isi": { "source": "iana" },
  "application/thraud+xml": { "source": "iana", "compressible": true, "extensions": ["tfi"] },
  "application/timestamp-query": { "source": "iana" },
  "application/timestamp-reply": { "source": "iana" },
  "application/timestamped-data": { "source": "iana", "extensions": ["tsd"] },
  "application/tlsrpt+gzip": { "source": "iana" },
  "application/tlsrpt+json": { "source": "iana", "compressible": true },
  "application/tnauthlist": { "source": "iana" },
  "application/token-introspection+jwt": { "source": "iana" },
  "application/toml": { "compressible": true, "extensions": ["toml"] },
  "application/trickle-ice-sdpfrag": { "source": "iana" },
  "application/trig": { "source": "iana", "extensions": ["trig"] },
  "application/ttml+xml": { "source": "iana", "compressible": true, "extensions": ["ttml"] },
  "application/tve-trigger": { "source": "iana" },
  "application/tzif": { "source": "iana" },
  "application/tzif-leap": { "source": "iana" },
  "application/ubjson": { "compressible": false, "extensions": ["ubj"] },
  "application/ulpfec": { "source": "iana" },
  "application/urc-grpsheet+xml": { "source": "iana", "compressible": true },
  "application/urc-ressheet+xml": { "source": "iana", "compressible": true, "extensions": ["rsheet"] },
  "application/urc-targetdesc+xml": { "source": "iana", "compressible": true, "extensions": ["td"] },
  "application/urc-uisocketdesc+xml": { "source": "iana", "compressible": true },
  "application/vcard+json": { "source": "iana", "compressible": true },
  "application/vcard+xml": { "source": "iana", "compressible": true },
  "application/vemmi": { "source": "iana" },
  "application/vividence.scriptfile": { "source": "apache" },
  "application/vnd.1000minds.decision-model+xml": { "source": "iana", "compressible": true, "extensions": ["1km"] },
  "application/vnd.3gpp-prose+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp-prose-pc3ch+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp-v2x-local-service-information": { "source": "iana" },
  "application/vnd.3gpp.5gnas": { "source": "iana" },
  "application/vnd.3gpp.access-transfer-events+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.bsf+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.gmop+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.gtpc": { "source": "iana" },
  "application/vnd.3gpp.interworking-data": { "source": "iana" },
  "application/vnd.3gpp.lpp": { "source": "iana" },
  "application/vnd.3gpp.mc-signalling-ear": { "source": "iana" },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcdata-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcdata-payload": { "source": "iana" },
  "application/vnd.3gpp.mcdata-service-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcdata-signalling": { "source": "iana" },
  "application/vnd.3gpp.mcdata-ue-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcdata-user-profile+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-floor-request+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-location-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-service-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-signed+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-ue-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcptt-user-profile+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-location-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-service-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-ue-config+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mcvideo-user-profile+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.mid-call+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.ngap": { "source": "iana" },
  "application/vnd.3gpp.pfcp": { "source": "iana" },
  "application/vnd.3gpp.pic-bw-large": { "source": "iana", "extensions": ["plb"] },
  "application/vnd.3gpp.pic-bw-small": { "source": "iana", "extensions": ["psb"] },
  "application/vnd.3gpp.pic-bw-var": { "source": "iana", "extensions": ["pvb"] },
  "application/vnd.3gpp.s1ap": { "source": "iana" },
  "application/vnd.3gpp.sms": { "source": "iana" },
  "application/vnd.3gpp.sms+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.srvcc-ext+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.srvcc-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.state-and-event-info+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp.ussd+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp2.bcmcsinfo+xml": { "source": "iana", "compressible": true },
  "application/vnd.3gpp2.sms": { "source": "iana" },
  "application/vnd.3gpp2.tcap": { "source": "iana", "extensions": ["tcap"] },
  "application/vnd.3lightssoftware.imagescal": { "source": "iana" },
  "application/vnd.3m.post-it-notes": { "source": "iana", "extensions": ["pwn"] },
  "application/vnd.accpac.simply.aso": { "source": "iana", "extensions": ["aso"] },
  "application/vnd.accpac.simply.imp": { "source": "iana", "extensions": ["imp"] },
  "application/vnd.acucobol": { "source": "iana", "extensions": ["acu"] },
  "application/vnd.acucorp": { "source": "iana", "extensions": ["atc", "acutc"] },
  "application/vnd.adobe.air-application-installer-package+zip": { "source": "apache", "compressible": false, "extensions": ["air"] },
  "application/vnd.adobe.flash.movie": { "source": "iana" },
  "application/vnd.adobe.formscentral.fcdt": { "source": "iana", "extensions": ["fcdt"] },
  "application/vnd.adobe.fxp": { "source": "iana", "extensions": ["fxp", "fxpl"] },
  "application/vnd.adobe.partial-upload": { "source": "iana" },
  "application/vnd.adobe.xdp+xml": { "source": "iana", "compressible": true, "extensions": ["xdp"] },
  "application/vnd.adobe.xfdf": { "source": "iana", "extensions": ["xfdf"] },
  "application/vnd.aether.imp": { "source": "iana" },
  "application/vnd.afpc.afplinedata": { "source": "iana" },
  "application/vnd.afpc.afplinedata-pagedef": { "source": "iana" },
  "application/vnd.afpc.cmoca-cmresource": { "source": "iana" },
  "application/vnd.afpc.foca-charset": { "source": "iana" },
  "application/vnd.afpc.foca-codedfont": { "source": "iana" },
  "application/vnd.afpc.foca-codepage": { "source": "iana" },
  "application/vnd.afpc.modca": { "source": "iana" },
  "application/vnd.afpc.modca-cmtable": { "source": "iana" },
  "application/vnd.afpc.modca-formdef": { "source": "iana" },
  "application/vnd.afpc.modca-mediummap": { "source": "iana" },
  "application/vnd.afpc.modca-objectcontainer": { "source": "iana" },
  "application/vnd.afpc.modca-overlay": { "source": "iana" },
  "application/vnd.afpc.modca-pagesegment": { "source": "iana" },
  "application/vnd.age": { "source": "iana", "extensions": ["age"] },
  "application/vnd.ah-barcode": { "source": "iana" },
  "application/vnd.ahead.space": { "source": "iana", "extensions": ["ahead"] },
  "application/vnd.airzip.filesecure.azf": { "source": "iana", "extensions": ["azf"] },
  "application/vnd.airzip.filesecure.azs": { "source": "iana", "extensions": ["azs"] },
  "application/vnd.amadeus+json": { "source": "iana", "compressible": true },
  "application/vnd.amazon.ebook": { "source": "apache", "extensions": ["azw"] },
  "application/vnd.amazon.mobi8-ebook": { "source": "iana" },
  "application/vnd.americandynamics.acc": { "source": "iana", "extensions": ["acc"] },
  "application/vnd.amiga.ami": { "source": "iana", "extensions": ["ami"] },
  "application/vnd.amundsen.maze+xml": { "source": "iana", "compressible": true },
  "application/vnd.android.ota": { "source": "iana" },
  "application/vnd.android.package-archive": { "source": "apache", "compressible": false, "extensions": ["apk"] },
  "application/vnd.anki": { "source": "iana" },
  "application/vnd.anser-web-certificate-issue-initiation": { "source": "iana", "extensions": ["cii"] },
  "application/vnd.anser-web-funds-transfer-initiation": { "source": "apache", "extensions": ["fti"] },
  "application/vnd.antix.game-component": { "source": "iana", "extensions": ["atx"] },
  "application/vnd.apache.arrow.file": { "source": "iana" },
  "application/vnd.apache.arrow.stream": { "source": "iana" },
  "application/vnd.apache.thrift.binary": { "source": "iana" },
  "application/vnd.apache.thrift.compact": { "source": "iana" },
  "application/vnd.apache.thrift.json": { "source": "iana" },
  "application/vnd.api+json": { "source": "iana", "compressible": true },
  "application/vnd.aplextor.warrp+json": { "source": "iana", "compressible": true },
  "application/vnd.apothekende.reservation+json": { "source": "iana", "compressible": true },
  "application/vnd.apple.installer+xml": { "source": "iana", "compressible": true, "extensions": ["mpkg"] },
  "application/vnd.apple.keynote": { "source": "iana", "extensions": ["key"] },
  "application/vnd.apple.mpegurl": { "source": "iana", "extensions": ["m3u8"] },
  "application/vnd.apple.numbers": { "source": "iana", "extensions": ["numbers"] },
  "application/vnd.apple.pages": { "source": "iana", "extensions": ["pages"] },
  "application/vnd.apple.pkpass": { "compressible": false, "extensions": ["pkpass"] },
  "application/vnd.arastra.swi": { "source": "iana" },
  "application/vnd.aristanetworks.swi": { "source": "iana", "extensions": ["swi"] },
  "application/vnd.artisan+json": { "source": "iana", "compressible": true },
  "application/vnd.artsquare": { "source": "iana" },
  "application/vnd.astraea-software.iota": { "source": "iana", "extensions": ["iota"] },
  "application/vnd.audiograph": { "source": "iana", "extensions": ["aep"] },
  "application/vnd.autopackage": { "source": "iana" },
  "application/vnd.avalon+json": { "source": "iana", "compressible": true },
  "application/vnd.avistar+xml": { "source": "iana", "compressible": true },
  "application/vnd.balsamiq.bmml+xml": { "source": "iana", "compressible": true, "extensions": ["bmml"] },
  "application/vnd.balsamiq.bmpr": { "source": "iana" },
  "application/vnd.banana-accounting": { "source": "iana" },
  "application/vnd.bbf.usp.error": { "source": "iana" },
  "application/vnd.bbf.usp.msg": { "source": "iana" },
  "application/vnd.bbf.usp.msg+json": { "source": "iana", "compressible": true },
  "application/vnd.bekitzur-stech+json": { "source": "iana", "compressible": true },
  "application/vnd.bint.med-content": { "source": "iana" },
  "application/vnd.biopax.rdf+xml": { "source": "iana", "compressible": true },
  "application/vnd.blink-idb-value-wrapper": { "source": "iana" },
  "application/vnd.blueice.multipass": { "source": "iana", "extensions": ["mpm"] },
  "application/vnd.bluetooth.ep.oob": { "source": "iana" },
  "application/vnd.bluetooth.le.oob": { "source": "iana" },
  "application/vnd.bmi": { "source": "iana", "extensions": ["bmi"] },
  "application/vnd.bpf": { "source": "iana" },
  "application/vnd.bpf3": { "source": "iana" },
  "application/vnd.businessobjects": { "source": "iana", "extensions": ["rep"] },
  "application/vnd.byu.uapi+json": { "source": "iana", "compressible": true },
  "application/vnd.cab-jscript": { "source": "iana" },
  "application/vnd.canon-cpdl": { "source": "iana" },
  "application/vnd.canon-lips": { "source": "iana" },
  "application/vnd.capasystems-pg+json": { "source": "iana", "compressible": true },
  "application/vnd.cendio.thinlinc.clientconf": { "source": "iana" },
  "application/vnd.century-systems.tcp_stream": { "source": "iana" },
  "application/vnd.chemdraw+xml": { "source": "iana", "compressible": true, "extensions": ["cdxml"] },
  "application/vnd.chess-pgn": { "source": "iana" },
  "application/vnd.chipnuts.karaoke-mmd": { "source": "iana", "extensions": ["mmd"] },
  "application/vnd.ciedi": { "source": "iana" },
  "application/vnd.cinderella": { "source": "iana", "extensions": ["cdy"] },
  "application/vnd.cirpack.isdn-ext": { "source": "iana" },
  "application/vnd.citationstyles.style+xml": { "source": "iana", "compressible": true, "extensions": ["csl"] },
  "application/vnd.claymore": { "source": "iana", "extensions": ["cla"] },
  "application/vnd.cloanto.rp9": { "source": "iana", "extensions": ["rp9"] },
  "application/vnd.clonk.c4group": { "source": "iana", "extensions": ["c4g", "c4d", "c4f", "c4p", "c4u"] },
  "application/vnd.cluetrust.cartomobile-config": { "source": "iana", "extensions": ["c11amc"] },
  "application/vnd.cluetrust.cartomobile-config-pkg": { "source": "iana", "extensions": ["c11amz"] },
  "application/vnd.coffeescript": { "source": "iana" },
  "application/vnd.collabio.xodocuments.document": { "source": "iana" },
  "application/vnd.collabio.xodocuments.document-template": { "source": "iana" },
  "application/vnd.collabio.xodocuments.presentation": { "source": "iana" },
  "application/vnd.collabio.xodocuments.presentation-template": { "source": "iana" },
  "application/vnd.collabio.xodocuments.spreadsheet": { "source": "iana" },
  "application/vnd.collabio.xodocuments.spreadsheet-template": { "source": "iana" },
  "application/vnd.collection+json": { "source": "iana", "compressible": true },
  "application/vnd.collection.doc+json": { "source": "iana", "compressible": true },
  "application/vnd.collection.next+json": { "source": "iana", "compressible": true },
  "application/vnd.comicbook+zip": { "source": "iana", "compressible": false },
  "application/vnd.comicbook-rar": { "source": "iana" },
  "application/vnd.commerce-battelle": { "source": "iana" },
  "application/vnd.commonspace": { "source": "iana", "extensions": ["csp"] },
  "application/vnd.contact.cmsg": { "source": "iana", "extensions": ["cdbcmsg"] },
  "application/vnd.coreos.ignition+json": { "source": "iana", "compressible": true },
  "application/vnd.cosmocaller": { "source": "iana", "extensions": ["cmc"] },
  "application/vnd.crick.clicker": { "source": "iana", "extensions": ["clkx"] },
  "application/vnd.crick.clicker.keyboard": { "source": "iana", "extensions": ["clkk"] },
  "application/vnd.crick.clicker.palette": { "source": "iana", "extensions": ["clkp"] },
  "application/vnd.crick.clicker.template": { "source": "iana", "extensions": ["clkt"] },
  "application/vnd.crick.clicker.wordbank": { "source": "iana", "extensions": ["clkw"] },
  "application/vnd.criticaltools.wbs+xml": { "source": "iana", "compressible": true, "extensions": ["wbs"] },
  "application/vnd.cryptii.pipe+json": { "source": "iana", "compressible": true },
  "application/vnd.crypto-shade-file": { "source": "iana" },
  "application/vnd.cryptomator.encrypted": { "source": "iana" },
  "application/vnd.cryptomator.vault": { "source": "iana" },
  "application/vnd.ctc-posml": { "source": "iana", "extensions": ["pml"] },
  "application/vnd.ctct.ws+xml": { "source": "iana", "compressible": true },
  "application/vnd.cups-pdf": { "source": "iana" },
  "application/vnd.cups-postscript": { "source": "iana" },
  "application/vnd.cups-ppd": { "source": "iana", "extensions": ["ppd"] },
  "application/vnd.cups-raster": { "source": "iana" },
  "application/vnd.cups-raw": { "source": "iana" },
  "application/vnd.curl": { "source": "iana" },
  "application/vnd.curl.car": { "source": "apache", "extensions": ["car"] },
  "application/vnd.curl.pcurl": { "source": "apache", "extensions": ["pcurl"] },
  "application/vnd.cyan.dean.root+xml": { "source": "iana", "compressible": true },
  "application/vnd.cybank": { "source": "iana" },
  "application/vnd.cyclonedx+json": { "source": "iana", "compressible": true },
  "application/vnd.cyclonedx+xml": { "source": "iana", "compressible": true },
  "application/vnd.d2l.coursepackage1p0+zip": { "source": "iana", "compressible": false },
  "application/vnd.d3m-dataset": { "source": "iana" },
  "application/vnd.d3m-problem": { "source": "iana" },
  "application/vnd.dart": { "source": "iana", "compressible": true, "extensions": ["dart"] },
  "application/vnd.data-vision.rdz": { "source": "iana", "extensions": ["rdz"] },
  "application/vnd.datapackage+json": { "source": "iana", "compressible": true },
  "application/vnd.dataresource+json": { "source": "iana", "compressible": true },
  "application/vnd.dbf": { "source": "iana", "extensions": ["dbf"] },
  "application/vnd.debian.binary-package": { "source": "iana" },
  "application/vnd.dece.data": { "source": "iana", "extensions": ["uvf", "uvvf", "uvd", "uvvd"] },
  "application/vnd.dece.ttml+xml": { "source": "iana", "compressible": true, "extensions": ["uvt", "uvvt"] },
  "application/vnd.dece.unspecified": { "source": "iana", "extensions": ["uvx", "uvvx"] },
  "application/vnd.dece.zip": { "source": "iana", "extensions": ["uvz", "uvvz"] },
  "application/vnd.denovo.fcselayout-link": { "source": "iana", "extensions": ["fe_launch"] },
  "application/vnd.desmume.movie": { "source": "iana" },
  "application/vnd.dir-bi.plate-dl-nosuffix": { "source": "iana" },
  "application/vnd.dm.delegation+xml": { "source": "iana", "compressible": true },
  "application/vnd.dna": { "source": "iana", "extensions": ["dna"] },
  "application/vnd.document+json": { "source": "iana", "compressible": true },
  "application/vnd.dolby.mlp": { "source": "apache", "extensions": ["mlp"] },
  "application/vnd.dolby.mobile.1": { "source": "iana" },
  "application/vnd.dolby.mobile.2": { "source": "iana" },
  "application/vnd.doremir.scorecloud-binary-document": { "source": "iana" },
  "application/vnd.dpgraph": { "source": "iana", "extensions": ["dpg"] },
  "application/vnd.dreamfactory": { "source": "iana", "extensions": ["dfac"] },
  "application/vnd.drive+json": { "source": "iana", "compressible": true },
  "application/vnd.ds-keypoint": { "source": "apache", "extensions": ["kpxx"] },
  "application/vnd.dtg.local": { "source": "iana" },
  "application/vnd.dtg.local.flash": { "source": "iana" },
  "application/vnd.dtg.local.html": { "source": "iana" },
  "application/vnd.dvb.ait": { "source": "iana", "extensions": ["ait"] },
  "application/vnd.dvb.dvbisl+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.dvbj": { "source": "iana" },
  "application/vnd.dvb.esgcontainer": { "source": "iana" },
  "application/vnd.dvb.ipdcdftnotifaccess": { "source": "iana" },
  "application/vnd.dvb.ipdcesgaccess": { "source": "iana" },
  "application/vnd.dvb.ipdcesgaccess2": { "source": "iana" },
  "application/vnd.dvb.ipdcesgpdd": { "source": "iana" },
  "application/vnd.dvb.ipdcroaming": { "source": "iana" },
  "application/vnd.dvb.iptv.alfec-base": { "source": "iana" },
  "application/vnd.dvb.iptv.alfec-enhancement": { "source": "iana" },
  "application/vnd.dvb.notif-aggregate-root+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-container+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-generic+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-ia-msglist+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-ia-registration-request+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-ia-registration-response+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.notif-init+xml": { "source": "iana", "compressible": true },
  "application/vnd.dvb.pfr": { "source": "iana" },
  "application/vnd.dvb.service": { "source": "iana", "extensions": ["svc"] },
  "application/vnd.dxr": { "source": "iana" },
  "application/vnd.dynageo": { "source": "iana", "extensions": ["geo"] },
  "application/vnd.dzr": { "source": "iana" },
  "application/vnd.easykaraoke.cdgdownload": { "source": "iana" },
  "application/vnd.ecdis-update": { "source": "iana" },
  "application/vnd.ecip.rlp": { "source": "iana" },
  "application/vnd.eclipse.ditto+json": { "source": "iana", "compressible": true },
  "application/vnd.ecowin.chart": { "source": "iana", "extensions": ["mag"] },
  "application/vnd.ecowin.filerequest": { "source": "iana" },
  "application/vnd.ecowin.fileupdate": { "source": "iana" },
  "application/vnd.ecowin.series": { "source": "iana" },
  "application/vnd.ecowin.seriesrequest": { "source": "iana" },
  "application/vnd.ecowin.seriesupdate": { "source": "iana" },
  "application/vnd.efi.img": { "source": "iana" },
  "application/vnd.efi.iso": { "source": "iana" },
  "application/vnd.emclient.accessrequest+xml": { "source": "iana", "compressible": true },
  "application/vnd.enliven": { "source": "iana", "extensions": ["nml"] },
  "application/vnd.enphase.envoy": { "source": "iana" },
  "application/vnd.eprints.data+xml": { "source": "iana", "compressible": true },
  "application/vnd.epson.esf": { "source": "iana", "extensions": ["esf"] },
  "application/vnd.epson.msf": { "source": "iana", "extensions": ["msf"] },
  "application/vnd.epson.quickanime": { "source": "iana", "extensions": ["qam"] },
  "application/vnd.epson.salt": { "source": "iana", "extensions": ["slt"] },
  "application/vnd.epson.ssf": { "source": "iana", "extensions": ["ssf"] },
  "application/vnd.ericsson.quickcall": { "source": "iana" },
  "application/vnd.espass-espass+zip": { "source": "iana", "compressible": false },
  "application/vnd.eszigno3+xml": { "source": "iana", "compressible": true, "extensions": ["es3", "et3"] },
  "application/vnd.etsi.aoc+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.asic-e+zip": { "source": "iana", "compressible": false },
  "application/vnd.etsi.asic-s+zip": { "source": "iana", "compressible": false },
  "application/vnd.etsi.cug+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvcommand+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvdiscovery+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvprofile+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvsad-bc+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvsad-cod+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvsad-npvr+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvservice+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvsync+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.iptvueprofile+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.mcid+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.mheg5": { "source": "iana" },
  "application/vnd.etsi.overload-control-policy-dataset+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.pstn+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.sci+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.simservs+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.timestamp-token": { "source": "iana" },
  "application/vnd.etsi.tsl+xml": { "source": "iana", "compressible": true },
  "application/vnd.etsi.tsl.der": { "source": "iana" },
  "application/vnd.eu.kasparian.car+json": { "source": "iana", "compressible": true },
  "application/vnd.eudora.data": { "source": "iana" },
  "application/vnd.evolv.ecig.profile": { "source": "iana" },
  "application/vnd.evolv.ecig.settings": { "source": "iana" },
  "application/vnd.evolv.ecig.theme": { "source": "iana" },
  "application/vnd.exstream-empower+zip": { "source": "iana", "compressible": false },
  "application/vnd.exstream-package": { "source": "iana" },
  "application/vnd.ezpix-album": { "source": "iana", "extensions": ["ez2"] },
  "application/vnd.ezpix-package": { "source": "iana", "extensions": ["ez3"] },
  "application/vnd.f-secure.mobile": { "source": "iana" },
  "application/vnd.familysearch.gedcom+zip": { "source": "iana", "compressible": false },
  "application/vnd.fastcopy-disk-image": { "source": "iana" },
  "application/vnd.fdf": { "source": "iana", "extensions": ["fdf"] },
  "application/vnd.fdsn.mseed": { "source": "iana", "extensions": ["mseed"] },
  "application/vnd.fdsn.seed": { "source": "iana", "extensions": ["seed", "dataless"] },
  "application/vnd.ffsns": { "source": "iana" },
  "application/vnd.ficlab.flb+zip": { "source": "iana", "compressible": false },
  "application/vnd.filmit.zfc": { "source": "iana" },
  "application/vnd.fints": { "source": "iana" },
  "application/vnd.firemonkeys.cloudcell": { "source": "iana" },
  "application/vnd.flographit": { "source": "iana", "extensions": ["gph"] },
  "application/vnd.fluxtime.clip": { "source": "iana", "extensions": ["ftc"] },
  "application/vnd.font-fontforge-sfd": { "source": "iana" },
  "application/vnd.framemaker": { "source": "iana", "extensions": ["fm", "frame", "maker", "book"] },
  "application/vnd.frogans.fnc": { "source": "iana", "extensions": ["fnc"] },
  "application/vnd.frogans.ltf": { "source": "iana", "extensions": ["ltf"] },
  "application/vnd.fsc.weblaunch": { "source": "iana", "extensions": ["fsc"] },
  "application/vnd.fujifilm.fb.docuworks": { "source": "iana" },
  "application/vnd.fujifilm.fb.docuworks.binder": { "source": "iana" },
  "application/vnd.fujifilm.fb.docuworks.container": { "source": "iana" },
  "application/vnd.fujifilm.fb.jfi+xml": { "source": "iana", "compressible": true },
  "application/vnd.fujitsu.oasys": { "source": "iana", "extensions": ["oas"] },
  "application/vnd.fujitsu.oasys2": { "source": "iana", "extensions": ["oa2"] },
  "application/vnd.fujitsu.oasys3": { "source": "iana", "extensions": ["oa3"] },
  "application/vnd.fujitsu.oasysgp": { "source": "iana", "extensions": ["fg5"] },
  "application/vnd.fujitsu.oasysprs": { "source": "iana", "extensions": ["bh2"] },
  "application/vnd.fujixerox.art-ex": { "source": "iana" },
  "application/vnd.fujixerox.art4": { "source": "iana" },
  "application/vnd.fujixerox.ddd": { "source": "iana", "extensions": ["ddd"] },
  "application/vnd.fujixerox.docuworks": { "source": "iana", "extensions": ["xdw"] },
  "application/vnd.fujixerox.docuworks.binder": { "source": "iana", "extensions": ["xbd"] },
  "application/vnd.fujixerox.docuworks.container": { "source": "iana" },
  "application/vnd.fujixerox.hbpl": { "source": "iana" },
  "application/vnd.fut-misnet": { "source": "iana" },
  "application/vnd.futoin+cbor": { "source": "iana" },
  "application/vnd.futoin+json": { "source": "iana", "compressible": true },
  "application/vnd.fuzzysheet": { "source": "iana", "extensions": ["fzs"] },
  "application/vnd.genomatix.tuxedo": { "source": "iana", "extensions": ["txd"] },
  "application/vnd.gentics.grd+json": { "source": "iana", "compressible": true },
  "application/vnd.geo+json": { "source": "iana", "compressible": true },
  "application/vnd.geocube+xml": { "source": "iana", "compressible": true },
  "application/vnd.geogebra.file": { "source": "iana", "extensions": ["ggb"] },
  "application/vnd.geogebra.slides": { "source": "iana" },
  "application/vnd.geogebra.tool": { "source": "iana", "extensions": ["ggt"] },
  "application/vnd.geometry-explorer": { "source": "iana", "extensions": ["gex", "gre"] },
  "application/vnd.geonext": { "source": "iana", "extensions": ["gxt"] },
  "application/vnd.geoplan": { "source": "iana", "extensions": ["g2w"] },
  "application/vnd.geospace": { "source": "iana", "extensions": ["g3w"] },
  "application/vnd.gerber": { "source": "iana" },
  "application/vnd.globalplatform.card-content-mgt": { "source": "iana" },
  "application/vnd.globalplatform.card-content-mgt-response": { "source": "iana" },
  "application/vnd.gmx": { "source": "iana", "extensions": ["gmx"] },
  "application/vnd.google-apps.document": { "compressible": false, "extensions": ["gdoc"] },
  "application/vnd.google-apps.presentation": { "compressible": false, "extensions": ["gslides"] },
  "application/vnd.google-apps.spreadsheet": { "compressible": false, "extensions": ["gsheet"] },
  "application/vnd.google-earth.kml+xml": { "source": "iana", "compressible": true, "extensions": ["kml"] },
  "application/vnd.google-earth.kmz": { "source": "iana", "compressible": false, "extensions": ["kmz"] },
  "application/vnd.gov.sk.e-form+xml": { "source": "iana", "compressible": true },
  "application/vnd.gov.sk.e-form+zip": { "source": "iana", "compressible": false },
  "application/vnd.gov.sk.xmldatacontainer+xml": { "source": "iana", "compressible": true },
  "application/vnd.grafeq": { "source": "iana", "extensions": ["gqf", "gqs"] },
  "application/vnd.gridmp": { "source": "iana" },
  "application/vnd.groove-account": { "source": "iana", "extensions": ["gac"] },
  "application/vnd.groove-help": { "source": "iana", "extensions": ["ghf"] },
  "application/vnd.groove-identity-message": { "source": "iana", "extensions": ["gim"] },
  "application/vnd.groove-injector": { "source": "iana", "extensions": ["grv"] },
  "application/vnd.groove-tool-message": { "source": "iana", "extensions": ["gtm"] },
  "application/vnd.groove-tool-template": { "source": "iana", "extensions": ["tpl"] },
  "application/vnd.groove-vcard": { "source": "iana", "extensions": ["vcg"] },
  "application/vnd.hal+json": { "source": "iana", "compressible": true },
  "application/vnd.hal+xml": { "source": "iana", "compressible": true, "extensions": ["hal"] },
  "application/vnd.handheld-entertainment+xml": { "source": "iana", "compressible": true, "extensions": ["zmm"] },
  "application/vnd.hbci": { "source": "iana", "extensions": ["hbci"] },
  "application/vnd.hc+json": { "source": "iana", "compressible": true },
  "application/vnd.hcl-bireports": { "source": "iana" },
  "application/vnd.hdt": { "source": "iana" },
  "application/vnd.heroku+json": { "source": "iana", "compressible": true },
  "application/vnd.hhe.lesson-player": { "source": "iana", "extensions": ["les"] },
  "application/vnd.hl7cda+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.hl7v2+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.hp-hpgl": { "source": "iana", "extensions": ["hpgl"] },
  "application/vnd.hp-hpid": { "source": "iana", "extensions": ["hpid"] },
  "application/vnd.hp-hps": { "source": "iana", "extensions": ["hps"] },
  "application/vnd.hp-jlyt": { "source": "iana", "extensions": ["jlt"] },
  "application/vnd.hp-pcl": { "source": "iana", "extensions": ["pcl"] },
  "application/vnd.hp-pclxl": { "source": "iana", "extensions": ["pclxl"] },
  "application/vnd.httphone": { "source": "iana" },
  "application/vnd.hydrostatix.sof-data": { "source": "iana", "extensions": ["sfd-hdstx"] },
  "application/vnd.hyper+json": { "source": "iana", "compressible": true },
  "application/vnd.hyper-item+json": { "source": "iana", "compressible": true },
  "application/vnd.hyperdrive+json": { "source": "iana", "compressible": true },
  "application/vnd.hzn-3d-crossword": { "source": "iana" },
  "application/vnd.ibm.afplinedata": { "source": "iana" },
  "application/vnd.ibm.electronic-media": { "source": "iana" },
  "application/vnd.ibm.minipay": { "source": "iana", "extensions": ["mpy"] },
  "application/vnd.ibm.modcap": { "source": "iana", "extensions": ["afp", "listafp", "list3820"] },
  "application/vnd.ibm.rights-management": { "source": "iana", "extensions": ["irm"] },
  "application/vnd.ibm.secure-container": { "source": "iana", "extensions": ["sc"] },
  "application/vnd.iccprofile": { "source": "iana", "extensions": ["icc", "icm"] },
  "application/vnd.ieee.1905": { "source": "iana" },
  "application/vnd.igloader": { "source": "iana", "extensions": ["igl"] },
  "application/vnd.imagemeter.folder+zip": { "source": "iana", "compressible": false },
  "application/vnd.imagemeter.image+zip": { "source": "iana", "compressible": false },
  "application/vnd.immervision-ivp": { "source": "iana", "extensions": ["ivp"] },
  "application/vnd.immervision-ivu": { "source": "iana", "extensions": ["ivu"] },
  "application/vnd.ims.imsccv1p1": { "source": "iana" },
  "application/vnd.ims.imsccv1p2": { "source": "iana" },
  "application/vnd.ims.imsccv1p3": { "source": "iana" },
  "application/vnd.ims.lis.v2.result+json": { "source": "iana", "compressible": true },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": { "source": "iana", "compressible": true },
  "application/vnd.ims.lti.v2.toolproxy+json": { "source": "iana", "compressible": true },
  "application/vnd.ims.lti.v2.toolproxy.id+json": { "source": "iana", "compressible": true },
  "application/vnd.ims.lti.v2.toolsettings+json": { "source": "iana", "compressible": true },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": { "source": "iana", "compressible": true },
  "application/vnd.informedcontrol.rms+xml": { "source": "iana", "compressible": true },
  "application/vnd.informix-visionary": { "source": "iana" },
  "application/vnd.infotech.project": { "source": "iana" },
  "application/vnd.infotech.project+xml": { "source": "iana", "compressible": true },
  "application/vnd.innopath.wamp.notification": { "source": "iana" },
  "application/vnd.insors.igm": { "source": "iana", "extensions": ["igm"] },
  "application/vnd.intercon.formnet": { "source": "iana", "extensions": ["xpw", "xpx"] },
  "application/vnd.intergeo": { "source": "iana", "extensions": ["i2g"] },
  "application/vnd.intertrust.digibox": { "source": "iana" },
  "application/vnd.intertrust.nncp": { "source": "iana" },
  "application/vnd.intu.qbo": { "source": "iana", "extensions": ["qbo"] },
  "application/vnd.intu.qfx": { "source": "iana", "extensions": ["qfx"] },
  "application/vnd.iptc.g2.catalogitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.conceptitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.knowledgeitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.newsitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.newsmessage+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.packageitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.iptc.g2.planningitem+xml": { "source": "iana", "compressible": true },
  "application/vnd.ipunplugged.rcprofile": { "source": "iana", "extensions": ["rcprofile"] },
  "application/vnd.irepository.package+xml": { "source": "iana", "compressible": true, "extensions": ["irp"] },
  "application/vnd.is-xpr": { "source": "iana", "extensions": ["xpr"] },
  "application/vnd.isac.fcs": { "source": "iana", "extensions": ["fcs"] },
  "application/vnd.iso11783-10+zip": { "source": "iana", "compressible": false },
  "application/vnd.jam": { "source": "iana", "extensions": ["jam"] },
  "application/vnd.japannet-directory-service": { "source": "iana" },
  "application/vnd.japannet-jpnstore-wakeup": { "source": "iana" },
  "application/vnd.japannet-payment-wakeup": { "source": "iana" },
  "application/vnd.japannet-registration": { "source": "iana" },
  "application/vnd.japannet-registration-wakeup": { "source": "iana" },
  "application/vnd.japannet-setstore-wakeup": { "source": "iana" },
  "application/vnd.japannet-verification": { "source": "iana" },
  "application/vnd.japannet-verification-wakeup": { "source": "iana" },
  "application/vnd.jcp.javame.midlet-rms": { "source": "iana", "extensions": ["rms"] },
  "application/vnd.jisp": { "source": "iana", "extensions": ["jisp"] },
  "application/vnd.joost.joda-archive": { "source": "iana", "extensions": ["joda"] },
  "application/vnd.jsk.isdn-ngn": { "source": "iana" },
  "application/vnd.kahootz": { "source": "iana", "extensions": ["ktz", "ktr"] },
  "application/vnd.kde.karbon": { "source": "iana", "extensions": ["karbon"] },
  "application/vnd.kde.kchart": { "source": "iana", "extensions": ["chrt"] },
  "application/vnd.kde.kformula": { "source": "iana", "extensions": ["kfo"] },
  "application/vnd.kde.kivio": { "source": "iana", "extensions": ["flw"] },
  "application/vnd.kde.kontour": { "source": "iana", "extensions": ["kon"] },
  "application/vnd.kde.kpresenter": { "source": "iana", "extensions": ["kpr", "kpt"] },
  "application/vnd.kde.kspread": { "source": "iana", "extensions": ["ksp"] },
  "application/vnd.kde.kword": { "source": "iana", "extensions": ["kwd", "kwt"] },
  "application/vnd.kenameaapp": { "source": "iana", "extensions": ["htke"] },
  "application/vnd.kidspiration": { "source": "iana", "extensions": ["kia"] },
  "application/vnd.kinar": { "source": "iana", "extensions": ["kne", "knp"] },
  "application/vnd.koan": { "source": "iana", "extensions": ["skp", "skd", "skt", "skm"] },
  "application/vnd.kodak-descriptor": { "source": "iana", "extensions": ["sse"] },
  "application/vnd.las": { "source": "iana" },
  "application/vnd.las.las+json": { "source": "iana", "compressible": true },
  "application/vnd.las.las+xml": { "source": "iana", "compressible": true, "extensions": ["lasxml"] },
  "application/vnd.laszip": { "source": "iana" },
  "application/vnd.leap+json": { "source": "iana", "compressible": true },
  "application/vnd.liberty-request+xml": { "source": "iana", "compressible": true },
  "application/vnd.llamagraphics.life-balance.desktop": { "source": "iana", "extensions": ["lbd"] },
  "application/vnd.llamagraphics.life-balance.exchange+xml": { "source": "iana", "compressible": true, "extensions": ["lbe"] },
  "application/vnd.logipipe.circuit+zip": { "source": "iana", "compressible": false },
  "application/vnd.loom": { "source": "iana" },
  "application/vnd.lotus-1-2-3": { "source": "iana", "extensions": ["123"] },
  "application/vnd.lotus-approach": { "source": "iana", "extensions": ["apr"] },
  "application/vnd.lotus-freelance": { "source": "iana", "extensions": ["pre"] },
  "application/vnd.lotus-notes": { "source": "iana", "extensions": ["nsf"] },
  "application/vnd.lotus-organizer": { "source": "iana", "extensions": ["org"] },
  "application/vnd.lotus-screencam": { "source": "iana", "extensions": ["scm"] },
  "application/vnd.lotus-wordpro": { "source": "iana", "extensions": ["lwp"] },
  "application/vnd.macports.portpkg": { "source": "iana", "extensions": ["portpkg"] },
  "application/vnd.mapbox-vector-tile": { "source": "iana", "extensions": ["mvt"] },
  "application/vnd.marlin.drm.actiontoken+xml": { "source": "iana", "compressible": true },
  "application/vnd.marlin.drm.conftoken+xml": { "source": "iana", "compressible": true },
  "application/vnd.marlin.drm.license+xml": { "source": "iana", "compressible": true },
  "application/vnd.marlin.drm.mdcf": { "source": "iana" },
  "application/vnd.mason+json": { "source": "iana", "compressible": true },
  "application/vnd.maxar.archive.3tz+zip": { "source": "iana", "compressible": false },
  "application/vnd.maxmind.maxmind-db": { "source": "iana" },
  "application/vnd.mcd": { "source": "iana", "extensions": ["mcd"] },
  "application/vnd.medcalcdata": { "source": "iana", "extensions": ["mc1"] },
  "application/vnd.mediastation.cdkey": { "source": "iana", "extensions": ["cdkey"] },
  "application/vnd.meridian-slingshot": { "source": "iana" },
  "application/vnd.mfer": { "source": "iana", "extensions": ["mwf"] },
  "application/vnd.mfmp": { "source": "iana", "extensions": ["mfm"] },
  "application/vnd.micro+json": { "source": "iana", "compressible": true },
  "application/vnd.micrografx.flo": { "source": "iana", "extensions": ["flo"] },
  "application/vnd.micrografx.igx": { "source": "iana", "extensions": ["igx"] },
  "application/vnd.microsoft.portable-executable": { "source": "iana" },
  "application/vnd.microsoft.windows.thumbnail-cache": { "source": "iana" },
  "application/vnd.miele+json": { "source": "iana", "compressible": true },
  "application/vnd.mif": { "source": "iana", "extensions": ["mif"] },
  "application/vnd.minisoft-hp3000-save": { "source": "iana" },
  "application/vnd.mitsubishi.misty-guard.trustweb": { "source": "iana" },
  "application/vnd.mobius.daf": { "source": "iana", "extensions": ["daf"] },
  "application/vnd.mobius.dis": { "source": "iana", "extensions": ["dis"] },
  "application/vnd.mobius.mbk": { "source": "iana", "extensions": ["mbk"] },
  "application/vnd.mobius.mqy": { "source": "iana", "extensions": ["mqy"] },
  "application/vnd.mobius.msl": { "source": "iana", "extensions": ["msl"] },
  "application/vnd.mobius.plc": { "source": "iana", "extensions": ["plc"] },
  "application/vnd.mobius.txf": { "source": "iana", "extensions": ["txf"] },
  "application/vnd.mophun.application": { "source": "iana", "extensions": ["mpn"] },
  "application/vnd.mophun.certificate": { "source": "iana", "extensions": ["mpc"] },
  "application/vnd.motorola.flexsuite": { "source": "iana" },
  "application/vnd.motorola.flexsuite.adsi": { "source": "iana" },
  "application/vnd.motorola.flexsuite.fis": { "source": "iana" },
  "application/vnd.motorola.flexsuite.gotap": { "source": "iana" },
  "application/vnd.motorola.flexsuite.kmr": { "source": "iana" },
  "application/vnd.motorola.flexsuite.ttc": { "source": "iana" },
  "application/vnd.motorola.flexsuite.wem": { "source": "iana" },
  "application/vnd.motorola.iprm": { "source": "iana" },
  "application/vnd.mozilla.xul+xml": { "source": "iana", "compressible": true, "extensions": ["xul"] },
  "application/vnd.ms-3mfdocument": { "source": "iana" },
  "application/vnd.ms-artgalry": { "source": "iana", "extensions": ["cil"] },
  "application/vnd.ms-asf": { "source": "iana" },
  "application/vnd.ms-cab-compressed": { "source": "iana", "extensions": ["cab"] },
  "application/vnd.ms-color.iccprofile": { "source": "apache" },
  "application/vnd.ms-excel": { "source": "iana", "compressible": false, "extensions": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"] },
  "application/vnd.ms-excel.addin.macroenabled.12": { "source": "iana", "extensions": ["xlam"] },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": { "source": "iana", "extensions": ["xlsb"] },
  "application/vnd.ms-excel.sheet.macroenabled.12": { "source": "iana", "extensions": ["xlsm"] },
  "application/vnd.ms-excel.template.macroenabled.12": { "source": "iana", "extensions": ["xltm"] },
  "application/vnd.ms-fontobject": { "source": "iana", "compressible": true, "extensions": ["eot"] },
  "application/vnd.ms-htmlhelp": { "source": "iana", "extensions": ["chm"] },
  "application/vnd.ms-ims": { "source": "iana", "extensions": ["ims"] },
  "application/vnd.ms-lrm": { "source": "iana", "extensions": ["lrm"] },
  "application/vnd.ms-office.activex+xml": { "source": "iana", "compressible": true },
  "application/vnd.ms-officetheme": { "source": "iana", "extensions": ["thmx"] },
  "application/vnd.ms-opentype": { "source": "apache", "compressible": true },
  "application/vnd.ms-outlook": { "compressible": false, "extensions": ["msg"] },
  "application/vnd.ms-package.obfuscated-opentype": { "source": "apache" },
  "application/vnd.ms-pki.seccat": { "source": "apache", "extensions": ["cat"] },
  "application/vnd.ms-pki.stl": { "source": "apache", "extensions": ["stl"] },
  "application/vnd.ms-playready.initiator+xml": { "source": "iana", "compressible": true },
  "application/vnd.ms-powerpoint": { "source": "iana", "compressible": false, "extensions": ["ppt", "pps", "pot"] },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": { "source": "iana", "extensions": ["ppam"] },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": { "source": "iana", "extensions": ["pptm"] },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": { "source": "iana", "extensions": ["sldm"] },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": { "source": "iana", "extensions": ["ppsm"] },
  "application/vnd.ms-powerpoint.template.macroenabled.12": { "source": "iana", "extensions": ["potm"] },
  "application/vnd.ms-printdevicecapabilities+xml": { "source": "iana", "compressible": true },
  "application/vnd.ms-printing.printticket+xml": { "source": "apache", "compressible": true },
  "application/vnd.ms-printschematicket+xml": { "source": "iana", "compressible": true },
  "application/vnd.ms-project": { "source": "iana", "extensions": ["mpp", "mpt"] },
  "application/vnd.ms-tnef": { "source": "iana" },
  "application/vnd.ms-windows.devicepairing": { "source": "iana" },
  "application/vnd.ms-windows.nwprinting.oob": { "source": "iana" },
  "application/vnd.ms-windows.printerpairing": { "source": "iana" },
  "application/vnd.ms-windows.wsd.oob": { "source": "iana" },
  "application/vnd.ms-wmdrm.lic-chlg-req": { "source": "iana" },
  "application/vnd.ms-wmdrm.lic-resp": { "source": "iana" },
  "application/vnd.ms-wmdrm.meter-chlg-req": { "source": "iana" },
  "application/vnd.ms-wmdrm.meter-resp": { "source": "iana" },
  "application/vnd.ms-word.document.macroenabled.12": { "source": "iana", "extensions": ["docm"] },
  "application/vnd.ms-word.template.macroenabled.12": { "source": "iana", "extensions": ["dotm"] },
  "application/vnd.ms-works": { "source": "iana", "extensions": ["wps", "wks", "wcm", "wdb"] },
  "application/vnd.ms-wpl": { "source": "iana", "extensions": ["wpl"] },
  "application/vnd.ms-xpsdocument": { "source": "iana", "compressible": false, "extensions": ["xps"] },
  "application/vnd.msa-disk-image": { "source": "iana" },
  "application/vnd.mseq": { "source": "iana", "extensions": ["mseq"] },
  "application/vnd.msign": { "source": "iana" },
  "application/vnd.multiad.creator": { "source": "iana" },
  "application/vnd.multiad.creator.cif": { "source": "iana" },
  "application/vnd.music-niff": { "source": "iana" },
  "application/vnd.musician": { "source": "iana", "extensions": ["mus"] },
  "application/vnd.muvee.style": { "source": "iana", "extensions": ["msty"] },
  "application/vnd.mynfc": { "source": "iana", "extensions": ["taglet"] },
  "application/vnd.nacamar.ybrid+json": { "source": "iana", "compressible": true },
  "application/vnd.ncd.control": { "source": "iana" },
  "application/vnd.ncd.reference": { "source": "iana" },
  "application/vnd.nearst.inv+json": { "source": "iana", "compressible": true },
  "application/vnd.nebumind.line": { "source": "iana" },
  "application/vnd.nervana": { "source": "iana" },
  "application/vnd.netfpx": { "source": "iana" },
  "application/vnd.neurolanguage.nlu": { "source": "iana", "extensions": ["nlu"] },
  "application/vnd.nimn": { "source": "iana" },
  "application/vnd.nintendo.nitro.rom": { "source": "iana" },
  "application/vnd.nintendo.snes.rom": { "source": "iana" },
  "application/vnd.nitf": { "source": "iana", "extensions": ["ntf", "nitf"] },
  "application/vnd.noblenet-directory": { "source": "iana", "extensions": ["nnd"] },
  "application/vnd.noblenet-sealer": { "source": "iana", "extensions": ["nns"] },
  "application/vnd.noblenet-web": { "source": "iana", "extensions": ["nnw"] },
  "application/vnd.nokia.catalogs": { "source": "iana" },
  "application/vnd.nokia.conml+wbxml": { "source": "iana" },
  "application/vnd.nokia.conml+xml": { "source": "iana", "compressible": true },
  "application/vnd.nokia.iptv.config+xml": { "source": "iana", "compressible": true },
  "application/vnd.nokia.isds-radio-presets": { "source": "iana" },
  "application/vnd.nokia.landmark+wbxml": { "source": "iana" },
  "application/vnd.nokia.landmark+xml": { "source": "iana", "compressible": true },
  "application/vnd.nokia.landmarkcollection+xml": { "source": "iana", "compressible": true },
  "application/vnd.nokia.n-gage.ac+xml": { "source": "iana", "compressible": true, "extensions": ["ac"] },
  "application/vnd.nokia.n-gage.data": { "source": "iana", "extensions": ["ngdat"] },
  "application/vnd.nokia.n-gage.symbian.install": { "source": "iana", "extensions": ["n-gage"] },
  "application/vnd.nokia.ncd": { "source": "iana" },
  "application/vnd.nokia.pcd+wbxml": { "source": "iana" },
  "application/vnd.nokia.pcd+xml": { "source": "iana", "compressible": true },
  "application/vnd.nokia.radio-preset": { "source": "iana", "extensions": ["rpst"] },
  "application/vnd.nokia.radio-presets": { "source": "iana", "extensions": ["rpss"] },
  "application/vnd.novadigm.edm": { "source": "iana", "extensions": ["edm"] },
  "application/vnd.novadigm.edx": { "source": "iana", "extensions": ["edx"] },
  "application/vnd.novadigm.ext": { "source": "iana", "extensions": ["ext"] },
  "application/vnd.ntt-local.content-share": { "source": "iana" },
  "application/vnd.ntt-local.file-transfer": { "source": "iana" },
  "application/vnd.ntt-local.ogw_remote-access": { "source": "iana" },
  "application/vnd.ntt-local.sip-ta_remote": { "source": "iana" },
  "application/vnd.ntt-local.sip-ta_tcp_stream": { "source": "iana" },
  "application/vnd.oasis.opendocument.chart": { "source": "iana", "extensions": ["odc"] },
  "application/vnd.oasis.opendocument.chart-template": { "source": "iana", "extensions": ["otc"] },
  "application/vnd.oasis.opendocument.database": { "source": "iana", "extensions": ["odb"] },
  "application/vnd.oasis.opendocument.formula": { "source": "iana", "extensions": ["odf"] },
  "application/vnd.oasis.opendocument.formula-template": { "source": "iana", "extensions": ["odft"] },
  "application/vnd.oasis.opendocument.graphics": { "source": "iana", "compressible": false, "extensions": ["odg"] },
  "application/vnd.oasis.opendocument.graphics-template": { "source": "iana", "extensions": ["otg"] },
  "application/vnd.oasis.opendocument.image": { "source": "iana", "extensions": ["odi"] },
  "application/vnd.oasis.opendocument.image-template": { "source": "iana", "extensions": ["oti"] },
  "application/vnd.oasis.opendocument.presentation": { "source": "iana", "compressible": false, "extensions": ["odp"] },
  "application/vnd.oasis.opendocument.presentation-template": { "source": "iana", "extensions": ["otp"] },
  "application/vnd.oasis.opendocument.spreadsheet": { "source": "iana", "compressible": false, "extensions": ["ods"] },
  "application/vnd.oasis.opendocument.spreadsheet-template": { "source": "iana", "extensions": ["ots"] },
  "application/vnd.oasis.opendocument.text": { "source": "iana", "compressible": false, "extensions": ["odt"] },
  "application/vnd.oasis.opendocument.text-master": { "source": "iana", "extensions": ["odm"] },
  "application/vnd.oasis.opendocument.text-template": { "source": "iana", "extensions": ["ott"] },
  "application/vnd.oasis.opendocument.text-web": { "source": "iana", "extensions": ["oth"] },
  "application/vnd.obn": { "source": "iana" },
  "application/vnd.ocf+cbor": { "source": "iana" },
  "application/vnd.oci.image.manifest.v1+json": { "source": "iana", "compressible": true },
  "application/vnd.oftn.l10n+json": { "source": "iana", "compressible": true },
  "application/vnd.oipf.contentaccessdownload+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.contentaccessstreaming+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.cspg-hexbinary": { "source": "iana" },
  "application/vnd.oipf.dae.svg+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.dae.xhtml+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.mippvcontrolmessage+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.pae.gem": { "source": "iana" },
  "application/vnd.oipf.spdiscovery+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.spdlist+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.ueprofile+xml": { "source": "iana", "compressible": true },
  "application/vnd.oipf.userprofile+xml": { "source": "iana", "compressible": true },
  "application/vnd.olpc-sugar": { "source": "iana", "extensions": ["xo"] },
  "application/vnd.oma-scws-config": { "source": "iana" },
  "application/vnd.oma-scws-http-request": { "source": "iana" },
  "application/vnd.oma-scws-http-response": { "source": "iana" },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.drm-trigger+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.imd+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.ltkm": { "source": "iana" },
  "application/vnd.oma.bcast.notification+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.provisioningtrigger": { "source": "iana" },
  "application/vnd.oma.bcast.sgboot": { "source": "iana" },
  "application/vnd.oma.bcast.sgdd+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.sgdu": { "source": "iana" },
  "application/vnd.oma.bcast.simple-symbol-container": { "source": "iana" },
  "application/vnd.oma.bcast.smartcard-trigger+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.sprov+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.bcast.stkm": { "source": "iana" },
  "application/vnd.oma.cab-address-book+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.cab-feature-handler+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.cab-pcc+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.cab-subs-invite+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.cab-user-prefs+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.dcd": { "source": "iana" },
  "application/vnd.oma.dcdc": { "source": "iana" },
  "application/vnd.oma.dd2+xml": { "source": "iana", "compressible": true, "extensions": ["dd2"] },
  "application/vnd.oma.drm.risd+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.group-usage-list+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.lwm2m+cbor": { "source": "iana" },
  "application/vnd.oma.lwm2m+json": { "source": "iana", "compressible": true },
  "application/vnd.oma.lwm2m+tlv": { "source": "iana" },
  "application/vnd.oma.pal+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.poc.detailed-progress-report+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.poc.final-report+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.poc.groups+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.poc.invocation-descriptor+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.poc.optimized-progress-report+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.push": { "source": "iana" },
  "application/vnd.oma.scidm.messages+xml": { "source": "iana", "compressible": true },
  "application/vnd.oma.xcap-directory+xml": { "source": "iana", "compressible": true },
  "application/vnd.omads-email+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.omads-file+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.omads-folder+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.omaloc-supl-init": { "source": "iana" },
  "application/vnd.onepager": { "source": "iana" },
  "application/vnd.onepagertamp": { "source": "iana" },
  "application/vnd.onepagertamx": { "source": "iana" },
  "application/vnd.onepagertat": { "source": "iana" },
  "application/vnd.onepagertatp": { "source": "iana" },
  "application/vnd.onepagertatx": { "source": "iana" },
  "application/vnd.openblox.game+xml": { "source": "iana", "compressible": true, "extensions": ["obgx"] },
  "application/vnd.openblox.game-binary": { "source": "iana" },
  "application/vnd.openeye.oeb": { "source": "iana" },
  "application/vnd.openofficeorg.extension": { "source": "apache", "extensions": ["oxt"] },
  "application/vnd.openstreetmap.data+xml": { "source": "iana", "compressible": true, "extensions": ["osm"] },
  "application/vnd.opentimestamps.ots": { "source": "iana" },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawing+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": { "source": "iana", "compressible": false, "extensions": ["pptx"] },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": { "source": "iana", "extensions": ["sldx"] },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": { "source": "iana", "extensions": ["ppsx"] },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.template": { "source": "iana", "extensions": ["potx"] },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": { "source": "iana", "compressible": false, "extensions": ["xlsx"] },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": { "source": "iana", "extensions": ["xltx"] },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.theme+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.vmldrawing": { "source": "iana" },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": { "source": "iana", "compressible": false, "extensions": ["docx"] },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": { "source": "iana", "extensions": ["dotx"] },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-package.core-properties+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": { "source": "iana", "compressible": true },
  "application/vnd.openxmlformats-package.relationships+xml": { "source": "iana", "compressible": true },
  "application/vnd.oracle.resource+json": { "source": "iana", "compressible": true },
  "application/vnd.orange.indata": { "source": "iana" },
  "application/vnd.osa.netdeploy": { "source": "iana" },
  "application/vnd.osgeo.mapguide.package": { "source": "iana", "extensions": ["mgp"] },
  "application/vnd.osgi.bundle": { "source": "iana" },
  "application/vnd.osgi.dp": { "source": "iana", "extensions": ["dp"] },
  "application/vnd.osgi.subsystem": { "source": "iana", "extensions": ["esa"] },
  "application/vnd.otps.ct-kip+xml": { "source": "iana", "compressible": true },
  "application/vnd.oxli.countgraph": { "source": "iana" },
  "application/vnd.pagerduty+json": { "source": "iana", "compressible": true },
  "application/vnd.palm": { "source": "iana", "extensions": ["pdb", "pqa", "oprc"] },
  "application/vnd.panoply": { "source": "iana" },
  "application/vnd.paos.xml": { "source": "iana" },
  "application/vnd.patentdive": { "source": "iana" },
  "application/vnd.patientecommsdoc": { "source": "iana" },
  "application/vnd.pawaafile": { "source": "iana", "extensions": ["paw"] },
  "application/vnd.pcos": { "source": "iana" },
  "application/vnd.pg.format": { "source": "iana", "extensions": ["str"] },
  "application/vnd.pg.osasli": { "source": "iana", "extensions": ["ei6"] },
  "application/vnd.piaccess.application-licence": { "source": "iana" },
  "application/vnd.picsel": { "source": "iana", "extensions": ["efif"] },
  "application/vnd.pmi.widget": { "source": "iana", "extensions": ["wg"] },
  "application/vnd.poc.group-advertisement+xml": { "source": "iana", "compressible": true },
  "application/vnd.pocketlearn": { "source": "iana", "extensions": ["plf"] },
  "application/vnd.powerbuilder6": { "source": "iana", "extensions": ["pbd"] },
  "application/vnd.powerbuilder6-s": { "source": "iana" },
  "application/vnd.powerbuilder7": { "source": "iana" },
  "application/vnd.powerbuilder7-s": { "source": "iana" },
  "application/vnd.powerbuilder75": { "source": "iana" },
  "application/vnd.powerbuilder75-s": { "source": "iana" },
  "application/vnd.preminet": { "source": "iana" },
  "application/vnd.previewsystems.box": { "source": "iana", "extensions": ["box"] },
  "application/vnd.proteus.magazine": { "source": "iana", "extensions": ["mgz"] },
  "application/vnd.psfs": { "source": "iana" },
  "application/vnd.publishare-delta-tree": { "source": "iana", "extensions": ["qps"] },
  "application/vnd.pvi.ptid1": { "source": "iana", "extensions": ["ptid"] },
  "application/vnd.pwg-multiplexed": { "source": "iana" },
  "application/vnd.pwg-xhtml-print+xml": { "source": "iana", "compressible": true },
  "application/vnd.qualcomm.brew-app-res": { "source": "iana" },
  "application/vnd.quarantainenet": { "source": "iana" },
  "application/vnd.quark.quarkxpress": { "source": "iana", "extensions": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"] },
  "application/vnd.quobject-quoxdocument": { "source": "iana" },
  "application/vnd.radisys.moml+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-audit+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-audit-conf+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-audit-conn+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-audit-dialog+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-audit-stream+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-conf+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-base+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-group+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-speech+xml": { "source": "iana", "compressible": true },
  "application/vnd.radisys.msml-dialog-transform+xml": { "source": "iana", "compressible": true },
  "application/vnd.rainstor.data": { "source": "iana" },
  "application/vnd.rapid": { "source": "iana" },
  "application/vnd.rar": { "source": "iana", "extensions": ["rar"] },
  "application/vnd.realvnc.bed": { "source": "iana", "extensions": ["bed"] },
  "application/vnd.recordare.musicxml": { "source": "iana", "extensions": ["mxl"] },
  "application/vnd.recordare.musicxml+xml": { "source": "iana", "compressible": true, "extensions": ["musicxml"] },
  "application/vnd.renlearn.rlprint": { "source": "iana" },
  "application/vnd.resilient.logic": { "source": "iana" },
  "application/vnd.restful+json": { "source": "iana", "compressible": true },
  "application/vnd.rig.cryptonote": { "source": "iana", "extensions": ["cryptonote"] },
  "application/vnd.rim.cod": { "source": "apache", "extensions": ["cod"] },
  "application/vnd.rn-realmedia": { "source": "apache", "extensions": ["rm"] },
  "application/vnd.rn-realmedia-vbr": { "source": "apache", "extensions": ["rmvb"] },
  "application/vnd.route66.link66+xml": { "source": "iana", "compressible": true, "extensions": ["link66"] },
  "application/vnd.rs-274x": { "source": "iana" },
  "application/vnd.ruckus.download": { "source": "iana" },
  "application/vnd.s3sms": { "source": "iana" },
  "application/vnd.sailingtracker.track": { "source": "iana", "extensions": ["st"] },
  "application/vnd.sar": { "source": "iana" },
  "application/vnd.sbm.cid": { "source": "iana" },
  "application/vnd.sbm.mid2": { "source": "iana" },
  "application/vnd.scribus": { "source": "iana" },
  "application/vnd.sealed.3df": { "source": "iana" },
  "application/vnd.sealed.csf": { "source": "iana" },
  "application/vnd.sealed.doc": { "source": "iana" },
  "application/vnd.sealed.eml": { "source": "iana" },
  "application/vnd.sealed.mht": { "source": "iana" },
  "application/vnd.sealed.net": { "source": "iana" },
  "application/vnd.sealed.ppt": { "source": "iana" },
  "application/vnd.sealed.tiff": { "source": "iana" },
  "application/vnd.sealed.xls": { "source": "iana" },
  "application/vnd.sealedmedia.softseal.html": { "source": "iana" },
  "application/vnd.sealedmedia.softseal.pdf": { "source": "iana" },
  "application/vnd.seemail": { "source": "iana", "extensions": ["see"] },
  "application/vnd.seis+json": { "source": "iana", "compressible": true },
  "application/vnd.sema": { "source": "iana", "extensions": ["sema"] },
  "application/vnd.semd": { "source": "iana", "extensions": ["semd"] },
  "application/vnd.semf": { "source": "iana", "extensions": ["semf"] },
  "application/vnd.shade-save-file": { "source": "iana" },
  "application/vnd.shana.informed.formdata": { "source": "iana", "extensions": ["ifm"] },
  "application/vnd.shana.informed.formtemplate": { "source": "iana", "extensions": ["itp"] },
  "application/vnd.shana.informed.interchange": { "source": "iana", "extensions": ["iif"] },
  "application/vnd.shana.informed.package": { "source": "iana", "extensions": ["ipk"] },
  "application/vnd.shootproof+json": { "source": "iana", "compressible": true },
  "application/vnd.shopkick+json": { "source": "iana", "compressible": true },
  "application/vnd.shp": { "source": "iana" },
  "application/vnd.shx": { "source": "iana" },
  "application/vnd.sigrok.session": { "source": "iana" },
  "application/vnd.simtech-mindmapper": { "source": "iana", "extensions": ["twd", "twds"] },
  "application/vnd.siren+json": { "source": "iana", "compressible": true },
  "application/vnd.smaf": { "source": "iana", "extensions": ["mmf"] },
  "application/vnd.smart.notebook": { "source": "iana" },
  "application/vnd.smart.teacher": { "source": "iana", "extensions": ["teacher"] },
  "application/vnd.snesdev-page-table": { "source": "iana" },
  "application/vnd.software602.filler.form+xml": { "source": "iana", "compressible": true, "extensions": ["fo"] },
  "application/vnd.software602.filler.form-xml-zip": { "source": "iana" },
  "application/vnd.solent.sdkm+xml": { "source": "iana", "compressible": true, "extensions": ["sdkm", "sdkd"] },
  "application/vnd.spotfire.dxp": { "source": "iana", "extensions": ["dxp"] },
  "application/vnd.spotfire.sfs": { "source": "iana", "extensions": ["sfs"] },
  "application/vnd.sqlite3": { "source": "iana" },
  "application/vnd.sss-cod": { "source": "iana" },
  "application/vnd.sss-dtf": { "source": "iana" },
  "application/vnd.sss-ntf": { "source": "iana" },
  "application/vnd.stardivision.calc": { "source": "apache", "extensions": ["sdc"] },
  "application/vnd.stardivision.draw": { "source": "apache", "extensions": ["sda"] },
  "application/vnd.stardivision.impress": { "source": "apache", "extensions": ["sdd"] },
  "application/vnd.stardivision.math": { "source": "apache", "extensions": ["smf"] },
  "application/vnd.stardivision.writer": { "source": "apache", "extensions": ["sdw", "vor"] },
  "application/vnd.stardivision.writer-global": { "source": "apache", "extensions": ["sgl"] },
  "application/vnd.stepmania.package": { "source": "iana", "extensions": ["smzip"] },
  "application/vnd.stepmania.stepchart": { "source": "iana", "extensions": ["sm"] },
  "application/vnd.street-stream": { "source": "iana" },
  "application/vnd.sun.wadl+xml": { "source": "iana", "compressible": true, "extensions": ["wadl"] },
  "application/vnd.sun.xml.calc": { "source": "apache", "extensions": ["sxc"] },
  "application/vnd.sun.xml.calc.template": { "source": "apache", "extensions": ["stc"] },
  "application/vnd.sun.xml.draw": { "source": "apache", "extensions": ["sxd"] },
  "application/vnd.sun.xml.draw.template": { "source": "apache", "extensions": ["std"] },
  "application/vnd.sun.xml.impress": { "source": "apache", "extensions": ["sxi"] },
  "application/vnd.sun.xml.impress.template": { "source": "apache", "extensions": ["sti"] },
  "application/vnd.sun.xml.math": { "source": "apache", "extensions": ["sxm"] },
  "application/vnd.sun.xml.writer": { "source": "apache", "extensions": ["sxw"] },
  "application/vnd.sun.xml.writer.global": { "source": "apache", "extensions": ["sxg"] },
  "application/vnd.sun.xml.writer.template": { "source": "apache", "extensions": ["stw"] },
  "application/vnd.sus-calendar": { "source": "iana", "extensions": ["sus", "susp"] },
  "application/vnd.svd": { "source": "iana", "extensions": ["svd"] },
  "application/vnd.swiftview-ics": { "source": "iana" },
  "application/vnd.sycle+xml": { "source": "iana", "compressible": true },
  "application/vnd.syft+json": { "source": "iana", "compressible": true },
  "application/vnd.symbian.install": { "source": "apache", "extensions": ["sis", "sisx"] },
  "application/vnd.syncml+xml": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["xsm"] },
  "application/vnd.syncml.dm+wbxml": { "source": "iana", "charset": "UTF-8", "extensions": ["bdm"] },
  "application/vnd.syncml.dm+xml": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["xdm"] },
  "application/vnd.syncml.dm.notification": { "source": "iana" },
  "application/vnd.syncml.dmddf+wbxml": { "source": "iana" },
  "application/vnd.syncml.dmddf+xml": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["ddf"] },
  "application/vnd.syncml.dmtnds+wbxml": { "source": "iana" },
  "application/vnd.syncml.dmtnds+xml": { "source": "iana", "charset": "UTF-8", "compressible": true },
  "application/vnd.syncml.ds.notification": { "source": "iana" },
  "application/vnd.tableschema+json": { "source": "iana", "compressible": true },
  "application/vnd.tao.intent-module-archive": { "source": "iana", "extensions": ["tao"] },
  "application/vnd.tcpdump.pcap": { "source": "iana", "extensions": ["pcap", "cap", "dmp"] },
  "application/vnd.think-cell.ppttc+json": { "source": "iana", "compressible": true },
  "application/vnd.tmd.mediaflex.api+xml": { "source": "iana", "compressible": true },
  "application/vnd.tml": { "source": "iana" },
  "application/vnd.tmobile-livetv": { "source": "iana", "extensions": ["tmo"] },
  "application/vnd.tri.onesource": { "source": "iana" },
  "application/vnd.trid.tpt": { "source": "iana", "extensions": ["tpt"] },
  "application/vnd.triscape.mxs": { "source": "iana", "extensions": ["mxs"] },
  "application/vnd.trueapp": { "source": "iana", "extensions": ["tra"] },
  "application/vnd.truedoc": { "source": "iana" },
  "application/vnd.ubisoft.webplayer": { "source": "iana" },
  "application/vnd.ufdl": { "source": "iana", "extensions": ["ufd", "ufdl"] },
  "application/vnd.uiq.theme": { "source": "iana", "extensions": ["utz"] },
  "application/vnd.umajin": { "source": "iana", "extensions": ["umj"] },
  "application/vnd.unity": { "source": "iana", "extensions": ["unityweb"] },
  "application/vnd.uoml+xml": { "source": "iana", "compressible": true, "extensions": ["uoml"] },
  "application/vnd.uplanet.alert": { "source": "iana" },
  "application/vnd.uplanet.alert-wbxml": { "source": "iana" },
  "application/vnd.uplanet.bearer-choice": { "source": "iana" },
  "application/vnd.uplanet.bearer-choice-wbxml": { "source": "iana" },
  "application/vnd.uplanet.cacheop": { "source": "iana" },
  "application/vnd.uplanet.cacheop-wbxml": { "source": "iana" },
  "application/vnd.uplanet.channel": { "source": "iana" },
  "application/vnd.uplanet.channel-wbxml": { "source": "iana" },
  "application/vnd.uplanet.list": { "source": "iana" },
  "application/vnd.uplanet.list-wbxml": { "source": "iana" },
  "application/vnd.uplanet.listcmd": { "source": "iana" },
  "application/vnd.uplanet.listcmd-wbxml": { "source": "iana" },
  "application/vnd.uplanet.signal": { "source": "iana" },
  "application/vnd.uri-map": { "source": "iana" },
  "application/vnd.valve.source.material": { "source": "iana" },
  "application/vnd.vcx": { "source": "iana", "extensions": ["vcx"] },
  "application/vnd.vd-study": { "source": "iana" },
  "application/vnd.vectorworks": { "source": "iana" },
  "application/vnd.vel+json": { "source": "iana", "compressible": true },
  "application/vnd.verimatrix.vcas": { "source": "iana" },
  "application/vnd.veritone.aion+json": { "source": "iana", "compressible": true },
  "application/vnd.veryant.thin": { "source": "iana" },
  "application/vnd.ves.encrypted": { "source": "iana" },
  "application/vnd.vidsoft.vidconference": { "source": "iana" },
  "application/vnd.visio": { "source": "iana", "extensions": ["vsd", "vst", "vss", "vsw"] },
  "application/vnd.visionary": { "source": "iana", "extensions": ["vis"] },
  "application/vnd.vividence.scriptfile": { "source": "iana" },
  "application/vnd.vsf": { "source": "iana", "extensions": ["vsf"] },
  "application/vnd.wap.sic": { "source": "iana" },
  "application/vnd.wap.slc": { "source": "iana" },
  "application/vnd.wap.wbxml": { "source": "iana", "charset": "UTF-8", "extensions": ["wbxml"] },
  "application/vnd.wap.wmlc": { "source": "iana", "extensions": ["wmlc"] },
  "application/vnd.wap.wmlscriptc": { "source": "iana", "extensions": ["wmlsc"] },
  "application/vnd.webturbo": { "source": "iana", "extensions": ["wtb"] },
  "application/vnd.wfa.dpp": { "source": "iana" },
  "application/vnd.wfa.p2p": { "source": "iana" },
  "application/vnd.wfa.wsc": { "source": "iana" },
  "application/vnd.windows.devicepairing": { "source": "iana" },
  "application/vnd.wmc": { "source": "iana" },
  "application/vnd.wmf.bootstrap": { "source": "iana" },
  "application/vnd.wolfram.mathematica": { "source": "iana" },
  "application/vnd.wolfram.mathematica.package": { "source": "iana" },
  "application/vnd.wolfram.player": { "source": "iana", "extensions": ["nbp"] },
  "application/vnd.wordperfect": { "source": "iana", "extensions": ["wpd"] },
  "application/vnd.wqd": { "source": "iana", "extensions": ["wqd"] },
  "application/vnd.wrq-hp3000-labelled": { "source": "iana" },
  "application/vnd.wt.stf": { "source": "iana", "extensions": ["stf"] },
  "application/vnd.wv.csp+wbxml": { "source": "iana" },
  "application/vnd.wv.csp+xml": { "source": "iana", "compressible": true },
  "application/vnd.wv.ssp+xml": { "source": "iana", "compressible": true },
  "application/vnd.xacml+json": { "source": "iana", "compressible": true },
  "application/vnd.xara": { "source": "iana", "extensions": ["xar"] },
  "application/vnd.xfdl": { "source": "iana", "extensions": ["xfdl"] },
  "application/vnd.xfdl.webform": { "source": "iana" },
  "application/vnd.xmi+xml": { "source": "iana", "compressible": true },
  "application/vnd.xmpie.cpkg": { "source": "iana" },
  "application/vnd.xmpie.dpkg": { "source": "iana" },
  "application/vnd.xmpie.plan": { "source": "iana" },
  "application/vnd.xmpie.ppkg": { "source": "iana" },
  "application/vnd.xmpie.xlim": { "source": "iana" },
  "application/vnd.yamaha.hv-dic": { "source": "iana", "extensions": ["hvd"] },
  "application/vnd.yamaha.hv-script": { "source": "iana", "extensions": ["hvs"] },
  "application/vnd.yamaha.hv-voice": { "source": "iana", "extensions": ["hvp"] },
  "application/vnd.yamaha.openscoreformat": { "source": "iana", "extensions": ["osf"] },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": { "source": "iana", "compressible": true, "extensions": ["osfpvg"] },
  "application/vnd.yamaha.remote-setup": { "source": "iana" },
  "application/vnd.yamaha.smaf-audio": { "source": "iana", "extensions": ["saf"] },
  "application/vnd.yamaha.smaf-phrase": { "source": "iana", "extensions": ["spf"] },
  "application/vnd.yamaha.through-ngn": { "source": "iana" },
  "application/vnd.yamaha.tunnel-udpencap": { "source": "iana" },
  "application/vnd.yaoweme": { "source": "iana" },
  "application/vnd.yellowriver-custom-menu": { "source": "iana", "extensions": ["cmp"] },
  "application/vnd.youtube.yt": { "source": "iana" },
  "application/vnd.zul": { "source": "iana", "extensions": ["zir", "zirz"] },
  "application/vnd.zzazz.deck+xml": { "source": "iana", "compressible": true, "extensions": ["zaz"] },
  "application/voicexml+xml": { "source": "iana", "compressible": true, "extensions": ["vxml"] },
  "application/voucher-cms+json": { "source": "iana", "compressible": true },
  "application/vq-rtcpxr": { "source": "iana" },
  "application/wasm": { "source": "iana", "compressible": true, "extensions": ["wasm"] },
  "application/watcherinfo+xml": { "source": "iana", "compressible": true, "extensions": ["wif"] },
  "application/webpush-options+json": { "source": "iana", "compressible": true },
  "application/whoispp-query": { "source": "iana" },
  "application/whoispp-response": { "source": "iana" },
  "application/widget": { "source": "iana", "extensions": ["wgt"] },
  "application/winhlp": { "source": "apache", "extensions": ["hlp"] },
  "application/wita": { "source": "iana" },
  "application/wordperfect5.1": { "source": "iana" },
  "application/wsdl+xml": { "source": "iana", "compressible": true, "extensions": ["wsdl"] },
  "application/wspolicy+xml": { "source": "iana", "compressible": true, "extensions": ["wspolicy"] },
  "application/x-7z-compressed": { "source": "apache", "compressible": false, "extensions": ["7z"] },
  "application/x-abiword": { "source": "apache", "extensions": ["abw"] },
  "application/x-ace-compressed": { "source": "apache", "extensions": ["ace"] },
  "application/x-amf": { "source": "apache" },
  "application/x-apple-diskimage": { "source": "apache", "extensions": ["dmg"] },
  "application/x-arj": { "compressible": false, "extensions": ["arj"] },
  "application/x-authorware-bin": { "source": "apache", "extensions": ["aab", "x32", "u32", "vox"] },
  "application/x-authorware-map": { "source": "apache", "extensions": ["aam"] },
  "application/x-authorware-seg": { "source": "apache", "extensions": ["aas"] },
  "application/x-bcpio": { "source": "apache", "extensions": ["bcpio"] },
  "application/x-bdoc": { "compressible": false, "extensions": ["bdoc"] },
  "application/x-bittorrent": { "source": "apache", "extensions": ["torrent"] },
  "application/x-blorb": { "source": "apache", "extensions": ["blb", "blorb"] },
  "application/x-bzip": { "source": "apache", "compressible": false, "extensions": ["bz"] },
  "application/x-bzip2": { "source": "apache", "compressible": false, "extensions": ["bz2", "boz"] },
  "application/x-cbr": { "source": "apache", "extensions": ["cbr", "cba", "cbt", "cbz", "cb7"] },
  "application/x-cdlink": { "source": "apache", "extensions": ["vcd"] },
  "application/x-cfs-compressed": { "source": "apache", "extensions": ["cfs"] },
  "application/x-chat": { "source": "apache", "extensions": ["chat"] },
  "application/x-chess-pgn": { "source": "apache", "extensions": ["pgn"] },
  "application/x-chrome-extension": { "extensions": ["crx"] },
  "application/x-cocoa": { "source": "nginx", "extensions": ["cco"] },
  "application/x-compress": { "source": "apache" },
  "application/x-conference": { "source": "apache", "extensions": ["nsc"] },
  "application/x-cpio": { "source": "apache", "extensions": ["cpio"] },
  "application/x-csh": { "source": "apache", "extensions": ["csh"] },
  "application/x-deb": { "compressible": false },
  "application/x-debian-package": { "source": "apache", "extensions": ["deb", "udeb"] },
  "application/x-dgc-compressed": { "source": "apache", "extensions": ["dgc"] },
  "application/x-director": { "source": "apache", "extensions": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"] },
  "application/x-doom": { "source": "apache", "extensions": ["wad"] },
  "application/x-dtbncx+xml": { "source": "apache", "compressible": true, "extensions": ["ncx"] },
  "application/x-dtbook+xml": { "source": "apache", "compressible": true, "extensions": ["dtb"] },
  "application/x-dtbresource+xml": { "source": "apache", "compressible": true, "extensions": ["res"] },
  "application/x-dvi": { "source": "apache", "compressible": false, "extensions": ["dvi"] },
  "application/x-envoy": { "source": "apache", "extensions": ["evy"] },
  "application/x-eva": { "source": "apache", "extensions": ["eva"] },
  "application/x-font-bdf": { "source": "apache", "extensions": ["bdf"] },
  "application/x-font-dos": { "source": "apache" },
  "application/x-font-framemaker": { "source": "apache" },
  "application/x-font-ghostscript": { "source": "apache", "extensions": ["gsf"] },
  "application/x-font-libgrx": { "source": "apache" },
  "application/x-font-linux-psf": { "source": "apache", "extensions": ["psf"] },
  "application/x-font-pcf": { "source": "apache", "extensions": ["pcf"] },
  "application/x-font-snf": { "source": "apache", "extensions": ["snf"] },
  "application/x-font-speedo": { "source": "apache" },
  "application/x-font-sunos-news": { "source": "apache" },
  "application/x-font-type1": { "source": "apache", "extensions": ["pfa", "pfb", "pfm", "afm"] },
  "application/x-font-vfont": { "source": "apache" },
  "application/x-freearc": { "source": "apache", "extensions": ["arc"] },
  "application/x-futuresplash": { "source": "apache", "extensions": ["spl"] },
  "application/x-gca-compressed": { "source": "apache", "extensions": ["gca"] },
  "application/x-glulx": { "source": "apache", "extensions": ["ulx"] },
  "application/x-gnumeric": { "source": "apache", "extensions": ["gnumeric"] },
  "application/x-gramps-xml": { "source": "apache", "extensions": ["gramps"] },
  "application/x-gtar": { "source": "apache", "extensions": ["gtar"] },
  "application/x-gzip": { "source": "apache" },
  "application/x-hdf": { "source": "apache", "extensions": ["hdf"] },
  "application/x-httpd-php": { "compressible": true, "extensions": ["php"] },
  "application/x-install-instructions": { "source": "apache", "extensions": ["install"] },
  "application/x-iso9660-image": { "source": "apache", "extensions": ["iso"] },
  "application/x-iwork-keynote-sffkey": { "extensions": ["key"] },
  "application/x-iwork-numbers-sffnumbers": { "extensions": ["numbers"] },
  "application/x-iwork-pages-sffpages": { "extensions": ["pages"] },
  "application/x-java-archive-diff": { "source": "nginx", "extensions": ["jardiff"] },
  "application/x-java-jnlp-file": { "source": "apache", "compressible": false, "extensions": ["jnlp"] },
  "application/x-javascript": { "compressible": true },
  "application/x-keepass2": { "extensions": ["kdbx"] },
  "application/x-latex": { "source": "apache", "compressible": false, "extensions": ["latex"] },
  "application/x-lua-bytecode": { "extensions": ["luac"] },
  "application/x-lzh-compressed": { "source": "apache", "extensions": ["lzh", "lha"] },
  "application/x-makeself": { "source": "nginx", "extensions": ["run"] },
  "application/x-mie": { "source": "apache", "extensions": ["mie"] },
  "application/x-mobipocket-ebook": { "source": "apache", "extensions": ["prc", "mobi"] },
  "application/x-mpegurl": { "compressible": false },
  "application/x-ms-application": { "source": "apache", "extensions": ["application"] },
  "application/x-ms-shortcut": { "source": "apache", "extensions": ["lnk"] },
  "application/x-ms-wmd": { "source": "apache", "extensions": ["wmd"] },
  "application/x-ms-wmz": { "source": "apache", "extensions": ["wmz"] },
  "application/x-ms-xbap": { "source": "apache", "extensions": ["xbap"] },
  "application/x-msaccess": { "source": "apache", "extensions": ["mdb"] },
  "application/x-msbinder": { "source": "apache", "extensions": ["obd"] },
  "application/x-mscardfile": { "source": "apache", "extensions": ["crd"] },
  "application/x-msclip": { "source": "apache", "extensions": ["clp"] },
  "application/x-msdos-program": { "extensions": ["exe"] },
  "application/x-msdownload": { "source": "apache", "extensions": ["exe", "dll", "com", "bat", "msi"] },
  "application/x-msmediaview": { "source": "apache", "extensions": ["mvb", "m13", "m14"] },
  "application/x-msmetafile": { "source": "apache", "extensions": ["wmf", "wmz", "emf", "emz"] },
  "application/x-msmoney": { "source": "apache", "extensions": ["mny"] },
  "application/x-mspublisher": { "source": "apache", "extensions": ["pub"] },
  "application/x-msschedule": { "source": "apache", "extensions": ["scd"] },
  "application/x-msterminal": { "source": "apache", "extensions": ["trm"] },
  "application/x-mswrite": { "source": "apache", "extensions": ["wri"] },
  "application/x-netcdf": { "source": "apache", "extensions": ["nc", "cdf"] },
  "application/x-ns-proxy-autoconfig": { "compressible": true, "extensions": ["pac"] },
  "application/x-nzb": { "source": "apache", "extensions": ["nzb"] },
  "application/x-perl": { "source": "nginx", "extensions": ["pl", "pm"] },
  "application/x-pilot": { "source": "nginx", "extensions": ["prc", "pdb"] },
  "application/x-pkcs12": { "source": "apache", "compressible": false, "extensions": ["p12", "pfx"] },
  "application/x-pkcs7-certificates": { "source": "apache", "extensions": ["p7b", "spc"] },
  "application/x-pkcs7-certreqresp": { "source": "apache", "extensions": ["p7r"] },
  "application/x-pki-message": { "source": "iana" },
  "application/x-rar-compressed": { "source": "apache", "compressible": false, "extensions": ["rar"] },
  "application/x-redhat-package-manager": { "source": "nginx", "extensions": ["rpm"] },
  "application/x-research-info-systems": { "source": "apache", "extensions": ["ris"] },
  "application/x-sea": { "source": "nginx", "extensions": ["sea"] },
  "application/x-sh": { "source": "apache", "compressible": true, "extensions": ["sh"] },
  "application/x-shar": { "source": "apache", "extensions": ["shar"] },
  "application/x-shockwave-flash": { "source": "apache", "compressible": false, "extensions": ["swf"] },
  "application/x-silverlight-app": { "source": "apache", "extensions": ["xap"] },
  "application/x-sql": { "source": "apache", "extensions": ["sql"] },
  "application/x-stuffit": { "source": "apache", "compressible": false, "extensions": ["sit"] },
  "application/x-stuffitx": { "source": "apache", "extensions": ["sitx"] },
  "application/x-subrip": { "source": "apache", "extensions": ["srt"] },
  "application/x-sv4cpio": { "source": "apache", "extensions": ["sv4cpio"] },
  "application/x-sv4crc": { "source": "apache", "extensions": ["sv4crc"] },
  "application/x-t3vm-image": { "source": "apache", "extensions": ["t3"] },
  "application/x-tads": { "source": "apache", "extensions": ["gam"] },
  "application/x-tar": { "source": "apache", "compressible": true, "extensions": ["tar"] },
  "application/x-tcl": { "source": "apache", "extensions": ["tcl", "tk"] },
  "application/x-tex": { "source": "apache", "extensions": ["tex"] },
  "application/x-tex-tfm": { "source": "apache", "extensions": ["tfm"] },
  "application/x-texinfo": { "source": "apache", "extensions": ["texinfo", "texi"] },
  "application/x-tgif": { "source": "apache", "extensions": ["obj"] },
  "application/x-ustar": { "source": "apache", "extensions": ["ustar"] },
  "application/x-virtualbox-hdd": { "compressible": true, "extensions": ["hdd"] },
  "application/x-virtualbox-ova": { "compressible": true, "extensions": ["ova"] },
  "application/x-virtualbox-ovf": { "compressible": true, "extensions": ["ovf"] },
  "application/x-virtualbox-vbox": { "compressible": true, "extensions": ["vbox"] },
  "application/x-virtualbox-vbox-extpack": { "compressible": false, "extensions": ["vbox-extpack"] },
  "application/x-virtualbox-vdi": { "compressible": true, "extensions": ["vdi"] },
  "application/x-virtualbox-vhd": { "compressible": true, "extensions": ["vhd"] },
  "application/x-virtualbox-vmdk": { "compressible": true, "extensions": ["vmdk"] },
  "application/x-wais-source": { "source": "apache", "extensions": ["src"] },
  "application/x-web-app-manifest+json": { "compressible": true, "extensions": ["webapp"] },
  "application/x-www-form-urlencoded": { "source": "iana", "compressible": true },
  "application/x-x509-ca-cert": { "source": "iana", "extensions": ["der", "crt", "pem"] },
  "application/x-x509-ca-ra-cert": { "source": "iana" },
  "application/x-x509-next-ca-cert": { "source": "iana" },
  "application/x-xfig": { "source": "apache", "extensions": ["fig"] },
  "application/x-xliff+xml": { "source": "apache", "compressible": true, "extensions": ["xlf"] },
  "application/x-xpinstall": { "source": "apache", "compressible": false, "extensions": ["xpi"] },
  "application/x-xz": { "source": "apache", "extensions": ["xz"] },
  "application/x-zmachine": { "source": "apache", "extensions": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"] },
  "application/x400-bp": { "source": "iana" },
  "application/xacml+xml": { "source": "iana", "compressible": true },
  "application/xaml+xml": { "source": "apache", "compressible": true, "extensions": ["xaml"] },
  "application/xcap-att+xml": { "source": "iana", "compressible": true, "extensions": ["xav"] },
  "application/xcap-caps+xml": { "source": "iana", "compressible": true, "extensions": ["xca"] },
  "application/xcap-diff+xml": { "source": "iana", "compressible": true, "extensions": ["xdf"] },
  "application/xcap-el+xml": { "source": "iana", "compressible": true, "extensions": ["xel"] },
  "application/xcap-error+xml": { "source": "iana", "compressible": true },
  "application/xcap-ns+xml": { "source": "iana", "compressible": true, "extensions": ["xns"] },
  "application/xcon-conference-info+xml": { "source": "iana", "compressible": true },
  "application/xcon-conference-info-diff+xml": { "source": "iana", "compressible": true },
  "application/xenc+xml": { "source": "iana", "compressible": true, "extensions": ["xenc"] },
  "application/xhtml+xml": { "source": "iana", "compressible": true, "extensions": ["xhtml", "xht"] },
  "application/xhtml-voice+xml": { "source": "apache", "compressible": true },
  "application/xliff+xml": { "source": "iana", "compressible": true, "extensions": ["xlf"] },
  "application/xml": { "source": "iana", "compressible": true, "extensions": ["xml", "xsl", "xsd", "rng"] },
  "application/xml-dtd": { "source": "iana", "compressible": true, "extensions": ["dtd"] },
  "application/xml-external-parsed-entity": { "source": "iana" },
  "application/xml-patch+xml": { "source": "iana", "compressible": true },
  "application/xmpp+xml": { "source": "iana", "compressible": true },
  "application/xop+xml": { "source": "iana", "compressible": true, "extensions": ["xop"] },
  "application/xproc+xml": { "source": "apache", "compressible": true, "extensions": ["xpl"] },
  "application/xslt+xml": { "source": "iana", "compressible": true, "extensions": ["xsl", "xslt"] },
  "application/xspf+xml": { "source": "apache", "compressible": true, "extensions": ["xspf"] },
  "application/xv+xml": { "source": "iana", "compressible": true, "extensions": ["mxml", "xhvml", "xvml", "xvm"] },
  "application/yang": { "source": "iana", "extensions": ["yang"] },
  "application/yang-data+json": { "source": "iana", "compressible": true },
  "application/yang-data+xml": { "source": "iana", "compressible": true },
  "application/yang-patch+json": { "source": "iana", "compressible": true },
  "application/yang-patch+xml": { "source": "iana", "compressible": true },
  "application/yin+xml": { "source": "iana", "compressible": true, "extensions": ["yin"] },
  "application/zip": { "source": "iana", "compressible": false, "extensions": ["zip"] },
  "application/zlib": { "source": "iana" },
  "application/zstd": { "source": "iana" },
  "audio/1d-interleaved-parityfec": { "source": "iana" },
  "audio/32kadpcm": { "source": "iana" },
  "audio/3gpp": { "source": "iana", "compressible": false, "extensions": ["3gpp"] },
  "audio/3gpp2": { "source": "iana" },
  "audio/aac": { "source": "iana" },
  "audio/ac3": { "source": "iana" },
  "audio/adpcm": { "source": "apache", "extensions": ["adp"] },
  "audio/amr": { "source": "iana", "extensions": ["amr"] },
  "audio/amr-wb": { "source": "iana" },
  "audio/amr-wb+": { "source": "iana" },
  "audio/aptx": { "source": "iana" },
  "audio/asc": { "source": "iana" },
  "audio/atrac-advanced-lossless": { "source": "iana" },
  "audio/atrac-x": { "source": "iana" },
  "audio/atrac3": { "source": "iana" },
  "audio/basic": { "source": "iana", "compressible": false, "extensions": ["au", "snd"] },
  "audio/bv16": { "source": "iana" },
  "audio/bv32": { "source": "iana" },
  "audio/clearmode": { "source": "iana" },
  "audio/cn": { "source": "iana" },
  "audio/dat12": { "source": "iana" },
  "audio/dls": { "source": "iana" },
  "audio/dsr-es201108": { "source": "iana" },
  "audio/dsr-es202050": { "source": "iana" },
  "audio/dsr-es202211": { "source": "iana" },
  "audio/dsr-es202212": { "source": "iana" },
  "audio/dv": { "source": "iana" },
  "audio/dvi4": { "source": "iana" },
  "audio/eac3": { "source": "iana" },
  "audio/encaprtp": { "source": "iana" },
  "audio/evrc": { "source": "iana" },
  "audio/evrc-qcp": { "source": "iana" },
  "audio/evrc0": { "source": "iana" },
  "audio/evrc1": { "source": "iana" },
  "audio/evrcb": { "source": "iana" },
  "audio/evrcb0": { "source": "iana" },
  "audio/evrcb1": { "source": "iana" },
  "audio/evrcnw": { "source": "iana" },
  "audio/evrcnw0": { "source": "iana" },
  "audio/evrcnw1": { "source": "iana" },
  "audio/evrcwb": { "source": "iana" },
  "audio/evrcwb0": { "source": "iana" },
  "audio/evrcwb1": { "source": "iana" },
  "audio/evs": { "source": "iana" },
  "audio/flexfec": { "source": "iana" },
  "audio/fwdred": { "source": "iana" },
  "audio/g711-0": { "source": "iana" },
  "audio/g719": { "source": "iana" },
  "audio/g722": { "source": "iana" },
  "audio/g7221": { "source": "iana" },
  "audio/g723": { "source": "iana" },
  "audio/g726-16": { "source": "iana" },
  "audio/g726-24": { "source": "iana" },
  "audio/g726-32": { "source": "iana" },
  "audio/g726-40": { "source": "iana" },
  "audio/g728": { "source": "iana" },
  "audio/g729": { "source": "iana" },
  "audio/g7291": { "source": "iana" },
  "audio/g729d": { "source": "iana" },
  "audio/g729e": { "source": "iana" },
  "audio/gsm": { "source": "iana" },
  "audio/gsm-efr": { "source": "iana" },
  "audio/gsm-hr-08": { "source": "iana" },
  "audio/ilbc": { "source": "iana" },
  "audio/ip-mr_v2.5": { "source": "iana" },
  "audio/isac": { "source": "apache" },
  "audio/l16": { "source": "iana" },
  "audio/l20": { "source": "iana" },
  "audio/l24": { "source": "iana", "compressible": false },
  "audio/l8": { "source": "iana" },
  "audio/lpc": { "source": "iana" },
  "audio/melp": { "source": "iana" },
  "audio/melp1200": { "source": "iana" },
  "audio/melp2400": { "source": "iana" },
  "audio/melp600": { "source": "iana" },
  "audio/mhas": { "source": "iana" },
  "audio/midi": { "source": "apache", "extensions": ["mid", "midi", "kar", "rmi"] },
  "audio/mobile-xmf": { "source": "iana", "extensions": ["mxmf"] },
  "audio/mp3": { "compressible": false, "extensions": ["mp3"] },
  "audio/mp4": { "source": "iana", "compressible": false, "extensions": ["m4a", "mp4a"] },
  "audio/mp4a-latm": { "source": "iana" },
  "audio/mpa": { "source": "iana" },
  "audio/mpa-robust": { "source": "iana" },
  "audio/mpeg": { "source": "iana", "compressible": false, "extensions": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"] },
  "audio/mpeg4-generic": { "source": "iana" },
  "audio/musepack": { "source": "apache" },
  "audio/ogg": { "source": "iana", "compressible": false, "extensions": ["oga", "ogg", "spx", "opus"] },
  "audio/opus": { "source": "iana" },
  "audio/parityfec": { "source": "iana" },
  "audio/pcma": { "source": "iana" },
  "audio/pcma-wb": { "source": "iana" },
  "audio/pcmu": { "source": "iana" },
  "audio/pcmu-wb": { "source": "iana" },
  "audio/prs.sid": { "source": "iana" },
  "audio/qcelp": { "source": "iana" },
  "audio/raptorfec": { "source": "iana" },
  "audio/red": { "source": "iana" },
  "audio/rtp-enc-aescm128": { "source": "iana" },
  "audio/rtp-midi": { "source": "iana" },
  "audio/rtploopback": { "source": "iana" },
  "audio/rtx": { "source": "iana" },
  "audio/s3m": { "source": "apache", "extensions": ["s3m"] },
  "audio/scip": { "source": "iana" },
  "audio/silk": { "source": "apache", "extensions": ["sil"] },
  "audio/smv": { "source": "iana" },
  "audio/smv-qcp": { "source": "iana" },
  "audio/smv0": { "source": "iana" },
  "audio/sofa": { "source": "iana" },
  "audio/sp-midi": { "source": "iana" },
  "audio/speex": { "source": "iana" },
  "audio/t140c": { "source": "iana" },
  "audio/t38": { "source": "iana" },
  "audio/telephone-event": { "source": "iana" },
  "audio/tetra_acelp": { "source": "iana" },
  "audio/tetra_acelp_bb": { "source": "iana" },
  "audio/tone": { "source": "iana" },
  "audio/tsvcis": { "source": "iana" },
  "audio/uemclip": { "source": "iana" },
  "audio/ulpfec": { "source": "iana" },
  "audio/usac": { "source": "iana" },
  "audio/vdvi": { "source": "iana" },
  "audio/vmr-wb": { "source": "iana" },
  "audio/vnd.3gpp.iufp": { "source": "iana" },
  "audio/vnd.4sb": { "source": "iana" },
  "audio/vnd.audiokoz": { "source": "iana" },
  "audio/vnd.celp": { "source": "iana" },
  "audio/vnd.cisco.nse": { "source": "iana" },
  "audio/vnd.cmles.radio-events": { "source": "iana" },
  "audio/vnd.cns.anp1": { "source": "iana" },
  "audio/vnd.cns.inf1": { "source": "iana" },
  "audio/vnd.dece.audio": { "source": "iana", "extensions": ["uva", "uvva"] },
  "audio/vnd.digital-winds": { "source": "iana", "extensions": ["eol"] },
  "audio/vnd.dlna.adts": { "source": "iana" },
  "audio/vnd.dolby.heaac.1": { "source": "iana" },
  "audio/vnd.dolby.heaac.2": { "source": "iana" },
  "audio/vnd.dolby.mlp": { "source": "iana" },
  "audio/vnd.dolby.mps": { "source": "iana" },
  "audio/vnd.dolby.pl2": { "source": "iana" },
  "audio/vnd.dolby.pl2x": { "source": "iana" },
  "audio/vnd.dolby.pl2z": { "source": "iana" },
  "audio/vnd.dolby.pulse.1": { "source": "iana" },
  "audio/vnd.dra": { "source": "iana", "extensions": ["dra"] },
  "audio/vnd.dts": { "source": "iana", "extensions": ["dts"] },
  "audio/vnd.dts.hd": { "source": "iana", "extensions": ["dtshd"] },
  "audio/vnd.dts.uhd": { "source": "iana" },
  "audio/vnd.dvb.file": { "source": "iana" },
  "audio/vnd.everad.plj": { "source": "iana" },
  "audio/vnd.hns.audio": { "source": "iana" },
  "audio/vnd.lucent.voice": { "source": "iana", "extensions": ["lvp"] },
  "audio/vnd.ms-playready.media.pya": { "source": "iana", "extensions": ["pya"] },
  "audio/vnd.nokia.mobile-xmf": { "source": "iana" },
  "audio/vnd.nortel.vbk": { "source": "iana" },
  "audio/vnd.nuera.ecelp4800": { "source": "iana", "extensions": ["ecelp4800"] },
  "audio/vnd.nuera.ecelp7470": { "source": "iana", "extensions": ["ecelp7470"] },
  "audio/vnd.nuera.ecelp9600": { "source": "iana", "extensions": ["ecelp9600"] },
  "audio/vnd.octel.sbc": { "source": "iana" },
  "audio/vnd.presonus.multitrack": { "source": "iana" },
  "audio/vnd.qcelp": { "source": "iana" },
  "audio/vnd.rhetorex.32kadpcm": { "source": "iana" },
  "audio/vnd.rip": { "source": "iana", "extensions": ["rip"] },
  "audio/vnd.rn-realaudio": { "compressible": false },
  "audio/vnd.sealedmedia.softseal.mpeg": { "source": "iana" },
  "audio/vnd.vmx.cvsd": { "source": "iana" },
  "audio/vnd.wave": { "compressible": false },
  "audio/vorbis": { "source": "iana", "compressible": false },
  "audio/vorbis-config": { "source": "iana" },
  "audio/wav": { "compressible": false, "extensions": ["wav"] },
  "audio/wave": { "compressible": false, "extensions": ["wav"] },
  "audio/webm": { "source": "apache", "compressible": false, "extensions": ["weba"] },
  "audio/x-aac": { "source": "apache", "compressible": false, "extensions": ["aac"] },
  "audio/x-aiff": { "source": "apache", "extensions": ["aif", "aiff", "aifc"] },
  "audio/x-caf": { "source": "apache", "compressible": false, "extensions": ["caf"] },
  "audio/x-flac": { "source": "apache", "extensions": ["flac"] },
  "audio/x-m4a": { "source": "nginx", "extensions": ["m4a"] },
  "audio/x-matroska": { "source": "apache", "extensions": ["mka"] },
  "audio/x-mpegurl": { "source": "apache", "extensions": ["m3u"] },
  "audio/x-ms-wax": { "source": "apache", "extensions": ["wax"] },
  "audio/x-ms-wma": { "source": "apache", "extensions": ["wma"] },
  "audio/x-pn-realaudio": { "source": "apache", "extensions": ["ram", "ra"] },
  "audio/x-pn-realaudio-plugin": { "source": "apache", "extensions": ["rmp"] },
  "audio/x-realaudio": { "source": "nginx", "extensions": ["ra"] },
  "audio/x-tta": { "source": "apache" },
  "audio/x-wav": { "source": "apache", "extensions": ["wav"] },
  "audio/xm": { "source": "apache", "extensions": ["xm"] },
  "chemical/x-cdx": { "source": "apache", "extensions": ["cdx"] },
  "chemical/x-cif": { "source": "apache", "extensions": ["cif"] },
  "chemical/x-cmdf": { "source": "apache", "extensions": ["cmdf"] },
  "chemical/x-cml": { "source": "apache", "extensions": ["cml"] },
  "chemical/x-csml": { "source": "apache", "extensions": ["csml"] },
  "chemical/x-pdb": { "source": "apache" },
  "chemical/x-xyz": { "source": "apache", "extensions": ["xyz"] },
  "font/collection": { "source": "iana", "extensions": ["ttc"] },
  "font/otf": { "source": "iana", "compressible": true, "extensions": ["otf"] },
  "font/sfnt": { "source": "iana" },
  "font/ttf": { "source": "iana", "compressible": true, "extensions": ["ttf"] },
  "font/woff": { "source": "iana", "extensions": ["woff"] },
  "font/woff2": { "source": "iana", "extensions": ["woff2"] },
  "image/aces": { "source": "iana", "extensions": ["exr"] },
  "image/apng": { "compressible": false, "extensions": ["apng"] },
  "image/avci": { "source": "iana", "extensions": ["avci"] },
  "image/avcs": { "source": "iana", "extensions": ["avcs"] },
  "image/avif": { "source": "iana", "compressible": false, "extensions": ["avif"] },
  "image/bmp": { "source": "iana", "compressible": true, "extensions": ["bmp"] },
  "image/cgm": { "source": "iana", "extensions": ["cgm"] },
  "image/dicom-rle": { "source": "iana", "extensions": ["drle"] },
  "image/emf": { "source": "iana", "extensions": ["emf"] },
  "image/fits": { "source": "iana", "extensions": ["fits"] },
  "image/g3fax": { "source": "iana", "extensions": ["g3"] },
  "image/gif": { "source": "iana", "compressible": false, "extensions": ["gif"] },
  "image/heic": { "source": "iana", "extensions": ["heic"] },
  "image/heic-sequence": { "source": "iana", "extensions": ["heics"] },
  "image/heif": { "source": "iana", "extensions": ["heif"] },
  "image/heif-sequence": { "source": "iana", "extensions": ["heifs"] },
  "image/hej2k": { "source": "iana", "extensions": ["hej2"] },
  "image/hsj2": { "source": "iana", "extensions": ["hsj2"] },
  "image/ief": { "source": "iana", "extensions": ["ief"] },
  "image/jls": { "source": "iana", "extensions": ["jls"] },
  "image/jp2": { "source": "iana", "compressible": false, "extensions": ["jp2", "jpg2"] },
  "image/jpeg": { "source": "iana", "compressible": false, "extensions": ["jpeg", "jpg", "jpe"] },
  "image/jph": { "source": "iana", "extensions": ["jph"] },
  "image/jphc": { "source": "iana", "extensions": ["jhc"] },
  "image/jpm": { "source": "iana", "compressible": false, "extensions": ["jpm"] },
  "image/jpx": { "source": "iana", "compressible": false, "extensions": ["jpx", "jpf"] },
  "image/jxr": { "source": "iana", "extensions": ["jxr"] },
  "image/jxra": { "source": "iana", "extensions": ["jxra"] },
  "image/jxrs": { "source": "iana", "extensions": ["jxrs"] },
  "image/jxs": { "source": "iana", "extensions": ["jxs"] },
  "image/jxsc": { "source": "iana", "extensions": ["jxsc"] },
  "image/jxsi": { "source": "iana", "extensions": ["jxsi"] },
  "image/jxss": { "source": "iana", "extensions": ["jxss"] },
  "image/ktx": { "source": "iana", "extensions": ["ktx"] },
  "image/ktx2": { "source": "iana", "extensions": ["ktx2"] },
  "image/naplps": { "source": "iana" },
  "image/pjpeg": { "compressible": false },
  "image/png": { "source": "iana", "compressible": false, "extensions": ["png"] },
  "image/prs.btif": { "source": "iana", "extensions": ["btif"] },
  "image/prs.pti": { "source": "iana", "extensions": ["pti"] },
  "image/pwg-raster": { "source": "iana" },
  "image/sgi": { "source": "apache", "extensions": ["sgi"] },
  "image/svg+xml": { "source": "iana", "compressible": true, "extensions": ["svg", "svgz"] },
  "image/t38": { "source": "iana", "extensions": ["t38"] },
  "image/tiff": { "source": "iana", "compressible": false, "extensions": ["tif", "tiff"] },
  "image/tiff-fx": { "source": "iana", "extensions": ["tfx"] },
  "image/vnd.adobe.photoshop": { "source": "iana", "compressible": true, "extensions": ["psd"] },
  "image/vnd.airzip.accelerator.azv": { "source": "iana", "extensions": ["azv"] },
  "image/vnd.cns.inf2": { "source": "iana" },
  "image/vnd.dece.graphic": { "source": "iana", "extensions": ["uvi", "uvvi", "uvg", "uvvg"] },
  "image/vnd.djvu": { "source": "iana", "extensions": ["djvu", "djv"] },
  "image/vnd.dvb.subtitle": { "source": "iana", "extensions": ["sub"] },
  "image/vnd.dwg": { "source": "iana", "extensions": ["dwg"] },
  "image/vnd.dxf": { "source": "iana", "extensions": ["dxf"] },
  "image/vnd.fastbidsheet": { "source": "iana", "extensions": ["fbs"] },
  "image/vnd.fpx": { "source": "iana", "extensions": ["fpx"] },
  "image/vnd.fst": { "source": "iana", "extensions": ["fst"] },
  "image/vnd.fujixerox.edmics-mmr": { "source": "iana", "extensions": ["mmr"] },
  "image/vnd.fujixerox.edmics-rlc": { "source": "iana", "extensions": ["rlc"] },
  "image/vnd.globalgraphics.pgb": { "source": "iana" },
  "image/vnd.microsoft.icon": { "source": "iana", "compressible": true, "extensions": ["ico"] },
  "image/vnd.mix": { "source": "iana" },
  "image/vnd.mozilla.apng": { "source": "iana" },
  "image/vnd.ms-dds": { "compressible": true, "extensions": ["dds"] },
  "image/vnd.ms-modi": { "source": "iana", "extensions": ["mdi"] },
  "image/vnd.ms-photo": { "source": "apache", "extensions": ["wdp"] },
  "image/vnd.net-fpx": { "source": "iana", "extensions": ["npx"] },
  "image/vnd.pco.b16": { "source": "iana", "extensions": ["b16"] },
  "image/vnd.radiance": { "source": "iana" },
  "image/vnd.sealed.png": { "source": "iana" },
  "image/vnd.sealedmedia.softseal.gif": { "source": "iana" },
  "image/vnd.sealedmedia.softseal.jpg": { "source": "iana" },
  "image/vnd.svf": { "source": "iana" },
  "image/vnd.tencent.tap": { "source": "iana", "extensions": ["tap"] },
  "image/vnd.valve.source.texture": { "source": "iana", "extensions": ["vtf"] },
  "image/vnd.wap.wbmp": { "source": "iana", "extensions": ["wbmp"] },
  "image/vnd.xiff": { "source": "iana", "extensions": ["xif"] },
  "image/vnd.zbrush.pcx": { "source": "iana", "extensions": ["pcx"] },
  "image/webp": { "source": "apache", "extensions": ["webp"] },
  "image/wmf": { "source": "iana", "extensions": ["wmf"] },
  "image/x-3ds": { "source": "apache", "extensions": ["3ds"] },
  "image/x-cmu-raster": { "source": "apache", "extensions": ["ras"] },
  "image/x-cmx": { "source": "apache", "extensions": ["cmx"] },
  "image/x-freehand": { "source": "apache", "extensions": ["fh", "fhc", "fh4", "fh5", "fh7"] },
  "image/x-icon": { "source": "apache", "compressible": true, "extensions": ["ico"] },
  "image/x-jng": { "source": "nginx", "extensions": ["jng"] },
  "image/x-mrsid-image": { "source": "apache", "extensions": ["sid"] },
  "image/x-ms-bmp": { "source": "nginx", "compressible": true, "extensions": ["bmp"] },
  "image/x-pcx": { "source": "apache", "extensions": ["pcx"] },
  "image/x-pict": { "source": "apache", "extensions": ["pic", "pct"] },
  "image/x-portable-anymap": { "source": "apache", "extensions": ["pnm"] },
  "image/x-portable-bitmap": { "source": "apache", "extensions": ["pbm"] },
  "image/x-portable-graymap": { "source": "apache", "extensions": ["pgm"] },
  "image/x-portable-pixmap": { "source": "apache", "extensions": ["ppm"] },
  "image/x-rgb": { "source": "apache", "extensions": ["rgb"] },
  "image/x-tga": { "source": "apache", "extensions": ["tga"] },
  "image/x-xbitmap": { "source": "apache", "extensions": ["xbm"] },
  "image/x-xcf": { "compressible": false },
  "image/x-xpixmap": { "source": "apache", "extensions": ["xpm"] },
  "image/x-xwindowdump": { "source": "apache", "extensions": ["xwd"] },
  "message/cpim": { "source": "iana" },
  "message/delivery-status": { "source": "iana" },
  "message/disposition-notification": { "source": "iana", "extensions": ["disposition-notification"] },
  "message/external-body": { "source": "iana" },
  "message/feedback-report": { "source": "iana" },
  "message/global": { "source": "iana", "extensions": ["u8msg"] },
  "message/global-delivery-status": { "source": "iana", "extensions": ["u8dsn"] },
  "message/global-disposition-notification": { "source": "iana", "extensions": ["u8mdn"] },
  "message/global-headers": { "source": "iana", "extensions": ["u8hdr"] },
  "message/http": { "source": "iana", "compressible": false },
  "message/imdn+xml": { "source": "iana", "compressible": true },
  "message/news": { "source": "iana" },
  "message/partial": { "source": "iana", "compressible": false },
  "message/rfc822": { "source": "iana", "compressible": true, "extensions": ["eml", "mime"] },
  "message/s-http": { "source": "iana" },
  "message/sip": { "source": "iana" },
  "message/sipfrag": { "source": "iana" },
  "message/tracking-status": { "source": "iana" },
  "message/vnd.si.simp": { "source": "iana" },
  "message/vnd.wfa.wsc": { "source": "iana", "extensions": ["wsc"] },
  "model/3mf": { "source": "iana", "extensions": ["3mf"] },
  "model/e57": { "source": "iana" },
  "model/gltf+json": { "source": "iana", "compressible": true, "extensions": ["gltf"] },
  "model/gltf-binary": { "source": "iana", "compressible": true, "extensions": ["glb"] },
  "model/iges": { "source": "iana", "compressible": false, "extensions": ["igs", "iges"] },
  "model/mesh": { "source": "iana", "compressible": false, "extensions": ["msh", "mesh", "silo"] },
  "model/mtl": { "source": "iana", "extensions": ["mtl"] },
  "model/obj": { "source": "iana", "extensions": ["obj"] },
  "model/step": { "source": "iana" },
  "model/step+xml": { "source": "iana", "compressible": true, "extensions": ["stpx"] },
  "model/step+zip": { "source": "iana", "compressible": false, "extensions": ["stpz"] },
  "model/step-xml+zip": { "source": "iana", "compressible": false, "extensions": ["stpxz"] },
  "model/stl": { "source": "iana", "extensions": ["stl"] },
  "model/vnd.collada+xml": { "source": "iana", "compressible": true, "extensions": ["dae"] },
  "model/vnd.dwf": { "source": "iana", "extensions": ["dwf"] },
  "model/vnd.flatland.3dml": { "source": "iana" },
  "model/vnd.gdl": { "source": "iana", "extensions": ["gdl"] },
  "model/vnd.gs-gdl": { "source": "apache" },
  "model/vnd.gs.gdl": { "source": "iana" },
  "model/vnd.gtw": { "source": "iana", "extensions": ["gtw"] },
  "model/vnd.moml+xml": { "source": "iana", "compressible": true },
  "model/vnd.mts": { "source": "iana", "extensions": ["mts"] },
  "model/vnd.opengex": { "source": "iana", "extensions": ["ogex"] },
  "model/vnd.parasolid.transmit.binary": { "source": "iana", "extensions": ["x_b"] },
  "model/vnd.parasolid.transmit.text": { "source": "iana", "extensions": ["x_t"] },
  "model/vnd.pytha.pyox": { "source": "iana" },
  "model/vnd.rosette.annotated-data-model": { "source": "iana" },
  "model/vnd.sap.vds": { "source": "iana", "extensions": ["vds"] },
  "model/vnd.usdz+zip": { "source": "iana", "compressible": false, "extensions": ["usdz"] },
  "model/vnd.valve.source.compiled-map": { "source": "iana", "extensions": ["bsp"] },
  "model/vnd.vtu": { "source": "iana", "extensions": ["vtu"] },
  "model/vrml": { "source": "iana", "compressible": false, "extensions": ["wrl", "vrml"] },
  "model/x3d+binary": { "source": "apache", "compressible": false, "extensions": ["x3db", "x3dbz"] },
  "model/x3d+fastinfoset": { "source": "iana", "extensions": ["x3db"] },
  "model/x3d+vrml": { "source": "apache", "compressible": false, "extensions": ["x3dv", "x3dvz"] },
  "model/x3d+xml": { "source": "iana", "compressible": true, "extensions": ["x3d", "x3dz"] },
  "model/x3d-vrml": { "source": "iana", "extensions": ["x3dv"] },
  "multipart/alternative": { "source": "iana", "compressible": false },
  "multipart/appledouble": { "source": "iana" },
  "multipart/byteranges": { "source": "iana" },
  "multipart/digest": { "source": "iana" },
  "multipart/encrypted": { "source": "iana", "compressible": false },
  "multipart/form-data": { "source": "iana", "compressible": false },
  "multipart/header-set": { "source": "iana" },
  "multipart/mixed": { "source": "iana" },
  "multipart/multilingual": { "source": "iana" },
  "multipart/parallel": { "source": "iana" },
  "multipart/related": { "source": "iana", "compressible": false },
  "multipart/report": { "source": "iana" },
  "multipart/signed": { "source": "iana", "compressible": false },
  "multipart/vnd.bint.med-plus": { "source": "iana" },
  "multipart/voice-message": { "source": "iana" },
  "multipart/x-mixed-replace": { "source": "iana" },
  "text/1d-interleaved-parityfec": { "source": "iana" },
  "text/cache-manifest": { "source": "iana", "compressible": true, "extensions": ["appcache", "manifest"] },
  "text/calendar": { "source": "iana", "extensions": ["ics", "ifb"] },
  "text/calender": { "compressible": true },
  "text/cmd": { "compressible": true },
  "text/coffeescript": { "extensions": ["coffee", "litcoffee"] },
  "text/cql": { "source": "iana" },
  "text/cql-expression": { "source": "iana" },
  "text/cql-identifier": { "source": "iana" },
  "text/css": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["css"] },
  "text/csv": { "source": "iana", "compressible": true, "extensions": ["csv"] },
  "text/csv-schema": { "source": "iana" },
  "text/directory": { "source": "iana" },
  "text/dns": { "source": "iana" },
  "text/ecmascript": { "source": "iana" },
  "text/encaprtp": { "source": "iana" },
  "text/enriched": { "source": "iana" },
  "text/fhirpath": { "source": "iana" },
  "text/flexfec": { "source": "iana" },
  "text/fwdred": { "source": "iana" },
  "text/gff3": { "source": "iana" },
  "text/grammar-ref-list": { "source": "iana" },
  "text/html": { "source": "iana", "compressible": true, "extensions": ["html", "htm", "shtml"] },
  "text/jade": { "extensions": ["jade"] },
  "text/javascript": { "source": "iana", "compressible": true },
  "text/jcr-cnd": { "source": "iana" },
  "text/jsx": { "compressible": true, "extensions": ["jsx"] },
  "text/less": { "compressible": true, "extensions": ["less"] },
  "text/markdown": { "source": "iana", "compressible": true, "extensions": ["markdown", "md"] },
  "text/mathml": { "source": "nginx", "extensions": ["mml"] },
  "text/mdx": { "compressible": true, "extensions": ["mdx"] },
  "text/mizar": { "source": "iana" },
  "text/n3": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["n3"] },
  "text/parameters": { "source": "iana", "charset": "UTF-8" },
  "text/parityfec": { "source": "iana" },
  "text/plain": { "source": "iana", "compressible": true, "extensions": ["txt", "text", "conf", "def", "list", "log", "in", "ini"] },
  "text/provenance-notation": { "source": "iana", "charset": "UTF-8" },
  "text/prs.fallenstein.rst": { "source": "iana" },
  "text/prs.lines.tag": { "source": "iana", "extensions": ["dsc"] },
  "text/prs.prop.logic": { "source": "iana" },
  "text/raptorfec": { "source": "iana" },
  "text/red": { "source": "iana" },
  "text/rfc822-headers": { "source": "iana" },
  "text/richtext": { "source": "iana", "compressible": true, "extensions": ["rtx"] },
  "text/rtf": { "source": "iana", "compressible": true, "extensions": ["rtf"] },
  "text/rtp-enc-aescm128": { "source": "iana" },
  "text/rtploopback": { "source": "iana" },
  "text/rtx": { "source": "iana" },
  "text/sgml": { "source": "iana", "extensions": ["sgml", "sgm"] },
  "text/shaclc": { "source": "iana" },
  "text/shex": { "source": "iana", "extensions": ["shex"] },
  "text/slim": { "extensions": ["slim", "slm"] },
  "text/spdx": { "source": "iana", "extensions": ["spdx"] },
  "text/strings": { "source": "iana" },
  "text/stylus": { "extensions": ["stylus", "styl"] },
  "text/t140": { "source": "iana" },
  "text/tab-separated-values": { "source": "iana", "compressible": true, "extensions": ["tsv"] },
  "text/troff": { "source": "iana", "extensions": ["t", "tr", "roff", "man", "me", "ms"] },
  "text/turtle": { "source": "iana", "charset": "UTF-8", "extensions": ["ttl"] },
  "text/ulpfec": { "source": "iana" },
  "text/uri-list": { "source": "iana", "compressible": true, "extensions": ["uri", "uris", "urls"] },
  "text/vcard": { "source": "iana", "compressible": true, "extensions": ["vcard"] },
  "text/vnd.a": { "source": "iana" },
  "text/vnd.abc": { "source": "iana" },
  "text/vnd.ascii-art": { "source": "iana" },
  "text/vnd.curl": { "source": "iana", "extensions": ["curl"] },
  "text/vnd.curl.dcurl": { "source": "apache", "extensions": ["dcurl"] },
  "text/vnd.curl.mcurl": { "source": "apache", "extensions": ["mcurl"] },
  "text/vnd.curl.scurl": { "source": "apache", "extensions": ["scurl"] },
  "text/vnd.debian.copyright": { "source": "iana", "charset": "UTF-8" },
  "text/vnd.dmclientscript": { "source": "iana" },
  "text/vnd.dvb.subtitle": { "source": "iana", "extensions": ["sub"] },
  "text/vnd.esmertec.theme-descriptor": { "source": "iana", "charset": "UTF-8" },
  "text/vnd.familysearch.gedcom": { "source": "iana", "extensions": ["ged"] },
  "text/vnd.ficlab.flt": { "source": "iana" },
  "text/vnd.fly": { "source": "iana", "extensions": ["fly"] },
  "text/vnd.fmi.flexstor": { "source": "iana", "extensions": ["flx"] },
  "text/vnd.gml": { "source": "iana" },
  "text/vnd.graphviz": { "source": "iana", "extensions": ["gv"] },
  "text/vnd.hans": { "source": "iana" },
  "text/vnd.hgl": { "source": "iana" },
  "text/vnd.in3d.3dml": { "source": "iana", "extensions": ["3dml"] },
  "text/vnd.in3d.spot": { "source": "iana", "extensions": ["spot"] },
  "text/vnd.iptc.newsml": { "source": "iana" },
  "text/vnd.iptc.nitf": { "source": "iana" },
  "text/vnd.latex-z": { "source": "iana" },
  "text/vnd.motorola.reflex": { "source": "iana" },
  "text/vnd.ms-mediapackage": { "source": "iana" },
  "text/vnd.net2phone.commcenter.command": { "source": "iana" },
  "text/vnd.radisys.msml-basic-layout": { "source": "iana" },
  "text/vnd.senx.warpscript": { "source": "iana" },
  "text/vnd.si.uricatalogue": { "source": "iana" },
  "text/vnd.sosi": { "source": "iana" },
  "text/vnd.sun.j2me.app-descriptor": { "source": "iana", "charset": "UTF-8", "extensions": ["jad"] },
  "text/vnd.trolltech.linguist": { "source": "iana", "charset": "UTF-8" },
  "text/vnd.wap.si": { "source": "iana" },
  "text/vnd.wap.sl": { "source": "iana" },
  "text/vnd.wap.wml": { "source": "iana", "extensions": ["wml"] },
  "text/vnd.wap.wmlscript": { "source": "iana", "extensions": ["wmls"] },
  "text/vtt": { "source": "iana", "charset": "UTF-8", "compressible": true, "extensions": ["vtt"] },
  "text/x-asm": { "source": "apache", "extensions": ["s", "asm"] },
  "text/x-c": { "source": "apache", "extensions": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"] },
  "text/x-component": { "source": "nginx", "extensions": ["htc"] },
  "text/x-fortran": { "source": "apache", "extensions": ["f", "for", "f77", "f90"] },
  "text/x-gwt-rpc": { "compressible": true },
  "text/x-handlebars-template": { "extensions": ["hbs"] },
  "text/x-java-source": { "source": "apache", "extensions": ["java"] },
  "text/x-jquery-tmpl": { "compressible": true },
  "text/x-lua": { "extensions": ["lua"] },
  "text/x-markdown": { "compressible": true, "extensions": ["mkd"] },
  "text/x-nfo": { "source": "apache", "extensions": ["nfo"] },
  "text/x-opml": { "source": "apache", "extensions": ["opml"] },
  "text/x-org": { "compressible": true, "extensions": ["org"] },
  "text/x-pascal": { "source": "apache", "extensions": ["p", "pas"] },
  "text/x-processing": { "compressible": true, "extensions": ["pde"] },
  "text/x-sass": { "extensions": ["sass"] },
  "text/x-scss": { "extensions": ["scss"] },
  "text/x-setext": { "source": "apache", "extensions": ["etx"] },
  "text/x-sfv": { "source": "apache", "extensions": ["sfv"] },
  "text/x-suse-ymp": { "compressible": true, "extensions": ["ymp"] },
  "text/x-uuencode": { "source": "apache", "extensions": ["uu"] },
  "text/x-vcalendar": { "source": "apache", "extensions": ["vcs"] },
  "text/x-vcard": { "source": "apache", "extensions": ["vcf"] },
  "text/xml": { "source": "iana", "compressible": true, "extensions": ["xml"] },
  "text/xml-external-parsed-entity": { "source": "iana" },
  "text/yaml": { "compressible": true, "extensions": ["yaml", "yml"] },
  "video/1d-interleaved-parityfec": { "source": "iana" },
  "video/3gpp": { "source": "iana", "extensions": ["3gp", "3gpp"] },
  "video/3gpp-tt": { "source": "iana" },
  "video/3gpp2": { "source": "iana", "extensions": ["3g2"] },
  "video/av1": { "source": "iana" },
  "video/bmpeg": { "source": "iana" },
  "video/bt656": { "source": "iana" },
  "video/celb": { "source": "iana" },
  "video/dv": { "source": "iana" },
  "video/encaprtp": { "source": "iana" },
  "video/ffv1": { "source": "iana" },
  "video/flexfec": { "source": "iana" },
  "video/h261": { "source": "iana", "extensions": ["h261"] },
  "video/h263": { "source": "iana", "extensions": ["h263"] },
  "video/h263-1998": { "source": "iana" },
  "video/h263-2000": { "source": "iana" },
  "video/h264": { "source": "iana", "extensions": ["h264"] },
  "video/h264-rcdo": { "source": "iana" },
  "video/h264-svc": { "source": "iana" },
  "video/h265": { "source": "iana" },
  "video/iso.segment": { "source": "iana", "extensions": ["m4s"] },
  "video/jpeg": { "source": "iana", "extensions": ["jpgv"] },
  "video/jpeg2000": { "source": "iana" },
  "video/jpm": { "source": "apache", "extensions": ["jpm", "jpgm"] },
  "video/jxsv": { "source": "iana" },
  "video/mj2": { "source": "iana", "extensions": ["mj2", "mjp2"] },
  "video/mp1s": { "source": "iana" },
  "video/mp2p": { "source": "iana" },
  "video/mp2t": { "source": "iana", "extensions": ["ts"] },
  "video/mp4": { "source": "iana", "compressible": false, "extensions": ["mp4", "mp4v", "mpg4"] },
  "video/mp4v-es": { "source": "iana" },
  "video/mpeg": { "source": "iana", "compressible": false, "extensions": ["mpeg", "mpg", "mpe", "m1v", "m2v"] },
  "video/mpeg4-generic": { "source": "iana" },
  "video/mpv": { "source": "iana" },
  "video/nv": { "source": "iana" },
  "video/ogg": { "source": "iana", "compressible": false, "extensions": ["ogv"] },
  "video/parityfec": { "source": "iana" },
  "video/pointer": { "source": "iana" },
  "video/quicktime": { "source": "iana", "compressible": false, "extensions": ["qt", "mov"] },
  "video/raptorfec": { "source": "iana" },
  "video/raw": { "source": "iana" },
  "video/rtp-enc-aescm128": { "source": "iana" },
  "video/rtploopback": { "source": "iana" },
  "video/rtx": { "source": "iana" },
  "video/scip": { "source": "iana" },
  "video/smpte291": { "source": "iana" },
  "video/smpte292m": { "source": "iana" },
  "video/ulpfec": { "source": "iana" },
  "video/vc1": { "source": "iana" },
  "video/vc2": { "source": "iana" },
  "video/vnd.cctv": { "source": "iana" },
  "video/vnd.dece.hd": { "source": "iana", "extensions": ["uvh", "uvvh"] },
  "video/vnd.dece.mobile": { "source": "iana", "extensions": ["uvm", "uvvm"] },
  "video/vnd.dece.mp4": { "source": "iana" },
  "video/vnd.dece.pd": { "source": "iana", "extensions": ["uvp", "uvvp"] },
  "video/vnd.dece.sd": { "source": "iana", "extensions": ["uvs", "uvvs"] },
  "video/vnd.dece.video": { "source": "iana", "extensions": ["uvv", "uvvv"] },
  "video/vnd.directv.mpeg": { "source": "iana" },
  "video/vnd.directv.mpeg-tts": { "source": "iana" },
  "video/vnd.dlna.mpeg-tts": { "source": "iana" },
  "video/vnd.dvb.file": { "source": "iana", "extensions": ["dvb"] },
  "video/vnd.fvt": { "source": "iana", "extensions": ["fvt"] },
  "video/vnd.hns.video": { "source": "iana" },
  "video/vnd.iptvforum.1dparityfec-1010": { "source": "iana" },
  "video/vnd.iptvforum.1dparityfec-2005": { "source": "iana" },
  "video/vnd.iptvforum.2dparityfec-1010": { "source": "iana" },
  "video/vnd.iptvforum.2dparityfec-2005": { "source": "iana" },
  "video/vnd.iptvforum.ttsavc": { "source": "iana" },
  "video/vnd.iptvforum.ttsmpeg2": { "source": "iana" },
  "video/vnd.motorola.video": { "source": "iana" },
  "video/vnd.motorola.videop": { "source": "iana" },
  "video/vnd.mpegurl": { "source": "iana", "extensions": ["mxu", "m4u"] },
  "video/vnd.ms-playready.media.pyv": { "source": "iana", "extensions": ["pyv"] },
  "video/vnd.nokia.interleaved-multimedia": { "source": "iana" },
  "video/vnd.nokia.mp4vr": { "source": "iana" },
  "video/vnd.nokia.videovoip": { "source": "iana" },
  "video/vnd.objectvideo": { "source": "iana" },
  "video/vnd.radgamettools.bink": { "source": "iana" },
  "video/vnd.radgamettools.smacker": { "source": "iana" },
  "video/vnd.sealed.mpeg1": { "source": "iana" },
  "video/vnd.sealed.mpeg4": { "source": "iana" },
  "video/vnd.sealed.swf": { "source": "iana" },
  "video/vnd.sealedmedia.softseal.mov": { "source": "iana" },
  "video/vnd.uvvu.mp4": { "source": "iana", "extensions": ["uvu", "uvvu"] },
  "video/vnd.vivo": { "source": "iana", "extensions": ["viv"] },
  "video/vnd.youtube.yt": { "source": "iana" },
  "video/vp8": { "source": "iana" },
  "video/vp9": { "source": "iana" },
  "video/webm": { "source": "apache", "compressible": false, "extensions": ["webm"] },
  "video/x-f4v": { "source": "apache", "extensions": ["f4v"] },
  "video/x-fli": { "source": "apache", "extensions": ["fli"] },
  "video/x-flv": { "source": "apache", "compressible": false, "extensions": ["flv"] },
  "video/x-m4v": { "source": "apache", "extensions": ["m4v"] },
  "video/x-matroska": { "source": "apache", "compressible": false, "extensions": ["mkv", "mk3d", "mks"] },
  "video/x-mng": { "source": "apache", "extensions": ["mng"] },
  "video/x-ms-asf": { "source": "apache", "extensions": ["asf", "asx"] },
  "video/x-ms-vob": { "source": "apache", "extensions": ["vob"] },
  "video/x-ms-wm": { "source": "apache", "extensions": ["wm"] },
  "video/x-ms-wmv": { "source": "apache", "compressible": false, "extensions": ["wmv"] },
  "video/x-ms-wmx": { "source": "apache", "extensions": ["wmx"] },
  "video/x-ms-wvx": { "source": "apache", "extensions": ["wvx"] },
  "video/x-msvideo": { "source": "apache", "extensions": ["avi"] },
  "video/x-sgi-movie": { "source": "apache", "extensions": ["movie"] },
  "video/x-smv": { "source": "apache", "extensions": ["smv"] },
  "x-conference/x-cooltalk": { "source": "apache", "extensions": ["ice"] },
  "x-shader/x-fragment": { "compressible": true },
  "x-shader/x-vertex": { "compressible": true }
};
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */
var mimeDb;
var hasRequiredMimeDb;
function requireMimeDb() {
  if (hasRequiredMimeDb) return mimeDb;
  hasRequiredMimeDb = 1;
  mimeDb = require$$0$1;
  return mimeDb;
}
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
var hasRequiredMimeTypes;
function requireMimeTypes() {
  if (hasRequiredMimeTypes) return mimeTypes;
  hasRequiredMimeTypes = 1;
  (function(exports) {
    var db = requireMimeDb();
    var extname = require$$1$1.extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type2) {
      if (!type2 || typeof type2 !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type2);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2) mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type2) {
      if (!type2 || typeof type2 !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type2);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types2) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type2) {
        var mime = db[type2];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type2] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types2[extension2]) {
            var from = preference.indexOf(db[types2[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types2[extension2] !== "application/octet-stream" && (from > to || from === to && types2[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types2[extension2] = type2;
        }
      });
    }
  })(mimeTypes);
  return mimeTypes;
}
var defer_1;
var hasRequiredDefer;
function requireDefer() {
  if (hasRequiredDefer) return defer_1;
  hasRequiredDefer = 1;
  defer_1 = defer;
  function defer(fn) {
    var nextTick2 = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
    if (nextTick2) {
      nextTick2(fn);
    } else {
      setTimeout(fn, 0);
    }
  }
  return defer_1;
}
var async_1;
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async_1;
  hasRequiredAsync = 1;
  var defer = requireDefer();
  async_1 = async;
  function async(callback) {
    var isAsync = false;
    defer(function() {
      isAsync = true;
    });
    return function async_callback(err, result) {
      if (isAsync) {
        callback(err, result);
      } else {
        defer(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  }
  return async_1;
}
var abort_1;
var hasRequiredAbort;
function requireAbort() {
  if (hasRequiredAbort) return abort_1;
  hasRequiredAbort = 1;
  abort_1 = abort2;
  function abort2(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    state.jobs = {};
  }
  function clean(key) {
    if (typeof this.jobs[key] == "function") {
      this.jobs[key]();
    }
  }
  return abort_1;
}
var iterate_1;
var hasRequiredIterate;
function requireIterate() {
  if (hasRequiredIterate) return iterate_1;
  hasRequiredIterate = 1;
  var async = requireAsync(), abort2 = requireAbort();
  iterate_1 = iterate;
  function iterate(list, iterator2, state, callback) {
    var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
    state.jobs[key] = runJob(iterator2, key, list[key], function(error, output) {
      if (!(key in state.jobs)) {
        return;
      }
      delete state.jobs[key];
      if (error) {
        abort2(state);
      } else {
        state.results[key] = output;
      }
      callback(error, state.results);
    });
  }
  function runJob(iterator2, key, item, callback) {
    var aborter;
    if (iterator2.length == 2) {
      aborter = iterator2(item, async(callback));
    } else {
      aborter = iterator2(item, key, async(callback));
    }
    return aborter;
  }
  return iterate_1;
}
var state_1;
var hasRequiredState;
function requireState() {
  if (hasRequiredState) return state_1;
  hasRequiredState = 1;
  state_1 = state;
  function state(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
      index: 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs: {},
      results: isNamedList ? {} : [],
      size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
      initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  }
  return state_1;
}
var terminator_1;
var hasRequiredTerminator;
function requireTerminator() {
  if (hasRequiredTerminator) return terminator_1;
  hasRequiredTerminator = 1;
  var abort2 = requireAbort(), async = requireAsync();
  terminator_1 = terminator;
  function terminator(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }
    this.index = this.size;
    abort2(this);
    async(callback)(null, this.results);
  }
  return terminator_1;
}
var parallel_1;
var hasRequiredParallel;
function requireParallel() {
  if (hasRequiredParallel) return parallel_1;
  hasRequiredParallel = 1;
  var iterate = requireIterate(), initState = requireState(), terminator = requireTerminator();
  parallel_1 = parallel;
  function parallel(list, iterator2, callback) {
    var state = initState(list);
    while (state.index < (state["keyedList"] || list).length) {
      iterate(list, iterator2, state, function(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator.bind(state, callback);
  }
  return parallel_1;
}
var serialOrdered = { exports: {} };
var hasRequiredSerialOrdered;
function requireSerialOrdered() {
  if (hasRequiredSerialOrdered) return serialOrdered.exports;
  hasRequiredSerialOrdered = 1;
  var iterate = requireIterate(), initState = requireState(), terminator = requireTerminator();
  serialOrdered.exports = serialOrdered$1;
  serialOrdered.exports.ascending = ascending;
  serialOrdered.exports.descending = descending;
  function serialOrdered$1(list, iterator2, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator2, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;
      if (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator2, state, iteratorHandler);
        return;
      }
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  }
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function descending(a, b) {
    return -1 * ascending(a, b);
  }
  return serialOrdered.exports;
}
var serial_1;
var hasRequiredSerial;
function requireSerial() {
  if (hasRequiredSerial) return serial_1;
  hasRequiredSerial = 1;
  var serialOrdered2 = requireSerialOrdered();
  serial_1 = serial;
  function serial(list, iterator2, callback) {
    return serialOrdered2(list, iterator2, null, callback);
  }
  return serial_1;
}
var asynckit;
var hasRequiredAsynckit;
function requireAsynckit() {
  if (hasRequiredAsynckit) return asynckit;
  hasRequiredAsynckit = 1;
  asynckit = {
    parallel: requireParallel(),
    serial: requireSerial(),
    serialOrdered: requireSerialOrdered()
  };
  return asynckit;
}
var esObjectAtoms;
var hasRequiredEsObjectAtoms;
function requireEsObjectAtoms() {
  if (hasRequiredEsObjectAtoms) return esObjectAtoms;
  hasRequiredEsObjectAtoms = 1;
  esObjectAtoms = Object;
  return esObjectAtoms;
}
var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors) return esErrors;
  hasRequiredEsErrors = 1;
  esErrors = Error;
  return esErrors;
}
var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval) return _eval;
  hasRequired_eval = 1;
  _eval = EvalError;
  return _eval;
}
var range;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range;
  hasRequiredRange = 1;
  range = RangeError;
  return range;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;
  ref = ReferenceError;
  return ref;
}
var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax) return syntax;
  hasRequiredSyntax = 1;
  syntax = SyntaxError;
  return syntax;
}
var type;
var hasRequiredType;
function requireType() {
  if (hasRequiredType) return type;
  hasRequiredType = 1;
  type = TypeError;
  return type;
}
var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri) return uri;
  hasRequiredUri = 1;
  uri = URIError;
  return uri;
}
var abs;
var hasRequiredAbs;
function requireAbs() {
  if (hasRequiredAbs) return abs;
  hasRequiredAbs = 1;
  abs = Math.abs;
  return abs;
}
var floor;
var hasRequiredFloor;
function requireFloor() {
  if (hasRequiredFloor) return floor;
  hasRequiredFloor = 1;
  floor = Math.floor;
  return floor;
}
var max;
var hasRequiredMax;
function requireMax() {
  if (hasRequiredMax) return max;
  hasRequiredMax = 1;
  max = Math.max;
  return max;
}
var min;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin) return min;
  hasRequiredMin = 1;
  min = Math.min;
  return min;
}
var pow;
var hasRequiredPow;
function requirePow() {
  if (hasRequiredPow) return pow;
  hasRequiredPow = 1;
  pow = Math.pow;
  return pow;
}
var round;
var hasRequiredRound;
function requireRound() {
  if (hasRequiredRound) return round;
  hasRequiredRound = 1;
  round = Math.round;
  return round;
}
var _isNaN;
var hasRequired_isNaN;
function require_isNaN() {
  if (hasRequired_isNaN) return _isNaN;
  hasRequired_isNaN = 1;
  _isNaN = Number.isNaN || function isNaN2(a) {
    return a !== a;
  };
  return _isNaN;
}
var sign;
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign;
  hasRequiredSign = 1;
  var $isNaN = /* @__PURE__ */ require_isNaN();
  sign = function sign2(number2) {
    if ($isNaN(number2) || number2 === 0) {
      return number2;
    }
    return number2 < 0 ? -1 : 1;
  };
  return sign;
}
var gOPD;
var hasRequiredGOPD;
function requireGOPD() {
  if (hasRequiredGOPD) return gOPD;
  hasRequiredGOPD = 1;
  gOPD = Object.getOwnPropertyDescriptor;
  return gOPD;
}
var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;
  var $gOPD = /* @__PURE__ */ requireGOPD();
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var $defineProperty = Object.defineProperty || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}
var shams$1;
var hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1) return shams$1;
  hasRequiredShams$1 = 1;
  shams$1 = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (var _ in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(obj, sym)
      );
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams$1;
}
var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = requireShams$1();
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}
var Reflect_getPrototypeOf;
var hasRequiredReflect_getPrototypeOf;
function requireReflect_getPrototypeOf() {
  if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;
  hasRequiredReflect_getPrototypeOf = 1;
  Reflect_getPrototypeOf = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  return Reflect_getPrototypeOf;
}
var Object_getPrototypeOf;
var hasRequiredObject_getPrototypeOf;
function requireObject_getPrototypeOf() {
  if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;
  hasRequiredObject_getPrototypeOf = 1;
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  Object_getPrototypeOf = $Object.getPrototypeOf || null;
  return Object_getPrototypeOf;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max2 = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a, b) {
    var arr = [];
    for (var i = 0; i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i = 0; i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation = function bind2(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max2(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs[i] = "$" + i;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation;
}
var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation2 = requireImplementation();
  functionBind = Function.prototype.bind || implementation2;
  return functionBind;
}
var functionCall;
var hasRequiredFunctionCall;
function requireFunctionCall() {
  if (hasRequiredFunctionCall) return functionCall;
  hasRequiredFunctionCall = 1;
  functionCall = Function.prototype.call;
  return functionCall;
}
var functionApply;
var hasRequiredFunctionApply;
function requireFunctionApply() {
  if (hasRequiredFunctionApply) return functionApply;
  hasRequiredFunctionApply = 1;
  functionApply = Function.prototype.apply;
  return functionApply;
}
var reflectApply;
var hasRequiredReflectApply;
function requireReflectApply() {
  if (hasRequiredReflectApply) return reflectApply;
  hasRequiredReflectApply = 1;
  reflectApply = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  return reflectApply;
}
var actualApply;
var hasRequiredActualApply;
function requireActualApply() {
  if (hasRequiredActualApply) return actualApply;
  hasRequiredActualApply = 1;
  var bind2 = requireFunctionBind();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var $reflectApply = requireReflectApply();
  actualApply = $reflectApply || bind2.call($call, $apply);
  return actualApply;
}
var callBindApplyHelpers;
var hasRequiredCallBindApplyHelpers;
function requireCallBindApplyHelpers() {
  if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
  hasRequiredCallBindApplyHelpers = 1;
  var bind2 = requireFunctionBind();
  var $TypeError = /* @__PURE__ */ requireType();
  var $call = requireFunctionCall();
  var $actualApply = requireActualApply();
  callBindApplyHelpers = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== "function") {
      throw new $TypeError("a function is required");
    }
    return $actualApply(bind2, $call, args);
  };
  return callBindApplyHelpers;
}
var get;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get;
  hasRequiredGet = 1;
  var callBind = requireCallBindApplyHelpers();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var hasProtoAccessor;
  try {
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (e) {
    if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
      throw e;
    }
  }
  var desc = !!hasProtoAccessor && gOPD2 && gOPD2(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  );
  var $Object = Object;
  var $getPrototypeOf = $Object.getPrototypeOf;
  get = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
    /** @type {import('./get')} */
    function getDunder(value) {
      return $getPrototypeOf(value == null ? value : $Object(value));
    }
  ) : false;
  return get;
}
var getProto;
var hasRequiredGetProto;
function requireGetProto() {
  if (hasRequiredGetProto) return getProto;
  hasRequiredGetProto = 1;
  var reflectGetProto = requireReflect_getPrototypeOf();
  var originalGetProto = requireObject_getPrototypeOf();
  var getDunderProto = /* @__PURE__ */ requireGet();
  getProto = reflectGetProto ? function getProto2(O) {
    return reflectGetProto(O);
  } : originalGetProto ? function getProto2(O) {
    if (!O || typeof O !== "object" && typeof O !== "function") {
      throw new TypeError("getProto: not an object");
    }
    return originalGetProto(O);
  } : getDunderProto ? function getProto2(O) {
    return getDunderProto(O);
  } : null;
  return getProto;
}
var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind2 = requireFunctionBind();
  hasown = bind2.call(call, $hasOwn);
  return hasown;
}
var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  var $Error = /* @__PURE__ */ requireEsErrors();
  var $EvalError = /* @__PURE__ */ require_eval();
  var $RangeError = /* @__PURE__ */ requireRange();
  var $ReferenceError = /* @__PURE__ */ requireRef();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $TypeError = /* @__PURE__ */ requireType();
  var $URIError = /* @__PURE__ */ requireUri();
  var abs2 = /* @__PURE__ */ requireAbs();
  var floor2 = /* @__PURE__ */ requireFloor();
  var max2 = /* @__PURE__ */ requireMax();
  var min2 = /* @__PURE__ */ requireMin();
  var pow2 = /* @__PURE__ */ requirePow();
  var round2 = /* @__PURE__ */ requireRound();
  var sign2 = /* @__PURE__ */ requireSign();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = /* @__PURE__ */ requireGopd();
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols2 = requireHasSymbols()();
  var getProto2 = requireGetProto();
  var $ObjectGPO = requireObject_getPrototypeOf();
  var $ReflectGPO = requireReflect_getPrototypeOf();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto2 ? undefined$1 : getProto2(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float16Array%": typeof Float16Array === "undefined" ? undefined$1 : Float16Array,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(getProto2([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": $Object,
    "%Object.getOwnPropertyDescriptor%": $gOPD,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto2 ? undefined$1 : getProto2((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols2 && getProto2 ? getProto2(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet,
    "%Function.prototype.call%": $call,
    "%Function.prototype.apply%": $apply,
    "%Object.defineProperty%": $defineProperty,
    "%Object.getPrototypeOf%": $ObjectGPO,
    "%Math.abs%": abs2,
    "%Math.floor%": floor2,
    "%Math.max%": max2,
    "%Math.min%": min2,
    "%Math.pow%": pow2,
    "%Math.round%": round2,
    "%Math.sign%": sign2,
    "%Reflect.getPrototypeOf%": $ReflectGPO
  };
  if (getProto2) {
    try {
      null.error;
    } catch (e) {
      var errorProto = getProto2(getProto2(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto2) {
        value = getProto2(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind2 = requireFunctionBind();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var $concat = bind2.call($call, Array.prototype.concat);
  var $spliceApply = bind2.call($apply, Array.prototype.splice);
  var $replace = bind2.call($call, String.prototype.replace);
  var $strSlice = bind2.call($call, String.prototype.slice);
  var $exec = bind2.call($call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string2) {
    var first = $strSlice(string2, 0, 1);
    var last = $strSlice(string2, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string2, rePropName, function(match, number2, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void undefined$1;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return getIntrinsic;
}
var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams) return shams;
  hasRequiredShams = 1;
  var hasSymbols2 = requireShams$1();
  shams = function hasToStringTagShams() {
    return hasSymbols2() && !!Symbol.toStringTag;
  };
  return shams;
}
var esSetTostringtag;
var hasRequiredEsSetTostringtag;
function requireEsSetTostringtag() {
  if (hasRequiredEsSetTostringtag) return esSetTostringtag;
  hasRequiredEsSetTostringtag = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
  var hasToStringTag = requireShams()();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var $TypeError = /* @__PURE__ */ requireType();
  var toStringTag2 = hasToStringTag ? Symbol.toStringTag : null;
  esSetTostringtag = function setToStringTag(object, value) {
    var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
    var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
    if (typeof overrideIfSet !== "undefined" && typeof overrideIfSet !== "boolean" || typeof nonConfigurable !== "undefined" && typeof nonConfigurable !== "boolean") {
      throw new $TypeError("if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans");
    }
    if (toStringTag2 && (overrideIfSet || !hasOwn(object, toStringTag2))) {
      if ($defineProperty) {
        $defineProperty(object, toStringTag2, {
          configurable: !nonConfigurable,
          enumerable: false,
          value,
          writable: false
        });
      } else {
        object[toStringTag2] = value;
      }
    }
  };
  return esSetTostringtag;
}
var populate;
var hasRequiredPopulate;
function requirePopulate() {
  if (hasRequiredPopulate) return populate;
  hasRequiredPopulate = 1;
  populate = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };
  return populate;
}
var form_data;
var hasRequiredForm_data;
function requireForm_data() {
  if (hasRequiredForm_data) return form_data;
  hasRequiredForm_data = 1;
  var CombinedStream = requireCombined_stream();
  var util2 = require$$0$2;
  var path = require$$1$1;
  var http2 = require$$1;
  var https2 = require$$2;
  var parseUrl = require$$0$6.parse;
  var fs2 = require$$6;
  var Stream = stream.Stream;
  var crypto2 = require$$8;
  var mime = requireMimeTypes();
  var asynckit2 = requireAsynckit();
  var setToStringTag = /* @__PURE__ */ requireEsSetTostringtag();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var populate2 = requirePopulate();
  function FormData2(options) {
    if (!(this instanceof FormData2)) {
      return new FormData2(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  }
  util2.inherits(FormData2, CombinedStream);
  FormData2.LINE_BREAK = "\r\n";
  FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
  FormData2.prototype.append = function(field, value, options) {
    options = options || {};
    if (typeof options === "string") {
      options = { filename: options };
    }
    var append2 = CombinedStream.prototype.append.bind(this);
    if (typeof value === "number" || value == null) {
      value = String(value);
    }
    if (Array.isArray(value)) {
      this._error(new Error("Arrays are not supported."));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append2(header);
    append2(value);
    append2(footer);
    this._trackLength(header, value, options);
  };
  FormData2.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    if (options.knownLength != null) {
      valueLength += Number(options.knownLength);
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === "string") {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
    if (!value || !value.path && !(value.readable && hasOwn(value, "httpVersion")) && !(value instanceof Stream)) {
      return;
    }
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData2.prototype._lengthRetriever = function(value, callback) {
    if (hasOwn(value, "fd")) {
      if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
        callback(null, value.end + 1 - (value.start ? value.start : 0));
      } else {
        fs2.stat(value.path, function(err, stat2) {
          if (err) {
            callback(err);
            return;
          }
          var fileSize = stat2.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }
    } else if (hasOwn(value, "httpVersion")) {
      callback(null, Number(value.headers["content-length"]));
    } else if (hasOwn(value, "httpModule")) {
      value.on("response", function(response) {
        value.pause();
        callback(null, Number(response.headers["content-length"]));
      });
      value.resume();
    } else {
      callback("Unknown stream");
    }
  };
  FormData2.prototype._multiPartHeader = function(field, value, options) {
    if (typeof options.header === "string") {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = "";
    var headers = {
      // add custom disposition as third element or keep it two elements if not
      "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
      // if no content type. allow it to be empty array
      "Content-Type": [].concat(contentType || [])
    };
    if (typeof options.header === "object") {
      populate2(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (hasOwn(headers, prop)) {
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
        }
      }
    }
    return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
  };
  FormData2.prototype._getContentDisposition = function(value, options) {
    var filename;
    if (typeof options.filepath === "string") {
      filename = path.normalize(options.filepath).replace(/\\/g, "/");
    } else if (options.filename || value && (value.name || value.path)) {
      filename = path.basename(options.filename || value && (value.name || value.path));
    } else if (value && value.readable && hasOwn(value, "httpVersion")) {
      filename = path.basename(value.client._httpMessage.path || "");
    }
    if (filename) {
      return 'filename="' + filename + '"';
    }
  };
  FormData2.prototype._getContentType = function(value, options) {
    var contentType = options.contentType;
    if (!contentType && value && value.name) {
      contentType = mime.lookup(value.name);
    }
    if (!contentType && value && value.path) {
      contentType = mime.lookup(value.path);
    }
    if (!contentType && value && value.readable && hasOwn(value, "httpVersion")) {
      contentType = value.headers["content-type"];
    }
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime.lookup(options.filepath || options.filename);
    }
    if (!contentType && value && typeof value === "object") {
      contentType = FormData2.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData2.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData2.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData2.prototype._lastBoundary = function() {
    return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
  };
  FormData2.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
      "content-type": "multipart/form-data; boundary=" + this.getBoundary()
    };
    for (header in userHeaders) {
      if (hasOwn(userHeaders, header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData2.prototype.setBoundary = function(boundary) {
    if (typeof boundary !== "string") {
      throw new TypeError("FormData boundary must be a string");
    }
    this._boundary = boundary;
  };
  FormData2.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData2.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    for (var i = 0, len = this._streams.length; i < len; i++) {
      if (typeof this._streams[i] !== "function") {
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }
        if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
        }
      }
    }
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData2.prototype._generateBoundary = function() {
    this._boundary = "--------------------------" + crypto2.randomBytes(12).toString("hex");
  };
  FormData2.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this.hasKnownLength()) {
      this._error(new Error("Cannot calculate proper length in synchronous way."));
    }
    return knownLength;
  };
  FormData2.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData2.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit2.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function(length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData2.prototype.submit = function(params, cb) {
    var request2;
    var options;
    var defaults2 = { method: "post" };
    if (typeof params === "string") {
      params = parseUrl(params);
      options = populate2({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults2);
    } else {
      options = populate2(params, defaults2);
      if (!options.port) {
        options.port = options.protocol === "https:" ? 443 : 80;
      }
    }
    options.headers = this.getHeaders(params.headers);
    if (options.protocol === "https:") {
      request2 = https2.request(options);
    } else {
      request2 = http2.request(options);
    }
    this.getLength(function(err, length) {
      if (err && err !== "Unknown stream") {
        this._error(err);
        return;
      }
      if (length) {
        request2.setHeader("Content-Length", length);
      }
      this.pipe(request2);
      if (cb) {
        var onResponse;
        var callback = function(error, responce) {
          request2.removeListener("error", callback);
          request2.removeListener("response", onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request2.on("error", callback);
        request2.on("response", onResponse);
      }
    }.bind(this));
    return request2;
  };
  FormData2.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit("error", err);
    }
  };
  FormData2.prototype.toString = function() {
    return "[object FormData]";
  };
  setToStringTag(FormData2, "FormData");
  form_data = FormData2;
  return form_data;
}
var form_dataExports = requireForm_data();
const FormData$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(form_dataExports);
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}
function removeBrackets(key) {
  return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData$1(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (FormData$1 || FormData)();
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils$1.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
  if (!utils$1.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils$1.isDate(value)) {
      return value.toISOString();
    }
    if (utils$1.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError$1("Blob is not supported. Use a Buffer instead.");
    }
    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils$1.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils$1.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils$1.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils$1.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
function encode$1(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData$1(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode;
  if (utils$1.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}
const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
const URLSearchParams$1 = require$$0$6.URLSearchParams;
const ALPHA = "abcdefghijklmnopqrstuvwxyz";
const DIGIT = "0123456789";
const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  const randomValues = new Uint32Array(size);
  crypto.randomFillSync(randomValues);
  for (let i = 0; i < size; i++) {
    str += alphabet[randomValues[i] % length];
  }
  return str;
};
const platform$1 = {
  isNode: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: typeof Blob !== "undefined" && Blob || null
  },
  ALPHABET,
  generateString,
  protocols: ["http", "https", "file", "data"]
};
const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
const _navigator = typeof navigator === "object" && navigator || void 0;
const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
const hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
const origin = hasBrowserEnv && window.location.href || "http://localhost";
const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv,
  hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv,
  navigator: _navigator,
  origin
}, Symbol.toStringTag, { value: "Module" }));
const platform = {
  ...utils,
  ...platform$1
};
function toURLEncodedForm(data2, options) {
  return toFormData$1(data2, new platform.classes.URLSearchParams(), {
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    },
    ...options
  });
}
function parsePropPath(name) {
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};
    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
function stringifySafely(rawValue, parser2, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser2 || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: transitionalDefaults,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data2, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils$1.isObject(data2);
    if (isObjectPayload && utils$1.isHTMLForm(data2)) {
      data2 = new FormData(data2);
    }
    const isFormData2 = utils$1.isFormData(data2);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data2)) : data2;
    }
    if (utils$1.isArrayBuffer(data2) || utils$1.isBuffer(data2) || utils$1.isStream(data2) || utils$1.isFile(data2) || utils$1.isBlob(data2) || utils$1.isReadableStream(data2)) {
      return data2;
    }
    if (utils$1.isArrayBufferView(data2)) {
      return data2.buffer;
    }
    if (utils$1.isURLSearchParams(data2)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data2.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data2, this.formSerializer).toString();
      }
      if ((isFileList2 = utils$1.isFileList(data2)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData$1(
          isFileList2 ? { "files[]": data2 } : data2,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data2);
    }
    return data2;
  }],
  transformResponse: [function transformResponse(data2) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils$1.isResponse(data2) || utils$1.isReadableStream(data2)) {
      return data2;
    }
    if (data2 && utils$1.isString(data2) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data2);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError$1.from(e, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data2;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
const ignoreDuplicateOf = utils$1.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
const parseHeaders = (rawHeaders2) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders2 && rawHeaders2.split("\n").forEach(function parser2(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils$1.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils$1.isString(value)) return;
  if (utils$1.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils$1.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
let AxiosHeaders$1 = class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils$1.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils$1.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser2) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser2) {
          return value;
        }
        if (parser2 === true) {
          return parseTokens(value);
        }
        if (utils$1.isFunction(parser2)) {
          return parser2.call(this, value, key);
        }
        if (utils$1.isRegExp(parser2)) {
          return parser2.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils$1.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format2) {
    const self2 = this;
    const headers = {};
    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format2 ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype2 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype2, _header);
        accessors[lHeader] = true;
      }
    }
    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders$1.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils$1.freezeMethods(AxiosHeaders$1);
function transformData(fns, response) {
  const config2 = this || defaults;
  const context = response || config2;
  const headers = AxiosHeaders$1.from(context.headers);
  let data2 = context.data;
  utils$1.forEach(fns, function transform(fn) {
    data2 = fn.call(config2, data2, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data2;
}
function isCancel$1(value) {
  return !!(value && value.__CANCEL__);
}
function CanceledError$1(message2, config2, request2) {
  AxiosError$1.call(this, message2 == null ? "canceled" : message2, AxiosError$1.ERR_CANCELED, config2, request2);
  this.name = "CanceledError";
}
utils$1.inherits(CanceledError$1, AxiosError$1, {
  __CANCEL__: true
});
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$1(
      "Request failed with status code " + response.status,
      [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var proxyFromEnv$1 = {};
var hasRequiredProxyFromEnv;
function requireProxyFromEnv() {
  if (hasRequiredProxyFromEnv) return proxyFromEnv$1;
  hasRequiredProxyFromEnv = 1;
  var parseUrl = require$$0$6.parse;
  var DEFAULT_PORTS = {
    ftp: 21,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var stringEndsWith = String.prototype.endsWith || function(s) {
    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
  };
  function getProxyForUrl(url) {
    var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
    var proto = parsedUrl.protocol;
    var hostname = parsedUrl.host;
    var port = parsedUrl.port;
    if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
      return "";
    }
    proto = proto.split(":", 1)[0];
    hostname = hostname.replace(/:\d*$/, "");
    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
    if (!shouldProxy(hostname, port)) {
      return "";
    }
    var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
    if (proxy && proxy.indexOf("://") === -1) {
      proxy = proto + "://" + proxy;
    }
    return proxy;
  }
  function shouldProxy(hostname, port) {
    var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
    if (!NO_PROXY) {
      return true;
    }
    if (NO_PROXY === "*") {
      return false;
    }
    return NO_PROXY.split(/[,\s]/).every(function(proxy) {
      if (!proxy) {
        return true;
      }
      var parsedProxy = proxy.match(/^(.+):(\d+)$/);
      var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
      var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
      if (parsedProxyPort && parsedProxyPort !== port) {
        return true;
      }
      if (!/^[.*]/.test(parsedProxyHostname)) {
        return hostname !== parsedProxyHostname;
      }
      if (parsedProxyHostname.charAt(0) === "*") {
        parsedProxyHostname = parsedProxyHostname.slice(1);
      }
      return !stringEndsWith.call(hostname, parsedProxyHostname);
    });
  }
  function getEnv(key) {
    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
  }
  proxyFromEnv$1.getProxyForUrl = getProxyForUrl;
  return proxyFromEnv$1;
}
var proxyFromEnvExports = requireProxyFromEnv();
const proxyFromEnv = /* @__PURE__ */ getDefaultExportFromCjs$1(proxyFromEnvExports);
var followRedirects$1 = { exports: {} };
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var ms;
var hasRequiredMs;
function requireMs() {
  if (hasRequiredMs) return ms;
  hasRequiredMs = 1;
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  ms = function(val, options) {
    options = options || {};
    var type2 = typeof val;
    if (type2 === "string" && val.length > 0) {
      return parse(val);
    } else if (type2 === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
    );
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
      str
    );
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type2 = (match[2] || "ms").toLowerCase();
    switch (type2) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return Math.round(ms2 / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms2 / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms2 / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms2 / s) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return plural(ms2, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms2, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms2, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms2, msAbs, s, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
  }
  return ms;
}
var msExports = requireMs();
const humanize = /* @__PURE__ */ getDefaultExportFromCjs(msExports);
var common;
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  function setup2(env2) {
    createDebug2.debug = createDebug2;
    createDebug2.default = createDebug2;
    createDebug2.coerce = coerce;
    createDebug2.disable = disable;
    createDebug2.enable = enable;
    createDebug2.enabled = enabled;
    createDebug2.humanize = requireMs();
    createDebug2.destroy = destroy;
    Object.keys(env2).forEach((key) => {
      createDebug2[key] = env2[key];
    });
    createDebug2.names = [];
    createDebug2.skips = [];
    createDebug2.formatters = {};
    function selectColor(namespace) {
      let hash2 = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i);
        hash2 |= 0;
      }
      return createDebug2.colors[Math.abs(hash2) % createDebug2.colors.length];
    }
    createDebug2.selectColor = selectColor;
    function createDebug2(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug2(...args) {
        if (!debug2.enabled) {
          return;
        }
        const self2 = debug2;
        const curr = Number(/* @__PURE__ */ new Date());
        const ms2 = curr - (prevTime || curr);
        self2.diff = ms2;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug2.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug2.formatters[format2];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug2.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug2.log;
        logFn.apply(self2, args);
      }
      debug2.namespace = namespace;
      debug2.useColors = createDebug2.useColors();
      debug2.color = createDebug2.selectColor(namespace);
      debug2.extend = extend2;
      debug2.destroy = createDebug2.destroy;
      Object.defineProperty(debug2, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug2.namespaces) {
            namespacesCache = createDebug2.namespaces;
            enabledCache = createDebug2.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug2.init === "function") {
        createDebug2.init(debug2);
      }
      return debug2;
    }
    function extend2(namespace, delimiter) {
      const newDebug = createDebug2(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug2.save(namespaces);
      createDebug2.namespaces = namespaces;
      createDebug2.names = [];
      createDebug2.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug2.skips.push(ns.slice(1));
        } else {
          createDebug2.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug2.names,
        ...createDebug2.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug2.enable("");
      return namespaces;
    }
    function enabled(name) {
      for (const skip of createDebug2.skips) {
        if (matchesTemplate(name, skip)) {
          return false;
        }
      }
      for (const ns of createDebug2.names) {
        if (matchesTemplate(name, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug2.enable(createDebug2.load());
    return createDebug2;
  }
  common = setup2;
  return common;
}
var commonExports = requireCommon();
const setup = /* @__PURE__ */ getDefaultExportFromCjs(commonExports);
const createDebug = setup({
  log: console.debug.bind(console),
  load: () => env$1.DEBUG,
  save: () => {
  },
  colors: [],
  useColors: () => false,
  destroy: () => {
  },
  formatArgs(args) {
    args[0] = this.namespace + " " + args[0] + " +" + humanize(this.diff);
  }
});
const debug = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: createDebug
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(debug);
var debug_1;
var hasRequiredDebug;
function requireDebug() {
  if (hasRequiredDebug) return debug_1;
  hasRequiredDebug = 1;
  var debug2;
  debug_1 = function() {
    if (!debug2) {
      try {
        debug2 = require$$0("follow-redirects");
      } catch (error) {
      }
      if (typeof debug2 !== "function") {
        debug2 = function() {
        };
      }
    }
    debug2.apply(null, arguments);
  };
  return debug_1;
}
var hasRequiredFollowRedirects;
function requireFollowRedirects() {
  if (hasRequiredFollowRedirects) return followRedirects$1.exports;
  hasRequiredFollowRedirects = 1;
  var url = require$$0$6;
  var URL2 = url.URL;
  var http2 = require$$1;
  var https2 = require$$2;
  var Writable2 = stream.Writable;
  var assert2 = require$$4;
  var debug2 = requireDebug();
  (function detectUnsupportedEnvironment() {
    var looksLikeNode = typeof process !== "undefined";
    var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
    var looksLikeV8 = isFunction2(Error.captureStackTrace);
    if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
      console.warn("The follow-redirects package should be excluded from browser builds.");
    }
  })();
  var useNativeURL = false;
  try {
    assert2(new URL2(""));
  } catch (error) {
    useNativeURL = error.code === "ERR_INVALID_URL";
  }
  var preservedUrlFields = [
    "auth",
    "host",
    "hostname",
    "href",
    "path",
    "pathname",
    "port",
    "protocol",
    "query",
    "search",
    "hash"
  ];
  var events2 = ["abort", "aborted", "connect", "error", "socket", "timeout"];
  var eventHandlers = /* @__PURE__ */ Object.create(null);
  events2.forEach(function(event) {
    eventHandlers[event] = function(arg1, arg2, arg3) {
      this._redirectable.emit(event, arg1, arg2, arg3);
    };
  });
  var InvalidUrlError = createErrorType(
    "ERR_INVALID_URL",
    "Invalid URL",
    TypeError
  );
  var RedirectionError = createErrorType(
    "ERR_FR_REDIRECTION_FAILURE",
    "Redirected request failed"
  );
  var TooManyRedirectsError = createErrorType(
    "ERR_FR_TOO_MANY_REDIRECTS",
    "Maximum number of redirects exceeded",
    RedirectionError
  );
  var MaxBodyLengthExceededError = createErrorType(
    "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
    "Request body larger than maxBodyLength limit"
  );
  var WriteAfterEndError = createErrorType(
    "ERR_STREAM_WRITE_AFTER_END",
    "write after end"
  );
  var destroy = Writable2.prototype.destroy || noop2;
  function RedirectableRequest(options, responseCallback) {
    Writable2.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];
    if (responseCallback) {
      this.on("response", responseCallback);
    }
    var self2 = this;
    this._onNativeResponse = function(response) {
      try {
        self2._processResponse(response);
      } catch (cause) {
        self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
      }
    };
    this._performRequest();
  }
  RedirectableRequest.prototype = Object.create(Writable2.prototype);
  RedirectableRequest.prototype.abort = function() {
    destroyRequest(this._currentRequest);
    this._currentRequest.abort();
    this.emit("abort");
  };
  RedirectableRequest.prototype.destroy = function(error) {
    destroyRequest(this._currentRequest, error);
    destroy.call(this, error);
    return this;
  };
  RedirectableRequest.prototype.write = function(data2, encoding, callback) {
    if (this._ending) {
      throw new WriteAfterEndError();
    }
    if (!isString2(data2) && !isBuffer2(data2)) {
      throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction2(encoding)) {
      callback = encoding;
      encoding = null;
    }
    if (data2.length === 0) {
      if (callback) {
        callback();
      }
      return;
    }
    if (this._requestBodyLength + data2.length <= this._options.maxBodyLength) {
      this._requestBodyLength += data2.length;
      this._requestBodyBuffers.push({ data: data2, encoding });
      this._currentRequest.write(data2, encoding, callback);
    } else {
      this.emit("error", new MaxBodyLengthExceededError());
      this.abort();
    }
  };
  RedirectableRequest.prototype.end = function(data2, encoding, callback) {
    if (isFunction2(data2)) {
      callback = data2;
      data2 = encoding = null;
    } else if (isFunction2(encoding)) {
      callback = encoding;
      encoding = null;
    }
    if (!data2) {
      this._ended = this._ending = true;
      this._currentRequest.end(null, null, callback);
    } else {
      var self2 = this;
      var currentRequest = this._currentRequest;
      this.write(data2, encoding, function() {
        self2._ended = true;
        currentRequest.end(null, null, callback);
      });
      this._ending = true;
    }
  };
  RedirectableRequest.prototype.setHeader = function(name, value) {
    this._options.headers[name] = value;
    this._currentRequest.setHeader(name, value);
  };
  RedirectableRequest.prototype.removeHeader = function(name) {
    delete this._options.headers[name];
    this._currentRequest.removeHeader(name);
  };
  RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
    var self2 = this;
    function destroyOnTimeout(socket) {
      socket.setTimeout(msecs);
      socket.removeListener("timeout", socket.destroy);
      socket.addListener("timeout", socket.destroy);
    }
    function startTimer(socket) {
      if (self2._timeout) {
        clearTimeout(self2._timeout);
      }
      self2._timeout = setTimeout(function() {
        self2.emit("timeout");
        clearTimer();
      }, msecs);
      destroyOnTimeout(socket);
    }
    function clearTimer() {
      if (self2._timeout) {
        clearTimeout(self2._timeout);
        self2._timeout = null;
      }
      self2.removeListener("abort", clearTimer);
      self2.removeListener("error", clearTimer);
      self2.removeListener("response", clearTimer);
      self2.removeListener("close", clearTimer);
      if (callback) {
        self2.removeListener("timeout", callback);
      }
      if (!self2.socket) {
        self2._currentRequest.removeListener("socket", startTimer);
      }
    }
    if (callback) {
      this.on("timeout", callback);
    }
    if (this.socket) {
      startTimer(this.socket);
    } else {
      this._currentRequest.once("socket", startTimer);
    }
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    this.on("close", clearTimer);
    return this;
  };
  [
    "flushHeaders",
    "getHeader",
    "setNoDelay",
    "setSocketKeepAlive"
  ].forEach(function(method) {
    RedirectableRequest.prototype[method] = function(a, b) {
      return this._currentRequest[method](a, b);
    };
  });
  ["aborted", "connection", "socket"].forEach(function(property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
      get: function() {
        return this._currentRequest[property];
      }
    });
  });
  RedirectableRequest.prototype._sanitizeOptions = function(options) {
    if (!options.headers) {
      options.headers = {};
    }
    if (options.host) {
      if (!options.hostname) {
        options.hostname = options.host;
      }
      delete options.host;
    }
    if (!options.pathname && options.path) {
      var searchPos = options.path.indexOf("?");
      if (searchPos < 0) {
        options.pathname = options.path;
      } else {
        options.pathname = options.path.substring(0, searchPos);
        options.search = options.path.substring(searchPos);
      }
    }
  };
  RedirectableRequest.prototype._performRequest = function() {
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
      throw new TypeError("Unsupported protocol " + protocol);
    }
    if (this._options.agents) {
      var scheme = protocol.slice(0, -1);
      this._options.agent = this._options.agents[scheme];
    }
    var request2 = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request2._redirectable = this;
    for (var event of events2) {
      request2.on(event, eventHandlers[event]);
    }
    this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
      // When making a request to a proxy, […]
      // a client MUST send the target URI in absolute-form […].
      this._options.path
    );
    if (this._isRedirect) {
      var i = 0;
      var self2 = this;
      var buffers = this._requestBodyBuffers;
      (function writeNext(error) {
        if (request2 === self2._currentRequest) {
          if (error) {
            self2.emit("error", error);
          } else if (i < buffers.length) {
            var buffer = buffers[i++];
            if (!request2.finished) {
              request2.write(buffer.data, buffer.encoding, writeNext);
            }
          } else if (self2._ended) {
            request2.end();
          }
        }
      })();
    }
  };
  RedirectableRequest.prototype._processResponse = function(response) {
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
      this._redirects.push({
        url: this._currentUrl,
        headers: response.headers,
        statusCode
      });
    }
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
      response.responseUrl = this._currentUrl;
      response.redirects = this._redirects;
      this.emit("response", response);
      this._requestBodyBuffers = [];
      return;
    }
    destroyRequest(this._currentRequest);
    response.destroy();
    if (++this._redirectCount > this._options.maxRedirects) {
      throw new TooManyRedirectsError();
    }
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
      requestHeaders = Object.assign({
        // The Host header was set by nativeProtocol.request
        Host: response.req.getHeader("host")
      }, this._options.headers);
    }
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
      this._options.method = "GET";
      this._requestBodyBuffers = [];
      removeMatchingHeaders(/^content-/i, this._options.headers);
    }
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
    var currentUrlParts = parseUrl(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
    var redirectUrl = resolveUrl(location, currentUrl);
    debug2("redirecting to", redirectUrl.href);
    this._isRedirect = true;
    spreadUrlObject(redirectUrl, this._options);
    if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
      removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
    }
    if (isFunction2(beforeRedirect)) {
      var responseDetails = {
        headers: response.headers,
        statusCode
      };
      var requestDetails = {
        url: currentUrl,
        method,
        headers: requestHeaders
      };
      beforeRedirect(this._options, responseDetails, requestDetails);
      this._sanitizeOptions(this._options);
    }
    this._performRequest();
  };
  function wrap(protocols) {
    var exports = {
      maxRedirects: 21,
      maxBodyLength: 10 * 1024 * 1024
    };
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function(scheme) {
      var protocol = scheme + ":";
      var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
      var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
      function request2(input, options, callback) {
        if (isURL(input)) {
          input = spreadUrlObject(input);
        } else if (isString2(input)) {
          input = spreadUrlObject(parseUrl(input));
        } else {
          callback = options;
          options = validateUrl(input);
          input = { protocol };
        }
        if (isFunction2(options)) {
          callback = options;
          options = null;
        }
        options = Object.assign({
          maxRedirects: exports.maxRedirects,
          maxBodyLength: exports.maxBodyLength
        }, input, options);
        options.nativeProtocols = nativeProtocols;
        if (!isString2(options.host) && !isString2(options.hostname)) {
          options.hostname = "::1";
        }
        assert2.equal(options.protocol, protocol, "protocol mismatch");
        debug2("options", options);
        return new RedirectableRequest(options, callback);
      }
      function get2(input, options, callback) {
        var wrappedRequest = wrappedProtocol.request(input, options, callback);
        wrappedRequest.end();
        return wrappedRequest;
      }
      Object.defineProperties(wrappedProtocol, {
        request: { value: request2, configurable: true, enumerable: true, writable: true },
        get: { value: get2, configurable: true, enumerable: true, writable: true }
      });
    });
    return exports;
  }
  function noop2() {
  }
  function parseUrl(input) {
    var parsed;
    if (useNativeURL) {
      parsed = new URL2(input);
    } else {
      parsed = validateUrl(url.parse(input));
      if (!isString2(parsed.protocol)) {
        throw new InvalidUrlError({ input });
      }
    }
    return parsed;
  }
  function resolveUrl(relative, base) {
    return useNativeURL ? new URL2(relative, base) : parseUrl(url.resolve(base, relative));
  }
  function validateUrl(input) {
    if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
      throw new InvalidUrlError({ input: input.href || input });
    }
    if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
      throw new InvalidUrlError({ input: input.href || input });
    }
    return input;
  }
  function spreadUrlObject(urlObject, target) {
    var spread2 = target || {};
    for (var key of preservedUrlFields) {
      spread2[key] = urlObject[key];
    }
    if (spread2.hostname.startsWith("[")) {
      spread2.hostname = spread2.hostname.slice(1, -1);
    }
    if (spread2.port !== "") {
      spread2.port = Number(spread2.port);
    }
    spread2.path = spread2.search ? spread2.pathname + spread2.search : spread2.pathname;
    return spread2;
  }
  function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for (var header in headers) {
      if (regex.test(header)) {
        lastValue = headers[header];
        delete headers[header];
      }
    }
    return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
  }
  function createErrorType(code, message2, baseClass) {
    function CustomError(properties2) {
      if (isFunction2(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      }
      Object.assign(this, properties2 || {});
      this.code = code;
      this.message = this.cause ? message2 + ": " + this.cause.message : message2;
    }
    CustomError.prototype = new (baseClass || Error)();
    Object.defineProperties(CustomError.prototype, {
      constructor: {
        value: CustomError,
        enumerable: false
      },
      name: {
        value: "Error [" + code + "]",
        enumerable: false
      }
    });
    return CustomError;
  }
  function destroyRequest(request2, error) {
    for (var event of events2) {
      request2.removeListener(event, eventHandlers[event]);
    }
    request2.on("error", noop2);
    request2.destroy(error);
  }
  function isSubdomain(subdomain, domain2) {
    assert2(isString2(subdomain) && isString2(domain2));
    var dot = subdomain.length - domain2.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain2);
  }
  function isString2(value) {
    return typeof value === "string" || value instanceof String;
  }
  function isFunction2(value) {
    return typeof value === "function";
  }
  function isBuffer2(value) {
    return typeof value === "object" && "length" in value;
  }
  function isURL(value) {
    return URL2 && value instanceof URL2;
  }
  followRedirects$1.exports = wrap({ http: http2, https: https2 });
  followRedirects$1.exports.wrap = wrap;
  return followRedirects$1.exports;
}
var followRedirectsExports = requireFollowRedirects();
const followRedirects = /* @__PURE__ */ getDefaultExportFromCjs$1(followRedirectsExports);
const VERSION$2 = "1.11.0";
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}
const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
function fromDataURI(uri2, asBlob, options) {
  const _Blob = options && options.Blob || platform.classes.Blob;
  const protocol = parseProtocol(uri2);
  if (asBlob === void 0 && _Blob) {
    asBlob = true;
  }
  if (protocol === "data") {
    uri2 = protocol.length ? uri2.slice(protocol.length + 1) : uri2;
    const match = DATA_URL_PATTERN.exec(uri2);
    if (!match) {
      throw new AxiosError$1("Invalid URL", AxiosError$1.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError$1("Blob is not supported", AxiosError$1.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], { type: mime });
    }
    return buffer;
  }
  throw new AxiosError$1("Unsupported protocol " + protocol, AxiosError$1.ERR_NOT_SUPPORT);
}
const kInternals = Symbol("internals");
class AxiosTransformStream extends stream.Transform {
  constructor(options) {
    options = utils$1.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils$1.isUndefined(source[prop]);
    });
    super({
      readableHighWaterMark: options.chunkSize
    });
    const internals = this[kInternals] = {
      timeWindow: options.timeWindow,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };
    this.on("newListener", (event) => {
      if (event === "progress") {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
  }
  _read(size) {
    const internals = this[kInternals];
    if (internals.onReadCallback) {
      internals.onReadCallback();
    }
    return super._read(size);
  }
  _transform(chunk, encoding, callback) {
    const internals = this[kInternals];
    const maxRate = internals.maxRate;
    const readableHighWaterMark = this.readableHighWaterMark;
    const timeWindow = internals.timeWindow;
    const divider = 1e3 / timeWindow;
    const bytesThreshold = maxRate / divider;
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
    const pushChunk = (_chunk, _callback) => {
      const bytes2 = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes2;
      internals.bytes += bytes2;
      internals.isCaptured && this.emit("progress", internals.bytesSeen);
      if (this.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    };
    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;
      if (maxRate) {
        const now = Date.now();
        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }
        bytesLeft = bytesThreshold - internals.bytes;
      }
      if (maxRate) {
        if (bytesLeft <= 0) {
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }
        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }
      if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }
      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };
    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }
      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
}
const { asyncIterator } = Symbol;
const readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};
const BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + "-_";
const textEncoder = typeof TextEncoder === "function" ? new TextEncoder() : new util.TextEncoder();
const CRLF = "\r\n";
const CRLF_BYTES = textEncoder.encode(CRLF);
const CRLF_BYTES_COUNT = 2;
class FormDataPart {
  constructor(name, value) {
    const { escapeName } = this.constructor;
    const isStringValue = utils$1.isString(value);
    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
    }
    this.headers = textEncoder.encode(headers + CRLF);
    this.contentLength = isStringValue ? value.byteLength : value.size;
    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
    this.name = name;
    this.value = value;
  }
  async *encode() {
    yield this.headers;
    const { value } = this;
    if (utils$1.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob(value);
    }
    yield CRLF_BYTES;
  }
  static escapeName(name) {
    return String(name).replace(/[\r\n"]/g, (match) => ({
      "\r": "%0D",
      "\n": "%0A",
      '"': "%22"
    })[match]);
  }
}
const formDataToStream = (form, headersHandler, options) => {
  const {
    tag = "form-data-boundary",
    size = 25,
    boundary = tag + "-" + platform.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};
  if (!utils$1.isFormData(form)) {
    throw TypeError("FormData instance required");
  }
  if (boundary.length < 1 || boundary.length > 70) {
    throw Error("boundary must be 10-70 characters long");
  }
  const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
  const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF);
  let contentLength = footerBytes.byteLength;
  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });
  contentLength += boundaryBytes.byteLength * parts.length;
  contentLength = utils$1.toFiniteNumber(contentLength);
  const computedHeaders = {
    "Content-Type": `multipart/form-data; boundary=${boundary}`
  };
  if (Number.isFinite(contentLength)) {
    computedHeaders["Content-Length"] = contentLength;
  }
  headersHandler && headersHandler(computedHeaders);
  return Readable$1.from(async function* () {
    for (const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }
    yield footerBytes;
  }());
};
class ZlibHeaderTransformStream extends stream.Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }
  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;
      if (chunk[0] !== 120) {
        const header = Buffer.alloc(2);
        header[0] = 120;
        header[1] = 156;
        this.push(header, encoding);
      }
    }
    this.__transform(chunk, encoding, callback);
  }
}
const callbackify = (fn, reducer) => {
  return utils$1.isAsyncFn(fn) ? function(...args) {
    const cb = args.pop();
    fn.apply(this, args).then((value) => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};
function speedometer(samplesCount, min2) {
  samplesCount = samplesCount || 10;
  const bytes2 = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min2 = min2 !== void 0 ? min2 : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes2[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes2[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min2) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn(...args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return throttle((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data2 = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data2);
  }, freq);
};
const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
const zlibOptions = {
  flush: zlib.constants.Z_SYNC_FLUSH,
  finishFlush: zlib.constants.Z_SYNC_FLUSH
};
const brotliOptions = {
  flush: zlib.constants.BROTLI_OPERATION_FLUSH,
  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
};
const isBrotliSupported = utils$1.isFunction(zlib.createBrotliDecompress);
const { http: httpFollow, https: httpsFollow } = followRedirects;
const isHttps = /https:?/;
const supportedProtocols = platform.protocols.map((protocol) => {
  return protocol + ":";
});
const flushOnFinish = (stream2, [throttled, flush]) => {
  stream2.on("end", flush).on("error", flush);
  return throttled;
};
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = proxyFromEnv.getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    if (proxy.username) {
      proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
    }
    if (proxy.auth) {
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
      }
      const base642 = Buffer.from(proxy.auth, "utf8").toString("base64");
      options.headers["Proxy-Authorization"] = "Basic " + base642;
    }
    options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
const isHttpAdapterSupported = typeof process !== "undefined" && utils$1.kindOf(process) === "process";
const wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;
    const done = (value, isRejected) => {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    const _resolve = (value) => {
      done(value);
      resolve(value);
    };
    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
  });
};
const resolveFamily = ({ address: address2, family }) => {
  if (!utils$1.isString(address2)) {
    throw TypeError("address must be a string");
  }
  return {
    address: address2,
    family: family || (address2.indexOf(".") < 0 ? 6 : 4)
  };
};
const buildAddressEntry = (address2, family) => resolveFamily(utils$1.isObject(address2) ? address2 : { address: address2, family });
const httpAdapter = isHttpAdapterSupported && function httpAdapter2(config2) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let { data: data2, lookup, family } = config2;
    const { responseType, responseEncoding } = config2;
    const method = config2.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;
    if (lookup) {
      const _lookup = callbackify(lookup, (value) => utils$1.isArray(value) ? value : [value]);
      lookup = (hostname, opt, cb) => {
        _lookup(hostname, opt, (err, arg0, arg1) => {
          if (err) {
            return cb(err);
          }
          const addresses2 = utils$1.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
          opt.all ? cb(err, addresses2) : cb(err, addresses2[0].address, addresses2[0].family);
        });
      };
    }
    const emitter = new EventEmitter$1();
    const onFinished = () => {
      if (config2.cancelToken) {
        config2.cancelToken.unsubscribe(abort2);
      }
      if (config2.signal) {
        config2.signal.removeEventListener("abort", abort2);
      }
      emitter.removeAllListeners();
    };
    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });
    function abort2(reason) {
      emitter.emit("abort", !reason || reason.type ? new CanceledError$1(null, config2, req) : reason);
    }
    emitter.once("abort", reject);
    if (config2.cancelToken || config2.signal) {
      config2.cancelToken && config2.cancelToken.subscribe(abort2);
      if (config2.signal) {
        config2.signal.aborted ? abort2() : config2.signal.addEventListener("abort", abort2);
      }
    }
    const fullPath = buildFullPath(config2.baseURL, config2.url, config2.allowAbsoluteUrls);
    const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : void 0);
    const protocol = parsed.protocol || supportedProtocols[0];
    if (protocol === "data:") {
      let convertedData;
      if (method !== "GET") {
        return settle(resolve, reject, {
          status: 405,
          statusText: "method not allowed",
          headers: {},
          config: config2
        });
      }
      try {
        convertedData = fromDataURI(config2.url, responseType === "blob", {
          Blob: config2.env && config2.env.Blob
        });
      } catch (err) {
        throw AxiosError$1.from(err, AxiosError$1.ERR_BAD_REQUEST, config2);
      }
      if (responseType === "text") {
        convertedData = convertedData.toString(responseEncoding);
        if (!responseEncoding || responseEncoding === "utf8") {
          convertedData = utils$1.stripBOM(convertedData);
        }
      } else if (responseType === "stream") {
        convertedData = stream.Readable.from(convertedData);
      }
      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: "OK",
        headers: new AxiosHeaders$1(),
        config: config2
      });
    }
    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError$1(
        "Unsupported protocol " + protocol,
        AxiosError$1.ERR_BAD_REQUEST,
        config2
      ));
    }
    const headers = AxiosHeaders$1.from(config2.headers).normalize();
    headers.set("User-Agent", "axios/" + VERSION$2, false);
    const { onUploadProgress, onDownloadProgress } = config2;
    const maxRate = config2.maxRate;
    let maxUploadRate = void 0;
    let maxDownloadRate = void 0;
    if (utils$1.isSpecCompliantForm(data2)) {
      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
      data2 = formDataToStream(data2, (formHeaders) => {
        headers.set(formHeaders);
      }, {
        tag: `axios-${VERSION$2}-boundary`,
        boundary: userBoundary && userBoundary[1] || void 0
      });
    } else if (utils$1.isFormData(data2) && utils$1.isFunction(data2.getHeaders)) {
      headers.set(data2.getHeaders());
      if (!headers.hasContentLength()) {
        try {
          const knownLength = await util.promisify(data2.getLength).call(data2);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
        } catch (e) {
        }
      }
    } else if (utils$1.isBlob(data2) || utils$1.isFile(data2)) {
      data2.size && headers.setContentType(data2.type || "application/octet-stream");
      headers.setContentLength(data2.size || 0);
      data2 = stream.Readable.from(readBlob(data2));
    } else if (data2 && !utils$1.isStream(data2)) {
      if (Buffer.isBuffer(data2)) ;
      else if (utils$1.isArrayBuffer(data2)) {
        data2 = Buffer.from(new Uint8Array(data2));
      } else if (utils$1.isString(data2)) {
        data2 = Buffer.from(data2, "utf-8");
      } else {
        return reject(new AxiosError$1(
          "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
          AxiosError$1.ERR_BAD_REQUEST,
          config2
        ));
      }
      headers.setContentLength(data2.length, false);
      if (config2.maxBodyLength > -1 && data2.length > config2.maxBodyLength) {
        return reject(new AxiosError$1(
          "Request body larger than maxBodyLength limit",
          AxiosError$1.ERR_BAD_REQUEST,
          config2
        ));
      }
    }
    const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
    if (utils$1.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }
    if (data2 && (onUploadProgress || maxUploadRate)) {
      if (!utils$1.isStream(data2)) {
        data2 = stream.Readable.from(data2, { objectMode: false });
      }
      data2 = stream.pipeline([data2, new AxiosTransformStream({
        maxRate: utils$1.toFiniteNumber(maxUploadRate)
      })], utils$1.noop);
      onUploadProgress && data2.on("progress", flushOnFinish(
        data2,
        progressEventDecorator(
          contentLength,
          progressEventReducer(asyncDecorator(onUploadProgress), false, 3)
        )
      ));
    }
    let auth = void 0;
    if (config2.auth) {
      const username = config2.auth.username || "";
      const password = config2.auth.password || "";
      auth = username + ":" + password;
    }
    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + ":" + urlPassword;
    }
    auth && headers.delete("authorization");
    let path;
    try {
      path = buildURL(
        parsed.pathname + parsed.search,
        config2.params,
        config2.paramsSerializer
      ).replace(/^\?/, "");
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config2;
      customErr.url = config2.url;
      customErr.exists = true;
      return reject(customErr);
    }
    headers.set(
      "Accept-Encoding",
      "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
      false
    );
    const options = {
      path,
      method,
      headers: headers.toJSON(),
      agents: { http: config2.httpAgent, https: config2.httpsAgent },
      auth,
      protocol,
      family,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };
    !utils$1.isUndefined(lookup) && (options.lookup = lookup);
    if (config2.socketPath) {
      options.socketPath = config2.socketPath;
    } else {
      options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config2.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
    }
    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config2.httpsAgent : config2.httpAgent;
    if (config2.transport) {
      transport = config2.transport;
    } else if (config2.maxRedirects === 0) {
      transport = isHttpsRequest ? https : http;
    } else {
      if (config2.maxRedirects) {
        options.maxRedirects = config2.maxRedirects;
      }
      if (config2.beforeRedirect) {
        options.beforeRedirects.config = config2.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }
    if (config2.maxBodyLength > -1) {
      options.maxBodyLength = config2.maxBodyLength;
    } else {
      options.maxBodyLength = Infinity;
    }
    if (config2.insecureHTTPParser) {
      options.insecureHTTPParser = config2.insecureHTTPParser;
    }
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed) return;
      const streams = [res];
      const responseLength = +res.headers["content-length"];
      if (onDownloadProgress || maxDownloadRate) {
        const transformStream = new AxiosTransformStream({
          maxRate: utils$1.toFiniteNumber(maxDownloadRate)
        });
        onDownloadProgress && transformStream.on("progress", flushOnFinish(
          transformStream,
          progressEventDecorator(
            responseLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)
          )
        ));
        streams.push(transformStream);
      }
      let responseStream = res;
      const lastRequest = res.req || req;
      if (config2.decompress !== false && res.headers["content-encoding"]) {
        if (method === "HEAD" || res.statusCode === 204) {
          delete res.headers["content-encoding"];
        }
        switch ((res.headers["content-encoding"] || "").toLowerCase()) {
          /*eslint default-case:0*/
          case "gzip":
          case "x-gzip":
          case "compress":
          case "x-compress":
            streams.push(zlib.createUnzip(zlibOptions));
            delete res.headers["content-encoding"];
            break;
          case "deflate":
            streams.push(new ZlibHeaderTransformStream());
            streams.push(zlib.createUnzip(zlibOptions));
            delete res.headers["content-encoding"];
            break;
          case "br":
            if (isBrotliSupported) {
              streams.push(zlib.createBrotliDecompress(brotliOptions));
              delete res.headers["content-encoding"];
            }
        }
      }
      responseStream = streams.length > 1 ? stream.pipeline(streams, utils$1.noop) : streams[0];
      const offListeners = stream.finished(responseStream, () => {
        offListeners();
        onFinished();
      });
      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders$1(res.headers),
        config: config2,
        request: lastRequest
      };
      if (responseType === "stream") {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;
        responseStream.on("data", function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;
          if (config2.maxContentLength > -1 && totalResponseBytes > config2.maxContentLength) {
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError$1(
              "maxContentLength size of " + config2.maxContentLength + " exceeded",
              AxiosError$1.ERR_BAD_RESPONSE,
              config2,
              lastRequest
            ));
          }
        });
        responseStream.on("aborted", function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          const err = new AxiosError$1(
            "stream has been aborted",
            AxiosError$1.ERR_BAD_RESPONSE,
            config2,
            lastRequest
          );
          responseStream.destroy(err);
          reject(err);
        });
        responseStream.on("error", function handleStreamError(err) {
          if (req.destroyed) return;
          reject(AxiosError$1.from(err, null, config2, lastRequest));
        });
        responseStream.on("end", function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== "arraybuffer") {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === "utf8") {
                responseData = utils$1.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            return reject(AxiosError$1.from(err, null, config2, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
      emitter.once("abort", (err) => {
        if (!responseStream.destroyed) {
          responseStream.emit("error", err);
          responseStream.destroy();
        }
      });
    });
    emitter.once("abort", (err) => {
      reject(err);
      req.destroy(err);
    });
    req.on("error", function handleRequestError(err) {
      reject(AxiosError$1.from(err, null, config2, req));
    });
    req.on("socket", function handleRequestSocket(socket) {
      socket.setKeepAlive(true, 1e3 * 60);
    });
    if (config2.timeout) {
      const timeout = parseInt(config2.timeout, 10);
      if (Number.isNaN(timeout)) {
        reject(new AxiosError$1(
          "error trying to parse `config.timeout` to int",
          AxiosError$1.ERR_BAD_OPTION_VALUE,
          config2,
          req
        ));
        return;
      }
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone) return;
        let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = config2.transitional || transitionalDefaults;
        if (config2.timeoutErrorMessage) {
          timeoutErrorMessage = config2.timeoutErrorMessage;
        }
        reject(new AxiosError$1(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
          config2,
          req
        ));
        abort2();
      });
    }
    if (utils$1.isStream(data2)) {
      let ended = false;
      let errored = false;
      data2.on("end", () => {
        ended = true;
      });
      data2.once("error", (err) => {
        errored = true;
        req.destroy(err);
      });
      data2.on("close", () => {
        if (!ended && !errored) {
          abort2(new CanceledError$1("Request stream has been aborted", config2, req));
        }
      });
      data2.pipe(req);
    } else {
      req.end(data2);
    }
  });
};
const isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform.origin),
  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
) : () => true;
const cookies = platform.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain2, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils$1.isString(path) && cookie.push("path=" + path);
      utils$1.isString(domain2) && cookie.push("domain=" + domain2);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
function mergeConfig$1(config1, config2) {
  config2 = config2 || {};
  const config3 = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({ caseless }, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils$1.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
}
const resolveConfig = (config2) => {
  const newConfig = mergeConfig$1({}, config2);
  let { data: data2, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders$1.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config2.params, config2.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils$1.isFormData(data2)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config2) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config2);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request2 = new XMLHttpRequest();
    request2.open(_config.method.toUpperCase(), _config.url, true);
    request2.timeout = _config.timeout;
    function onloadend() {
      if (!request2) {
        return;
      }
      const responseHeaders = AxiosHeaders$1.from(
        "getAllResponseHeaders" in request2 && request2.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
      const response = {
        data: responseData,
        status: request2.status,
        statusText: request2.statusText,
        headers: responseHeaders,
        config: config2,
        request: request2
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request2 = null;
    }
    if ("onloadend" in request2) {
      request2.onloadend = onloadend;
    } else {
      request2.onreadystatechange = function handleLoad() {
        if (!request2 || request2.readyState !== 4) {
          return;
        }
        if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request2.onabort = function handleAbort() {
      if (!request2) {
        return;
      }
      reject(new AxiosError$1("Request aborted", AxiosError$1.ECONNABORTED, config2, request2));
      request2 = null;
    };
    request2.onerror = function handleError() {
      reject(new AxiosError$1("Network Error", AxiosError$1.ERR_NETWORK, config2, request2));
      request2 = null;
    };
    request2.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError$1(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
        config2,
        request2
      ));
      request2 = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request2) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request2.setRequestHeader(key, val);
      });
    }
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request2.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request2.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request2.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request2.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request2.upload.addEventListener("progress", uploadThrottled);
      request2.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request2) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError$1(null, config2, request2) : cancel);
        request2.abort();
        request2 = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError$1("Unsupported protocol " + protocol + ":", AxiosError$1.ERR_BAD_REQUEST, config2));
      return;
    }
    request2.send(requestData || null);
  });
};
const composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted2;
    const onabort = function(reason) {
      if (!aborted2) {
        aborted2 = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils$1.asap(unsubscribe);
    return signal;
  }
};
const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
const readStream = async function* (stream2) {
  if (stream2[Symbol.asyncIterator]) {
    yield* stream2;
    return;
  }
  const reader = stream2.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
const trackStream = (stream2, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream2, chunkSize);
  let bytes2 = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes2 += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};
const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
const supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
const DEFAULT_CHUNK_SIZE = 64 * 1024;
const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
    !resolvers[type2] && (resolvers[type2] = utils$1.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config2) => {
      throw new AxiosError$1(`Response type '${type2}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config2);
    });
  });
})(new Response());
const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils$1.isBlob(body)) {
    return body.size;
  }
  if (utils$1.isSpecCompliantForm(body)) {
    const _request = new Request(platform.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils$1.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils$1.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
const resolveBodyLength = async (headers, body) => {
  const length = utils$1.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
const fetchAdapter = isFetchSupported && (async (config2) => {
  let {
    url,
    method,
    data: data2,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig(config2);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request2;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data2)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data2,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils$1.isFormData(data2) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data2 = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils$1.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request2 = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data2,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request2, fetchOptions);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config2);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders$1.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config: config2,
        request: request2
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError$1("Network Error", AxiosError$1.ERR_NETWORK, config2, request2),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError$1.from(err, err && err.code, config2, request2);
  }
});
const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: fetchAdapter
};
utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
const renderReason = (reason) => `- ${reason}`;
const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
const adapters = {
  getAdapter: (adapters2) => {
    adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
    const { length } = adapters2;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters2[i];
      let id2;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError$1(`Unknown adapter '${id2}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id2 || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError$1(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new CanceledError$1(null, config2);
  }
}
function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = AxiosHeaders$1.from(config2.headers);
  config2.data = transformData.call(
    config2,
    config2.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
    config2.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters.getAdapter(config2.adapter || defaults.adapter);
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(
      config2,
      config2.transformResponse,
      response
    );
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel$1(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config2,
          config2.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
const validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i) => {
  validators$1[type2] = function validator2(thing) {
    return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
  };
});
const deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message2) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION$2 + "] Transitional option '" + opt + "'" + desc + (message2 ? ". " + message2 : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError$1(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError$1.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError$1("options must be an object", AxiosError$1.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError$1("option " + opt + " must be " + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError$1("Unknown option " + opt, AxiosError$1.ERR_BAD_OPTION);
    }
  }
}
const validator = {
  assertOptions,
  validators: validators$1
};
const validators = validator.validators;
let Axios$1 = class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config2) {
    try {
      return await this._request(configOrUrl, config2);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config2) {
    if (typeof configOrUrl === "string") {
      config2 = config2 || {};
      config2.url = configOrUrl;
    } else {
      config2 = configOrUrl || {};
    }
    config2 = mergeConfig$1(this.defaults, config2);
    const { transitional: transitional2, paramsSerializer, headers } = config2;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config2.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    if (config2.allowAbsoluteUrls !== void 0) ;
    else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config2.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config2.allowAbsoluteUrls = true;
    }
    validator.assertOptions(config2, {
      baseUrl: validators.spelling("baseURL"),
      withXsrfToken: validators.spelling("withXSRFToken")
    }, true);
    config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config2.method]
    );
    headers && utils$1.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift(...requestInterceptorChain);
      chain.push(...responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config2);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config2;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config2) {
    config2 = mergeConfig$1(this.defaults, config2);
    const fullPath = buildFullPath(config2.baseURL, config2.url, config2.allowAbsoluteUrls);
    return buildURL(fullPath, config2.params, config2.paramsSerializer);
  }
};
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios$1.prototype[method] = function(url, config2) {
    return this.request(mergeConfig$1(config2 || {}, {
      method,
      url,
      data: (config2 || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data2, config2) {
      return this.request(mergeConfig$1(config2 || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data: data2
      }));
    };
  }
  Axios$1.prototype[method] = generateHTTPMethod();
  Axios$1.prototype[method + "Form"] = generateHTTPMethod(true);
});
let CancelToken$1 = class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message2, config2, request2) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError$1(message2, config2, request2);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort2 = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort2);
    controller.signal.unsubscribe = () => this.unsubscribe(abort2);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
function spread$1(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
function isAxiosError$1(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode$1 = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
  HttpStatusCode$1[value] = key;
});
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);
  utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
  utils$1.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
  };
  return instance;
}
const axios = createInstance(defaults);
axios.Axios = Axios$1;
axios.CanceledError = CanceledError$1;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel$1;
axios.VERSION = VERSION$2;
axios.toFormData = toFormData$1;
axios.AxiosError = AxiosError$1;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises2) {
  return Promise.all(promises2);
};
axios.spread = spread$1;
axios.isAxiosError = isAxiosError$1;
axios.mergeConfig = mergeConfig$1;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters.getAdapter;
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
const {
  Axios: Axios2,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken: CancelToken2,
  VERSION: VERSION$1,
  all: all2,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = axios;
var Network;
(function(Network2) {
  Network2["ETH_MAINNET"] = "eth-mainnet";
  Network2["ETH_GOERLI"] = "eth-goerli";
  Network2["ETH_SEPOLIA"] = "eth-sepolia";
  Network2["ETH_HOLESKY"] = "eth-holesky";
  Network2["ETH_HOODI"] = "eth-hoodi";
  Network2["OPT_MAINNET"] = "opt-mainnet";
  Network2["OPT_GOERLI"] = "opt-goerli";
  Network2["OPT_SEPOLIA"] = "opt-sepolia";
  Network2["ARB_MAINNET"] = "arb-mainnet";
  Network2["ARB_GOERLI"] = "arb-goerli";
  Network2["ARB_SEPOLIA"] = "arb-sepolia";
  Network2["MATIC_MAINNET"] = "polygon-mainnet";
  Network2["MATIC_MUMBAI"] = "polygon-mumbai";
  Network2["MATIC_AMOY"] = "polygon-amoy";
  Network2["ASTAR_MAINNET"] = "astar-mainnet";
  Network2["POLYGONZKEVM_MAINNET"] = "polygonzkevm-mainnet";
  Network2["POLYGONZKEVM_TESTNET"] = "polygonzkevm-testnet";
  Network2["POLYGONZKEVM_CARDONA"] = "polygonzkevm-cardona";
  Network2["BASE_MAINNET"] = "base-mainnet";
  Network2["BASE_GOERLI"] = "base-goerli";
  Network2["BASE_SEPOLIA"] = "base-sepolia";
  Network2["ZKSYNC_MAINNET"] = "zksync-mainnet";
  Network2["ZKSYNC_SEPOLIA"] = "zksync-sepolia";
  Network2["SHAPE_MAINNET"] = "shape-mainnet";
  Network2["SHAPE_SEPOLIA"] = "shape-sepolia";
  Network2["LINEA_MAINNET"] = "linea-mainnet";
  Network2["LINEA_SEPOLIA"] = "linea-sepolia";
  Network2["FANTOM_MAINNET"] = "fantom-mainnet";
  Network2["FANTOM_TESTNET"] = "fantom-testnet";
  Network2["ZETACHAIN_MAINNET"] = "zetachain-mainnet";
  Network2["ZETACHAIN_TESTNET"] = "zetachain-testnet";
  Network2["ARBNOVA_MAINNET"] = "arbnova-mainnet";
  Network2["BLAST_MAINNET"] = "blast-mainnet";
  Network2["BLAST_SEPOLIA"] = "blast-sepolia";
  Network2["MANTLE_MAINNET"] = "mantle-mainnet";
  Network2["MANTLE_SEPOLIA"] = "mantle-sepolia";
  Network2["SCROLL_MAINNET"] = "scroll-mainnet";
  Network2["SCROLL_SEPOLIA"] = "scroll-sepolia";
  Network2["GNOSIS_MAINNET"] = "gnosis-mainnet";
  Network2["GNOSIS_CHIADO"] = "gnosis-chiado";
  Network2["BNB_MAINNET"] = "bnb-mainnet";
  Network2["BNB_TESTNET"] = "bnb-testnet";
  Network2["AVAX_MAINNET"] = "avax-mainnet";
  Network2["AVAX_FUJI"] = "avax-fuji";
  Network2["CELO_MAINNET"] = "celo-mainnet";
  Network2["CELO_ALFAJORES"] = "celo-alfajores";
  Network2["CELO_BAKLAVA"] = "celo-baklava";
  Network2["METIS_MAINNET"] = "metis-mainnet";
  Network2["OPBNB_MAINNET"] = "opbnb-mainnet";
  Network2["OPBNB_TESTNET"] = "opbnb-testnet";
  Network2["BERACHAIN_BARTIO"] = "berachain-bartio";
  Network2["BERACHAIN_MAINNET"] = "berachain-mainnet";
  Network2["BERACHAIN_BEPOLIA"] = "berachain-bepolia";
  Network2["SONEIUM_MAINNET"] = "soneium-mainnet";
  Network2["SONEIUM_MINATO"] = "soneium-minato";
  Network2["WORLDCHAIN_MAINNET"] = "worldchain-mainnet";
  Network2["WORLDCHAIN_SEPOLIA"] = "worldchain-sepolia";
  Network2["ROOTSTOCK_MAINNET"] = "rootstock-mainnet";
  Network2["ROOTSTOCK_TESTNET"] = "rootstock-testnet";
  Network2["FLOW_MAINNET"] = "flow-mainnet";
  Network2["FLOW_TESTNET"] = "flow-testnet";
  Network2["ZORA_MAINNET"] = "zora-mainnet";
  Network2["ZORA_SEPOLIA"] = "zora-sepolia";
  Network2["FRAX_MAINNET"] = "frax-mainnet";
  Network2["FRAX_SEPOLIA"] = "frax-sepolia";
  Network2["POLYNOMIAL_MAINNET"] = "polynomial-mainnet";
  Network2["POLYNOMIAL_SEPOLIA"] = "polynomial-sepolia";
  Network2["CROSSFI_MAINNET"] = "crossfi-mainnet";
  Network2["CROSSFI_TESTNET"] = "crossfi-testnet";
  Network2["APECHAIN_MAINNET"] = "apechain-mainnet";
  Network2["APECHAIN_CURTIS"] = "apechain-curtis";
  Network2["LENS_MAINNET"] = "lens-mainnet";
  Network2["LENS_SEPOLIA"] = "lens-sepolia";
  Network2["GEIST_MAINNET"] = "geist-mainnet";
  Network2["GEIST_POLTER"] = "geist-polter";
  Network2["LUMIA_PRISM"] = "lumia-prism";
  Network2["LUMIA_TESTNET"] = "lumia-testnet";
  Network2["UNICHAIN_MAINNET"] = "unichain-mainnet";
  Network2["UNICHAIN_SEPOLIA"] = "unichain-sepolia";
  Network2["SONIC_MAINNET"] = "sonic-mainnet";
  Network2["SONIC_BLAZE"] = "sonic-blaze";
  Network2["XMTP_TESTNET"] = "xmtp-testnet";
  Network2["ABSTRACT_MAINNET"] = "abstract-mainnet";
  Network2["ABSTRACT_TESTNET"] = "abstract-testnet";
  Network2["DEGEN_MAINNET"] = "degen-mainnet";
  Network2["INK_MAINNET"] = "ink-mainnet";
  Network2["INK_SEPOLIA"] = "ink-sepolia";
  Network2["SEI_MAINNET"] = "sei-mainnet";
  Network2["SEI_TESTNET"] = "sei-testnet";
  Network2["RONIN_MAINNET"] = "ronin-mainnet";
  Network2["RONIN_SAIGON"] = "ronin-saigon";
  Network2["MONAD_TESTNET"] = "monad-testnet";
  Network2["SETTLUS_SEPTESTNET"] = "settlus-septestnet";
  Network2["SETTLUS_MAINNET"] = "settlus-mainnet";
  Network2["SOLANA_MAINNET"] = "solana-mainnet";
  Network2["SOLANA_DEVNET"] = "solana-devnet";
  Network2["GENSYN_TESTNET"] = "gensyn-testnet";
  Network2["SUPERSEED_MAINNET"] = "superseed-mainnet";
  Network2["SUPERSEED_SEPOLIA"] = "superseed-sepolia";
  Network2["TEA_SEPOLIA"] = "tea-sepolia";
  Network2["ANIME_MAINNET"] = "anime-mainnet";
  Network2["ANIME_SEPOLIA"] = "anime-sepolia";
  Network2["STORY_MAINNET"] = "story-mainnet";
  Network2["STORY_AENEID"] = "story-aeneid";
  Network2["MEGAETH_TESTNET"] = "megaeth-testnet";
  Network2["BOTANIX_MAINNET"] = "botanix-mainnet";
  Network2["BOTANIX_TESTNET"] = "botanix-testnet";
  Network2["HUMANITY_MAINNET"] = "humanity-mainnet";
  Network2["RISE_TESTNET"] = "rise-testnet";
  Network2["HYPERLIQUID_MAINNET"] = "hyperliquid-mainnet";
})(Network || (Network = {}));
var TokenBalanceType;
(function(TokenBalanceType2) {
  TokenBalanceType2["DEFAULT_TOKENS"] = "DEFAULT_TOKENS";
  TokenBalanceType2["ERC20"] = "erc20";
})(TokenBalanceType || (TokenBalanceType = {}));
var AssetTransfersCategory;
(function(AssetTransfersCategory2) {
  AssetTransfersCategory2["EXTERNAL"] = "external";
  AssetTransfersCategory2["INTERNAL"] = "internal";
  AssetTransfersCategory2["ERC20"] = "erc20";
  AssetTransfersCategory2["ERC721"] = "erc721";
  AssetTransfersCategory2["ERC1155"] = "erc1155";
  AssetTransfersCategory2["SPECIALNFT"] = "specialnft";
})(AssetTransfersCategory || (AssetTransfersCategory = {}));
var GetTransfersForOwnerTransferType;
(function(GetTransfersForOwnerTransferType2) {
  GetTransfersForOwnerTransferType2["TO"] = "TO";
  GetTransfersForOwnerTransferType2["FROM"] = "FROM";
})(GetTransfersForOwnerTransferType || (GetTransfersForOwnerTransferType = {}));
var SortingOrder;
(function(SortingOrder2) {
  SortingOrder2["ASCENDING"] = "asc";
  SortingOrder2["DESCENDING"] = "desc";
})(SortingOrder || (SortingOrder = {}));
var OpenSeaSafelistRequestStatus;
(function(OpenSeaSafelistRequestStatus2) {
  OpenSeaSafelistRequestStatus2["VERIFIED"] = "verified";
  OpenSeaSafelistRequestStatus2["APPROVED"] = "approved";
  OpenSeaSafelistRequestStatus2["REQUESTED"] = "requested";
  OpenSeaSafelistRequestStatus2["NOT_REQUESTED"] = "not_requested";
})(OpenSeaSafelistRequestStatus || (OpenSeaSafelistRequestStatus = {}));
var AlchemySubscription;
(function(AlchemySubscription2) {
  AlchemySubscription2["PENDING_TRANSACTIONS"] = "alchemy_pendingTransactions";
  AlchemySubscription2["MINED_TRANSACTIONS"] = "alchemy_minedTransactions";
})(AlchemySubscription || (AlchemySubscription = {}));
var SimulateAssetType;
(function(SimulateAssetType2) {
  SimulateAssetType2["NATIVE"] = "NATIVE";
  SimulateAssetType2["ERC20"] = "ERC20";
  SimulateAssetType2["ERC721"] = "ERC721";
  SimulateAssetType2["ERC1155"] = "ERC1155";
  SimulateAssetType2["SPECIAL_NFT"] = "SPECIAL_NFT";
})(SimulateAssetType || (SimulateAssetType = {}));
var SimulateChangeType;
(function(SimulateChangeType2) {
  SimulateChangeType2["APPROVE"] = "APPROVE";
  SimulateChangeType2["TRANSFER"] = "TRANSFER";
})(SimulateChangeType || (SimulateChangeType = {}));
var DecodingAuthority;
(function(DecodingAuthority2) {
  DecodingAuthority2["ETHERSCAN"] = "ETHERSCAN";
})(DecodingAuthority || (DecodingAuthority = {}));
var DebugCallType;
(function(DebugCallType2) {
  DebugCallType2["CREATE"] = "CREATE";
  DebugCallType2["CALL"] = "CALL";
  DebugCallType2["STATICCALL"] = "STATICCALL";
  DebugCallType2["DELEGATECALL"] = "DELEGATECALL";
})(DebugCallType || (DebugCallType = {}));
var GasOptimizedTransactionStatus;
(function(GasOptimizedTransactionStatus2) {
  GasOptimizedTransactionStatus2["UNSPECIFIED"] = "TRANSACTION_JOB_STATUS_UNSPECIFIED";
  GasOptimizedTransactionStatus2["IN_PROGRESS"] = "IN_PROGRESS";
  GasOptimizedTransactionStatus2["COMPLETE"] = "COMPLETE";
  GasOptimizedTransactionStatus2["ABANDONED"] = "ABANDONED";
})(GasOptimizedTransactionStatus || (GasOptimizedTransactionStatus = {}));
var WebhookVersion;
(function(WebhookVersion2) {
  WebhookVersion2["V1"] = "V1";
  WebhookVersion2["V2"] = "V2";
})(WebhookVersion || (WebhookVersion = {}));
var WebhookType;
(function(WebhookType2) {
  WebhookType2["MINED_TRANSACTION"] = "MINED_TRANSACTION";
  WebhookType2["DROPPED_TRANSACTION"] = "DROPPED_TRANSACTION";
  WebhookType2["ADDRESS_ACTIVITY"] = "ADDRESS_ACTIVITY";
  WebhookType2["NFT_ACTIVITY"] = "NFT_ACTIVITY";
  WebhookType2["NFT_METADATA_UPDATE"] = "NFT_METADATA_UPDATE";
  WebhookType2["GRAPHQL"] = "GRAPHQL";
})(WebhookType || (WebhookType = {}));
var CommitmentLevel;
(function(CommitmentLevel2) {
  CommitmentLevel2["PENDING"] = "pending";
  CommitmentLevel2["LATEST"] = "latest";
  CommitmentLevel2["SAFE"] = "safe";
  CommitmentLevel2["FINALIZED"] = "finalized";
  CommitmentLevel2["EARLIEST"] = "earliest";
})(CommitmentLevel || (CommitmentLevel = {}));
var DebugTracerType;
(function(DebugTracerType2) {
  DebugTracerType2["CALL_TRACER"] = "callTracer";
  DebugTracerType2["PRESTATE_TRACER"] = "prestateTracer";
})(DebugTracerType || (DebugTracerType = {}));
var NftTokenType;
(function(NftTokenType2) {
  NftTokenType2["ERC721"] = "ERC721";
  NftTokenType2["ERC1155"] = "ERC1155";
  NftTokenType2["NO_SUPPORTED_NFT_STANDARD"] = "NO_SUPPORTED_NFT_STANDARD";
  NftTokenType2["NOT_A_CONTRACT"] = "NOT_A_CONTRACT";
  NftTokenType2["UNKNOWN"] = "UNKNOWN";
})(NftTokenType || (NftTokenType = {}));
var NftSpamClassification;
(function(NftSpamClassification2) {
  NftSpamClassification2["Erc721TooManyOwners"] = "Erc721TooManyOwners";
  NftSpamClassification2["Erc721TooManyTokens"] = "Erc721TooManyTokens";
  NftSpamClassification2["Erc721DishonestTotalSupply"] = "Erc721DishonestTotalSupply";
  NftSpamClassification2["MostlyHoneyPotOwners"] = "MostlyHoneyPotOwners";
  NftSpamClassification2["OwnedByMostHoneyPots"] = "OwnedByMostHoneyPots";
  NftSpamClassification2["LowDistinctOwnersPercent"] = "LowDistinctOwnersPercent";
  NftSpamClassification2["HighHoneyPotOwnerPercent"] = "HighHoneyPotOwnerPercent";
  NftSpamClassification2["HighHoneyPotPercent"] = "HighHoneyPotPercent";
  NftSpamClassification2["HoneyPotsOwnMultipleTokens"] = "HoneyPotsOwnMultipleTokens";
  NftSpamClassification2["NoSalesActivity"] = "NoSalesActivity";
  NftSpamClassification2["HighAirdropPercent"] = "HighAirdropPercent";
  NftSpamClassification2["Unknown"] = "Unknown";
})(NftSpamClassification || (NftSpamClassification = {}));
var NftFilters;
(function(NftFilters2) {
  NftFilters2["SPAM"] = "SPAM";
  NftFilters2["AIRDROPS"] = "AIRDROPS";
})(NftFilters || (NftFilters = {}));
var NftOrdering;
(function(NftOrdering2) {
  NftOrdering2["TRANSFERTIME"] = "TRANSFERTIME";
})(NftOrdering || (NftOrdering = {}));
var NftSaleMarketplace;
(function(NftSaleMarketplace2) {
  NftSaleMarketplace2["SEAPORT"] = "seaport";
  NftSaleMarketplace2["LOOKSRARE"] = "looksrare";
  NftSaleMarketplace2["X2Y2"] = "x2y2";
  NftSaleMarketplace2["WYVERN"] = "wyvern";
  NftSaleMarketplace2["CRYPTOPUNKS"] = "cryptopunks";
  NftSaleMarketplace2["BLUR"] = "blur";
  NftSaleMarketplace2["UNKNOWN"] = "unknown";
})(NftSaleMarketplace || (NftSaleMarketplace = {}));
var NftSaleTakerType;
(function(NftSaleTakerType2) {
  NftSaleTakerType2["BUYER"] = "buyer";
  NftSaleTakerType2["SELLER"] = "seller";
})(NftSaleTakerType || (NftSaleTakerType = {}));
var NftRefreshState;
(function(NftRefreshState2) {
  NftRefreshState2["DOES_NOT_EXIST"] = "does_not_exist";
  NftRefreshState2["ALREADY_QUEUED"] = "already_queued";
  NftRefreshState2["IN_PROGRESS"] = "in_progress";
  NftRefreshState2["FINISHED"] = "finished";
  NftRefreshState2["QUEUED"] = "queued";
  NftRefreshState2["QUEUE_FAILED"] = "queue_failed";
})(NftRefreshState || (NftRefreshState = {}));
var NftCollectionMarketplace;
(function(NftCollectionMarketplace2) {
  NftCollectionMarketplace2["OPENSEA"] = "OpenSea";
})(NftCollectionMarketplace || (NftCollectionMarketplace = {}));
var HistoricalPriceInterval;
(function(HistoricalPriceInterval2) {
  HistoricalPriceInterval2["FIVE_MINUTE"] = "5m";
  HistoricalPriceInterval2["ONE_HOUR"] = "1h";
  HistoricalPriceInterval2["ONE_DAY"] = "1d";
})(HistoricalPriceInterval || (HistoricalPriceInterval = {}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __awaiter$1(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, [])).next());
  });
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function(v) {
      return new Promise(function(a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle2(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle2(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle2(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle2(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle2(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
const DEFAULT_ALCHEMY_API_KEY = "demo";
const DEFAULT_NETWORK = Network.ETH_MAINNET;
const DEFAULT_MAX_RETRIES = 5;
const DEFAULT_REQUEST_TIMEOUT = 0;
function getAlchemyHttpUrl(network2, apiKey) {
  return `https://${network2}.g.alchemy.com/v2/${apiKey}`;
}
function getAlchemyNftHttpUrl(network2, apiKey) {
  return `https://${network2}.g.alchemy.com/nft/v3/${apiKey}`;
}
function getAlchemyWsUrl(network2, apiKey) {
  return `wss://${network2}.g.alchemy.com/v2/${apiKey}`;
}
function getAlchemyWebhookHttpUrl() {
  return "https://dashboard.alchemy.com/api";
}
function getPricesBaseUrl(apiKey) {
  return `https://api.g.alchemy.com/prices/v1/${apiKey}`;
}
function getDataBaseUrl(apiKey) {
  return `https://api.g.alchemy.com/data/v1/${apiKey}`;
}
var AlchemyApiType;
(function(AlchemyApiType2) {
  AlchemyApiType2[AlchemyApiType2["BASE"] = 0] = "BASE";
  AlchemyApiType2[AlchemyApiType2["NFT"] = 1] = "NFT";
  AlchemyApiType2[AlchemyApiType2["WEBHOOK"] = 2] = "WEBHOOK";
  AlchemyApiType2[AlchemyApiType2["PRICES"] = 3] = "PRICES";
  AlchemyApiType2[AlchemyApiType2["PORTFOLIO"] = 4] = "PORTFOLIO";
})(AlchemyApiType || (AlchemyApiType = {}));
const EthersNetwork = {
  [Network.ETH_MAINNET]: "mainnet",
  [Network.ETH_GOERLI]: "goerli",
  [Network.ETH_SEPOLIA]: "sepolia",
  [Network.ETH_HOLESKY]: "holesky",
  [Network.ETH_HOODI]: "hoodi",
  [Network.OPT_MAINNET]: "opt-mainnet",
  [Network.OPT_GOERLI]: "optimism-goerli",
  [Network.OPT_SEPOLIA]: "optimism-sepolia",
  [Network.ARB_MAINNET]: "arbitrum",
  [Network.ARB_GOERLI]: "arbitrum-goerli",
  [Network.ARB_SEPOLIA]: "arbitrum-sepolia",
  [Network.MATIC_MAINNET]: "matic",
  [Network.MATIC_MUMBAI]: "maticmum",
  [Network.MATIC_AMOY]: "maticamoy",
  [Network.SOLANA_MAINNET]: null,
  [Network.SOLANA_DEVNET]: null,
  [Network.ASTAR_MAINNET]: "astar-mainnet",
  [Network.POLYGONZKEVM_MAINNET]: "polygonzkevm-mainnet",
  [Network.POLYGONZKEVM_TESTNET]: "polygonzkevm-testnet",
  [Network.POLYGONZKEVM_CARDONA]: "polygonzkevm-cardona",
  [Network.BASE_MAINNET]: "base-mainnet",
  [Network.BASE_GOERLI]: "base-goerli",
  [Network.BASE_SEPOLIA]: "base-sepolia",
  [Network.ZKSYNC_MAINNET]: "zksync-mainnet",
  [Network.ZKSYNC_SEPOLIA]: "zksync-sepolia",
  [Network.SHAPE_MAINNET]: "shape-mainnet",
  [Network.SHAPE_SEPOLIA]: "shape-sepolia",
  [Network.LINEA_MAINNET]: "linea-mainnet",
  [Network.LINEA_SEPOLIA]: "linea-sepolia",
  [Network.FANTOM_MAINNET]: "fantom-mainnet",
  [Network.FANTOM_TESTNET]: "fantom-testnet",
  [Network.ZETACHAIN_MAINNET]: "zetachain-mainnet",
  [Network.ZETACHAIN_TESTNET]: "zetachain-testnet",
  [Network.ARBNOVA_MAINNET]: "arbnova-mainnet",
  [Network.BLAST_MAINNET]: "blast-mainnet",
  [Network.BLAST_SEPOLIA]: "blast-sepolia",
  [Network.MANTLE_MAINNET]: "mantle-mainnet",
  [Network.MANTLE_SEPOLIA]: "mantle-sepolia",
  [Network.SCROLL_MAINNET]: "scroll-mainnet",
  [Network.SCROLL_SEPOLIA]: "scroll-sepolia",
  [Network.GNOSIS_MAINNET]: "gnosis-mainnet",
  [Network.GNOSIS_CHIADO]: "gnosis-chiado",
  [Network.BNB_MAINNET]: "bnb-mainnet",
  [Network.BNB_TESTNET]: "bnb-testnet",
  [Network.AVAX_MAINNET]: "avax-mainnet",
  [Network.AVAX_FUJI]: "avax-fuji",
  [Network.CELO_MAINNET]: "celo-mainnet",
  [Network.CELO_ALFAJORES]: "celo-alfajores",
  [Network.CELO_BAKLAVA]: "celo-baklava",
  [Network.METIS_MAINNET]: "metis-mainnet",
  [Network.OPBNB_MAINNET]: "opbnb-mainnet",
  [Network.OPBNB_TESTNET]: "opbnb-testnet",
  [Network.BERACHAIN_BARTIO]: "berachain-bartio",
  [Network.BERACHAIN_MAINNET]: "berachain-mainnet",
  [Network.BERACHAIN_BEPOLIA]: "berachain-bepolia",
  [Network.SONEIUM_MAINNET]: "soneium-mainnet",
  [Network.SONEIUM_MINATO]: "soneium-minato",
  [Network.WORLDCHAIN_MAINNET]: "worldchain-mainnet",
  [Network.WORLDCHAIN_SEPOLIA]: "worldchain-sepolia",
  [Network.ROOTSTOCK_MAINNET]: "rootstock-mainnet",
  [Network.ROOTSTOCK_TESTNET]: "rootstock-testnet",
  [Network.FLOW_MAINNET]: "flow-mainnet",
  [Network.FLOW_TESTNET]: "flow-testnet",
  [Network.ZORA_MAINNET]: "zora-mainnet",
  [Network.ZORA_SEPOLIA]: "zora-sepolia",
  [Network.FRAX_MAINNET]: "frax-mainnet",
  [Network.FRAX_SEPOLIA]: "frax-sepolia",
  [Network.POLYNOMIAL_MAINNET]: "polynomial-mainnet",
  [Network.POLYNOMIAL_SEPOLIA]: "polynomial-sepolia",
  [Network.CROSSFI_MAINNET]: "crossfi-mainnet",
  [Network.CROSSFI_TESTNET]: "crossfi-testnet",
  [Network.APECHAIN_MAINNET]: "apechain-mainnet",
  [Network.APECHAIN_CURTIS]: "apechain-curtis",
  [Network.LENS_MAINNET]: "lens-mainnet",
  [Network.LENS_SEPOLIA]: "lens-sepolia",
  [Network.GEIST_MAINNET]: "geist-mainnet",
  [Network.GEIST_POLTER]: "geist-polter",
  [Network.LUMIA_PRISM]: "lumia-prism",
  [Network.LUMIA_TESTNET]: "lumia-testnet",
  [Network.UNICHAIN_MAINNET]: "unichain-mainnet",
  [Network.UNICHAIN_SEPOLIA]: "unichain-sepolia",
  [Network.SONIC_MAINNET]: "sonic-mainnet",
  [Network.SONIC_BLAZE]: "sonic-blaze",
  [Network.XMTP_TESTNET]: "xmtp-testnet",
  [Network.ABSTRACT_MAINNET]: "abstract-mainnet",
  [Network.ABSTRACT_TESTNET]: "abstract-testnet",
  [Network.DEGEN_MAINNET]: "degen-mainnet",
  [Network.INK_MAINNET]: "ink-mainnet",
  [Network.INK_SEPOLIA]: "ink-sepolia",
  [Network.SEI_MAINNET]: "sei-mainnet",
  [Network.SEI_TESTNET]: "sei-testnet",
  [Network.RONIN_MAINNET]: "ronin-mainnet",
  [Network.RONIN_SAIGON]: "ronin-saigon",
  [Network.MONAD_TESTNET]: "monad-testnet",
  [Network.SETTLUS_MAINNET]: "settlus-mainnet",
  [Network.SETTLUS_SEPTESTNET]: "settlus-septestnet",
  [Network.GENSYN_TESTNET]: "gensyn-testnet",
  [Network.SUPERSEED_MAINNET]: "superseed-mainnet",
  [Network.SUPERSEED_SEPOLIA]: "superseed-sepolia",
  [Network.TEA_SEPOLIA]: "tea-sepolia",
  [Network.ANIME_MAINNET]: "anime-mainnet",
  [Network.ANIME_SEPOLIA]: "anime-sepolia",
  [Network.STORY_MAINNET]: "story-mainnet",
  [Network.STORY_AENEID]: "story-aeneid",
  [Network.MEGAETH_TESTNET]: "megaeth-testnet",
  [Network.BOTANIX_MAINNET]: "botanix-mainnet",
  [Network.BOTANIX_TESTNET]: "botanix-testnet",
  [Network.HUMANITY_MAINNET]: "humanity-mainnet",
  [Network.RISE_TESTNET]: "rise-testnet",
  [Network.HYPERLIQUID_MAINNET]: "hyperliquid-mainnet"
};
const CustomNetworks = {
  "arbitrum-goerli": {
    chainId: 421613,
    name: "arbitrum-goerli"
  },
  "arbitrum-sepolia": {
    chainId: 421614,
    name: "arbitrum-sepolia"
  },
  "astar-mainnet": {
    chainId: 592,
    name: "astar-mainnet"
  },
  sepolia: {
    chainId: 11155111,
    name: "sepolia"
  },
  holesky: {
    chainId: 17e3,
    name: "holesky"
  },
  hoodi: {
    chainId: 560048,
    name: "hoodi"
  },
  "opt-mainnet": {
    chainId: 10,
    name: "opt-mainnet"
  },
  "optimism-sepolia": {
    chainId: 11155420,
    name: "optimism-sepolia"
  },
  "polygonzkevm-mainnet": {
    chainId: 1101,
    name: "polygonzkevm-mainnet"
  },
  "polygonzkevm-testnet": {
    chainId: 1442,
    name: "polygonzkevm-testnet"
  },
  "polygonzkevm-cardona": {
    chainId: 2442,
    name: "polygonzkevm-cardona"
  },
  "base-mainnet": {
    chainId: 8453,
    name: "base-mainnet"
  },
  "base-goerli": {
    chainId: 84531,
    name: "base-goerli"
  },
  "base-sepolia": {
    chainId: 84532,
    name: "base-sepolia"
  },
  maticamoy: {
    chainId: 80002,
    name: "maticamoy"
  },
  "zksync-mainnet": {
    chainId: 324,
    name: "zksync-mainnet"
  },
  "zksync-sepolia": {
    chainId: 300,
    name: "zksync-sepolia"
  },
  "shape-mainnet": {
    chainId: 360,
    name: "shape-mainnet"
  },
  "shape-sepolia": {
    chainId: 11011,
    name: "shape-sepolia"
  },
  "linea-mainnet": {
    chainId: 59144,
    name: "linea-mainnet"
  },
  "linea-sepolia": {
    chainId: 59141,
    name: "linea-sepolia"
  },
  "fantom-mainnet": {
    chainId: 250,
    name: "fantom-mainnet"
  },
  "fantom-testnet": {
    chainId: 4002,
    name: "fantom-testnet"
  },
  "zetachain-mainnet": {
    chainId: 7e3,
    name: "zetachain-mainnet"
  },
  "zetachain-testnet": {
    chainId: 7001,
    name: "zetachain-testnet"
  },
  "arbnova-mainnet": {
    chainId: 42170,
    name: "arbnova-mainnet"
  },
  "blast-mainnet": {
    chainId: 81457,
    name: "blast-mainnet"
  },
  "blast-sepolia": {
    chainId: 168587773,
    name: "blast-sepolia"
  },
  "mantle-mainnet": {
    chainId: 5e3,
    name: "mantle-mainnet"
  },
  "mantle-sepolia": {
    chainId: 5003,
    name: "mantle-sepolia"
  },
  "scroll-mainnet": {
    chainId: 534352,
    name: "scroll-mainnet"
  },
  "scroll-sepolia": {
    chainId: 534351,
    name: "scroll-sepolia"
  },
  "gnosis-mainnet": {
    chainId: 100,
    name: "gnosis-mainnet"
  },
  "gnosis-chiado": {
    chainId: 10200,
    name: "gnosis-chiado"
  },
  "bnb-mainnet": {
    chainId: 56,
    name: "bnb-mainnet"
  },
  "bnb-testnet": {
    chainId: 97,
    name: "bnb-testnet"
  },
  "avax-mainnet": {
    chainId: 43114,
    name: "avax-mainnet"
  },
  "avax-fuji": {
    chainId: 43113,
    name: "avax-fuji"
  },
  "celo-mainnet": {
    chainId: 42220,
    name: "celo-mainnet"
  },
  "celo-alfajores": {
    chainId: 44787,
    name: "celo-alfajores"
  },
  "celo-baklava": {
    chainId: 62320,
    name: "celo-baklava"
  },
  "metis-mainnet": {
    chainId: 1088,
    name: "metis-mainnet"
  },
  "opbnb-mainnet": {
    chainId: 204,
    name: "opbnb-mainnet"
  },
  "opbnb-testnet": {
    chainId: 5611,
    name: "opbnb-testnet"
  },
  "berachain-bartio": {
    chainId: 80084,
    name: "berachain-bartio"
  },
  "berachain-mainnet": {
    chainId: 80094,
    name: "berachain-mainnet"
  },
  "berachain-bepolia": {
    chainId: 80069,
    name: "berachain-bepolia"
  },
  "soneium-mainnet": {
    chainId: 1868,
    name: "soneium-mainnet"
  },
  "soneium-minato": {
    chainId: 1946,
    name: "soneium-minato"
  },
  "worldchain-mainnet": {
    chainId: 480,
    name: "worldchain-mainnet"
  },
  "worldchain-sepolia": {
    chainId: 4801,
    name: "worldchain-sepolia"
  },
  "rootstock-mainnet": {
    chainId: 30,
    name: "rootstock-mainnet"
  },
  "rootstock-testnet": {
    chainId: 31,
    name: "rootstock-testnet"
  },
  "flow-mainnet": {
    chainId: 747,
    name: "flow-mainnet"
  },
  "flow-testnet": {
    chainId: 545,
    name: "flow-testnet"
  },
  "zora-mainnet": {
    chainId: 7777777,
    name: "zora-mainnet"
  },
  "zora-sepolia": {
    chainId: 999999999,
    name: "zora-sepolia"
  },
  "frax-mainnet": {
    chainId: 252,
    name: "frax-mainnet"
  },
  "frax-sepolia": {
    chainId: 2522,
    name: "frax-sepolia"
  },
  "polynomial-mainnet": {
    chainId: 8008,
    name: "polynomial-mainnet"
  },
  "polynomial-sepolia": {
    chainId: 8009,
    name: "polynomial-sepolia"
  },
  "crossfi-mainnet": {
    chainId: 4158,
    name: "crossfi-mainnet"
  },
  "crossfi-testnet": {
    chainId: 4157,
    name: "crossfi-testnet"
  },
  "apechain-mainnet": {
    chainId: 33139,
    name: "apechain-mainnet"
  },
  "apechain-curtis": {
    chainId: 33111,
    name: "apechain-curtis"
  },
  "lens-mainnet": {
    chainId: 232,
    name: "lens-mainnet"
  },
  "lens-sepolia": {
    chainId: 37111,
    name: "lens-sepolia"
  },
  "geist-mainnet": {
    chainId: 63157,
    name: "geist-mainnet"
  },
  "geist-polter": {
    chainId: 631571,
    name: "geist-polter"
  },
  "lumia-prism": {
    chainId: 994873017,
    name: "lumia-prism"
  },
  "lumia-testnet": {
    chainId: 1952959480,
    name: "lumia-testnet"
  },
  "unichain-mainnet": {
    chainId: 130,
    name: "unichain-mainnet"
  },
  "unichain-sepolia": {
    chainId: 1301,
    name: "unichain-sepolia"
  },
  "sonic-mainnet": {
    chainId: 146,
    name: "sonic-mainnet"
  },
  "sonic-blaze": {
    chainId: 57054,
    name: "sonic-blaze"
  },
  "xmtp-testnet": {
    chainId: 241320161,
    name: "xmtp-testnet"
  },
  "abstract-mainnet": {
    chainId: 2741,
    name: "abstract-mainnet"
  },
  "abstract-testnet": {
    chainId: 11124,
    name: "abstract-testnet"
  },
  "degen-mainnet": {
    chainId: 666666666,
    name: "degen-mainnet"
  },
  "ink-mainnet": {
    chainId: 57073,
    name: "ink-mainnet"
  },
  "ink-sepolia": {
    chainId: 763373,
    name: "ink-sepolia"
  },
  "sei-mainnet": {
    chainId: 1329,
    name: "sei-mainnet"
  },
  "sei-testnet": {
    chainId: 1328,
    name: "sei-testnet"
  },
  "ronin-mainnet": {
    chainId: 2020,
    name: "ronin-mainnet"
  },
  "ronin-saigon": {
    chainId: 2021,
    name: "ronin-saigon"
  },
  "monad-testnet": {
    chainId: 10143,
    name: "monad-testnet"
  },
  "settlus-mainnet": {
    chainId: 5371,
    name: "settlus-mainnet"
  },
  "settlus-septestnet": {
    chainId: 5373,
    name: "settlus-septestnet"
  },
  "gensyn-testnet": {
    chainId: 685685,
    name: "gensyn-testnet"
  },
  "superseed-mainnet": {
    chainId: 5330,
    name: "superseed-mainnet"
  },
  "superseed-sepolia": {
    chainId: 53302,
    name: "superseed-sepolia"
  },
  "tea-sepolia": {
    chainId: 10218,
    name: "tea-sepolia"
  },
  "anime-mainnet": {
    chainId: 69e3,
    name: "anime-mainnet"
  },
  "anime-sepolia": {
    chainId: 6900,
    name: "anime-sepolia"
  },
  "story-mainnet": {
    chainId: 1514,
    name: "story-mainnet"
  },
  "story-aeneid": {
    chainId: 1315,
    name: "story-aeneid"
  },
  "megaeth-testnet": {
    chainId: 6342,
    name: "megaeth-testnet"
  },
  "botanix-mainnet": {
    chainId: 3636,
    name: "botanix-mainnet"
  },
  "botanix-testnet": {
    chainId: 3637,
    name: "botanix-testnet"
  },
  "humanity-mainnet": {
    chainId: 6985385,
    name: "humanity-mainnet"
  },
  "rise-testnet": {
    chainId: 11155931,
    name: "rise-testnet"
  },
  "hyperliquid-mainnet": {
    chainId: 999,
    name: "hyperliquid-mainnet"
  }
};
function noop() {
}
const ETH_NULL_VALUE = "0x";
const ETH_NULL_ADDRESS = "0x0000000000000000000000000000000000000000";
class AlchemyConfig {
  constructor(config2) {
    this.apiKey = (config2 === null || config2 === void 0 ? void 0 : config2.apiKey) || DEFAULT_ALCHEMY_API_KEY;
    this.network = (config2 === null || config2 === void 0 ? void 0 : config2.network) || DEFAULT_NETWORK;
    this.maxRetries = (config2 === null || config2 === void 0 ? void 0 : config2.maxRetries) || DEFAULT_MAX_RETRIES;
    this.url = config2 === null || config2 === void 0 ? void 0 : config2.url;
    this.authToken = config2 === null || config2 === void 0 ? void 0 : config2.authToken;
    this.batchRequests = (config2 === null || config2 === void 0 ? void 0 : config2.batchRequests) || false;
    this.requestTimeout = (config2 === null || config2 === void 0 ? void 0 : config2.requestTimeout) || DEFAULT_REQUEST_TIMEOUT;
    this.connectionInfoOverrides = config2 === null || config2 === void 0 ? void 0 : config2.connectionInfoOverrides;
  }
  /**
   * Returns the URL endpoint to send the HTTP request to. If a custom URL was
   * provided in the config, that URL is returned. Otherwise, the default URL is
   * from the network and API key.
   *
   * @param apiType - The type of API to get the URL for.
   * @internal
   */
  _getRequestUrl(apiType) {
    if (this.url !== void 0) {
      return this.url;
    } else if (apiType === AlchemyApiType.NFT) {
      return getAlchemyNftHttpUrl(this.network, this.apiKey);
    } else if (apiType === AlchemyApiType.WEBHOOK) {
      return getAlchemyWebhookHttpUrl();
    } else if (apiType === AlchemyApiType.PRICES) {
      return getPricesBaseUrl(this.apiKey);
    } else if (apiType === AlchemyApiType.PORTFOLIO) {
      return getDataBaseUrl(this.apiKey);
    } else {
      return getAlchemyHttpUrl(this.network, this.apiKey);
    }
  }
  /**
   * Returns an AlchemyProvider instance. Only one provider is created per
   * Alchemy instance.
   *
   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and
   * has been expanded to support Alchemy's Enhanced APIs.
   *
   * Most common methods on the provider are available as top-level methods on
   * the {@link Alchemy} instance, but the provider is exposed here to access
   * other less-common methods.
   *
   * @public
   */
  getProvider() {
    if (!this._baseAlchemyProvider) {
      this._baseAlchemyProvider = (() => __awaiter$1(this, void 0, void 0, function* () {
        const { AlchemyProvider } = yield import("./assets/alchemy-provider-0b2e9f09-qWPUdFOF.js").then((n) => n.a);
        return new AlchemyProvider(this);
      }))();
    }
    return this._baseAlchemyProvider;
  }
  /**
   * Returns an AlchemyWebsocketProvider instance. Only one provider is created
   * per Alchemy instance.
   *
   * The AlchemyWebSocketProvider is a wrapper around ether's
   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's
   * Subscription APIs, automatic backfilling, and other performance improvements.
   *
   * Most common methods on the provider are available as top-level methods on
   * the {@link Alchemy} instance, but the provider is exposed here to access
   * other less-common methods.
   */
  getWebSocketProvider() {
    if (!this._baseAlchemyWssProvider) {
      this._baseAlchemyWssProvider = (() => __awaiter$1(this, void 0, void 0, function* () {
        const { AlchemyWebSocketProvider } = yield import("./assets/alchemy-websocket-provider-2f8b1006-B9ZPQJNo.js");
        return new AlchemyWebSocketProvider(this);
      }))();
    }
    return this._baseAlchemyWssProvider;
  }
}
const version$1 = "logger/5.7.0";
let _permanentCensorErrors = false;
let _censorErrors = false;
const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
let _logLevel = LogLevels["default"];
let _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
const _normalizeError = _checkNormalize();
var LogLevel$1;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel$1 || (LogLevel$1 = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
const HEX = "0123456789abcdef";
class Logger$1 {
  constructor(version2) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version2,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(Logger$1.levels.DEBUG, args);
  }
  info(...args) {
    this._log(Logger$1.levels.INFO, args);
  }
  warn(...args) {
    this._log(Logger$1.levels.WARNING, args);
  }
  makeError(message2, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = Logger$1.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX[value[i] >> 4];
            hex += HEX[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message2;
    let url = "";
    switch (code) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message2;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message2 += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message2 += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message2);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message2, code, params) {
    throw this.makeError(message2, code, params);
  }
  throwArgumentError(message2, name, value) {
    return this.throwError(message2, Logger$1.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message2, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message2, code, params);
  }
  assertArgument(condition, message2, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message2, name, value);
  }
  checkNormalize(message2) {
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", Logger$1.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message2) {
    if (typeof value !== "number") {
      return;
    }
    if (message2 == null) {
      message2 = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message2, Logger$1.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message2, Logger$1.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message2) {
    if (message2) {
      message2 = ": " + message2;
    } else {
      message2 = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message2, Logger$1.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message2, Logger$1.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger$1.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger$1.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger$1.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new Logger$1(version$1);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger$1.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", Logger$1.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      Logger$1.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version2) {
    return new Logger$1(version2);
  }
}
Logger$1.errors = ErrorCode;
Logger$1.levels = LogLevel$1;
const version = "properties/5.7.0";
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
const logger = new Logger$1(version);
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function resolveProperties(object) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises2 = Object.keys(object).map((key) => {
      const value = object[key];
      return Promise.resolve(value).then((v) => ({ key, value: v }));
    });
    const results = yield Promise.all(promises2);
    return results.reduce((accum, result) => {
      accum[result.key] = result.value;
      return accum;
    }, {});
  });
}
const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key in object) {
      const value = object[key];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
function fromHex(hexString) {
  return BigNumber.from(hexString).toNumber();
}
function toHex(num) {
  return hexValue(num);
}
function formatBlock(block) {
  if (typeof block === "string") {
    return block;
  } else if (Number.isInteger(block)) {
    return toHex(block);
  }
  return block.toString();
}
function stringToEnum(x, enumb) {
  return Object.values(enumb).includes(x) ? x : null;
}
function getNftContractForNftFromRaw(rawNftContract) {
  return nullsToUndefined(Object.assign(Object.assign({}, getNftContractFromRaw(rawNftContract)), { spamClassifications: rawNftContract.spamClassifications.map(parseNftSpamClassification) }));
}
function getNftContractsForOwnerFromRaw(rawNftContract) {
  return nullsToUndefined(Object.assign(Object.assign({}, getNftContractFromRaw(rawNftContract)), { displayNft: rawNftContract.displayNft, image: rawNftContract.image, totalBalance: rawNftContract.totalBalance, numDistinctTokensOwned: rawNftContract.numDistinctTokensOwned, isSpam: rawNftContract.isSpam }));
}
function getNftContractFromRaw(rawNftContract) {
  var _a;
  return nullsToUndefined(Object.assign(Object.assign({}, rawNftContract), { tokenType: parseNftTokenType(rawNftContract.tokenType), openSeaMetadata: Object.assign(Object.assign({}, rawNftContract.openSeaMetadata), { safelistRequestStatus: ((_a = rawNftContract.openSeaMetadata) === null || _a === void 0 ? void 0 : _a.safelistRequestStatus) ? stringToEnum(rawNftContract.openSeaMetadata.safelistRequestStatus, OpenSeaSafelistRequestStatus) : null }) }));
}
function getNftCollectionFromRaw(rawNftCollection) {
  return nullsToUndefined(Object.assign(Object.assign({}, rawNftCollection), { floorPrice: Object.assign(Object.assign({}, rawNftCollection.floorPrice), { marketplace: parseNftCollectionMarketplace(rawNftCollection.floorPrice.marketplace) }) }));
}
function getBaseNftFromRaw(rawBaseNft, contractAddress2) {
  return {
    contractAddress: contractAddress2 ? contractAddress2 : rawBaseNft.contractAddress,
    tokenId: rawBaseNft.tokenId
  };
}
function getNftFromRaw(rawNft) {
  return nullsToUndefined(Object.assign(Object.assign({}, rawNft), { contract: getNftContractForNftFromRaw(rawNft.contract), tokenType: parseNftTokenType(rawNft.tokenType), acquiredAt: rawNft.acquiredAt, collection: rawNft.collection, mint: rawNft.mint }));
}
function getNftSalesFromRaw(rawNftSales) {
  return nullsToUndefined({
    nftSales: rawNftSales.nftSales.map((rawNftSale) => Object.assign(Object.assign({}, rawNftSale), { marketplace: parseNftSaleMarketplace(rawNftSale.marketplace), taker: parseNftTaker(rawNftSale.taker) })),
    validAt: rawNftSales.validAt,
    pageKey: rawNftSales.pageKey
  });
}
function parseNftSaleMarketplace(marketplace) {
  switch (marketplace) {
    case "looksrare":
      return NftSaleMarketplace.LOOKSRARE;
    case "seaport":
      return NftSaleMarketplace.SEAPORT;
    case "x2y2":
      return NftSaleMarketplace.X2Y2;
    case "wyvern":
      return NftSaleMarketplace.WYVERN;
    case "cryptopunks":
      return NftSaleMarketplace.CRYPTOPUNKS;
    case "blur":
      return NftSaleMarketplace.BLUR;
    default:
      return NftSaleMarketplace.UNKNOWN;
  }
}
function parseNftCollectionMarketplace(marketplace) {
  switch (marketplace) {
    case "OpenSea":
      return NftCollectionMarketplace.OPENSEA;
    default:
      return void 0;
  }
}
function parseNftTaker(taker) {
  switch (taker.toLowerCase()) {
    case "buyer":
      return NftSaleTakerType.BUYER;
    case "seller":
      return NftSaleTakerType.SELLER;
    default:
      throw new Error(`Unsupported NftSaleTakerType ${taker}`);
  }
}
function parseNftSpamClassification(s) {
  const res = stringToEnum(s, NftSpamClassification);
  if (res == null) {
    return NftSpamClassification.Unknown;
  }
  return res;
}
function parseNftTokenType(tokenType) {
  switch (tokenType) {
    case "erc721":
    case "ERC721":
      return NftTokenType.ERC721;
    case "erc1155":
    case "ERC1155":
      return NftTokenType.ERC1155;
    case "no_supported_nft_standard":
    case "NO_SUPPORTED_NFT_STANDARD":
      return NftTokenType.NO_SUPPORTED_NFT_STANDARD;
    case "not_a_contract":
    case "NOT_A_CONTRACT":
      return NftTokenType.NOT_A_CONTRACT;
    default:
      return NftTokenType.UNKNOWN;
  }
}
const IS_BROWSER = typeof window !== "undefined" && window !== null;
function nullsToUndefined(obj) {
  if (obj === null || obj === void 0) {
    return void 0;
  }
  if (obj.constructor.name === "Object" || Array.isArray(obj)) {
    for (const key in obj) {
      obj[key] = nullsToUndefined(obj[key]);
    }
  }
  return obj;
}
function getAssetTransfers(config2, params, srcMethod = "getAssetTransfers") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    if (params.fromAddress) {
      params.fromAddress = yield provider2._getAddress(params.fromAddress);
    }
    if (params.toAddress) {
      params.toAddress = yield provider2._getAddress(params.toAddress);
    }
    return provider2._send("alchemy_getAssetTransfers", [
      Object.assign(Object.assign({}, params), { fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : void 0, toBlock: params.toBlock != null ? formatBlock(params.toBlock) : void 0, maxCount: params.maxCount != null ? toHex(params.maxCount) : void 0 })
    ], srcMethod);
  });
}
function getTransactionReceipts(config2, params, srcMethod = "getTransactionReceipts") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    return provider2._send("alchemy_getTransactionReceipts", [params], srcMethod);
  });
}
function getLogs(config2, filter2) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    yield provider2.getNetwork();
    const params = yield resolveProperties({
      filter: getFilter(config2, filter2)
    });
    const logs = yield provider2.send("eth_getLogs", [params.filter]);
    logs.forEach((log2) => {
      if (log2.removed == null) {
        log2.removed = false;
      }
    });
    return arrayOf(provider2.formatter.filterLog.bind(provider2.formatter))(logs);
  });
}
function getFilter(config2, filter2) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    const resolvedFilter = yield filter2;
    let result = {};
    ["blockHash", "topics"].forEach((key) => {
      if (resolvedFilter[key] == null) {
        return;
      }
      result[key] = resolvedFilter[key];
    });
    ["fromBlock", "toBlock"].forEach((key) => {
      if (resolvedFilter[key] == null) {
        return;
      }
      result[key] = provider2._getBlockTag(resolvedFilter[key]);
    });
    result = provider2.formatter.filter(yield resolveProperties(result));
    if (Array.isArray(resolvedFilter.address)) {
      result.address = yield Promise.all(resolvedFilter.address.map((address2) => __awaiter$1(this, void 0, void 0, function* () {
        return provider2._getAddress(address2);
      })));
    } else if (resolvedFilter.address != null) {
      result.address = yield provider2._getAddress(resolvedFilter.address);
    }
    return result;
  });
}
function arrayOf(format2) {
  return function(array2) {
    if (!Array.isArray(array2)) {
      throw new Error("not an array");
    }
    const result = [];
    array2.forEach((value) => {
      result.push(format2(value));
    });
    return result;
  };
}
class CoreNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Returns the balance of a given address as of the provided block.
   *
   * @param addressOrName The address or name of the account to get the balance for.
   * @param blockTag The optional block number or hash to get the balance for.
   *   Defaults to 'latest' if unspecified.
   * @public
   */
  getBalance(addressOrName, blockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getBalance(addressOrName, blockTag);
    });
  }
  /**
   * Checks if the provided address is a smart contract.
   *
   * @param address The address to check type for.
   * @public
   */
  isContractAddress(address2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const code = yield provider2.getCode(address2);
      return code !== "0x";
    });
  }
  /**
   * Returns the contract code of the provided address at the block. If there is
   * no contract deployed, the result is `0x`.
   *
   * @param addressOrName The address or name of the account to get the code for.
   * @param blockTag The optional block number or hash to get the code for.
   *   Defaults to 'latest' if unspecified.
   * @public
   */
  getCode(addressOrName, blockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getCode(addressOrName, blockTag);
    });
  }
  /**
   * Return the value of the provided position at the provided address, at the
   * provided block in `Bytes32` format.
   *
   * @param addressOrName The address or name of the account to get the code for.
   * @param position The position of the storage slot to get.
   * @param blockTag The optional block number or hash to get the code for.
   *   Defaults to 'latest' if unspecified.
   * @public
   */
  getStorageAt(addressOrName, position, blockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getStorageAt(addressOrName, position, blockTag);
    });
  }
  /**
   * Returns the number of transactions ever sent from the provided address, as
   * of the provided block tag. This value is used as the nonce for the next
   * transaction from the address sent to the network.
   *
   * @param addressOrName The address or name of the account to get the nonce for.
   * @param blockTag The optional block number or hash to get the nonce for.
   * @public
   */
  getTransactionCount(addressOrName, blockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getTransactionCount(addressOrName, blockTag);
    });
  }
  /**
   * Returns the block from the network based on the provided block number or
   * hash. Transactions on the block are represented as an array of transaction
   * hashes. To get the full transaction details on the block, use
   * {@link getBlockWithTransactions} instead.
   *
   * @param blockHashOrBlockTag The block number or hash to get the block for.
   * @public
   */
  getBlock(blockHashOrBlockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getBlock(blockHashOrBlockTag);
    });
  }
  /**
   * Returns the block from the network based on the provided block number or
   * hash. Transactions on the block are represented as an array of
   * {@link TransactionResponse} objects.
   *
   * @param blockHashOrBlockTag The block number or hash to get the block for.
   * @public
   */
  getBlockWithTransactions(blockHashOrBlockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getBlockWithTransactions(blockHashOrBlockTag);
    });
  }
  /**
   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.
   *
   * @public
   */
  getNetwork() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getNetwork();
    });
  }
  /**
   * Returns the block number of the most recently mined block.
   *
   * @public
   */
  getBlockNumber() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getBlockNumber();
    });
  }
  /**
   * Returns the best guess of the current gas price to use in a transaction.
   *
   * @public
   */
  getGasPrice() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getGasPrice();
    });
  }
  /**
   * Returns the recommended fee data to use in a transaction.
   *
   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas
   * should be used.
   *
   * For legacy transactions and networks which do not support EIP-1559, the
   * gasPrice should be used.
   *
   * @public
   */
  getFeeData() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getFeeData();
    });
  }
  /**
   * Returns a Promise which will stall until the network has heen established,
   * ignoring errors due to the target node not being active yet.
   *
   * This can be used for testing or attaching scripts to wait until the node is
   * up and running smoothly.
   *
   * @public
   */
  ready() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.ready;
    });
  }
  /**
   * Returns the result of executing the transaction, using call. A call does
   * not require any ether, but cannot change any state. This is useful for
   * calling getters on Contracts.
   *
   * @param transaction The transaction to execute.
   * @param blockTag The optional block number or hash to get the call for.
   * @public
   */
  call(transaction2, blockTag) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.call(transaction2, blockTag);
    });
  }
  /**
   * Returns an estimate of the amount of gas that would be required to submit
   * transaction to the network.
   *
   * An estimate may not be accurate since there could be another transaction on
   * the network that was not accounted for, but after being mined affects the
   * relevant state.
   *
   * This is an alias for {@link TransactNamespace.estimateGas}.
   *
   * @param transaction The transaction to estimate gas for.
   * @public
   */
  estimateGas(transaction2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.estimateGas(transaction2);
    });
  }
  /**
   * Returns the transaction with hash or null if the transaction is unknown.
   *
   * If a transaction has not been mined, this method will search the
   * transaction pool. Various backends may have more restrictive transaction
   * pool access (e.g. if the gas price is too low or the transaction was only
   * recently sent and not yet indexed) in which case this method may also return null.
   *
   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.
   *
   * @param transactionHash The hash of the transaction to get.
   * @public
   */
  getTransaction(transactionHash) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getTransaction(transactionHash);
    });
  }
  /**
   * Returns the transaction receipt for hash or null if the transaction has not
   * been mined.
   *
   * To stall until the transaction has been mined, consider the
   * waitForTransaction method below.
   *
   * @param transactionHash The hash of the transaction to get.
   * @public
   */
  getTransactionReceipt(transactionHash) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getTransactionReceipt(transactionHash);
    });
  }
  /**
   * Submits transaction to the network to be mined. The transaction must be
   * signed, and be valid (i.e. the nonce is correct and the account has
   * sufficient balance to pay for the transaction).
   *
   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.
   *
   * @param signedTransaction The signed transaction to send.
   * @public
   */
  sendTransaction(signedTransaction) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.sendTransaction(signedTransaction);
    });
  }
  /**
   * Returns a promise which will not resolve until specified transaction hash is mined.
   *
   * If {@link confirmations} is 0, this method is non-blocking and if the
   * transaction has not been mined returns null. Otherwise, this method will
   * block until the transaction has confirmed blocks mined on top of the block
   * in which it was mined.
   *
   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.
   *
   * @param transactionHash The hash of the transaction to wait for.
   * @param confirmations The number of blocks to wait for.
   * @param timeout The maximum time to wait for the transaction to confirm.
   * @public
   */
  waitForTransaction(transactionHash, confirmations, timeout) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.waitForTransaction(transactionHash, confirmations, timeout);
    });
  }
  /**
   * Returns an array of logs that match the provided filter.
   *
   * @param filter The filter object to use.
   * @public
   */
  getLogs(filter2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      return getLogs(this.config, filter2);
    });
  }
  /**
   * Allows sending a raw message to the Alchemy backend.
   *
   * @param method The method to call.
   * @param params The parameters to pass to the method.
   * @public
   */
  send(method, params) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.send(method, params);
    });
  }
  /**
   * Finds the address that deployed the provided contract and block number it
   * was deployed in.
   *
   * NOTE: This method performs a binary search across all blocks since genesis
   * and can take a long time to complete. This method is a convenience method
   * that will eventually be replaced by a single call to an Alchemy endpoint
   * with this information cached.
   *
   * @param contractAddress - The contract address to find the deployer for.
   * @beta
   */
  findContractDeployer(contractAddress2) {
    var _a;
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const currentBlockNum = yield provider2.getBlockNumber();
      if ((yield provider2.getCode(contractAddress2, currentBlockNum)) === ETH_NULL_VALUE) {
        throw new Error(`Contract '${contractAddress2}' does not exist`);
      }
      const firstBlock = yield binarySearchFirstBlock(0, currentBlockNum + 1, contractAddress2, this.config);
      const txReceipts = yield getTransactionReceipts(this.config, {
        blockNumber: toHex(firstBlock)
      }, "findContractDeployer");
      const matchingReceipt = (_a = txReceipts.receipts) === null || _a === void 0 ? void 0 : _a.find((receipt) => receipt.contractAddress === contractAddress2.toLowerCase());
      return {
        deployerAddress: matchingReceipt === null || matchingReceipt === void 0 ? void 0 : matchingReceipt.from,
        blockNumber: firstBlock
      };
    });
  }
  getTokenBalances(addressOrName, contractAddressesOrOptions) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const address2 = yield provider2._getAddress(addressOrName);
      if (Array.isArray(contractAddressesOrOptions)) {
        if (contractAddressesOrOptions.length > 1500) {
          throw new Error("You cannot pass in more than 1500 contract addresses to getTokenBalances()");
        }
        if (contractAddressesOrOptions.length === 0) {
          throw new Error("getTokenBalances() requires at least one contractAddress when using an array");
        }
        return provider2._send("alchemy_getTokenBalances", [address2, contractAddressesOrOptions], "getTokenBalances");
      } else {
        const tokenType = contractAddressesOrOptions === void 0 ? TokenBalanceType.ERC20 : contractAddressesOrOptions.type;
        const params = [address2, tokenType];
        if ((contractAddressesOrOptions === null || contractAddressesOrOptions === void 0 ? void 0 : contractAddressesOrOptions.type) === TokenBalanceType.ERC20 && contractAddressesOrOptions.pageKey) {
          params.push({ pageKey: contractAddressesOrOptions.pageKey });
        }
        return provider2._send("alchemy_getTokenBalances", params, "getTokenBalances");
      }
    });
  }
  /**
   * Returns the tokens that the specified address owns, along with the amount
   * of each token and the relevant metadata.
   *
   * @param addressOrName The owner address to get the tokens with balances for.
   * @param options Additional options to pass to the request.
   * @public
   */
  getTokensForOwner(addressOrName, options) {
    var _a;
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const address2 = yield provider2._getAddress(addressOrName);
      const params = [
        address2,
        (_a = options === null || options === void 0 ? void 0 : options.contractAddresses) !== null && _a !== void 0 ? _a : TokenBalanceType.ERC20
      ];
      if (options === null || options === void 0 ? void 0 : options.pageKey) {
        params.push({ pageKey: options.pageKey });
      }
      const response = yield provider2._send("alchemy_getTokenBalances", params, "getTokensForOwner");
      const formattedBalances = response.tokenBalances.map((balance) => ({
        contractAddress: balance.contractAddress,
        rawBalance: BigNumber.from(balance.tokenBalance).toString()
      }));
      const metadataPromises = yield Promise.allSettled(response.tokenBalances.map((token) => provider2._send("alchemy_getTokenMetadata", [token.contractAddress], "getTokensForOwner")));
      const metadata = metadataPromises.map((p) => p.status === "fulfilled" ? p.value : {
        name: null,
        symbol: null,
        decimals: null,
        logo: null
      });
      const ownedTokens = formattedBalances.map((balance, index) => Object.assign(Object.assign(Object.assign({}, balance), metadata[index]), { balance: metadata[index].decimals !== null ? formatUnits(balance.rawBalance, metadata[index].decimals) : void 0 }));
      return {
        tokens: ownedTokens.map((t) => nullsToUndefined(t)),
        pageKey: response.pageKey
      };
    });
  }
  /**
   * Returns metadata for a given token contract address.
   *
   * @param address The contract address to get metadata for.
   * @public
   */
  getTokenMetadata(address2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2._send("alchemy_getTokenMetadata", [address2], "getTokenMetadata");
    });
  }
  getAssetTransfers(params) {
    return __awaiter$1(this, void 0, void 0, function* () {
      return getAssetTransfers(this.config, params);
    });
  }
  /**
   * Gets all transaction receipts for a given block by number or block hash.
   *
   * @param params An object containing fields for the transaction receipt query.
   * @public
   */
  getTransactionReceipts(params) {
    return __awaiter$1(this, void 0, void 0, function* () {
      return getTransactionReceipts(this.config, params);
    });
  }
  /**
   * Returns the underlying owner address for the provided ENS address, or `null`
   * if the ENS name does not have an underlying address.
   *
   * @param name The ENS address name to resolve.
   */
  resolveName(name) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.resolveName(name);
    });
  }
  /**
   * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.
   *
   * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.
   *
   * @param address The address to look up the ENS domain name for.
   */
  lookupAddress(address2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.lookupAddress(address2);
    });
  }
}
function binarySearchFirstBlock(start, end, address2, config2) {
  return __awaiter$1(this, void 0, void 0, function* () {
    if (start >= end) {
      return end;
    }
    const mid = Math.floor((start + end) / 2);
    const provider2 = yield config2.getProvider();
    const code = yield provider2.getCode(address2, mid);
    if (code === ETH_NULL_VALUE) {
      return binarySearchFirstBlock(mid + 1, end, address2, config2);
    }
    return binarySearchFirstBlock(start, mid, address2, config2);
  });
}
class DebugNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  traceCall(transaction2, blockIdentifier, tracer) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = [transaction2, blockIdentifier, parseTracerParams(tracer)];
      return provider2._send("debug_traceCall", params, "traceCall");
    });
  }
  traceTransaction(transactionHash, tracer, timeout) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = [transactionHash, parseTracerParams(tracer, timeout)];
      return provider2._send("debug_traceTransaction", params, "traceTransaction");
    });
  }
  traceBlock(blockIdentifier, tracer) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      let method;
      let params;
      if (isHexString(blockIdentifier, 32)) {
        method = "debug_traceBlockByHash";
        params = [blockIdentifier, parseTracerParams(tracer)];
      } else {
        method = "debug_traceBlockByNumber";
        const block = typeof blockIdentifier === "number" ? hexStripZeros(hexValue(blockIdentifier)) : blockIdentifier;
        params = [block, parseTracerParams(tracer)];
      }
      return provider2._send(method, params, "traceBlock");
    });
  }
}
function parseTracerParams(tracer, timeout) {
  return Object.assign({ tracer: tracer.type }, tracer.onlyTopCall !== void 0 && {
    tracerConfig: {
      onlyTopCall: tracer.onlyTopCall,
      timeout
    }
  });
}
function sanitizeTokenType(tokenType) {
  if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {
    return tokenType;
  }
  return void 0;
}
var LogLevel;
(function(LogLevel2) {
  LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
  LogLevel2[LogLevel2["INFO"] = 1] = "INFO";
  LogLevel2[LogLevel2["WARN"] = 2] = "WARN";
  LogLevel2[LogLevel2["ERROR"] = 3] = "ERROR";
  LogLevel2[LogLevel2["SILENT"] = 4] = "SILENT";
})(LogLevel || (LogLevel = {}));
({
  debug: LogLevel.DEBUG,
  info: LogLevel.INFO,
  warn: LogLevel.WARN,
  error: LogLevel.ERROR,
  silent: LogLevel.SILENT
});
const logLevelToConsoleFn = {
  [LogLevel.DEBUG]: "log",
  [LogLevel.INFO]: "info",
  [LogLevel.WARN]: "warn",
  [LogLevel.ERROR]: "error"
};
const DEFAULT_LOG_LEVEL = LogLevel.INFO;
function logDebug(message2, ...args) {
  loggerClient.debug(message2, args);
}
function logInfo(message2, ...args) {
  loggerClient.info(message2, args);
}
function logWarn(message2, ...args) {
  loggerClient.warn(message2, args);
}
class Logger2 {
  constructor() {
    this._logLevel = DEFAULT_LOG_LEVEL;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(val) {
    if (!(val in LogLevel)) {
      throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
    }
    this._logLevel = val;
  }
  debug(...args) {
    this._log(LogLevel.DEBUG, ...args);
  }
  info(...args) {
    this._log(LogLevel.INFO, ...args);
  }
  warn(...args) {
    this._log(LogLevel.WARN, ...args);
  }
  error(...args) {
    this._log(LogLevel.ERROR, ...args);
  }
  /**
   * Forwards log messages to their corresponding console counterparts if the
   * log level allows it.
   */
  _log(logLevel, ...args) {
    if (logLevel < this._logLevel) {
      return;
    }
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const method = logLevelToConsoleFn[logLevel];
    if (method) {
      console[method](`[${now}] Alchemy:`, ...args.map(stringify));
    } else {
      throw new Error(`Logger received an invalid logLevel (value: ${logLevel})`);
    }
  }
}
function stringify(obj) {
  if (typeof obj === "string") {
    return obj;
  } else {
    try {
      return JSON.stringify(obj);
    } catch (e) {
      return obj;
    }
  }
}
const loggerClient = new Logger2();
const VERSION = "3.6.3";
function sendAxiosRequest(baseUrl, restApiName, methodName, params, overrides) {
  var _a;
  const requestUrl = baseUrl + "/" + restApiName;
  const config2 = Object.assign(Object.assign({}, overrides), { headers: Object.assign(Object.assign(Object.assign({}, overrides === null || overrides === void 0 ? void 0 : overrides.headers), !IS_BROWSER && { "Accept-Encoding": "gzip" }), { "Alchemy-Ethers-Sdk-Version": VERSION, "Alchemy-Ethers-Sdk-Method": methodName }), method: (_a = overrides === null || overrides === void 0 ? void 0 : overrides.method) !== null && _a !== void 0 ? _a : "GET", url: requestUrl, params });
  return axios(config2);
}
const DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1e3;
const DEFAULT_BACKOFF_MULTIPLIER = 1.5;
const DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1e3;
const DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;
class ExponentialBackoff {
  constructor(maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {
    this.maxAttempts = maxAttempts;
    this.initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;
    this.backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;
    this.maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;
    this.numAttempts = 0;
    this.currentDelayMs = 0;
    this.isInBackoff = false;
  }
  /**
   * Returns a promise that resolves after the the backoff delay. The delay is
   * increased for each attempt. The promise is rejected if the maximum number
   * of attempts is exceeded.
   */
  // TODO: beautify this into an async iterator.
  backoff() {
    if (this.numAttempts >= this.maxAttempts) {
      return Promise.reject(new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`));
    }
    if (this.isInBackoff) {
      return Promise.reject(new Error("A backoff operation is already in progress"));
    }
    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);
    if (backoffDelayWithJitterMs > 0) {
      logDebug("ExponentialBackoff.backoff", `Backing off for ${backoffDelayWithJitterMs}ms`);
    }
    this.currentDelayMs *= this.backoffMultiplier;
    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);
    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);
    this.numAttempts += 1;
    return new Promise((resolve) => {
      this.isInBackoff = true;
      setTimeout(() => {
        this.isInBackoff = false;
        resolve();
      }, backoffDelayWithJitterMs);
    });
  }
  /**
   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.
   *
   * @private
   * @param delayMs
   */
  withJitterMs(delayMs) {
    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);
  }
}
function requestHttpWithBackoff(config2, apiType, restApiName, methodName, params, overrides) {
  return __awaiter$1(this, void 0, void 0, function* () {
    let lastError = void 0;
    const backoff = new ExponentialBackoff(config2.maxRetries);
    for (let attempt = 0; attempt < config2.maxRetries + 1; attempt++) {
      try {
        if (lastError !== void 0) {
          logInfo("requestHttp", `Retrying after error: ${lastError.message}`);
        }
        try {
          yield backoff.backoff();
        } catch (err) {
          break;
        }
        const response = yield sendAxiosRequest(config2._getRequestUrl(apiType), restApiName, methodName, params, Object.assign(Object.assign({}, overrides), { timeout: config2.requestTimeout }));
        if (response.status === 200) {
          logDebug(restApiName, `Successful request: ${restApiName}`);
          return response.data;
        } else {
          logInfo(restApiName, `Request failed: ${restApiName}, ${response.status}, ${response.data}`);
          lastError = new Error(response.status + ": " + response.data);
        }
      } catch (err) {
        if (!axios.isAxiosError(err) || err.response === void 0) {
          throw err;
        }
        lastError = new Error(err.response.status + ": " + JSON.stringify(err.response.data));
        if (!isRetryableHttpError(err, apiType)) {
          break;
        }
      }
    }
    return Promise.reject(lastError);
  });
}
function isRetryableHttpError(err, apiType) {
  const retryableCodes = apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];
  return err.response !== void 0 && retryableCodes.includes(err.response.status);
}
function paginateEndpoint(config2, apiType, restApiName, methodName, reqPageKey, resPageKey, params) {
  return __asyncGenerator(this, arguments, function* paginateEndpoint_1() {
    let hasNext = true;
    const requestParams = Object.assign({}, params);
    while (hasNext) {
      const response = yield __await(requestHttpWithBackoff(config2, apiType, restApiName, methodName, requestParams));
      yield yield __await(response);
      if (response[resPageKey] !== null) {
        requestParams[reqPageKey] = response[resPageKey];
      } else {
        hasNext = false;
      }
    }
  });
}
function getNftMetadata(config2, contractAddress2, tokenId, options, srcMethod = "getNftMetadata") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTMetadata", srcMethod, {
      contractAddress: contractAddress2,
      tokenId: BigNumber.from(tokenId).toString(),
      tokenType: sanitizeTokenType(options === null || options === void 0 ? void 0 : options.tokenType),
      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,
      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache
    });
    return getNftFromRaw(response);
  });
}
function getNftMetadataBatch(config2, tokens, options) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      tokens,
      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,
      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTMetadataBatch", "getNftMetadataBatch", {}, {
      method: "POST",
      data: data2
    });
    return {
      nfts: response.nfts.map((nft) => getNftFromRaw(nft))
    };
  });
}
function getContractMetadata(config2, contractAddress2, srcMethod = "getContractMetadata") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getContractMetadata", srcMethod, {
      contractAddress: contractAddress2
    });
    return getNftContractFromRaw(response);
  });
}
function getContractMetadataBatch(config2, contractAddresses) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getContractMetadataBatch", "getContractMetadataBatch", {}, {
      method: "POST",
      data: { contractAddresses }
    });
    return {
      contracts: response.contracts.map(getNftContractFromRaw)
    };
  });
}
function getCollectionMetadata(config2, collectionSlug, srcMethod = "getCollectionMetadata") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getCollectionMetadata", srcMethod, {
      collectionSlug
    });
    return getNftCollectionFromRaw(response);
  });
}
function getNftsForOwnerIterator(config2, owner, options, srcMethod = "getNftsForOwnerIterator") {
  return __asyncGenerator(this, arguments, function* getNftsForOwnerIterator_1() {
    var e_1, _a;
    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);
    try {
      for (var _b = __asyncValues(paginateEndpoint(config2, AlchemyApiType.NFT, "getNFTsForOwner", srcMethod, "pageKey", "pageKey", {
        contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,
        pageKey: options === null || options === void 0 ? void 0 : options.pageKey,
        excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,
        includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,
        owner,
        withMetadata,
        tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,
        orderBy: options === null || options === void 0 ? void 0 : options.orderBy
      })), _c; _c = yield __await(_b.next()), !_c.done; ) {
        const response = _c.value;
        for (const ownedNft of response.ownedNfts) {
          yield yield __await(Object.assign(Object.assign({}, nftFromGetNftResponse(ownedNft)), { balance: ownedNft.balance }));
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  });
}
function getNftsForOwner(config2, owner, options, srcMethod = "getNftsForOwner") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTsForOwner", srcMethod, {
      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,
      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,
      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,
      owner,
      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,
      withMetadata,
      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,
      orderBy: options === null || options === void 0 ? void 0 : options.orderBy
    });
    if (withMetadata) {
      return nullsToUndefined({
        ownedNfts: response.ownedNfts.map((res) => Object.assign(Object.assign({}, getNftFromRaw(res)), { balance: res.balance })),
        pageKey: response.pageKey,
        totalCount: response.totalCount,
        validAt: response.validAt
      });
    }
    return nullsToUndefined({
      ownedNfts: response.ownedNfts.map((res) => Object.assign(Object.assign({}, getBaseNftFromRaw(res)), { balance: res.balance })),
      pageKey: response.pageKey,
      totalCount: response.totalCount,
      validAt: response.validAt
    });
  });
}
function getNftsForContract(config2, contractAddress2, options, srcMethod = "getNftsForContract") {
  var _a;
  return __awaiter$1(this, void 0, void 0, function* () {
    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTsForContract", srcMethod, {
      contractAddress: contractAddress2,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,
      withMetadata,
      limit: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : void 0,
      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs
    });
    if (withMetadata) {
      return nullsToUndefined({
        nfts: response.nfts.map((res) => getNftFromRaw(res)),
        pageKey: response.pageKey
      });
    }
    return nullsToUndefined({
      nfts: response.nfts.map((res) => getBaseNftFromRaw(res, contractAddress2)),
      pageKey: response.pageKey
    });
  });
}
function getNftsForContractIterator(config2, contractAddress2, options, srcMethod = "getNftsForContractIterator") {
  return __asyncGenerator(this, arguments, function* getNftsForContractIterator_1() {
    var e_2, _a;
    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);
    try {
      for (var _b = __asyncValues(paginateEndpoint(config2, AlchemyApiType.NFT, "getNFTsForContract", srcMethod, "pageKey", "pageKey", {
        contractAddress: contractAddress2,
        pageKey: options === null || options === void 0 ? void 0 : options.pageKey,
        withMetadata
      })), _c; _c = yield __await(_b.next()), !_c.done; ) {
        const response = _c.value;
        for (const nft of response.nfts) {
          yield yield __await(nftFromGetNftContractResponse(nft, contractAddress2));
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
      } finally {
        if (e_2) throw e_2.error;
      }
    }
  });
}
function getOwnersForContract(config2, contractAddress2, options, srcMethod = "getOwnersForContract") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getOwnersForContract", srcMethod, Object.assign(Object.assign({}, options), { contractAddress: contractAddress2 }));
    if (options === null || options === void 0 ? void 0 : options.withTokenBalances) {
      return nullsToUndefined({
        owners: response.owners,
        pageKey: response.pageKey
      });
    }
    return nullsToUndefined({
      owners: response.owners,
      pageKey: response.pageKey
    });
  });
}
function getContractsForOwner(config2, owner, options, srcMethod = "getContractsForOwner") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getContractsForOwner", srcMethod, {
      owner,
      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,
      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,
      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,
      orderBy: options === null || options === void 0 ? void 0 : options.orderBy
    });
    return nullsToUndefined({
      contracts: response.contracts.map(getNftContractsForOwnerFromRaw),
      pageKey: response.pageKey,
      totalCount: response.totalCount
    });
  });
}
function getOwnersForNft(config2, contractAddress2, tokenId, options, srcMethod = "getOwnersForNft") {
  return __awaiter$1(this, void 0, void 0, function* () {
    return requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getOwnersForNFT", srcMethod, Object.assign({ contractAddress: contractAddress2, tokenId: BigNumber.from(tokenId).toString() }, options));
  });
}
function getMintedNfts(config2, owner, options) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    const ownerAddress = yield provider2._getAddress(owner);
    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);
    const params = {
      fromBlock: "0x0",
      fromAddress: ETH_NULL_ADDRESS,
      toAddress: ownerAddress,
      excludeZeroValue: true,
      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,
      category,
      maxCount: 100,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey
    };
    const response = yield getAssetTransfers(config2, params, "getMintedNfts");
    return getNftsForTransfers(config2, response);
  });
}
function getTransfersForOwner(config2, owner, transferType, options) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const provider2 = yield config2.getProvider();
    const ownerAddress = yield provider2._getAddress(owner);
    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);
    const params = {
      fromBlock: "0x0",
      excludeZeroValue: true,
      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,
      category,
      maxCount: 100,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey
    };
    if (transferType === GetTransfersForOwnerTransferType.TO) {
      params.toAddress = ownerAddress;
    } else {
      params.fromAddress = ownerAddress;
    }
    const transfersResponse = yield getAssetTransfers(config2, params, "getTransfersForOwner");
    return getNftsForTransfers(config2, transfersResponse);
  });
}
function getTransfersForContract(config2, contract2, options) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const category = [
      AssetTransfersCategory.ERC721,
      AssetTransfersCategory.ERC1155,
      AssetTransfersCategory.SPECIALNFT
    ];
    const provider2 = yield config2.getProvider();
    const fromBlock = (options === null || options === void 0 ? void 0 : options.fromBlock) ? provider2.formatter.blockTag(yield provider2._getBlockTag(options.fromBlock)) : "0x0";
    const toBlock = (options === null || options === void 0 ? void 0 : options.toBlock) ? provider2.formatter.blockTag(yield provider2._getBlockTag(options.toBlock)) : void 0;
    const params = {
      fromBlock,
      toBlock,
      excludeZeroValue: true,
      contractAddresses: [contract2],
      order: options === null || options === void 0 ? void 0 : options.order,
      category,
      maxCount: 100,
      pageKey: options === null || options === void 0 ? void 0 : options.pageKey
    };
    const transfersResponse = yield getAssetTransfers(config2, params, "getTransfersForContract");
    return getNftsForTransfers(config2, transfersResponse);
  });
}
function nftTokenTypeToCategory(tokenType) {
  switch (tokenType) {
    case NftTokenType.ERC721:
      return [AssetTransfersCategory.ERC721];
    case NftTokenType.ERC1155:
      return [AssetTransfersCategory.ERC1155];
    default:
      return [
        AssetTransfersCategory.ERC721,
        AssetTransfersCategory.ERC1155,
        AssetTransfersCategory.SPECIALNFT
      ];
  }
}
function parse1155Transfer(transfer) {
  return transfer.erc1155Metadata.map((metadata) => ({
    contractAddress: transfer.rawContract.address,
    tokenId: metadata.tokenId,
    tokenType: NftTokenType.ERC1155
  }));
}
function verifyNftOwnership(config2, owner, contractAddresses, srcMethod = "verifyNftOwnership") {
  return __awaiter$1(this, void 0, void 0, function* () {
    if (typeof contractAddresses === "string") {
      const response = yield getNftsForOwner(config2, owner, {
        contractAddresses: [contractAddresses],
        omitMetadata: true
      }, srcMethod);
      return response.ownedNfts.length > 0;
    } else {
      if (contractAddresses.length === 0) {
        throw new Error("Must provide at least one contract address");
      }
      const response = yield getNftsForOwner(config2, owner, {
        contractAddresses,
        omitMetadata: true
      }, srcMethod);
      const result = contractAddresses.reduce((acc, curr) => {
        acc[curr] = false;
        return acc;
      }, {});
      for (const nft of response.ownedNfts) {
        result[nft.contractAddress] = true;
      }
      return result;
    }
  });
}
function isSpamContract(config2, contractAddress2, srcMethod = "isSpamContract") {
  return __awaiter$1(this, void 0, void 0, function* () {
    return requestHttpWithBackoff(config2, AlchemyApiType.NFT, "isSpamContract", srcMethod, {
      contractAddress: contractAddress2
    });
  });
}
function getSpamContracts(config2, srcMethod = "getSpamContracts") {
  return __awaiter$1(this, void 0, void 0, function* () {
    return requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getSpamContracts", srcMethod, void 0);
  });
}
function reportSpam(config2, contractAddress2, srcMethod = "reportSpam") {
  return __awaiter$1(this, void 0, void 0, function* () {
    void requestHttpWithBackoff(config2, AlchemyApiType.NFT, "reportSpam", srcMethod, {
      contractAddress: contractAddress2
    });
  });
}
function isAirdropNft(config2, contractAddress2, tokenId, srcMethod = "isAirdropNft") {
  return __awaiter$1(this, void 0, void 0, function* () {
    return requestHttpWithBackoff(config2, AlchemyApiType.NFT, "isAirdropNFT", srcMethod, {
      contractAddress: contractAddress2,
      tokenId
    });
  });
}
function getFloorPrice(config2, contractAddress2, srcMethod = "getFloorPrice") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getFloorPrice", srcMethod, {
      contractAddress: contractAddress2
    });
    return nullsToUndefined(response);
  });
}
function getNftSales(config2, options = {}, srcMethod = "getNftSales") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const params = Object.assign({}, options);
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTSales", srcMethod, {
      fromBlock: params === null || params === void 0 ? void 0 : params.fromBlock,
      toBlock: params === null || params === void 0 ? void 0 : params.toBlock,
      order: params === null || params === void 0 ? void 0 : params.order,
      marketplace: params === null || params === void 0 ? void 0 : params.marketplace,
      contractAddress: params === null || params === void 0 ? void 0 : params.contractAddress,
      tokenId: (params === null || params === void 0 ? void 0 : params.tokenId) ? BigNumber.from(params === null || params === void 0 ? void 0 : params.tokenId).toString() : void 0,
      sellerAddress: params === null || params === void 0 ? void 0 : params.sellerAddress,
      buyerAddress: params === null || params === void 0 ? void 0 : params.buyerAddress,
      taker: params === null || params === void 0 ? void 0 : params.taker,
      limit: params === null || params === void 0 ? void 0 : params.limit,
      pageKey: params === null || params === void 0 ? void 0 : params.pageKey
    });
    return getNftSalesFromRaw(response);
  });
}
function computeRarity(config2, contractAddress2, tokenId, srcMethod = "computeRarity") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "computeRarity", srcMethod, {
      contractAddress: contractAddress2,
      tokenId: BigNumber.from(tokenId).toString()
    });
    return nullsToUndefined(response);
  });
}
function searchContractMetadata(config2, query, srcMethod = "searchContractMetadata") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "searchContractMetadata", srcMethod, {
      query
    });
    return {
      contracts: response.contracts.map(getNftContractFromRaw)
    };
  });
}
function summarizeNftAttributes(config2, contractAddress2, srcMethod = "summarizeNftAttributes") {
  return __awaiter$1(this, void 0, void 0, function* () {
    return requestHttpWithBackoff(config2, AlchemyApiType.NFT, "summarizeNFTAttributes", srcMethod, {
      contractAddress: contractAddress2
    });
  });
}
function refreshNftMetadata(config2, contractAddress2, tokenId, srcMethod = "refreshNftMetadata") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const tokenIdString = BigNumber.from(tokenId).toString();
    const first = yield getNftMetadata(config2, contractAddress2, tokenIdString, void 0, srcMethod);
    const second = yield refresh(config2, contractAddress2, tokenIdString, srcMethod);
    return first.timeLastUpdated !== second.timeLastUpdated;
  });
}
function refreshContract(config2, contractAddress2, srcMethod = "refreshContract") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "reingestContract", srcMethod, {
      contractAddress: contractAddress2
    });
    return {
      contractAddress: response.contractAddress,
      refreshState: parseReingestionState(response.reingestionState),
      progress: response.progress
    };
  });
}
function refresh(config2, contractAddress2, tokenId, srcMethod) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.NFT, "getNFTMetadata", srcMethod, {
      contractAddress: contractAddress2,
      tokenId: BigNumber.from(tokenId).toString(),
      refreshCache: true
    });
    return getNftFromRaw(response);
  });
}
function nftFromGetNftResponse(ownedNft) {
  if (isNftWithMetadata(ownedNft)) {
    return getNftFromRaw(ownedNft);
  } else {
    return getBaseNftFromRaw(ownedNft);
  }
}
function nftFromGetNftContractResponse(ownedNft, contractAddress2) {
  if (isNftWithMetadata(ownedNft)) {
    return getNftFromRaw(ownedNft);
  } else {
    return getBaseNftFromRaw(ownedNft, contractAddress2);
  }
}
function isNftWithMetadata(response) {
  return response.name !== void 0;
}
function getNftsForTransfers(config2, response) {
  return __awaiter$1(this, void 0, void 0, function* () {
    const metadataTransfers = response.transfers.filter((transfer) => transfer.rawContract.address !== null).flatMap((transfer) => {
      var _a;
      const tokens = getTokensFromTransfer(transfer);
      const metadata = {
        from: transfer.from,
        to: (_a = transfer.to) !== null && _a !== void 0 ? _a : void 0,
        transactionHash: transfer.hash,
        blockNumber: transfer.blockNum
      };
      return tokens.map((token) => ({ metadata, token }));
    });
    if (metadataTransfers.length === 0) {
      return { nfts: [] };
    }
    const batchSize = 100;
    const requestBatches = [];
    for (let i = 0; i < metadataTransfers.length; i += batchSize) {
      requestBatches.push(metadataTransfers.slice(i, i + batchSize));
    }
    const responseBatches = yield Promise.all(requestBatches.map((batch) => getNftMetadataBatch(config2, batch.map((transfer) => transfer.token))));
    const nfts = responseBatches.map((r) => r.nfts).flat();
    const nftsByTokenId = /* @__PURE__ */ new Map();
    nfts.forEach((nft) => {
      const key = `${nft.contract.address.toLowerCase()}-${BigNumber.from(nft.tokenId).toString()}`;
      nftsByTokenId.set(key, nft);
    });
    const transferredNfts = metadataTransfers.map((t) => {
      const key = `${t.token.contractAddress.toLowerCase()}-${BigNumber.from(t.token.tokenId).toString()}`;
      return Object.assign(Object.assign({}, nftsByTokenId.get(key)), t.metadata);
    });
    return {
      nfts: transferredNfts,
      pageKey: response.pageKey
    };
  });
}
function getTokensFromTransfer(transfer) {
  if (transfer.category === AssetTransfersCategory.ERC1155) {
    return parse1155Transfer(transfer);
  } else {
    return [
      {
        contractAddress: transfer.rawContract.address,
        tokenId: transfer.tokenId,
        tokenType: transfer.category === AssetTransfersCategory.ERC721 ? NftTokenType.ERC721 : void 0
      }
    ];
  }
}
function omitMetadataToWithMetadata(omitMetadata) {
  return omitMetadata === void 0 ? true : !omitMetadata;
}
function parseReingestionState(reingestionState) {
  switch (reingestionState) {
    case "does_not_exist":
      return NftRefreshState.DOES_NOT_EXIST;
    case "already_queued":
      return NftRefreshState.ALREADY_QUEUED;
    case "in_progress":
      return NftRefreshState.IN_PROGRESS;
    case "finished":
      return NftRefreshState.FINISHED;
    case "queued":
      return NftRefreshState.QUEUED;
    case "queue_failed":
      return NftRefreshState.QUEUE_FAILED;
    default:
      throw new Error("Unknown reingestion state: " + reingestionState);
  }
}
class NftNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  getNftMetadata(contractAddress2, tokenId, optionsOrTokenType, tokenUriTimeoutInMs) {
    let options;
    if (typeof optionsOrTokenType === "object") {
      options = {
        tokenType: optionsOrTokenType.tokenType,
        tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,
        refreshCache: optionsOrTokenType.refreshCache
      };
    } else {
      options = {
        tokenType: optionsOrTokenType,
        tokenUriTimeoutInMs
      };
    }
    return getNftMetadata(this.config, contractAddress2, tokenId, options);
  }
  /**
   * Gets the NFT metadata for multiple NFT tokens.
   *
   * @param tokens An array of NFT tokens to fetch metadata for.
   * @param options Configuration options for making the request.
   */
  getNftMetadataBatch(tokens, options) {
    return getNftMetadataBatch(this.config, tokens, options);
  }
  /**
   * Get the NFT contract metadata associated with the provided parameters.
   *
   * @param contractAddress - The contract address of the NFT.
   * @public
   */
  getContractMetadata(contractAddress2) {
    return getContractMetadata(this.config, contractAddress2);
  }
  /**
   * Get the NFT contract metadata for multiple NFT contracts in a single request.
   *
   * @param contractAddresses - An array of contract addresses to fetch metadata for.
   */
  getContractMetadataBatch(contractAddresses) {
    return getContractMetadataBatch(this.config, contractAddresses);
  }
  /**
   * Get the NFT collection metadata associated with the provided parameters.
   *
   * @param collectionSlug - The OpenSea collection slug of the NFT.
   * @beta
   */
  getCollectionMetadata(collectionSlug) {
    return getCollectionMetadata(this.config, collectionSlug);
  }
  getNftsForOwnerIterator(owner, options) {
    return getNftsForOwnerIterator(this.config, owner, options);
  }
  getNftsForOwner(owner, options) {
    return getNftsForOwner(this.config, owner, options);
  }
  getNftsForContract(contractAddress2, options) {
    return getNftsForContract(this.config, contractAddress2, options);
  }
  getNftsForContractIterator(contractAddress2, options) {
    return getNftsForContractIterator(this.config, contractAddress2, options);
  }
  getOwnersForContract(contractAddress2, options) {
    return getOwnersForContract(this.config, contractAddress2, options);
  }
  /**
   * Gets all the owners for a given NFT contract address and token ID.
   *
   * @param contractAddress - The NFT contract address.
   * @param tokenId - Token id of the NFT.
   * @param options - Optional parameters to use for the request.
   * @beta
   */
  getOwnersForNft(contractAddress2, tokenId, options) {
    return getOwnersForNft(this.config, contractAddress2, tokenId, options);
  }
  /**
   * Gets all NFT contracts held by the specified owner address.
   *
   * @param owner - Address for NFT owner (can be in ENS format!).
   * @param options - The optional parameters to use for the request.
   * @public
   */
  // TODO(v3): Add overload for withMetadata=false
  getContractsForOwner(owner, options) {
    return getContractsForOwner(this.config, owner, options);
  }
  /**
   * Gets all NFT transfers for a given owner's address.
   *
   * @param owner The owner to get transfers for.
   * @param category Whether to get transfers to or from the owner address.
   * @param options Additional options for the request.
   */
  getTransfersForOwner(owner, category, options) {
    return getTransfersForOwner(this.config, owner, category, options);
  }
  /**
   * Gets all NFT transfers for a given NFT contract address.
   *
   * Defaults to all transfers for the contract. To get transfers for a specific
   * block range, use {@link GetTransfersForContractOptions}.
   *
   * @param contract The NFT contract to get transfers for.
   * @param options Additional options for the request.
   */
  getTransfersForContract(contract2, options) {
    return getTransfersForContract(this.config, contract2, options);
  }
  /**
   * Get all the NFTs minted by a specified owner address.
   *
   * @param owner - Address for the NFT owner (can be in ENS format).
   * @param options - The optional parameters to use for the request.
   */
  getMintedNfts(owner, options) {
    return __awaiter$1(this, void 0, void 0, function* () {
      return getMintedNfts(this.config, owner, options);
    });
  }
  verifyNftOwnership(owner, contractAddress2) {
    return verifyNftOwnership(this.config, owner, contractAddress2);
  }
  /**
   * Returns whether a contract is marked as spam or not by Alchemy. For more
   * information on how we classify spam, go to our NFT API FAQ at
   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.
   *
   * @param contractAddress - The contract address to check.
   */
  isSpamContract(contractAddress2) {
    return isSpamContract(this.config, contractAddress2);
  }
  /**
   * Returns a list of all spam contracts marked by Alchemy. For details on how
   * Alchemy marks spam contracts, go to
   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.
   */
  getSpamContracts() {
    return getSpamContracts(this.config);
  }
  /**
   * Returns whether a contract is marked as spam or not by Alchemy. For more
   * information on how we classify spam, go to our NFT API FAQ at
   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.
   *
   * @param contractAddress - The contract address to check.
   */
  reportSpam(contractAddress2) {
    return reportSpam(this.config, contractAddress2);
  }
  /**
   * Returns whether a token is marked as an airdrop or not.
   * Airdrops are defined as NFTs that were minted to a user address in a transaction
   * sent by a different address.
   *
   * @param contractAddress - The contract address to check.
   * @param tokenId - Token id of the NFT.
   */
  isAirdropNft(contractAddress2, tokenId) {
    return isAirdropNft(this.config, contractAddress2, tokenId);
  }
  /**
   * Returns the floor prices of a NFT contract by marketplace.
   *
   * @param contractAddress - The contract address for the NFT collection.
   * @beta
   */
  getFloorPrice(contractAddress2) {
    return getFloorPrice(this.config, contractAddress2);
  }
  getNftSales(options) {
    return getNftSales(this.config, options);
  }
  /**
   * Get the rarity of each attribute of an NFT.
   *
   * @param contractAddress - Contract address for the NFT collection.
   * @param tokenId - Token id of the NFT.
   */
  computeRarity(contractAddress2, tokenId) {
    return computeRarity(this.config, contractAddress2, tokenId);
  }
  /**
   * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.
   *
   * @param query - The search string that you want to search for in contract metadata.
   */
  searchContractMetadata(query) {
    return searchContractMetadata(this.config, query);
  }
  /**
   * Get a summary of attribute prevalence for an NFT collection.
   *
   * @param contractAddress - Contract address for the NFT collection.
   */
  summarizeNftAttributes(contractAddress2) {
    return summarizeNftAttributes(this.config, contractAddress2);
  }
  /**
   * Refreshes the cached metadata for a provided NFT contract address and token
   * id. Returns a boolean value indicating whether the metadata was refreshed.
   *
   * This method is useful when you want to refresh the metadata for a NFT that
   * has been updated since the last time it was fetched. Note that the backend
   * only allows one refresh per token every 15 minutes, globally for all users.
   * The last refresh time for an NFT can be accessed on the
   * {@link Nft.timeLastUpdated} field.
   *
   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.
   *
   * @param contractAddress - The contract address of the NFT.
   * @param tokenId - The token id of the NFT.
   */
  refreshNftMetadata(contractAddress2, tokenId) {
    return refreshNftMetadata(this.config, contractAddress2, tokenId);
  }
  /**
   * Triggers a metadata refresh all NFTs in the provided contract address. This
   * method is useful after an NFT collection is revealed.
   *
   * Refreshes are queued on the Alchemy backend and may take time to fully
   * process. To refresh the metadata for a specific token, use the
   * {@link refreshNftMetadata} method instead.
   *
   * @param contractAddress - The contract address of the NFT collection.
   * @beta
   */
  refreshContract(contractAddress2) {
    return refreshContract(this.config, contractAddress2);
  }
}
class NotifyNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Get all webhooks on your team.
   *
   * The team is determined by the `authToken` provided into the {@link AlchemySettings}
   * object when creating a new {@link Alchemy} instance.
   *
   * This method returns a response object containing all the webhooks
   */
  getAllWebhooks() {
    return __awaiter$1(this, void 0, void 0, function* () {
      this.verifyConfig();
      const response = yield this.sendWebhookRequest("team-webhooks", "getAllWebhooks", {});
      return {
        webhooks: parseRawWebhookResponse(response),
        totalCount: response.data.length
      };
    });
  }
  getAddresses(webhookOrId, options) {
    return __awaiter$1(this, void 0, void 0, function* () {
      this.verifyConfig();
      const webhookId = typeof webhookOrId === "string" ? webhookOrId : webhookOrId.id;
      const response = yield this.sendWebhookRequest("webhook-addresses", "getAddresses", {
        webhook_id: webhookId,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        after: options === null || options === void 0 ? void 0 : options.pageKey
      });
      return parseRawAddressActivityResponse(response);
    });
  }
  getGraphqlQuery(webhookOrId) {
    return __awaiter$1(this, void 0, void 0, function* () {
      this.verifyConfig();
      const webhookId = typeof webhookOrId === "string" ? webhookOrId : webhookOrId.id;
      const response = yield this.sendWebhookRequest("dashboard-webhook-graphql-query", "getGraphqlQuery", {
        webhook_id: webhookId
      });
      return parseRawCustomGraphqlWebhookResponse(response);
    });
  }
  getNftFilters(webhookOrId, options) {
    return __awaiter$1(this, void 0, void 0, function* () {
      this.verifyConfig();
      const webhookId = typeof webhookOrId === "string" ? webhookOrId : webhookOrId.id;
      const response = yield this.sendWebhookRequest("webhook-nft-filters", "getNftFilters", {
        webhook_id: webhookId,
        limit: options === null || options === void 0 ? void 0 : options.limit,
        after: options === null || options === void 0 ? void 0 : options.pageKey
      });
      return parseRawNftFiltersResponse(response);
    });
  }
  updateWebhook(webhookOrId, update) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const webhookId = typeof webhookOrId === "string" ? webhookOrId : webhookOrId.id;
      let restApiName;
      let methodName;
      let method;
      let data2;
      if ("isActive" in update) {
        restApiName = "update-webhook";
        methodName = "updateWebhook";
        method = "PUT";
        data2 = {
          webhook_id: webhookId,
          is_active: update.isActive
        };
      } else if ("addFilters" in update || "removeFilters" in update) {
        restApiName = "update-webhook-nft-filters";
        methodName = "updateWebhookNftFilters";
        method = "PATCH";
        data2 = {
          webhook_id: webhookId,
          nft_filters_to_add: update.addFilters ? update.addFilters.map(nftFilterToParam) : [],
          nft_filters_to_remove: update.removeFilters ? update.removeFilters.map(nftFilterToParam) : []
        };
      } else if ("addMetadataFilters" in update || "removeMetadataFilters" in update) {
        restApiName = "update-webhook-nft-metadata-filters";
        methodName = "updateWebhookNftMetadataFilters";
        method = "PATCH";
        data2 = {
          webhook_id: webhookId,
          nft_metadata_filters_to_add: update.addMetadataFilters ? update.addMetadataFilters.map(nftFilterToParam) : [],
          nft_metadata_filters_to_remove: update.removeMetadataFilters ? update.removeMetadataFilters.map(nftFilterToParam) : []
        };
      } else if ("addAddresses" in update || "removeAddresses" in update) {
        restApiName = "update-webhook-addresses";
        methodName = "webhook:updateWebhookAddresses";
        method = "PATCH";
        data2 = {
          webhook_id: webhookId,
          addresses_to_add: yield this.resolveAddresses(update.addAddresses),
          addresses_to_remove: yield this.resolveAddresses(update.removeAddresses)
        };
      } else if ("newAddresses" in update) {
        restApiName = "update-webhook-addresses";
        methodName = "webhook:updateWebhookAddress";
        method = "PUT";
        data2 = {
          webhook_id: webhookId,
          addresses: yield this.resolveAddresses(update.newAddresses)
        };
      } else {
        throw new Error("Invalid `update` param passed into `updateWebhook`");
      }
      yield this.sendWebhookRequest(restApiName, methodName, {}, {
        method,
        data: data2
      });
    });
  }
  createWebhook(url, type2, params) {
    return __awaiter$1(this, void 0, void 0, function* () {
      let appId;
      if (type2 === WebhookType.MINED_TRANSACTION || type2 === WebhookType.DROPPED_TRANSACTION || type2 === WebhookType.GRAPHQL) {
        if (!("appId" in params)) {
          throw new Error("Transaction and GraphQL Webhooks require an app id.");
        }
        appId = params.appId;
      }
      let network2 = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);
      let nftFilterObj;
      let addresses2;
      let graphqlQuery;
      let skipEmptyMessages;
      if (type2 === WebhookType.NFT_ACTIVITY || type2 === WebhookType.NFT_METADATA_UPDATE) {
        if (!("filters" in params) || params.filters.length === 0) {
          throw new Error("Nft Activity Webhooks require a non-empty array input.");
        }
        network2 = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network2;
        const filters = params.filters.map((filter2) => filter2.tokenId ? {
          contract_address: filter2.contractAddress,
          token_id: BigNumber.from(filter2.tokenId).toString()
        } : {
          contract_address: filter2.contractAddress
        });
        nftFilterObj = type2 === WebhookType.NFT_ACTIVITY ? { nft_filters: filters } : { nft_metadata_filters: filters };
      } else if (type2 === WebhookType.ADDRESS_ACTIVITY) {
        if (params === void 0 || !("addresses" in params) || params.addresses.length === 0) {
          throw new Error("Address Activity Webhooks require a non-empty array input.");
        }
        network2 = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network2;
        addresses2 = yield this.resolveAddresses(params.addresses);
      } else if (type2 == WebhookType.GRAPHQL) {
        if (params === void 0 || !("graphqlQuery" in params) || params.graphqlQuery.length === 0) {
          throw new Error("Custom Webhooks require a non-empty graphql query.");
        }
        network2 = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network2;
        graphqlQuery = params.graphqlQuery;
        skipEmptyMessages = params.skipEmptyMessages;
      }
      const data2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ network: network2, webhook_type: type2, webhook_url: url }, appId && { app_id: appId }), params.name && { name: params.name }), nftFilterObj), addresses2 && { addresses: addresses2 }), graphqlQuery && {
        graphql_query: {
          query: graphqlQuery,
          skip_empty_messages: !!skipEmptyMessages
        }
      });
      const response = yield this.sendWebhookRequest("create-webhook", "createWebhook", {}, {
        method: "POST",
        data: data2
      });
      return parseRawWebhook(response.data);
    });
  }
  deleteWebhook(webhookOrId) {
    return __awaiter$1(this, void 0, void 0, function* () {
      this.verifyConfig();
      const webhookId = typeof webhookOrId === "string" ? webhookOrId : webhookOrId.id;
      const response = yield this.sendWebhookRequest("delete-webhook", "deleteWebhook", {
        webhook_id: webhookId
      }, {
        method: "DELETE"
      });
      if ("message" in response) {
        throw new Error(`Webhook not found. Failed to delete webhook: ${webhookId}`);
      }
    });
  }
  verifyConfig() {
    if (this.config.authToken === void 0) {
      throw new Error("Using the Notify API requires setting the Alchemy Auth Token in the settings object when initializing Alchemy.");
    }
  }
  sendWebhookRequest(restApiName, methodName, params, overrides) {
    return requestHttpWithBackoff(this.config, AlchemyApiType.WEBHOOK, restApiName, methodName, params, Object.assign(Object.assign({}, overrides), { headers: Object.assign({ "X-Alchemy-Token": this.config.authToken }, overrides === null || overrides === void 0 ? void 0 : overrides.headers) }));
  }
  /** Resolves ENS addresses to the raw address.
   * @internal */
  resolveAddresses(addresses2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      if (addresses2 === void 0) {
        return [];
      }
      const resolvedAddresses = [];
      const provider2 = yield this.config.getProvider();
      for (const address2 of addresses2) {
        const rawAddress = yield provider2.resolveName(address2);
        if (rawAddress === null) {
          throw new Error(`Unable to resolve the ENS address: ${address2}`);
        }
        resolvedAddresses.push(rawAddress);
      }
      return resolvedAddresses;
    });
  }
}
const WEBHOOK_NETWORK_TO_NETWORK = Object.fromEntries(Object.entries(Network));
const NETWORK_TO_WEBHOOK_NETWORK = Object.keys(Network).reduce((map, key) => {
  if (key in WEBHOOK_NETWORK_TO_NETWORK) {
    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);
  }
  return map;
}, /* @__PURE__ */ new Map());
function parseRawWebhookResponse(response) {
  return response.data.map(parseRawWebhook);
}
function parseRawWebhook(rawWebhook) {
  return Object.assign(Object.assign({ id: rawWebhook.id, network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network], type: rawWebhook.webhook_type, url: rawWebhook.webhook_url, isActive: rawWebhook.is_active, timeCreated: new Date(rawWebhook.time_created).toISOString(), signingKey: rawWebhook.signing_key, version: rawWebhook.version }, rawWebhook.app_id !== void 0 && { appId: rawWebhook.app_id }), rawWebhook.name !== void 0 && { name: rawWebhook.name });
}
function parseRawAddressActivityResponse(response) {
  return {
    addresses: response.data,
    totalCount: response.pagination.total_count,
    pageKey: response.pagination.cursors.after
  };
}
function parseRawCustomGraphqlWebhookResponse(response) {
  return {
    graphqlQuery: response.data.graphql_query
  };
}
function parseRawNftFiltersResponse(response) {
  return {
    filters: response.data.map((f) => f.token_id ? {
      contractAddress: f.contract_address,
      tokenId: BigNumber.from(f.token_id).toString()
    } : {
      contractAddress: f.contract_address
    }),
    totalCount: response.pagination.total_count,
    pageKey: response.pagination.cursors.after
  };
}
function nftFilterToParam(filter2) {
  return filter2.tokenId ? {
    contract_address: filter2.contractAddress,
    token_id: BigNumber.from(filter2.tokenId).toString()
  } : {
    contract_address: filter2.contractAddress
  };
}
function getTokensByWallet(config2, addresses2, withMetadata = true, withPrices = true, includeNativeTokens = true, srcMethod = "getTokensByWallet") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      addresses: addresses2,
      withMetadata,
      withPrices,
      includeNativeTokens
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PORTFOLIO, "assets/tokens/by-address", srcMethod, {}, {
      data: data2,
      method: "POST"
    });
    return nullsToUndefined(response);
  });
}
function getTokenBalancesByWallet(config2, addresses2, includeNativeTokens = true, srcMethod = "getTokenBalancesByWallet") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      addresses: addresses2,
      includeNativeTokens
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PORTFOLIO, "assets/tokens/balances/by-address", srcMethod, {}, {
      method: "POST",
      data: data2
    });
    return nullsToUndefined(response);
  });
}
function getNftsByWallet(config2, addresses2, withMetadata = true, pageKey = void 0, pageSize = void 0, srcMethod = "getNftsByWallet") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      addresses: addresses2,
      withMetadata,
      pageKey,
      pageSize
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PORTFOLIO, "assets/nfts/by-address", srcMethod, {}, {
      method: "POST",
      data: data2
    });
    return nullsToUndefined(response);
  });
}
function getNftCollectionsByWallet(config2, addresses2, withMetadata = true, pageKey = void 0, pageSize = void 0, srcMethod = "getNftCollectionsByWallet") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      addresses: addresses2,
      pageKey,
      pageSize,
      withMetadata
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PORTFOLIO, "assets/nfts/contracts/by-address", srcMethod, {}, {
      method: "POST",
      data: data2
    });
    return nullsToUndefined(response);
  });
}
function getTransactionsByWallet(config2, addresses2, before = void 0, after = void 0, limit = void 0, srcMethod = "getTransactionsByWallet") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const data2 = {
      addresses: addresses2,
      before,
      after,
      limit
    };
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PORTFOLIO, "transactions/history/by-address", srcMethod, {}, {
      method: "POST",
      data: data2
    });
    return nullsToUndefined(response);
  });
}
class PortfolioNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Fetches fungible tokens (native and ERC-20) for multiple wallet addresses
   * and networks.
   *
   * @param addresses - Array of network/address pairs
   *                    (limit 2 pairs, max 5 networks each).
   * @param withMetadata - Boolean. If set to true, returns metadata. Setting
   *                                this to false will reduce payload size and
   *                                may result in a faster API call.
   *                                (default: true)
   * @param withPrices - Boolean. If set to true, returns token prices. Setting
   *                              this to false will reduce payload size and may
   *                              result in a faster API call. (default: true)
   * @param includeNativeTokens - Boolean. Whether to include each chain’s
   *                                       native token in the response
   *                                       (e.g. ETH on Ethereum). The native
   *                                       token will have a null contract
   *                                       address. (default: true)
   *
   * @returns Promise containing a list of tokens with balances, prices, and
   *          metadata for each wallet/network combination.
   *
   * @public
   */
  getTokensByWallet(addresses2, withMetadata = true, withPrices = true, includeNativeTokens = true) {
    return getTokensByWallet(this.config, addresses2, withMetadata, withPrices, includeNativeTokens);
  }
  /**
   * Fetches fungible tokens (native and ERC-20) for multiple wallet addresses and networks.
   *
   * @param addresses - Array of network/address pairs (limit 2 pairs, max 5 networks each).
   * @param includeNativeTokens - Boolean. Whether to include each chain’s native token in the response (e.g. ETH on Ethereum). The native token will have a null contract address. (default: true)   * @returns Promise containing a list of tokens with balances for each wallet/network combination
   * @public
   */
  getTokenBalancesByWallet(addresses2, includeNativeTokens = true) {
    return getTokenBalancesByWallet(this.config, addresses2, includeNativeTokens);
  }
  /**
   * Fetches NFTs for multiple wallet addresses and networks.
   *
   * @param addresses - Array of network/address pairs to fetch NFTs for.
   * @param withMetadata - Boolean. If set to true, returns metadata. Setting this to false will reduce payload size and may result in a faster API call. (default: true)
   * @param pageKey - Optional. The cursor that points to the current set of results.
   * @param pageSize - Optional. Sets the number of items per page.
   * @returns Promise containing a list of NFTs and metadata for each wallet/network combination.
   *
   * @public
   */
  getNftsByWallet(addresses2, withMetadata = true, pageKey, pageSize) {
    return getNftsByWallet(this.config, addresses2, withMetadata, pageKey, pageSize);
  }
  /**
   * Fetches NFT collections (contracts) for multiple wallet addresses and networks. Returns a list of
   * collections and metadata for each wallet/network combination.
   *
   * @param addresses - Array of address and networks pairs (limit 2 pairs, max 15 networks each).
   * @param withMetadata - Boolean. If set to true, returns metadata. (default: true)
   * @param pageKey - Optional. The cursor that points to the current set of results.
   * @param pageSize - Optional. Sets the number of items per page.
   * @returns Promise containing a list of NFT collections for each wallet/network combination.
   * @public
   */
  getNftCollectionsByWallet(addresses2, withMetadata = true, pageKey, pageSize) {
    return getNftCollectionsByWallet(this.config, addresses2, withMetadata, pageKey, pageSize);
  }
  /**
   * Fetches all historical transactions (internal & external) for multiple wallet addresses and networks.
   *
   * @param addresses - Array of network/address pairs to fetch transactions for.
   * @param before - Optional. The cursor that points to the previous set of results.
   * @param after - Optional. The cursor that points to the end of the current set of results.
   * @param limit - Optional. Sets the maximum number of items per page (Max: 100)
   * @returns Promise containing a list of transaction objects with metadata and log information.
   *
   * @public
   */
  getTransactionsByWallet(addresses2, before, after, limit) {
    return getTransactionsByWallet(this.config, addresses2, before, after, limit);
  }
}
function getTokenPriceByAddress(config2, addresses2, srcMethod = "getTokenPriceByAddress") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PRICES, "tokens/by-address", srcMethod, {}, {
      method: "POST",
      data: { addresses: addresses2 }
    });
    return nullsToUndefined(response);
  });
}
function getTokenPriceBySymbol(config2, symbols, srcMethod = "getTokenPriceBySymbol") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PRICES, "tokens/by-symbol", srcMethod, {
      symbols
    }, {
      // We need to serialize the symbols array as URLSearchParams since the
      // Alchemy API expects a query parameter for each symbol. The axios default
      // serializer will not work here because the symbols array is an array of
      // strings.
      // Axios default encoding: ?symbols[]=AAVE&symbols[]=UNI
      // Alchemy requires: ?symbols=AAVE&symbols=UNI
      paramsSerializer: (params) => {
        const searchParams = new URLSearchParams();
        Object.entries(params).forEach(([key, value]) => {
          value.forEach((v) => searchParams.append(key, v));
        });
        return searchParams.toString();
      }
    });
    return nullsToUndefined(response);
  });
}
function getHistoricalPriceBySymbol(config2, symbol, startTime, endTime, interval, srcMethod = "getHistoricalPriceBySymbol") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PRICES, "tokens/historical", srcMethod, {}, {
      method: "POST",
      data: {
        symbol,
        startTime,
        endTime,
        interval
      }
    });
    return nullsToUndefined(response);
  });
}
function getHistoricalPriceByAddress(config2, network2, address2, startTime, endTime, interval, srcMethod = "getHistoricalPriceByAddress") {
  return __awaiter$1(this, void 0, void 0, function* () {
    const response = yield requestHttpWithBackoff(config2, AlchemyApiType.PRICES, "tokens/historical", srcMethod, {}, {
      method: "POST",
      data: {
        network: network2,
        address: address2,
        startTime,
        endTime,
        interval
      }
    });
    return nullsToUndefined(response);
  });
}
class PricesNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Get token prices by network and contract address pairs.
   *
   * @param addresses - Array of network/address pairs to get prices for
   * @returns Promise containing token price data
   * @public
   */
  getTokenPriceByAddress(addresses2) {
    return getTokenPriceByAddress(this.config, addresses2);
  }
  /**
   * Get token prices by token symbol.
   *
   * @param symbols - Array of token symbols to get prices for
   * @returns Promise containing token price data
   * @public
   */
  getTokenPriceBySymbol(symbols) {
    return getTokenPriceBySymbol(this.config, symbols);
  }
  /**
   * Get historical token prices by token symbol.
   *
   * @param symbol - The token symbol to get historical prices for
   * @param startTime - Start time in ISO-8601 string format or Unix timestamp in seconds
   * @param endTime - End time in ISO-8601 string format or Unix timestamp in seconds
   * @param interval - Time interval between data points
   * @returns Promise containing historical token price data
   * @public
   */
  getHistoricalPriceBySymbol(symbol, startTime, endTime, interval) {
    return getHistoricalPriceBySymbol(this.config, symbol, startTime, endTime, interval);
  }
  /**
   * Get historical token prices by network and contract address.
   *
   * @param network - The network where the token contract is deployed
   * @param address - The token contract address
   * @param startTime - Start time in ISO-8601 string format or Unix timestamp in seconds
   * @param endTime - End time in ISO-8601 string format or Unix timestamp in seconds
   * @param interval - Time interval between data points
   * @returns Promise containing historical token price data
   * @public
   */
  getHistoricalPriceByAddress(network2, address2, startTime, endTime, interval) {
    return getHistoricalPriceByAddress(this.config, network2, address2, startTime, endTime, interval);
  }
}
const GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];
class TransactNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Used to send a single transaction to Flashbots. Flashbots will attempt to
   * send the transaction to miners for the next 25 blocks.
   *
   * Returns the transaction hash of the submitted transaction.
   *
   * @param signedTransaction The raw, signed transaction as a hash.
   * @param maxBlockNumber Optional highest block number in which the
   *   transaction should be included.
   * @param options Options to configure the request.
   */
  sendPrivateTransaction(signedTransaction, maxBlockNumber, options) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : void 0;
      return provider2._send("eth_sendPrivateTransaction", [
        {
          tx: signedTransaction,
          maxBlockNumber: hexBlockNumber,
          preferences: options
        }
      ], "sendPrivateTransaction");
    });
  }
  /**
   * Stops the provided private transaction from being submitted for future
   * blocks. A transaction can only be cancelled if the request is signed by the
   * same key as the {@link sendPrivateTransaction} call submitting the
   * transaction in first place.
   *
   * Please note that fast mode transactions cannot be cancelled using this method.
   *
   * Returns a boolean indicating whether the cancellation was successful.
   *
   * @param transactionHash Transaction hash of private tx to be cancelled
   */
  cancelPrivateTransaction(transactionHash) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2._send("eth_cancelPrivateTransaction", [
        {
          txHash: transactionHash
        }
      ], "cancelPrivateTransaction");
    });
  }
  /**
   * Simulates the asset changes resulting from a list of transactions simulated
   * in sequence.
   *
   * Returns a list of asset changes for each transaction during simulation.
   *
   * @param transactions Transactions list of max 3 transactions to simulate.
   * @param blockIdentifier Optional block identifier to simulate the
   * transaction in.
   */
  simulateAssetChangesBundle(transactions, blockIdentifier) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = blockIdentifier !== void 0 ? [transactions, blockIdentifier] : [transactions];
      const res = yield provider2._send("alchemy_simulateAssetChangesBundle", params, "simulateAssetChangesBundle");
      return nullsToUndefined(res);
    });
  }
  /**
   * Simulates the asset changes resulting from a single transaction.
   *
   * Returns list of asset changes that occurred during the transaction
   * simulation. Note that this method does not run the transaction on the
   * blockchain.
   *
   * @param transaction The transaction to simulate.
   * @param blockIdentifier Optional block identifier to simulate the
   * transaction in.
   */
  simulateAssetChanges(transaction2, blockIdentifier) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = blockIdentifier !== void 0 ? [transaction2, blockIdentifier] : [transaction2];
      const res = yield provider2._send("alchemy_simulateAssetChanges", params, "simulateAssetChanges");
      return nullsToUndefined(res);
    });
  }
  /**
   * Simulates a list of transactions in sequence and returns list of decoded
   * traces and logs that occurred for each transaction during simulation.
   *
   * Note that this method does not run any transactions on the blockchain.
   *
   * @param transactions Transactions list of max 3 transactions to simulate.
   * @param blockIdentifier Optional block identifier to simulate the
   * transaction in.
   */
  simulateExecutionBundle(transactions, blockIdentifier) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = blockIdentifier !== void 0 ? [transactions, blockIdentifier] : [transactions];
      const res = provider2._send("alchemy_simulateExecutionBundle", params, "simulateExecutionBundle");
      return nullsToUndefined(res);
    });
  }
  /**
   * Simulates a single transaction and the resulting and returns list of
   * decoded traces and logs that occurred during the transaction simulation.
   *
   * Note that this method does not run the transaction on the blockchain.
   *
   * @param transaction The transaction to simulate.
   * @param blockIdentifier Optional block identifier to simulate the
   * transaction in.
   */
  simulateExecution(transaction2, blockIdentifier) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const params = blockIdentifier !== void 0 ? [transaction2, blockIdentifier] : [transaction2];
      const res = provider2._send("alchemy_simulateExecution", params, "simulateExecution");
      return nullsToUndefined(res);
    });
  }
  /**
   * Returns the transaction with hash or null if the transaction is unknown.
   *
   * If a transaction has not been mined, this method will search the
   * transaction pool. Various backends may have more restrictive transaction
   * pool access (e.g. if the gas price is too low or the transaction was only
   * recently sent and not yet indexed) in which case this method may also return null.
   *
   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.
   *
   * @param transactionHash The hash of the transaction to get.
   * @public
   */
  getTransaction(transactionHash) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.getTransaction(transactionHash);
    });
  }
  /**
   * Submits transaction to the network to be mined. The transaction must be
   * signed, and be valid (i.e. the nonce is correct and the account has
   * sufficient balance to pay for the transaction).
   *
   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.
   *
   * @param signedTransaction The signed transaction to send.
   * @public
   */
  sendTransaction(signedTransaction) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.sendTransaction(signedTransaction);
    });
  }
  /**
   * Returns an estimate of the amount of gas that would be required to submit
   * transaction to the network.
   *
   * An estimate may not be accurate since there could be another transaction on
   * the network that was not accounted for, but after being mined affects the
   * relevant state.
   *
   * This is an alias for {@link CoreNamespace.estimateGas}.
   *
   * @param transaction The transaction to estimate gas for.
   * @public
   */
  estimateGas(transaction2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.estimateGas(transaction2);
    });
  }
  /**
   * Returns a fee per gas (in wei) that is an estimate of how much you can pay
   * as a priority fee, or "tip", to get a transaction included in the current block.
   *
   * This number is generally used to set the `maxPriorityFeePerGas` field in a
   * transaction request.
   *
   * @public
   */
  getMaxPriorityFeePerGas() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const feeHex = yield provider2._send("eth_maxPriorityFeePerGas", [], "getMaxPriorityFeePerGas");
      return fromHex(feeHex);
    });
  }
  /**
   * Returns a promise which will not resolve until specified transaction hash is mined.
   *
   * If {@link confirmations} is 0, this method is non-blocking and if the
   * transaction has not been mined returns null. Otherwise, this method will
   * block until the transaction has confirmed blocks mined on top of the block
   * in which it was mined.
   *
   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.
   *
   * @param transactionHash The hash of the transaction to wait for.
   * @param confirmations The number of blocks to wait for.
   * @param timeout The maximum time to wait for the transaction to confirm.
   * @public
   */
  waitForTransaction(transactionHash, confirmations, timeout) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2.waitForTransaction(transactionHash, confirmations, timeout);
    });
  }
  sendGasOptimizedTransaction(transactionOrSignedTxs, wallet2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      if (Array.isArray(transactionOrSignedTxs)) {
        return this._sendGasOptimizedTransaction(transactionOrSignedTxs, "sendGasOptimizedTransactionPreSigned");
      }
      let gasLimit;
      let priorityFee;
      let baseFee;
      const provider2 = yield this.config.getProvider();
      try {
        gasLimit = yield this.estimateGas(transactionOrSignedTxs);
        priorityFee = yield this.getMaxPriorityFeePerGas();
        const currentBlock = yield provider2.getBlock("latest");
        baseFee = currentBlock.baseFeePerGas.toNumber();
      } catch (e) {
        throw new Error(`Failed to estimate gas for transaction: ${e}`);
      }
      const gasSpreadTransactions = generateGasSpreadTransactions(transactionOrSignedTxs, gasLimit.toNumber(), baseFee, priorityFee);
      const signedTransactions = yield Promise.all(gasSpreadTransactions.map((tx) => wallet2.signTransaction(tx)));
      return this._sendGasOptimizedTransaction(signedTransactions, "sendGasOptimizedTransactionGenerated");
    });
  }
  /**
   * Returns the state of the transaction job returned by the
   * {@link sendGasOptimizedTransaction}.
   *
   * @param trackingId The tracking id from the response of the sent gas optimized transaction.
   * @internal
   */
  // TODO(txjob): Remove internal tag once this feature is released.
  getGasOptimizedTransactionStatus(trackingId) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2._send("alchemy_getGasOptimizedTransactionStatus", [trackingId], "getGasOptimizedTransactionStatus");
    });
  }
  /** @internal */
  _sendGasOptimizedTransaction(signedTransactions, methodName) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      return provider2._send("alchemy_sendGasOptimizedTransaction", [
        {
          rawTransactions: signedTransactions
        }
      ], methodName);
    });
  }
}
function generateGasSpreadTransactions(transaction2, gasLimit, baseFee, priorityFee) {
  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map((feeMultiplier) => {
    return Object.assign(Object.assign({}, transaction2), { gasLimit, maxFeePerGas: Math.round(baseFee * feeMultiplier + priorityFee * feeMultiplier), maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee) });
  });
}
const ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = "alchemy-pending-transactions";
const ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = "alchemy-mined-transactions";
const ALCHEMY_EVENT_TYPES = [
  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,
  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE
];
let Event$1 = class Event2 {
  constructor(tag, listener, once2) {
    this.listener = listener;
    this.tag = tag;
    this.once = once2;
    this._lastBlockNumber = -2;
    this._inflight = false;
  }
  get event() {
    switch (this.type) {
      case "tx":
        return this.hash;
      case "filter":
        return this.filter;
      default:
        return this.tag;
    }
  }
  get type() {
    return this.tag.split(":")[0];
  }
  get hash() {
    const comps = this.tag.split(":");
    if (comps[0] !== "tx") {
      throw new Error("Not a transaction event");
    }
    return comps[1];
  }
  get filter() {
    const comps = this.tag.split(":");
    if (comps[0] !== "filter") {
      throw new Error("Not a transaction event");
    }
    const address2 = comps[1];
    const topics = deserializeTopics(comps[2]);
    const filter2 = {};
    if (topics.length > 0) {
      filter2.topics = topics;
    }
    if (address2 && address2 !== "*") {
      filter2.address = address2;
    }
    return filter2;
  }
  pollable() {
    const PollableEvents = ["block", "network", "pending", "poll"];
    return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
  }
};
class EthersEvent extends Event$1 {
  /**
   * Converts the event tag into the original `fromAddress` field in
   * {@link AlchemyPendingTransactionsEventFilter}.
   */
  get fromAddress() {
    const comps = this.tag.split(":");
    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {
      return void 0;
    }
    if (comps[1] && comps[1] !== "*") {
      return deserializeAddressField(comps[1]);
    } else {
      return void 0;
    }
  }
  /**
   * Converts the event tag into the original `toAddress` field in
   * {@link AlchemyPendingTransactionsEventFilter}.
   */
  get toAddress() {
    const comps = this.tag.split(":");
    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {
      return void 0;
    }
    if (comps[2] && comps[2] !== "*") {
      return deserializeAddressField(comps[2]);
    } else {
      return void 0;
    }
  }
  /**
   * Converts the event tag into the original `hashesOnly` field in
   * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.
   */
  get hashesOnly() {
    const comps = this.tag.split(":");
    if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {
      return void 0;
    }
    if (comps[3] && comps[3] !== "*") {
      return comps[3] === "true";
    } else {
      return void 0;
    }
  }
  get includeRemoved() {
    const comps = this.tag.split(":");
    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {
      return void 0;
    }
    if (comps[2] && comps[2] !== "*") {
      return comps[2] === "true";
    } else {
      return void 0;
    }
  }
  get addresses() {
    const comps = this.tag.split(":");
    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {
      return void 0;
    }
    if (comps[1] && comps[1] !== "*") {
      return deserializeAddressesField(comps[1]);
    } else {
      return void 0;
    }
  }
}
function isAlchemyEvent(event) {
  return typeof event === "object" && "method" in event;
}
function getAlchemyEventTag(event) {
  if (!isAlchemyEvent(event)) {
    throw new Error("Event tag requires AlchemyEventType");
  }
  if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {
    return serializePendingTransactionsEvent(event);
  } else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {
    return serializeMinedTransactionsEvent(event);
  } else {
    throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);
  }
}
function verifyAlchemyEventName(eventName) {
  if (!Object.values(AlchemySubscription).includes(eventName.method)) {
    throw new Error(`Invalid method name ${eventName.method}. Accepted method names: ${Object.values(AlchemySubscription)}`);
  }
}
function serializePendingTransactionsEvent(event) {
  const fromAddress = serializeAddressField(event.fromAddress);
  const toAddress = serializeAddressField(event.toAddress);
  const hashesOnly = serializeBooleanField(event.hashesOnly);
  return ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE + ":" + fromAddress + ":" + toAddress + ":" + hashesOnly;
}
function serializeMinedTransactionsEvent(event) {
  const addresses2 = serializeAddressesField(event.addresses);
  const includeRemoved = serializeBooleanField(event.includeRemoved);
  const hashesOnly = serializeBooleanField(event.hashesOnly);
  return ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE + ":" + addresses2 + ":" + includeRemoved + ":" + hashesOnly;
}
function serializeAddressesField(addresses2) {
  if (addresses2 === void 0) {
    return "*";
  }
  return addresses2.map((filter2) => serializeAddressField(filter2.to) + "," + serializeAddressField(filter2.from)).join("|");
}
function serializeAddressField(field) {
  if (field === void 0) {
    return "*";
  } else if (Array.isArray(field)) {
    return field.join("|");
  } else {
    return field;
  }
}
function serializeBooleanField(field) {
  if (field === void 0) {
    return "*";
  } else {
    return field.toString();
  }
}
function deserializeTopics(data2) {
  if (data2 === "") {
    return [];
  }
  return data2.split(/&/g).map((topic) => {
    if (topic === "") {
      return [];
    }
    const comps = topic.split("|").map((topic2) => {
      return topic2 === "null" ? null : topic2;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}
function deserializeAddressField(data2) {
  if (data2 === "") {
    return void 0;
  }
  const addresses2 = data2.split("|");
  return addresses2.length === 1 ? addresses2[0] : addresses2;
}
function deserializeAddressesField(data2) {
  if (data2 === "") {
    return void 0;
  }
  return data2.split("|").map((addressStr) => addressStr.split(",")).map((addressPair) => Object.assign(Object.assign({}, addressPair[0] !== "*" && { to: addressPair[0] }), addressPair[1] !== "*" && { from: addressPair[1] }));
}
class WebSocketNamespace {
  /** @internal */
  constructor(config2) {
    this.config = config2;
  }
  /**
   * Adds a listener to be triggered for each {@link eventName} event. Also
   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for
   * how to use them.
   *
   * @param eventName The event to listen for.
   * @param listener The listener to call when the event is triggered.
   * @public
   */
  on(eventName, listener) {
    void (() => __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);
      provider2.on(processedEvent, listener);
    }))();
    return this;
  }
  /**
   * Adds a listener to be triggered for only the next {@link eventName} event,
   * after which it will be removed. Also includes Alchemy's Subscription API
   * events. See {@link AlchemyEventType} for how to use them.
   *
   * @param eventName The event to listen for.
   * @param listener The listener to call when the event is triggered.
   * @public
   */
  once(eventName, listener) {
    void (() => __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);
      provider2.once(processedEvent, listener);
    }))();
    return this;
  }
  /**
   * Removes the provided {@link listener} for the {@link eventName} event. If no
   * listener is provided, all listeners for the event will be removed.
   *
   * @param eventName The event to unlisten to.
   * @param listener The listener to remove.
   * @public
   */
  off(eventName, listener) {
    void (() => __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);
      return provider2.off(processedEvent, listener);
    }))();
    return this;
  }
  /**
   * Remove all listeners for the provided {@link eventName} event. If no event
   * is provided, all events and their listeners are removed.
   *
   * @param eventName The event to remove all listeners for.
   * @public
   */
  removeAllListeners(eventName) {
    void (() => __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : void 0;
      provider2.removeAllListeners(processedEvent);
    }))();
    return this;
  }
  /**
   * Returns the number of listeners for the provided {@link eventName} event. If
   * no event is provided, the total number of listeners for all events is returned.
   *
   * @param eventName The event to get the number of listeners for.
   * @public
   */
  listenerCount(eventName) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : void 0;
      return provider2.listenerCount(processedEvent);
    });
  }
  /**
   * Returns an array of listeners for the provided {@link eventName} event. If
   * no event is provided, all listeners will be included.
   *
   * @param eventName The event to get the listeners for.
   */
  listeners(eventName) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getWebSocketProvider();
      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : void 0;
      return provider2.listeners(processedEvent);
    });
  }
  /**
   * Converts ENS addresses in an Alchemy Event to the underlying resolved
   * address.
   *
   * VISIBLE ONLY FOR TESTING.
   *
   * @internal
   */
  _resolveEnsAlchemyEvent(eventName) {
    return __awaiter$1(this, void 0, void 0, function* () {
      if (!isAlchemyEvent(eventName)) {
        return eventName;
      }
      if (eventName.method === AlchemySubscription.MINED_TRANSACTIONS && eventName.addresses) {
        const processedAddresses = [];
        for (const address2 of eventName.addresses) {
          if (address2.to) {
            address2.to = yield this._resolveNameOrError(address2.to);
          }
          if (address2.from) {
            address2.from = yield this._resolveNameOrError(address2.from);
          }
          processedAddresses.push(address2);
        }
        eventName.addresses = processedAddresses;
      } else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {
        if (eventName.fromAddress) {
          if (typeof eventName.fromAddress === "string") {
            eventName.fromAddress = yield this._resolveNameOrError(eventName.fromAddress);
          } else {
            eventName.fromAddress = yield Promise.all(eventName.fromAddress.map((address2) => this._resolveNameOrError(address2)));
          }
        }
        if (eventName.toAddress) {
          if (typeof eventName.toAddress === "string") {
            eventName.toAddress = yield this._resolveNameOrError(eventName.toAddress);
          } else {
            eventName.toAddress = yield Promise.all(eventName.toAddress.map((address2) => this._resolveNameOrError(address2)));
          }
        }
      }
      return eventName;
    });
  }
  /**
   * Converts the provided ENS address or throws an error. This improves code
   * readability and type safety in other methods.
   *
   * VISIBLE ONLY FOR TESTING.
   *
   * @internal
   */
  _resolveNameOrError(name) {
    return __awaiter$1(this, void 0, void 0, function* () {
      const provider2 = yield this.config.getProvider();
      const resolved = yield provider2.resolveName(name);
      if (resolved === null) {
        throw new Error(`Unable to resolve the ENS address: ${name}`);
      }
      return resolved;
    });
  }
}
class Alchemy {
  /**
   * @param {string} [settings.apiKey] - The API key to use for Alchemy
   * @param {Network} [settings.network] - The network to use for Alchemy
   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt
   * @param {number} [settings.requestTimeout] - The timeout after which request should fail
   * @public
   */
  constructor(settings) {
    this.config = new AlchemyConfig(settings);
    this.core = new CoreNamespace(this.config);
    this.nft = new NftNamespace(this.config);
    this.ws = new WebSocketNamespace(this.config);
    this.transact = new TransactNamespace(this.config);
    this.notify = new NotifyNamespace(this.config);
    this.debug = new DebugNamespace(this.config);
    this.prices = new PricesNamespace(this.config);
    this.portfolio = new PortfolioNamespace(this.config);
  }
}
const FRINGE_DRIFTERS_CONTRACT = "0xe3B399AAb015D2C0D787ECAd40410D88f4f4cA50";
function createAlchemyInstance(apiKey) {
  const config2 = {
    apiKey,
    network: Network.ETH_MAINNET
  };
  return new Alchemy(config2);
}
async function getPlayerOwnedDrifters(playerAddress, env2) {
  const cacheKey = `player_drifters_${playerAddress.toLowerCase()}`;
  const CACHE_TTL = 10 * 60 * 1e3;
  try {
    const cached = await env2.KV.get(cacheKey, "json");
    if (cached && Date.now() - cached.cachedAt < cached.ttl) {
      console.log(`Cache hit for player ${playerAddress} owned Drifters:`, cached.tokenIds);
      return cached.tokenIds;
    }
    console.log(`Cache miss for player ${playerAddress}, querying Alchemy...`);
    const alchemy = createAlchemyInstance(env2.ALCHEMY_API_KEY);
    const response = await alchemy.nft.getNftsForOwner(playerAddress, {
      contractAddresses: [FRINGE_DRIFTERS_CONTRACT],
      omitMetadata: true
      // We only need token IDs for now
    });
    const tokenIds = response.ownedNfts.map((nft) => parseInt(nft.tokenId, 10));
    console.log(`Alchemy query result for player ${playerAddress}:`, tokenIds);
    const cacheData = {
      tokenIds,
      cachedAt: Date.now(),
      ttl: CACHE_TTL
    };
    await env2.KV.put(cacheKey, JSON.stringify(cacheData), {
      expirationTtl: CACHE_TTL / 1e3
      // KV TTL is in seconds
    });
    return tokenIds;
  } catch (error) {
    console.error(`Failed to get owned Drifters for player ${playerAddress}:`, error);
    const staleCache = await env2.KV.get(cacheKey, "json");
    if (staleCache) {
      console.log(`Returning stale cache data for player ${playerAddress}`);
      return staleCache.tokenIds;
    }
    return [];
  }
}
const driftersData = {
  "1": { "tokenId": 1, "name": "Dust Walker", "imageUrl": "https://example.com/drifter/1.png", "combat": 7, "scavenging": 8, "tech": 5, "speed": 6, "hireCost": 50, "rarity": "common" },
  "2": { "tokenId": 2, "name": "Steel Marauder", "imageUrl": "https://example.com/drifter/2.png", "combat": 9, "scavenging": 4, "tech": 7, "speed": 5, "hireCost": 80, "rarity": "common" },
  "3": { "tokenId": 3, "name": "Tech Scavenger", "imageUrl": "https://example.com/drifter/3.png", "combat": 4, "scavenging": 9, "tech": 10, "speed": 7, "hireCost": 120, "rarity": "uncommon" },
  "4": { "tokenId": 4, "name": "Sand Runner", "imageUrl": "https://example.com/drifter/4.png", "combat": 6, "scavenging": 7, "tech": 6, "speed": 10, "hireCost": 90, "rarity": "common" },
  "5": { "tokenId": 5, "name": "Wasteland Medic", "imageUrl": "https://example.com/drifter/5.png", "combat": 5, "scavenging": 6, "tech": 9, "speed": 7, "hireCost": 100, "rarity": "uncommon" },
  "6": { "tokenId": 6, "name": "Scab Reaper", "imageUrl": "https://example.com/drifter/6.png", "combat": 10, "scavenging": 3, "tech": 4, "speed": 8, "hireCost": 75, "rarity": "common" },
  "7": { "tokenId": 7, "name": "Circuit Breaker", "imageUrl": "https://example.com/drifter/7.png", "combat": 6, "scavenging": 5, "tech": 10, "speed": 6, "hireCost": 110, "rarity": "uncommon" },
  "8": { "tokenId": 8, "name": "Bone Collector", "imageUrl": "https://example.com/drifter/8.png", "combat": 7, "scavenging": 10, "tech": 4, "speed": 5, "hireCost": 85, "rarity": "common" },
  "9": { "tokenId": 9, "name": "Rad Stalker", "imageUrl": "https://example.com/drifter/9.png", "combat": 8, "scavenging": 8, "tech": 7, "speed": 8, "hireCost": 150, "rarity": "rare" },
  "10": { "tokenId": 10, "name": "Chrome Nomad", "imageUrl": "https://example.com/drifter/10.png", "combat": 6, "scavenging": 6, "tech": 8, "speed": 9, "hireCost": 95, "rarity": "common" },
  "11": { "tokenId": 11, "name": "Void Hunter", "imageUrl": "https://example.com/drifter/11.png", "combat": 9, "scavenging": 7, "tech": 6, "speed": 7, "hireCost": 125, "rarity": "uncommon" },
  "12": { "tokenId": 12, "name": "Solar Punk", "imageUrl": "https://example.com/drifter/12.png", "combat": 5, "scavenging": 8, "tech": 9, "speed": 8, "hireCost": 115, "rarity": "uncommon" },
  "13": { "tokenId": 13, "name": "Rust Prophet", "imageUrl": "https://example.com/drifter/13.png", "combat": 8, "scavenging": 9, "tech": 8, "speed": 6, "hireCost": 140, "rarity": "rare" },
  "14": { "tokenId": 14, "name": "Neon Ghost", "imageUrl": "https://example.com/drifter/14.png", "combat": 7, "scavenging": 6, "tech": 7, "speed": 10, "hireCost": 105, "rarity": "uncommon" },
  "15": { "tokenId": 15, "name": "Scrap Lord", "imageUrl": "https://example.com/drifter/15.png", "combat": 10, "scavenging": 10, "tech": 5, "speed": 4, "hireCost": 160, "rarity": "rare" },
  "16": { "tokenId": 16, "name": "Dune Rider", "imageUrl": "https://example.com/drifter/16.png", "combat": 6, "scavenging": 7, "tech": 6, "speed": 9, "hireCost": 80, "rarity": "common" },
  "17": { "tokenId": 17, "name": "Cyber Shaman", "imageUrl": "https://example.com/drifter/17.png", "combat": 4, "scavenging": 7, "tech": 10, "speed": 7, "hireCost": 130, "rarity": "uncommon" },
  "18": { "tokenId": 18, "name": "Plasma Cutter", "imageUrl": "https://example.com/drifter/18.png", "combat": 9, "scavenging": 5, "tech": 8, "speed": 6, "hireCost": 110, "rarity": "uncommon" },
  "19": { "tokenId": 19, "name": "Mirage Walker", "imageUrl": "https://example.com/drifter/19.png", "combat": 7, "scavenging": 8, "tech": 7, "speed": 9, "hireCost": 120, "rarity": "uncommon" },
  "20": { "tokenId": 20, "name": "Iron Vulture", "imageUrl": "https://example.com/drifter/20.png", "combat": 8, "scavenging": 9, "tech": 6, "speed": 6, "hireCost": 100, "rarity": "common" },
  "21": { "tokenId": 21, "name": "Static Storm", "imageUrl": "https://example.com/drifter/21.png", "combat": 6, "scavenging": 6, "tech": 9, "speed": 8, "hireCost": 105, "rarity": "uncommon" },
  "22": { "tokenId": 22, "name": "Blood Raider", "imageUrl": "https://example.com/drifter/22.png", "combat": 10, "scavenging": 4, "tech": 5, "speed": 8, "hireCost": 90, "rarity": "common" },
  "23": { "tokenId": 23, "name": "Echo Finder", "imageUrl": "https://example.com/drifter/23.png", "combat": 5, "scavenging": 10, "tech": 7, "speed": 7, "hireCost": 115, "rarity": "uncommon" },
  "24": { "tokenId": 24, "name": "Arc Welder", "imageUrl": "https://example.com/drifter/24.png", "combat": 7, "scavenging": 6, "tech": 9, "speed": 6, "hireCost": 95, "rarity": "common" },
  "25": { "tokenId": 25, "name": "Shadow Broker", "imageUrl": "https://example.com/drifter/25.png", "combat": 8, "scavenging": 8, "tech": 8, "speed": 9, "hireCost": 180, "rarity": "rare" },
  "26": { "tokenId": 26, "name": "Rust Bucket", "imageUrl": "https://example.com/drifter/26.png", "combat": 6, "scavenging": 8, "tech": 5, "speed": 5, "hireCost": 70, "rarity": "common" },
  "27": { "tokenId": 27, "name": "Quantum Drifter", "imageUrl": "https://example.com/drifter/27.png", "combat": 7, "scavenging": 7, "tech": 10, "speed": 8, "hireCost": 160, "rarity": "rare" },
  "28": { "tokenId": 28, "name": "Grit Walker", "imageUrl": "https://example.com/drifter/28.png", "combat": 8, "scavenging": 7, "tech": 4, "speed": 7, "hireCost": 75, "rarity": "common" },
  "29": { "tokenId": 29, "name": "Pulse Rider", "imageUrl": "https://example.com/drifter/29.png", "combat": 6, "scavenging": 6, "tech": 8, "speed": 9, "hireCost": 100, "rarity": "common" },
  "30": { "tokenId": 30, "name": "Apex Scavenger", "imageUrl": "https://example.com/drifter/30.png", "combat": 9, "scavenging": 10, "tech": 7, "speed": 7, "hireCost": 200, "rarity": "legendary" },
  "31": { "tokenId": 31, "name": "Chrome Skull", "imageUrl": "https://example.com/drifter/31.png", "combat": 9, "scavenging": 5, "tech": 6, "speed": 6, "hireCost": 85, "rarity": "common" },
  "32": { "tokenId": 32, "name": "Data Miner", "imageUrl": "https://example.com/drifter/32.png", "combat": 4, "scavenging": 8, "tech": 10, "speed": 6, "hireCost": 125, "rarity": "uncommon" },
  "33": { "tokenId": 33, "name": "Scorched Earth", "imageUrl": "https://example.com/drifter/33.png", "combat": 10, "scavenging": 6, "tech": 5, "speed": 7, "hireCost": 110, "rarity": "uncommon" },
  "34": { "tokenId": 34, "name": "Wind Walker", "imageUrl": "https://example.com/drifter/34.png", "combat": 5, "scavenging": 7, "tech": 6, "speed": 10, "hireCost": 90, "rarity": "common" },
  "35": { "tokenId": 35, "name": "Neural Hacker", "imageUrl": "https://example.com/drifter/35.png", "combat": 6, "scavenging": 6, "tech": 10, "speed": 8, "hireCost": 140, "rarity": "rare" },
  "36": { "tokenId": 36, "name": "Bone Chipper", "imageUrl": "https://example.com/drifter/36.png", "combat": 8, "scavenging": 9, "tech": 4, "speed": 6, "hireCost": 95, "rarity": "common" },
  "37": { "tokenId": 37, "name": "Ion Storm", "imageUrl": "https://example.com/drifter/37.png", "combat": 7, "scavenging": 5, "tech": 9, "speed": 8, "hireCost": 115, "rarity": "uncommon" },
  "38": { "tokenId": 38, "name": "Dust Devil", "imageUrl": "https://example.com/drifter/38.png", "combat": 6, "scavenging": 8, "tech": 6, "speed": 9, "hireCost": 85, "rarity": "common" },
  "39": { "tokenId": 39, "name": "Neon Wraith", "imageUrl": "https://example.com/drifter/39.png", "combat": 8, "scavenging": 7, "tech": 8, "speed": 9, "hireCost": 150, "rarity": "rare" },
  "40": { "tokenId": 40, "name": "Steel Phantom", "imageUrl": "https://example.com/drifter/40.png", "combat": 9, "scavenging": 6, "tech": 7, "speed": 8, "hireCost": 130, "rarity": "uncommon" },
  "41": { "tokenId": 41, "name": "Radium King", "imageUrl": "https://example.com/drifter/41.png", "combat": 10, "scavenging": 8, "tech": 6, "speed": 5, "hireCost": 175, "rarity": "rare" },
  "42": { "tokenId": 42, "name": "Code Breaker", "imageUrl": "https://example.com/drifter/42.png", "combat": 5, "scavenging": 7, "tech": 10, "speed": 7, "hireCost": 120, "rarity": "uncommon" },
  "43": { "tokenId": 43, "name": "Sand Viper", "imageUrl": "https://example.com/drifter/43.png", "combat": 8, "scavenging": 6, "tech": 5, "speed": 10, "hireCost": 100, "rarity": "common" },
  "44": { "tokenId": 44, "name": "Scrap Prophet", "imageUrl": "https://example.com/drifter/44.png", "combat": 7, "scavenging": 9, "tech": 7, "speed": 6, "hireCost": 125, "rarity": "uncommon" },
  "45": { "tokenId": 45, "name": "Plasma Ghost", "imageUrl": "https://example.com/drifter/45.png", "combat": 8, "scavenging": 5, "tech": 9, "speed": 9, "hireCost": 135, "rarity": "uncommon" },
  "46": { "tokenId": 46, "name": "Wasteland Oracle", "imageUrl": "https://example.com/drifter/46.png", "combat": 6, "scavenging": 8, "tech": 9, "speed": 7, "hireCost": 140, "rarity": "rare" },
  "47": { "tokenId": 47, "name": "Chrome Reaper", "imageUrl": "https://example.com/drifter/47.png", "combat": 10, "scavenging": 4, "tech": 6, "speed": 8, "hireCost": 105, "rarity": "uncommon" },
  "48": { "tokenId": 48, "name": "Circuit Rider", "imageUrl": "https://example.com/drifter/48.png", "combat": 5, "scavenging": 6, "tech": 9, "speed": 9, "hireCost": 110, "rarity": "uncommon" },
  "49": { "tokenId": 49, "name": "Void Reaper", "imageUrl": "https://example.com/drifter/49.png", "combat": 9, "scavenging": 7, "tech": 7, "speed": 8, "hireCost": 155, "rarity": "rare" },
  "50": { "tokenId": 50, "name": "The Architect", "imageUrl": "https://example.com/drifter/50.png", "combat": 10, "scavenging": 10, "tech": 10, "speed": 10, "hireCost": 500, "rarity": "legendary" }
};
const driftersRegistry = driftersData;
function getAllDrifters() {
  return Object.values(driftersRegistry);
}
async function getAvailableMercenaries(playerAddress, env2) {
  const ownedTokenIds = await getPlayerOwnedDrifters(playerAddress, env2);
  const ownedSet = new Set(ownedTokenIds);
  const mercenaries = getAllDrifters().map((drifter) => {
    const isOwned = ownedSet.has(drifter.tokenId);
    return {
      ...drifter,
      hireCost: isOwned ? 0 : drifter.hireCost,
      // Free to hire own NFTs
      owned: isOwned
    };
  });
  return mercenaries.sort((a, b) => {
    if (a.owned && !b.owned) return -1;
    if (!a.owned && b.owned) return 1;
    return a.hireCost - b.hireCost;
  });
}
class MyDurableObject extends DurableObject {
  constructor(ctx, env2) {
    super(ctx, env2);
  }
  // Placeholder method - will be replaced with proper game logic
  async sayHello(name) {
    return `Hello from the Scablands, ${name}! The harsh desert awaits your expeditions.`;
  }
  // Placeholder for future world state methods
  async getWorldState() {
    return {
      resources: [],
      activeMissions: [],
      townMetrics: {
        prosperity: 50,
        security: 50,
        population: 100,
        upgradeLevel: 1
      },
      lastUpdate: /* @__PURE__ */ new Date()
    };
  }
}
async function handleApiRequest(request2, env2) {
  const url = new URL(request2.url);
  const path = url.pathname;
  const method = request2.method;
  const corsHeaders = {
    "Access-Control-Allow-Origin": "http://localhost:5173",
    "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization, Cookie",
    "Access-Control-Allow-Credentials": "true"
  };
  if (method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }
  try {
    if (path.startsWith("/api/")) {
      const response = await routeApiCall(path, method, request2, env2);
      Object.entries(corsHeaders).forEach(([key, value]) => {
        response.headers.set(key, value);
      });
      return response;
    }
    return new Response("Not found", { status: 404, headers: corsHeaders });
  } catch (error) {
    console.error("API Error:", error);
    return new Response(
      JSON.stringify({ error: "Internal server error" }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
}
async function routeApiCall(path, method, request2, env2) {
  const segments = path.split("/").filter((s) => s.length > 0);
  const [, ...apiPath] = segments;
  switch (apiPath[0]) {
    case "health":
      return handleHealthCheck(env2);
    case "auth":
      return handleAuth(apiPath, method, request2, env2);
    case "profile":
      return handleProfile(method, request2, env2);
    case "world":
      return handleWorld(apiPath, method, request2, env2);
    case "mission":
      return handleMission(apiPath, method);
    case "mercenaries":
    case "mercs":
      return handleMercenaries(method, request2, env2);
    default:
      return new Response(
        JSON.stringify({ error: "API endpoint not found" }),
        { status: 404, headers: { "Content-Type": "application/json" } }
      );
  }
}
async function handleHealthCheck(env2) {
  const id2 = env2.MY_DURABLE_OBJECT.idFromName("world");
  const stub = env2.MY_DURABLE_OBJECT.get(id2);
  const greeting = await stub.sayHello("health-check");
  return new Response(
    JSON.stringify({
      status: "healthy",
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      message: greeting
    }),
    { headers: { "Content-Type": "application/json" } }
  );
}
async function handleAuth(path, method, request2, env2) {
  const endpoint = path[1];
  const nonceStore = {
    async get(key) {
      return await env2.AUTH_KV.get(key);
    },
    async put(key, value, options) {
      return await env2.AUTH_KV.put(key, value, options);
    },
    async delete(key) {
      return await env2.AUTH_KV.delete(key);
    }
  };
  switch (endpoint) {
    case "nonce":
      if (method !== "GET") {
        return new Response("Method not allowed", { status: 405 });
      }
      try {
        const nonce = siweExports.generateNonce();
        await nonceStore.put(`nonce:${nonce}`, "valid", { expirationTtl: 300 });
        return new Response(
          JSON.stringify({
            nonce,
            message: `Welcome to Scablanders!

Sign this message to authenticate with your wallet.

Nonce: ${nonce}`
          }),
          { headers: { "Content-Type": "application/json" } }
        );
      } catch (error) {
        console.error("Nonce generation error:", error);
        return new Response(
          JSON.stringify({ error: "Failed to generate nonce" }),
          { status: 500, headers: { "Content-Type": "application/json" } }
        );
      }
    case "verify":
      if (method !== "POST") {
        return new Response("Method not allowed", { status: 405 });
      }
      try {
        const body = await request2.json();
        const { message: message2, signature: signature2 } = body;
        if (!message2 || !signature2) {
          return new Response(
            JSON.stringify({ success: false, error: "Message and signature required" }),
            { status: 400, headers: { "Content-Type": "application/json" } }
          );
        }
        const { verifySiweSignature, createSessionToken } = await import("./assets/auth-bw3Uuruo.js");
        const result = await verifySiweSignature(message2, signature2, nonceStore);
        if (!result.success) {
          return new Response(
            JSON.stringify({ success: false, error: result.error }),
            { status: 401, headers: { "Content-Type": "application/json" } }
          );
        }
        const token = createSessionToken(result.address);
        const response2 = new Response(
          JSON.stringify({
            success: true,
            address: result.address
          }),
          { headers: { "Content-Type": "application/json" } }
        );
        response2.headers.set(
          "Set-Cookie",
          `CF_ACCESS_TOKEN=${token}; HttpOnly; Secure; SameSite=Strict; Max-Age=86400; Path=/`
        );
        return response2;
      } catch (error) {
        console.error("Auth verification error:", error);
        return new Response(
          JSON.stringify({ success: false, error: "Authentication failed" }),
          { status: 500, headers: { "Content-Type": "application/json" } }
        );
      }
    case "logout":
      if (method !== "POST") {
        return new Response("Method not allowed", { status: 405 });
      }
      const response = new Response(
        JSON.stringify({ success: true }),
        { headers: { "Content-Type": "application/json" } }
      );
      response.headers.set(
        "Set-Cookie",
        "CF_ACCESS_TOKEN=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; Path=/"
      );
      return response;
    default:
      return new Response("Auth endpoint not found", { status: 404 });
  }
}
async function handleProfile(method, request2, env2) {
  if (method !== "GET") {
    return new Response("Method not allowed", { status: 405 });
  }
  try {
    const { createAuthMiddleware } = await import("./assets/auth-bw3Uuruo.js");
    const auth = createAuthMiddleware({});
    const authResult = await auth(request2);
    if (authResult.error || !authResult.address) {
      const mockProfile = {
        address: "0x0000000000000000000000000000000000000000",
        balance: 0,
        ownedDrifters: [],
        discoveredNodes: [],
        upgrades: [],
        lastLogin: /* @__PURE__ */ new Date()
      };
      return new Response(
        JSON.stringify(mockProfile),
        { headers: { "Content-Type": "application/json" } }
      );
    }
    let ownedDrifters = [];
    try {
      ownedDrifters = await getPlayerOwnedDrifters(authResult.address, env2);
    } catch (error) {
      console.error("Failed to fetch owned Drifters:", error);
    }
    const authenticatedProfile = {
      address: authResult.address,
      balance: 1e3,
      // Starting balance for authenticated users
      ownedDrifters,
      // Real NFT ownership data
      discoveredNodes: [],
      // TODO: Load from persistent storage
      upgrades: [],
      // TODO: Load from persistent storage
      lastLogin: /* @__PURE__ */ new Date()
    };
    return new Response(
      JSON.stringify(authenticatedProfile),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Profile endpoint error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to load profile" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
async function handleWorld(path, method, request2, env2) {
  const endpoint = path[1];
  switch (endpoint) {
    case "state":
      if (method !== "GET") {
        return new Response("Method not allowed", { status: 405 });
      }
      const id2 = env2.MY_DURABLE_OBJECT.idFromName("world");
      const stub = env2.MY_DURABLE_OBJECT.get(id2);
      const worldState = await stub.getWorldState();
      return new Response(
        JSON.stringify(worldState),
        { headers: { "Content-Type": "application/json" } }
      );
    default:
      return new Response("World endpoint not found", { status: 404 });
  }
}
async function handleMission(path, method, request2, env2) {
  const endpoint = path[1];
  switch (endpoint) {
    case "start":
      if (method !== "POST") {
        return new Response("Method not allowed", { status: 405 });
      }
      return new Response(
        JSON.stringify({ success: false, error: "Not implemented yet" }),
        { headers: { "Content-Type": "application/json" } }
      );
    default:
      return new Response("Mission endpoint not found", { status: 404 });
  }
}
async function handleMercenaries(method, request2, env2) {
  if (method !== "GET") {
    return new Response("Method not allowed", { status: 405 });
  }
  try {
    const { createAuthMiddleware } = await import("./assets/auth-bw3Uuruo.js");
    const auth = createAuthMiddleware({});
    const authResult = await auth(request2);
    if (authResult.error || !authResult.address) {
      return new Response(
        JSON.stringify({ error: "Authentication required" }),
        { status: 401, headers: { "Content-Type": "application/json" } }
      );
    }
    const mercenaries = await getAvailableMercenaries(authResult.address, env2);
    return new Response(
      JSON.stringify({ mercenaries }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Mercenaries endpoint error:", error);
    return new Response(
      JSON.stringify({ error: "Failed to load mercenaries" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
const worker = {
  async fetch(request2, env2, ctx) {
    return handleApiRequest(request2, env2);
  }
};
export {
  ALCHEMY_EVENT_TYPES as A,
  BigNumber as B,
  CustomNetworks as C,
  DEFAULT_ALCHEMY_API_KEY as D,
  EthersNetwork as E,
  hexDataLength as F,
  hexValue as G,
  DEFAULT_NETWORK as H,
  getAlchemyHttpUrl as I,
  getAlchemyWsUrl as J,
  IS_BROWSER as K,
  Logger$2 as L,
  logWarn as M,
  MyDurableObject,
  Network as N,
  deepCopy as O,
  VERSION as V,
  __awaiter$1 as _,
  EthersEvent as a,
  getAlchemyEventTag as b,
  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE as c,
  AlchemySubscription as d,
  worker as default,
  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE as e,
  fromHex as f,
  getDefaultExportFromCjs$1 as g,
  commonjsGlobal as h,
  isAlchemyEvent as i,
  arrayify as j,
  concat as k,
  hexlify as l,
  isBytesLike as m,
  noop as n,
  _base36To16 as o,
  stripZeros as p,
  hexDataSlice as q,
  isHexString as r,
  siweExports as s,
  toHex as t,
  hexConcat as u,
  verifyAlchemyEventName as v,
  hexZeroPad as w,
  require$$0$2 as x,
  BN$1 as y,
  splitSignature as z
};
